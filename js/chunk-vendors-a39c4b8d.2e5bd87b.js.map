{"version":3,"file":"js/chunk-vendors-a39c4b8d.2e5bd87b.js","mappings":"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","sources":["webpack://@openeo/web-editor/./node_modules/get-intrinsic/index.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/compression/index.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/dataview64.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/dataslice.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/httputils.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/basesource.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/utils.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/blockedsource.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/client/base.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/client/fetch.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/client/xhr.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/client/http.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/remote.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/filereader.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/geotiff.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/rgb.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/resample.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/geotiffimage.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/globals.js"],"sourcesContent":["'use strict';\n\nvar undefined;\n\nvar $Object = require('es-object-atoms');\n\nvar $Error = require('es-errors');\nvar $EvalError = require('es-errors/eval');\nvar $RangeError = require('es-errors/range');\nvar $ReferenceError = require('es-errors/ref');\nvar $SyntaxError = require('es-errors/syntax');\nvar $TypeError = require('es-errors/type');\nvar $URIError = require('es-errors/uri');\n\nvar abs = require('math-intrinsics/abs');\nvar floor = require('math-intrinsics/floor');\nvar max = require('math-intrinsics/max');\nvar min = require('math-intrinsics/min');\nvar pow = require('math-intrinsics/pow');\n\nvar $Function = Function;\n\n// eslint-disable-next-line consistent-return\nvar getEvalledConstructor = function (expressionSyntax) {\n\ttry {\n\t\treturn $Function('\"use strict\"; return (' + expressionSyntax + ').constructor;')();\n\t} catch (e) {}\n};\n\nvar $gOPD = require('gopd');\nvar $defineProperty = require('es-define-property');\n\nvar throwTypeError = function () {\n\tthrow new $TypeError();\n};\nvar ThrowTypeError = $gOPD\n\t? (function () {\n\t\ttry {\n\t\t\t// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties\n\t\t\targuments.callee; // IE 8 does not throw here\n\t\t\treturn throwTypeError;\n\t\t} catch (calleeThrows) {\n\t\t\ttry {\n\t\t\t\t// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')\n\t\t\t\treturn $gOPD(arguments, 'callee').get;\n\t\t\t} catch (gOPDthrows) {\n\t\t\t\treturn throwTypeError;\n\t\t\t}\n\t\t}\n\t}())\n\t: throwTypeError;\n\nvar hasSymbols = require('has-symbols')();\nvar getDunderProto = require('dunder-proto/get');\n\nvar getProto = (typeof Reflect === 'function' && Reflect.getPrototypeOf)\n\t|| $Object.getPrototypeOf\n\t|| getDunderProto;\n\nvar $apply = require('call-bind-apply-helpers/functionApply');\nvar $call = require('call-bind-apply-helpers/functionCall');\n\nvar needsEval = {};\n\nvar TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined : getProto(Uint8Array);\n\nvar INTRINSICS = {\n\t__proto__: null,\n\t'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,\n\t'%Array%': Array,\n\t'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,\n\t'%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,\n\t'%AsyncFromSyncIteratorPrototype%': undefined,\n\t'%AsyncFunction%': needsEval,\n\t'%AsyncGenerator%': needsEval,\n\t'%AsyncGeneratorFunction%': needsEval,\n\t'%AsyncIteratorPrototype%': needsEval,\n\t'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,\n\t'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,\n\t'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,\n\t'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,\n\t'%Boolean%': Boolean,\n\t'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,\n\t'%Date%': Date,\n\t'%decodeURI%': decodeURI,\n\t'%decodeURIComponent%': decodeURIComponent,\n\t'%encodeURI%': encodeURI,\n\t'%encodeURIComponent%': encodeURIComponent,\n\t'%Error%': $Error,\n\t'%eval%': eval, // eslint-disable-line no-eval\n\t'%EvalError%': $EvalError,\n\t'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,\n\t'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,\n\t'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,\n\t'%Function%': $Function,\n\t'%GeneratorFunction%': needsEval,\n\t'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,\n\t'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,\n\t'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,\n\t'%isFinite%': isFinite,\n\t'%isNaN%': isNaN,\n\t'%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,\n\t'%JSON%': typeof JSON === 'object' ? JSON : undefined,\n\t'%Map%': typeof Map === 'undefined' ? undefined : Map,\n\t'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),\n\t'%Math%': Math,\n\t'%Number%': Number,\n\t'%Object%': $Object,\n\t'%Object.getOwnPropertyDescriptor%': $gOPD,\n\t'%parseFloat%': parseFloat,\n\t'%parseInt%': parseInt,\n\t'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,\n\t'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,\n\t'%RangeError%': $RangeError,\n\t'%ReferenceError%': $ReferenceError,\n\t'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,\n\t'%RegExp%': RegExp,\n\t'%Set%': typeof Set === 'undefined' ? undefined : Set,\n\t'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),\n\t'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,\n\t'%String%': String,\n\t'%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined,\n\t'%Symbol%': hasSymbols ? Symbol : undefined,\n\t'%SyntaxError%': $SyntaxError,\n\t'%ThrowTypeError%': ThrowTypeError,\n\t'%TypedArray%': TypedArray,\n\t'%TypeError%': $TypeError,\n\t'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,\n\t'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,\n\t'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,\n\t'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,\n\t'%URIError%': $URIError,\n\t'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,\n\t'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,\n\t'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet,\n\n\t'%Function.prototype.call%': $call,\n\t'%Function.prototype.apply%': $apply,\n\t'%Object.defineProperty%': $defineProperty,\n\t'%Math.abs%': abs,\n\t'%Math.floor%': floor,\n\t'%Math.max%': max,\n\t'%Math.min%': min,\n\t'%Math.pow%': pow\n};\n\nif (getProto) {\n\ttry {\n\t\tnull.error; // eslint-disable-line no-unused-expressions\n\t} catch (e) {\n\t\t// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229\n\t\tvar errorProto = getProto(getProto(e));\n\t\tINTRINSICS['%Error.prototype%'] = errorProto;\n\t}\n}\n\nvar doEval = function doEval(name) {\n\tvar value;\n\tif (name === '%AsyncFunction%') {\n\t\tvalue = getEvalledConstructor('async function () {}');\n\t} else if (name === '%GeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('function* () {}');\n\t} else if (name === '%AsyncGeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('async function* () {}');\n\t} else if (name === '%AsyncGenerator%') {\n\t\tvar fn = doEval('%AsyncGeneratorFunction%');\n\t\tif (fn) {\n\t\t\tvalue = fn.prototype;\n\t\t}\n\t} else if (name === '%AsyncIteratorPrototype%') {\n\t\tvar gen = doEval('%AsyncGenerator%');\n\t\tif (gen && getProto) {\n\t\t\tvalue = getProto(gen.prototype);\n\t\t}\n\t}\n\n\tINTRINSICS[name] = value;\n\n\treturn value;\n};\n\nvar LEGACY_ALIASES = {\n\t__proto__: null,\n\t'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],\n\t'%ArrayPrototype%': ['Array', 'prototype'],\n\t'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],\n\t'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],\n\t'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],\n\t'%ArrayProto_values%': ['Array', 'prototype', 'values'],\n\t'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],\n\t'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],\n\t'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],\n\t'%BooleanPrototype%': ['Boolean', 'prototype'],\n\t'%DataViewPrototype%': ['DataView', 'prototype'],\n\t'%DatePrototype%': ['Date', 'prototype'],\n\t'%ErrorPrototype%': ['Error', 'prototype'],\n\t'%EvalErrorPrototype%': ['EvalError', 'prototype'],\n\t'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],\n\t'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],\n\t'%FunctionPrototype%': ['Function', 'prototype'],\n\t'%Generator%': ['GeneratorFunction', 'prototype'],\n\t'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],\n\t'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],\n\t'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],\n\t'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],\n\t'%JSONParse%': ['JSON', 'parse'],\n\t'%JSONStringify%': ['JSON', 'stringify'],\n\t'%MapPrototype%': ['Map', 'prototype'],\n\t'%NumberPrototype%': ['Number', 'prototype'],\n\t'%ObjectPrototype%': ['Object', 'prototype'],\n\t'%ObjProto_toString%': ['Object', 'prototype', 'toString'],\n\t'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],\n\t'%PromisePrototype%': ['Promise', 'prototype'],\n\t'%PromiseProto_then%': ['Promise', 'prototype', 'then'],\n\t'%Promise_all%': ['Promise', 'all'],\n\t'%Promise_reject%': ['Promise', 'reject'],\n\t'%Promise_resolve%': ['Promise', 'resolve'],\n\t'%RangeErrorPrototype%': ['RangeError', 'prototype'],\n\t'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],\n\t'%RegExpPrototype%': ['RegExp', 'prototype'],\n\t'%SetPrototype%': ['Set', 'prototype'],\n\t'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],\n\t'%StringPrototype%': ['String', 'prototype'],\n\t'%SymbolPrototype%': ['Symbol', 'prototype'],\n\t'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],\n\t'%TypedArrayPrototype%': ['TypedArray', 'prototype'],\n\t'%TypeErrorPrototype%': ['TypeError', 'prototype'],\n\t'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],\n\t'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],\n\t'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],\n\t'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],\n\t'%URIErrorPrototype%': ['URIError', 'prototype'],\n\t'%WeakMapPrototype%': ['WeakMap', 'prototype'],\n\t'%WeakSetPrototype%': ['WeakSet', 'prototype']\n};\n\nvar bind = require('function-bind');\nvar hasOwn = require('hasown');\nvar $concat = bind.call($call, Array.prototype.concat);\nvar $spliceApply = bind.call($apply, Array.prototype.splice);\nvar $replace = bind.call($call, String.prototype.replace);\nvar $strSlice = bind.call($call, String.prototype.slice);\nvar $exec = bind.call($call, RegExp.prototype.exec);\n\n/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */\nvar rePropName = /[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;\nvar reEscapeChar = /\\\\(\\\\)?/g; /** Used to match backslashes in property paths. */\nvar stringToPath = function stringToPath(string) {\n\tvar first = $strSlice(string, 0, 1);\n\tvar last = $strSlice(string, -1);\n\tif (first === '%' && last !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected closing `%`');\n\t} else if (last === '%' && first !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected opening `%`');\n\t}\n\tvar result = [];\n\t$replace(string, rePropName, function (match, number, quote, subString) {\n\t\tresult[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;\n\t});\n\treturn result;\n};\n/* end adaptation */\n\nvar getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {\n\tvar intrinsicName = name;\n\tvar alias;\n\tif (hasOwn(LEGACY_ALIASES, intrinsicName)) {\n\t\talias = LEGACY_ALIASES[intrinsicName];\n\t\tintrinsicName = '%' + alias[0] + '%';\n\t}\n\n\tif (hasOwn(INTRINSICS, intrinsicName)) {\n\t\tvar value = INTRINSICS[intrinsicName];\n\t\tif (value === needsEval) {\n\t\t\tvalue = doEval(intrinsicName);\n\t\t}\n\t\tif (typeof value === 'undefined' && !allowMissing) {\n\t\t\tthrow new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');\n\t\t}\n\n\t\treturn {\n\t\t\talias: alias,\n\t\t\tname: intrinsicName,\n\t\t\tvalue: value\n\t\t};\n\t}\n\n\tthrow new $SyntaxError('intrinsic ' + name + ' does not exist!');\n};\n\nmodule.exports = function GetIntrinsic(name, allowMissing) {\n\tif (typeof name !== 'string' || name.length === 0) {\n\t\tthrow new $TypeError('intrinsic name must be a non-empty string');\n\t}\n\tif (arguments.length > 1 && typeof allowMissing !== 'boolean') {\n\t\tthrow new $TypeError('\"allowMissing\" argument must be a boolean');\n\t}\n\n\tif ($exec(/^%?[^%]*%?$/, name) === null) {\n\t\tthrow new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');\n\t}\n\tvar parts = stringToPath(name);\n\tvar intrinsicBaseName = parts.length > 0 ? parts[0] : '';\n\n\tvar intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);\n\tvar intrinsicRealName = intrinsic.name;\n\tvar value = intrinsic.value;\n\tvar skipFurtherCaching = false;\n\n\tvar alias = intrinsic.alias;\n\tif (alias) {\n\t\tintrinsicBaseName = alias[0];\n\t\t$spliceApply(parts, $concat([0, 1], alias));\n\t}\n\n\tfor (var i = 1, isOwn = true; i < parts.length; i += 1) {\n\t\tvar part = parts[i];\n\t\tvar first = $strSlice(part, 0, 1);\n\t\tvar last = $strSlice(part, -1);\n\t\tif (\n\t\t\t(\n\t\t\t\t(first === '\"' || first === \"'\" || first === '`')\n\t\t\t\t|| (last === '\"' || last === \"'\" || last === '`')\n\t\t\t)\n\t\t\t&& first !== last\n\t\t) {\n\t\t\tthrow new $SyntaxError('property names with quotes must have matching quotes');\n\t\t}\n\t\tif (part === 'constructor' || !isOwn) {\n\t\t\tskipFurtherCaching = true;\n\t\t}\n\n\t\tintrinsicBaseName += '.' + part;\n\t\tintrinsicRealName = '%' + intrinsicBaseName + '%';\n\n\t\tif (hasOwn(INTRINSICS, intrinsicRealName)) {\n\t\t\tvalue = INTRINSICS[intrinsicRealName];\n\t\t} else if (value != null) {\n\t\t\tif (!(part in value)) {\n\t\t\t\tif (!allowMissing) {\n\t\t\t\t\tthrow new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');\n\t\t\t\t}\n\t\t\t\treturn void undefined;\n\t\t\t}\n\t\t\tif ($gOPD && (i + 1) >= parts.length) {\n\t\t\t\tvar desc = $gOPD(value, part);\n\t\t\t\tisOwn = !!desc;\n\n\t\t\t\t// By convention, when a data property is converted to an accessor\n\t\t\t\t// property to emulate a data property that does not suffer from\n\t\t\t\t// the override mistake, that accessor's getter is marked with\n\t\t\t\t// an `originalValue` property. Here, when we detect this, we\n\t\t\t\t// uphold the illusion by pretending to see that original data\n\t\t\t\t// property, i.e., returning the value rather than the getter\n\t\t\t\t// itself.\n\t\t\t\tif (isOwn && 'get' in desc && !('originalValue' in desc.get)) {\n\t\t\t\t\tvalue = desc.get;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = value[part];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tisOwn = hasOwn(value, part);\n\t\t\t\tvalue = value[part];\n\t\t\t}\n\n\t\t\tif (isOwn && !skipFurtherCaching) {\n\t\t\t\tINTRINSICS[intrinsicRealName] = value;\n\t\t\t}\n\t\t}\n\t}\n\treturn value;\n};\n","const registry = new Map();\n\nexport function addDecoder(cases, importFn) {\n  if (!Array.isArray(cases)) {\n    cases = [cases]; // eslint-disable-line no-param-reassign\n  }\n  cases.forEach((c) => registry.set(c, importFn));\n}\n\nexport async function getDecoder(fileDirectory) {\n  const importFn = registry.get(fileDirectory.Compression);\n  if (!importFn) {\n    throw new Error(`Unknown compression method identifier: ${fileDirectory.Compression}`);\n  }\n  const Decoder = await importFn();\n  return new Decoder(fileDirectory);\n}\n\n// Add default decoders to registry (end-user may override with other implementations)\naddDecoder([undefined, 1], () => import('./raw.js').then((m) => m.default));\naddDecoder(5, () => import('./lzw.js').then((m) => m.default));\naddDecoder(6, () => {\n  throw new Error('old style JPEG compression is not supported.');\n});\naddDecoder(7, () => import('./jpeg.js').then((m) => m.default));\naddDecoder([8, 32946], () => import('./deflate.js').then((m) => m.default));\naddDecoder(32773, () => import('./packbits.js').then((m) => m.default));\naddDecoder(34887, () => import('./lerc.js')\n  .then(async (m) => {\n    await m.zstd.init();\n    return m;\n  })\n  .then((m) => m.default),\n);\naddDecoder(50001, () => import('./webimage.js').then((m) => m.default));\n","import { getFloat16 } from '@petamoriken/float16';\n\nexport default class DataView64 {\n  constructor(arrayBuffer) {\n    this._dataView = new DataView(arrayBuffer);\n  }\n\n  get buffer() {\n    return this._dataView.buffer;\n  }\n\n  getUint64(offset, littleEndian) {\n    const left = this.getUint32(offset, littleEndian);\n    const right = this.getUint32(offset + 4, littleEndian);\n    let combined;\n    if (littleEndian) {\n      combined = left + ((2 ** 32) * right);\n      if (!Number.isSafeInteger(combined)) {\n        throw new Error(\n          `${combined} exceeds MAX_SAFE_INTEGER. `\n          + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n        );\n      }\n      return combined;\n    }\n    combined = ((2 ** 32) * left) + right;\n    if (!Number.isSafeInteger(combined)) {\n      throw new Error(\n        `${combined} exceeds MAX_SAFE_INTEGER. `\n        + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n      );\n    }\n\n    return combined;\n  }\n\n  // adapted from https://stackoverflow.com/a/55338384/8060591\n  getInt64(offset, littleEndian) {\n    let value = 0;\n    const isNegative = (this._dataView.getUint8(offset + (littleEndian ? 7 : 0)) & 0x80) > 0;\n    let carrying = true;\n    for (let i = 0; i < 8; i++) {\n      let byte = this._dataView.getUint8(offset + (littleEndian ? i : 7 - i));\n      if (isNegative) {\n        if (carrying) {\n          if (byte !== 0x00) {\n            byte = ~(byte - 1) & 0xff;\n            carrying = false;\n          }\n        } else {\n          byte = ~byte & 0xff;\n        }\n      }\n      value += byte * (256 ** i);\n    }\n    if (isNegative) {\n      value = -value;\n    }\n    return value;\n  }\n\n  getUint8(offset, littleEndian) {\n    return this._dataView.getUint8(offset, littleEndian);\n  }\n\n  getInt8(offset, littleEndian) {\n    return this._dataView.getInt8(offset, littleEndian);\n  }\n\n  getUint16(offset, littleEndian) {\n    return this._dataView.getUint16(offset, littleEndian);\n  }\n\n  getInt16(offset, littleEndian) {\n    return this._dataView.getInt16(offset, littleEndian);\n  }\n\n  getUint32(offset, littleEndian) {\n    return this._dataView.getUint32(offset, littleEndian);\n  }\n\n  getInt32(offset, littleEndian) {\n    return this._dataView.getInt32(offset, littleEndian);\n  }\n\n  getFloat16(offset, littleEndian) {\n    return getFloat16(this._dataView, offset, littleEndian);\n  }\n\n  getFloat32(offset, littleEndian) {\n    return this._dataView.getFloat32(offset, littleEndian);\n  }\n\n  getFloat64(offset, littleEndian) {\n    return this._dataView.getFloat64(offset, littleEndian);\n  }\n}\n","export default class DataSlice {\n  constructor(arrayBuffer, sliceOffset, littleEndian, bigTiff) {\n    this._dataView = new DataView(arrayBuffer);\n    this._sliceOffset = sliceOffset;\n    this._littleEndian = littleEndian;\n    this._bigTiff = bigTiff;\n  }\n\n  get sliceOffset() {\n    return this._sliceOffset;\n  }\n\n  get sliceTop() {\n    return this._sliceOffset + this.buffer.byteLength;\n  }\n\n  get littleEndian() {\n    return this._littleEndian;\n  }\n\n  get bigTiff() {\n    return this._bigTiff;\n  }\n\n  get buffer() {\n    return this._dataView.buffer;\n  }\n\n  covers(offset, length) {\n    return this.sliceOffset <= offset && this.sliceTop >= offset + length;\n  }\n\n  readUint8(offset) {\n    return this._dataView.getUint8(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readInt8(offset) {\n    return this._dataView.getInt8(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readUint16(offset) {\n    return this._dataView.getUint16(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readInt16(offset) {\n    return this._dataView.getInt16(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readUint32(offset) {\n    return this._dataView.getUint32(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readInt32(offset) {\n    return this._dataView.getInt32(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readFloat32(offset) {\n    return this._dataView.getFloat32(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readFloat64(offset) {\n    return this._dataView.getFloat64(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readUint64(offset) {\n    const left = this.readUint32(offset);\n    const right = this.readUint32(offset + 4);\n    let combined;\n    if (this._littleEndian) {\n      combined = left + ((2 ** 32) * right);\n      if (!Number.isSafeInteger(combined)) {\n        throw new Error(\n          `${combined} exceeds MAX_SAFE_INTEGER. `\n          + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n        );\n      }\n      return combined;\n    }\n    combined = ((2 ** 32) * left) + right;\n    if (!Number.isSafeInteger(combined)) {\n      throw new Error(\n        `${combined} exceeds MAX_SAFE_INTEGER. `\n        + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n      );\n    }\n\n    return combined;\n  }\n\n  // adapted from https://stackoverflow.com/a/55338384/8060591\n  readInt64(offset) {\n    let value = 0;\n    const isNegative = (this._dataView.getUint8(offset + (this._littleEndian ? 7 : 0)) & 0x80)\n      > 0;\n    let carrying = true;\n    for (let i = 0; i < 8; i++) {\n      let byte = this._dataView.getUint8(\n        offset + (this._littleEndian ? i : 7 - i),\n      );\n      if (isNegative) {\n        if (carrying) {\n          if (byte !== 0x00) {\n            byte = ~(byte - 1) & 0xff;\n            carrying = false;\n          }\n        } else {\n          byte = ~byte & 0xff;\n        }\n      }\n      value += byte * (256 ** i);\n    }\n    if (isNegative) {\n      value = -value;\n    }\n    return value;\n  }\n\n  readOffset(offset) {\n    if (this._bigTiff) {\n      return this.readUint64(offset);\n    }\n    return this.readUint32(offset);\n  }\n}\n","const CRLFCRLF = '\\r\\n\\r\\n';\n\n/*\n * Shim for 'Object.fromEntries'\n */\nfunction itemsToObject(items) {\n  if (typeof Object.fromEntries !== 'undefined') {\n    return Object.fromEntries(items);\n  }\n  const obj = {};\n  for (const [key, value] of items) {\n    obj[key.toLowerCase()] = value;\n  }\n  return obj;\n}\n\n/**\n * Parse HTTP headers from a given string.\n * @param {String} text the text to parse the headers from\n * @returns {Object} the parsed headers with lowercase keys\n */\nfunction parseHeaders(text) {\n  const items = text\n    .split('\\r\\n')\n    .map((line) => {\n      const kv = line.split(':').map((str) => str.trim());\n      kv[0] = kv[0].toLowerCase();\n      return kv;\n    });\n\n  return itemsToObject(items);\n}\n\n/**\n * Parse a 'Content-Type' header value to the content-type and parameters\n * @param {String} rawContentType the raw string to parse from\n * @returns {Object} the parsed content type with the fields: type and params\n */\nexport function parseContentType(rawContentType) {\n  const [type, ...rawParams] = rawContentType.split(';').map((s) => s.trim());\n  const paramsItems = rawParams.map((param) => param.split('='));\n  return { type, params: itemsToObject(paramsItems) };\n}\n\n/**\n * Parse a 'Content-Range' header value to its start, end, and total parts\n * @param {String} rawContentRange the raw string to parse from\n * @returns {Object} the parsed parts\n */\nexport function parseContentRange(rawContentRange) {\n  let start;\n  let end;\n  let total;\n\n  if (rawContentRange) {\n    [, start, end, total] = rawContentRange.match(/bytes (\\d+)-(\\d+)\\/(\\d+)/);\n    start = parseInt(start, 10);\n    end = parseInt(end, 10);\n    total = parseInt(total, 10);\n  }\n\n  return { start, end, total };\n}\n\n/**\n * Parses a list of byteranges from the given 'multipart/byteranges' HTTP response.\n * Each item in the list has the following properties:\n * - headers: the HTTP headers\n * - data: the sliced ArrayBuffer for that specific part\n * - offset: the offset of the byterange within its originating file\n * - length: the length of the byterange\n * @param {ArrayBuffer} responseArrayBuffer the response to be parsed and split\n * @param {String} boundary the boundary string used to split the sections\n * @returns {Object[]} the parsed byteranges\n */\nexport function parseByteRanges(responseArrayBuffer, boundary) {\n  let offset = null;\n  const decoder = new TextDecoder('ascii');\n  const out = [];\n\n  const startBoundary = `--${boundary}`;\n  const endBoundary = `${startBoundary}--`;\n\n  // search for the initial boundary, may be offset by some bytes\n  // TODO: more efficient to check for `--` in bytes directly\n  for (let i = 0; i < 10; ++i) {\n    const text = decoder.decode(\n      new Uint8Array(responseArrayBuffer, i, startBoundary.length),\n    );\n    if (text === startBoundary) {\n      offset = i;\n    }\n  }\n\n  if (offset === null) {\n    throw new Error('Could not find initial boundary');\n  }\n\n  while (offset < responseArrayBuffer.byteLength) {\n    const text = decoder.decode(\n      new Uint8Array(responseArrayBuffer, offset,\n        Math.min(startBoundary.length + 1024, responseArrayBuffer.byteLength - offset),\n      ),\n    );\n\n    // break if we arrived at the end\n    if (text.length === 0 || text.startsWith(endBoundary)) {\n      break;\n    }\n\n    // assert that we are actually dealing with a byterange and are at the correct offset\n    if (!text.startsWith(startBoundary)) {\n      throw new Error('Part does not start with boundary');\n    }\n\n    // get a substring from where we read the headers\n    const innerText = text.substr(startBoundary.length + 2);\n\n    if (innerText.length === 0) {\n      break;\n    }\n\n    // find the double linebreak that denotes the end of the headers\n    const endOfHeaders = innerText.indexOf(CRLFCRLF);\n\n    // parse the headers to get the content range size\n    const headers = parseHeaders(innerText.substr(0, endOfHeaders));\n    const { start, end, total } = parseContentRange(headers['content-range']);\n\n    // calculate the length of the slice and the next offset\n    const startOfData = offset + startBoundary.length + endOfHeaders + CRLFCRLF.length;\n    const length = parseInt(end, 10) + 1 - parseInt(start, 10);\n    out.push({\n      headers,\n      data: responseArrayBuffer.slice(startOfData, startOfData + length),\n      offset: start,\n      length,\n      fileSize: total,\n    });\n\n    offset = startOfData + length + 4;\n  }\n\n  return out;\n}\n","/**\n * @typedef Slice\n * @property {number} offset\n * @property {number} length\n */\n\nexport class BaseSource {\n  /**\n   *\n   * @param {Slice[]} slices\n   * @returns {ArrayBuffer[]}\n   */\n  async fetch(slices, signal = undefined) {\n    return Promise.all(\n      slices.map((slice) => this.fetchSlice(slice, signal)),\n    );\n  }\n\n  /**\n   *\n   * @param {Slice} slice\n   * @returns {ArrayBuffer}\n   */\n  async fetchSlice(slice) {\n    throw new Error(`fetching of slice ${slice} not possible, not implemented`);\n  }\n\n  /**\n   * Returns the filesize if already determined and null otherwise\n   */\n  get fileSize() {\n    return null;\n  }\n\n  async close() {\n    // no-op by default\n  }\n}\n","export function assign(target, source) {\n  for (const key in source) {\n    if (source.hasOwnProperty(key)) {\n      target[key] = source[key];\n    }\n  }\n}\n\nexport function chunk(iterable, length) {\n  const results = [];\n  const lengthOfIterable = iterable.length;\n  for (let i = 0; i < lengthOfIterable; i += length) {\n    const chunked = [];\n    for (let ci = i; ci < i + length; ci++) {\n      chunked.push(iterable[ci]);\n    }\n    results.push(chunked);\n  }\n  return results;\n}\n\nexport function endsWith(string, expectedEnding) {\n  if (string.length < expectedEnding.length) {\n    return false;\n  }\n  const actualEnding = string.substr(string.length - expectedEnding.length);\n  return actualEnding === expectedEnding;\n}\n\nexport function forEach(iterable, func) {\n  const { length } = iterable;\n  for (let i = 0; i < length; i++) {\n    func(iterable[i], i);\n  }\n}\n\nexport function invert(oldObj) {\n  const newObj = {};\n  for (const key in oldObj) {\n    if (oldObj.hasOwnProperty(key)) {\n      const value = oldObj[key];\n      newObj[value] = key;\n    }\n  }\n  return newObj;\n}\n\nexport function range(n) {\n  const results = [];\n  for (let i = 0; i < n; i++) {\n    results.push(i);\n  }\n  return results;\n}\n\nexport function times(numTimes, func) {\n  const results = [];\n  for (let i = 0; i < numTimes; i++) {\n    results.push(func(i));\n  }\n  return results;\n}\n\nexport function toArray(iterable) {\n  const results = [];\n  const { length } = iterable;\n  for (let i = 0; i < length; i++) {\n    results.push(iterable[i]);\n  }\n  return results;\n}\n\nexport function toArrayRecursively(input) {\n  if (input.length) {\n    return toArray(input).map(toArrayRecursively);\n  }\n  return input;\n}\n\n// copied from https://github.com/academia-de-codigo/parse-content-range-header/blob/master/index.js\nexport function parseContentRange(headerValue) {\n  if (!headerValue) {\n    return null;\n  }\n\n  if (typeof headerValue !== 'string') {\n    throw new Error('invalid argument');\n  }\n\n  const parseInt = (number) => Number.parseInt(number, 10);\n\n  // Check for presence of unit\n  let matches = headerValue.match(/^(\\w*) /);\n  const unit = matches && matches[1];\n\n  // check for start-end/size header format\n  matches = headerValue.match(/(\\d+)-(\\d+)\\/(\\d+|\\*)/);\n  if (matches) {\n    return {\n      unit,\n      first: parseInt(matches[1]),\n      last: parseInt(matches[2]),\n      length: matches[3] === '*' ? null : parseInt(matches[3]),\n    };\n  }\n\n  // check for size header format\n  matches = headerValue.match(/(\\d+|\\*)/);\n  if (matches) {\n    return {\n      unit,\n      first: null,\n      last: null,\n      length: matches[1] === '*' ? null : parseInt(matches[1]),\n    };\n  }\n\n  return null;\n}\n\n/*\n * Promisified wrapper around 'setTimeout' to allow 'await'\n */\nexport async function wait(milliseconds) {\n  return new Promise((resolve) => setTimeout(resolve, milliseconds));\n}\n\nexport function zip(a, b) {\n  const A = Array.isArray(a) ? a : Array.from(a);\n  const B = Array.isArray(b) ? b : Array.from(b);\n  return A.map((k, i) => [k, B[i]]);\n}\n\n// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\nexport class AbortError extends Error {\n  constructor(params) {\n    // Pass remaining arguments (including vendor specific ones) to parent constructor\n    super(params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, AbortError);\n    }\n\n    this.name = 'AbortError';\n  }\n}\n\nexport class CustomAggregateError extends Error {\n  constructor(errors, message) {\n    super(message);\n    this.errors = errors;\n    this.message = message;\n    this.name = 'AggregateError';\n  }\n}\n\nexport const AggregateError = CustomAggregateError;\n","import QuickLRU from 'quick-lru';\nimport { BaseSource } from './basesource.js';\nimport { AbortError, AggregateError, wait, zip } from '../utils.js';\n\nclass Block {\n  /**\n   *\n   * @param {number} offset\n   * @param {number} length\n   * @param {ArrayBuffer} [data]\n   */\n  constructor(offset, length, data = null) {\n    this.offset = offset;\n    this.length = length;\n    this.data = data;\n  }\n\n  /**\n   * @returns {number} the top byte border\n   */\n  get top() {\n    return this.offset + this.length;\n  }\n}\n\nclass BlockGroup {\n  /**\n   *\n   * @param {number} offset\n   * @param {number} length\n   * @param {number[]} blockIds\n   */\n  constructor(offset, length, blockIds) {\n    this.offset = offset;\n    this.length = length;\n    this.blockIds = blockIds;\n  }\n}\n\nexport class BlockedSource extends BaseSource {\n  /**\n   *\n   * @param {BaseSource} source The underlying source that shall be blocked and cached\n   * @param {object} options\n   * @param {number} [options.blockSize]\n   * @param {number} [options.cacheSize]\n   */\n  constructor(source, { blockSize = 65536, cacheSize = 100 } = {}) {\n    super();\n    this.source = source;\n    this.blockSize = blockSize;\n\n    this.blockCache = new QuickLRU({\n      maxSize: cacheSize,\n      onEviction: (blockId, block) => {\n        this.evictedBlocks.set(blockId, block);\n      },\n    });\n\n    /** @type {Map<number, Block>} */\n    this.evictedBlocks = new Map();\n\n    // mapping blockId -> Block instance\n    this.blockRequests = new Map();\n\n    // set of blockIds missing for the current requests\n    this.blockIdsToFetch = new Set();\n\n    this.abortedBlockIds = new Set();\n  }\n\n  get fileSize() {\n    return this.source.fileSize;\n  }\n\n  /**\n   *\n   * @param {import(\"./basesource\").Slice[]} slices\n   */\n  async fetch(slices, signal) {\n    const blockRequests = [];\n    const missingBlockIds = [];\n    const allBlockIds = [];\n    this.evictedBlocks.clear();\n\n    for (const { offset, length } of slices) {\n      let top = offset + length;\n\n      const { fileSize } = this;\n      if (fileSize !== null) {\n        top = Math.min(top, fileSize);\n      }\n\n      const firstBlockOffset = Math.floor(offset / this.blockSize) * this.blockSize;\n\n      for (let current = firstBlockOffset; current < top; current += this.blockSize) {\n        const blockId = Math.floor(current / this.blockSize);\n        if (!this.blockCache.has(blockId) && !this.blockRequests.has(blockId)) {\n          this.blockIdsToFetch.add(blockId);\n          missingBlockIds.push(blockId);\n        }\n        if (this.blockRequests.has(blockId)) {\n          blockRequests.push(this.blockRequests.get(blockId));\n        }\n        allBlockIds.push(blockId);\n      }\n    }\n\n    // allow additional block requests to accumulate\n    await wait();\n    this.fetchBlocks(signal);\n\n    // Gather all of the new requests that this fetch call is contributing to `fetch`.\n    const missingRequests = [];\n    for (const blockId of missingBlockIds) {\n      // The requested missing block could already be in the cache\n      // instead of having its request still be outstanding.\n      if (this.blockRequests.has(blockId)) {\n        missingRequests.push(this.blockRequests.get(blockId));\n      }\n    }\n\n    // Actually await all pending requests that are needed for this `fetch`.\n    await Promise.allSettled(blockRequests);\n    await Promise.allSettled(missingRequests);\n\n    // Perform retries if a block was interrupted by a previous signal\n    const abortedBlockRequests = [];\n    const abortedBlockIds = allBlockIds\n      .filter((id) => this.abortedBlockIds.has(id) || !this.blockCache.has(id));\n    abortedBlockIds.forEach((id) => this.blockIdsToFetch.add(id));\n    // start the retry of some blocks if required\n    if (abortedBlockIds.length > 0 && signal && !signal.aborted) {\n      this.fetchBlocks(null);\n      for (const blockId of abortedBlockIds) {\n        const block = this.blockRequests.get(blockId);\n        if (!block) {\n          throw new Error(`Block ${blockId} is not in the block requests`);\n        }\n        abortedBlockRequests.push(block);\n      }\n      await Promise.allSettled(abortedBlockRequests);\n    }\n\n    // throw an  abort error\n    if (signal && signal.aborted) {\n      throw new AbortError('Request was aborted');\n    }\n\n    const blocks = allBlockIds.map((id) => this.blockCache.get(id) || this.evictedBlocks.get(id));\n    const failedBlocks = blocks.filter((i) => !i);\n    if (failedBlocks.length) {\n      throw new AggregateError(failedBlocks, 'Request failed');\n    }\n\n    // create a final Map, with all required blocks for this request to satisfy\n    const requiredBlocks = new Map(zip(allBlockIds, blocks));\n\n    // TODO: satisfy each slice\n    return this.readSliceData(slices, requiredBlocks);\n  }\n\n  /**\n   *\n   * @param {AbortSignal} signal\n   */\n  fetchBlocks(signal) {\n    // check if we still need to\n    if (this.blockIdsToFetch.size > 0) {\n      const groups = this.groupBlocks(this.blockIdsToFetch);\n\n      // start requesting slices of data\n      const groupRequests = this.source.fetch(groups, signal);\n\n      for (let groupIndex = 0; groupIndex < groups.length; ++groupIndex) {\n        const group = groups[groupIndex];\n\n        for (const blockId of group.blockIds) {\n          // make an async IIFE for each block\n          this.blockRequests.set(blockId, (async () => {\n            try {\n              const response = (await groupRequests)[groupIndex];\n              const blockOffset = blockId * this.blockSize;\n              const o = blockOffset - response.offset;\n              const t = Math.min(o + this.blockSize, response.data.byteLength);\n              const data = response.data.slice(o, t);\n              const block = new Block(\n                blockOffset,\n                data.byteLength,\n                data,\n                blockId,\n              );\n              this.blockCache.set(blockId, block);\n              this.abortedBlockIds.delete(blockId);\n            } catch (err) {\n              if (err.name === 'AbortError') {\n                // store the signal here, we need it to determine later if an\n                // error was caused by this signal\n                err.signal = signal;\n                this.blockCache.delete(blockId);\n                this.abortedBlockIds.add(blockId);\n              } else {\n                throw err;\n              }\n            } finally {\n              this.blockRequests.delete(blockId);\n            }\n          })());\n        }\n      }\n      this.blockIdsToFetch.clear();\n    }\n  }\n\n  /**\n   *\n   * @param {Set} blockIds\n   * @returns {BlockGroup[]}\n   */\n  groupBlocks(blockIds) {\n    const sortedBlockIds = Array.from(blockIds).sort((a, b) => a - b);\n    if (sortedBlockIds.length === 0) {\n      return [];\n    }\n    let current = [];\n    let lastBlockId = null;\n    const groups = [];\n\n    for (const blockId of sortedBlockIds) {\n      if (lastBlockId === null || lastBlockId + 1 === blockId) {\n        current.push(blockId);\n        lastBlockId = blockId;\n      } else {\n        groups.push(new BlockGroup(\n          current[0] * this.blockSize,\n          current.length * this.blockSize,\n          current,\n        ));\n        current = [blockId];\n        lastBlockId = blockId;\n      }\n    }\n\n    groups.push(new BlockGroup(\n      current[0] * this.blockSize,\n      current.length * this.blockSize,\n      current,\n    ));\n\n    return groups;\n  }\n\n  /**\n   *\n   * @param {import(\"./basesource\").Slice[]} slices\n   * @param {Map} blocks\n   */\n  readSliceData(slices, blocks) {\n    return slices.map((slice) => {\n      let top = slice.offset + slice.length;\n      if (this.fileSize !== null) {\n        top = Math.min(this.fileSize, top);\n      }\n      const blockIdLow = Math.floor(slice.offset / this.blockSize);\n      const blockIdHigh = Math.floor(top / this.blockSize);\n      const sliceData = new ArrayBuffer(slice.length);\n      const sliceView = new Uint8Array(sliceData);\n\n      for (let blockId = blockIdLow; blockId <= blockIdHigh; ++blockId) {\n        const block = blocks.get(blockId);\n        const delta = block.offset - slice.offset;\n        const topDelta = block.top - top;\n        let blockInnerOffset = 0;\n        let rangeInnerOffset = 0;\n        let usedBlockLength;\n\n        if (delta < 0) {\n          blockInnerOffset = -delta;\n        } else if (delta > 0) {\n          rangeInnerOffset = delta;\n        }\n\n        if (topDelta < 0) {\n          usedBlockLength = block.length - blockInnerOffset;\n        } else {\n          usedBlockLength = top - block.offset - blockInnerOffset;\n        }\n\n        const blockView = new Uint8Array(block.data, blockInnerOffset, usedBlockLength);\n        sliceView.set(blockView, rangeInnerOffset);\n      }\n\n      return sliceData;\n    });\n  }\n}\n","export class BaseResponse {\n  /**\n   * Returns whether the response has an ok'ish status code\n   */\n  get ok() {\n    return this.status >= 200 && this.status <= 299;\n  }\n\n  /**\n   * Returns the status code of the response\n   */\n  get status() {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * Returns the value of the specified header\n   * @param {string} headerName the header name\n   * @returns {string} the header value\n   */\n  getHeader(headerName) { // eslint-disable-line no-unused-vars\n    throw new Error('not implemented');\n  }\n\n  /**\n   * @returns {ArrayBuffer} the response data of the request\n   */\n  async getData() {\n    throw new Error('not implemented');\n  }\n}\n\nexport class BaseClient {\n  constructor(url) {\n    this.url = url;\n  }\n\n  /**\n   * Send a request with the options\n   * @param {{headers: HeadersInit, signal: AbortSignal}} [options={}]\n   * @returns {Promise<BaseResponse>}\n   */\n  async request({ headers, signal } = {}) { // eslint-disable-line no-unused-vars\n    throw new Error('request is not implemented');\n  }\n}\n","import { BaseClient, BaseResponse } from './base.js';\n\nclass FetchResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for fetch API Response\n   * @param {Response} response\n   */\n  constructor(response) {\n    super();\n    this.response = response;\n  }\n\n  get status() {\n    return this.response.status;\n  }\n\n  getHeader(name) {\n    return this.response.headers.get(name);\n  }\n\n  async getData() {\n    const data = this.response.arrayBuffer\n      ? await this.response.arrayBuffer()\n      : (await this.response.buffer()).buffer;\n    return data;\n  }\n}\n\nexport class FetchClient extends BaseClient {\n  constructor(url, credentials) {\n    super(url);\n    this.credentials = credentials;\n  }\n\n  /**\n   * @param {{headers: HeadersInit, signal: AbortSignal}} [options={}]\n   * @returns {Promise<FetchResponse>}\n   */\n  async request({ headers, signal } = {}) {\n    const response = await fetch(this.url, {\n      headers, credentials: this.credentials, signal,\n    });\n    return new FetchResponse(response);\n  }\n}\n","import { BaseClient, BaseResponse } from './base.js';\nimport { AbortError } from '../../utils.js';\n\nclass XHRResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for XMLHttpRequest\n   * @param {XMLHttpRequest} xhr\n   * @param {ArrayBuffer} data\n   */\n  constructor(xhr, data) {\n    super();\n    this.xhr = xhr;\n    this.data = data;\n  }\n\n  get status() {\n    return this.xhr.status;\n  }\n\n  getHeader(name) {\n    return this.xhr.getResponseHeader(name);\n  }\n\n  async getData() {\n    return this.data;\n  }\n}\n\nexport class XHRClient extends BaseClient {\n  constructRequest(headers, signal) {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.open('GET', this.url);\n      xhr.responseType = 'arraybuffer';\n      for (const [key, value] of Object.entries(headers)) {\n        xhr.setRequestHeader(key, value);\n      }\n\n      // hook signals\n      xhr.onload = () => {\n        const data = xhr.response;\n        resolve(new XHRResponse(xhr, data));\n      };\n      xhr.onerror = reject;\n      xhr.onabort = () => reject(new AbortError('Request aborted'));\n      xhr.send();\n\n      if (signal) {\n        if (signal.aborted) {\n          xhr.abort();\n        }\n        signal.addEventListener('abort', () => xhr.abort());\n      }\n    });\n  }\n\n  async request({ headers, signal } = {}) {\n    const response = await this.constructRequest(headers, signal);\n    return response;\n  }\n}\n","import http from 'http';\nimport https from 'https';\nimport urlMod from 'url';\n\nimport { BaseClient, BaseResponse } from './base.js';\nimport { AbortError } from '../../utils.js';\n\nclass HttpResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for node HTTP/HTTPS API Response\n   * @param {http.ServerResponse} response\n   */\n  constructor(response, dataPromise) {\n    super();\n    this.response = response;\n    this.dataPromise = dataPromise;\n  }\n\n  get status() {\n    return this.response.statusCode;\n  }\n\n  getHeader(name) {\n    return this.response.headers[name];\n  }\n\n  async getData() {\n    const data = await this.dataPromise;\n    return data;\n  }\n}\n\nexport class HttpClient extends BaseClient {\n  constructor(url) {\n    super(url);\n    this.parsedUrl = urlMod.parse(this.url);\n    this.httpApi = (this.parsedUrl.protocol === 'http:' ? http : https);\n  }\n\n  constructRequest(headers, signal) {\n    return new Promise((resolve, reject) => {\n      const request = this.httpApi.get(\n        {\n          ...this.parsedUrl,\n          headers,\n        },\n        (response) => {\n          const dataPromise = new Promise((resolveData) => {\n            const chunks = [];\n\n            // collect chunks\n            response.on('data', (chunk) => {\n              chunks.push(chunk);\n            });\n\n            // concatenate all chunks and resolve the promise with the resulting buffer\n            response.on('end', () => {\n              const data = Buffer.concat(chunks).buffer;\n              resolveData(data);\n            });\n            response.on('error', reject);\n          });\n          resolve(new HttpResponse(response, dataPromise));\n        },\n      );\n      request.on('error', reject);\n\n      if (signal) {\n        if (signal.aborted) {\n          request.destroy(new AbortError('Request aborted'));\n        }\n        signal.addEventListener('abort', () => request.destroy(new AbortError('Request aborted')));\n      }\n    });\n  }\n\n  async request({ headers, signal } = {}) {\n    const response = await this.constructRequest(headers, signal);\n    return response;\n  }\n}\n","import { parseByteRanges, parseContentRange, parseContentType } from './httputils.js';\nimport { BaseSource } from './basesource.js';\nimport { BlockedSource } from './blockedsource.js';\n\nimport { FetchClient } from './client/fetch.js';\nimport { XHRClient } from './client/xhr.js';\nimport { HttpClient } from './client/http.js';\n\nclass RemoteSource extends BaseSource {\n  /**\n   *\n   * @param {BaseClient} client\n   * @param {object} headers\n   * @param {numbers} maxRanges\n   * @param {boolean} allowFullFile\n   */\n  constructor(client, headers, maxRanges, allowFullFile) {\n    super();\n    this.client = client;\n    this.headers = headers;\n    this.maxRanges = maxRanges;\n    this.allowFullFile = allowFullFile;\n    this._fileSize = null;\n  }\n\n  /**\n   *\n   * @param {Slice[]} slices\n   */\n  async fetch(slices, signal) {\n    // if we allow multi-ranges, split the incoming request into that many sub-requests\n    // and join them afterwards\n    if (this.maxRanges >= slices.length) {\n      return this.fetchSlices(slices, signal);\n    } else if (this.maxRanges > 0 && slices.length > 1) {\n      // TODO: split into multiple multi-range requests\n\n      // const subSlicesRequests = [];\n      // for (let i = 0; i < slices.length; i += this.maxRanges) {\n      //   subSlicesRequests.push(\n      //     this.fetchSlices(slices.slice(i, i + this.maxRanges), signal),\n      //   );\n      // }\n      // return (await Promise.all(subSlicesRequests)).flat();\n    }\n\n    // otherwise make a single request for each slice\n    return Promise.all(\n      slices.map((slice) => this.fetchSlice(slice, signal)),\n    );\n  }\n\n  async fetchSlices(slices, signal) {\n    const response = await this.client.request({\n      headers: {\n        ...this.headers,\n        Range: `bytes=${slices\n          .map(({ offset, length }) => `${offset}-${offset + length}`)\n          .join(',')\n        }`,\n      },\n      signal,\n    });\n\n    if (!response.ok) {\n      throw new Error('Error fetching data.');\n    } else if (response.status === 206) {\n      const { type, params } = parseContentType(response.getHeader('content-type'));\n      if (type === 'multipart/byteranges') {\n        const byteRanges = parseByteRanges(await response.getData(), params.boundary);\n        this._fileSize = byteRanges[0].fileSize || null;\n        return byteRanges;\n      }\n\n      const data = await response.getData();\n\n      const { start, end, total } = parseContentRange(response.getHeader('content-range'));\n      this._fileSize = total || null;\n      const first = [{\n        data,\n        offset: start,\n        length: end - start,\n      }];\n\n      if (slices.length > 1) {\n        // we requested more than one slice, but got only the first\n        // unfortunately, some HTTP Servers don't support multi-ranges\n        // and return only the first\n\n        // get the rest of the slices and fetch them iteratively\n        const others = await Promise.all(slices.slice(1).map((slice) => this.fetchSlice(slice, signal)));\n        return first.concat(others);\n      }\n      return first;\n    } else {\n      if (!this.allowFullFile) {\n        throw new Error('Server responded with full file');\n      }\n      const data = await response.getData();\n      this._fileSize = data.byteLength;\n      return [{\n        data,\n        offset: 0,\n        length: data.byteLength,\n      }];\n    }\n  }\n\n  async fetchSlice(slice, signal) {\n    const { offset, length } = slice;\n    const response = await this.client.request({\n      headers: {\n        ...this.headers,\n        Range: `bytes=${offset}-${offset + length}`,\n      },\n      signal,\n    });\n\n    // check the response was okay and if the server actually understands range requests\n    if (!response.ok) {\n      throw new Error('Error fetching data.');\n    } else if (response.status === 206) {\n      const data = await response.getData();\n\n      const { total } = parseContentRange(response.getHeader('content-range'));\n      this._fileSize = total || null;\n      return {\n        data,\n        offset,\n        length,\n      };\n    } else {\n      if (!this.allowFullFile) {\n        throw new Error('Server responded with full file');\n      }\n\n      const data = await response.getData();\n\n      this._fileSize = data.byteLength;\n      return {\n        data,\n        offset: 0,\n        length: data.byteLength,\n      };\n    }\n  }\n\n  get fileSize() {\n    return this._fileSize;\n  }\n}\n\nfunction maybeWrapInBlockedSource(source, { blockSize, cacheSize }) {\n  if (blockSize === null) {\n    return source;\n  }\n  return new BlockedSource(source, { blockSize, cacheSize });\n}\n\nexport function makeFetchSource(url, { headers = {}, credentials, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\n  const client = new FetchClient(url, credentials);\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\n\nexport function makeXHRSource(url, { headers = {}, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\n  const client = new XHRClient(url);\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\n\nexport function makeHttpSource(url, { headers = {}, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\n  const client = new HttpClient(url);\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\n\nexport function makeCustomSource(client, { headers = {}, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\n\n/**\n *\n * @param {string} url\n * @param {object} options\n */\nexport function makeRemoteSource(url, { forceXHR = false, ...clientOptions } = {}) {\n  if (typeof fetch === 'function' && !forceXHR) {\n    return makeFetchSource(url, clientOptions);\n  }\n  if (typeof XMLHttpRequest !== 'undefined') {\n    return makeXHRSource(url, clientOptions);\n  }\n  return makeHttpSource(url, clientOptions);\n}\n","import { BaseSource } from './basesource.js';\n\nclass FileReaderSource extends BaseSource {\n  constructor(file) {\n    super();\n    this.file = file;\n  }\n\n  async fetchSlice(slice, signal) {\n    return new Promise((resolve, reject) => {\n      const blob = this.file.slice(slice.offset, slice.offset + slice.length);\n      const reader = new FileReader();\n      reader.onload = (event) => resolve(event.target.result);\n      reader.onerror = reject;\n      reader.onabort = reject;\n      reader.readAsArrayBuffer(blob);\n\n      if (signal) {\n        signal.addEventListener('abort', () => reader.abort());\n      }\n    });\n  }\n}\n\n/**\n * Create a new source from a given file/blob.\n * @param {Blob} file The file or blob to read from.\n * @returns The constructed source\n */\nexport function makeFileReaderSource(file) {\n  return new FileReaderSource(file);\n}\n","/** @module geotiff */\nimport GeoTIFFImage from './geotiffimage.js';\nimport DataView64 from './dataview64.js';\nimport DataSlice from './dataslice.js';\nimport Pool from './pool.js';\n\nimport { makeRemoteSource, makeCustomSource } from './source/remote.js';\nimport { makeBufferSource } from './source/arraybuffer.js';\nimport { makeFileReaderSource } from './source/filereader.js';\nimport { makeFileSource } from './source/file.js';\nimport { BaseClient, BaseResponse } from './source/client/base.js';\n\nimport { fieldTypes, fieldTagNames, arrayFields, geoKeyNames } from './globals.js';\nimport { writeGeotiff } from './geotiffwriter.js';\nimport * as globals from './globals.js';\nimport * as rgb from './rgb.js';\nimport { getDecoder, addDecoder } from './compression/index.js';\nimport { setLogger } from './logging.js';\n\nexport { globals };\nexport { rgb };\nexport { default as BaseDecoder } from './compression/basedecoder.js';\nexport { getDecoder, addDecoder };\nexport { setLogger };\n\n/**\n * @typedef {Uint8Array | Int8Array | Uint16Array | Int16Array | Uint32Array | Int32Array | Float32Array | Float64Array}\n * TypedArray\n */\n\n/**\n * @typedef {{ height:number, width: number }} Dimensions\n */\n\n/**\n * The autogenerated docs are a little confusing here. The effective type is:\n *\n * `TypedArray & { height: number; width: number}`\n * @typedef {TypedArray & Dimensions} TypedArrayWithDimensions\n */\n\n/**\n * The autogenerated docs are a little confusing here. The effective type is:\n *\n * `TypedArray[] & { height: number; width: number}`\n * @typedef {TypedArray[] & Dimensions} TypedArrayArrayWithDimensions\n */\n\n/**\n *  The autogenerated docs are a little confusing here. The effective type is:\n *\n * `(TypedArray | TypedArray[]) & { height: number; width: number}`\n * @typedef {TypedArrayWithDimensions | TypedArrayArrayWithDimensions} ReadRasterResult\n */\n\nfunction getFieldTypeLength(fieldType) {\n  switch (fieldType) {\n    case fieldTypes.BYTE: case fieldTypes.ASCII: case fieldTypes.SBYTE: case fieldTypes.UNDEFINED:\n      return 1;\n    case fieldTypes.SHORT: case fieldTypes.SSHORT:\n      return 2;\n    case fieldTypes.LONG: case fieldTypes.SLONG: case fieldTypes.FLOAT: case fieldTypes.IFD:\n      return 4;\n    case fieldTypes.RATIONAL: case fieldTypes.SRATIONAL: case fieldTypes.DOUBLE:\n    case fieldTypes.LONG8: case fieldTypes.SLONG8: case fieldTypes.IFD8:\n      return 8;\n    default:\n      throw new RangeError(`Invalid field type: ${fieldType}`);\n  }\n}\n\nfunction parseGeoKeyDirectory(fileDirectory) {\n  const rawGeoKeyDirectory = fileDirectory.GeoKeyDirectory;\n  if (!rawGeoKeyDirectory) {\n    return null;\n  }\n\n  const geoKeyDirectory = {};\n  for (let i = 4; i <= rawGeoKeyDirectory[3] * 4; i += 4) {\n    const key = geoKeyNames[rawGeoKeyDirectory[i]];\n    const location = (rawGeoKeyDirectory[i + 1])\n      ? (fieldTagNames[rawGeoKeyDirectory[i + 1]]) : null;\n    const count = rawGeoKeyDirectory[i + 2];\n    const offset = rawGeoKeyDirectory[i + 3];\n\n    let value = null;\n    if (!location) {\n      value = offset;\n    } else {\n      value = fileDirectory[location];\n      if (typeof value === 'undefined' || value === null) {\n        throw new Error(`Could not get value of geoKey '${key}'.`);\n      } else if (typeof value === 'string') {\n        value = value.substring(offset, offset + count - 1);\n      } else if (value.subarray) {\n        value = value.subarray(offset, offset + count);\n        if (count === 1) {\n          value = value[0];\n        }\n      }\n    }\n    geoKeyDirectory[key] = value;\n  }\n  return geoKeyDirectory;\n}\n\nfunction getValues(dataSlice, fieldType, count, offset) {\n  let values = null;\n  let readMethod = null;\n  const fieldTypeLength = getFieldTypeLength(fieldType);\n\n  switch (fieldType) {\n    case fieldTypes.BYTE: case fieldTypes.ASCII: case fieldTypes.UNDEFINED:\n      values = new Uint8Array(count); readMethod = dataSlice.readUint8;\n      break;\n    case fieldTypes.SBYTE:\n      values = new Int8Array(count); readMethod = dataSlice.readInt8;\n      break;\n    case fieldTypes.SHORT:\n      values = new Uint16Array(count); readMethod = dataSlice.readUint16;\n      break;\n    case fieldTypes.SSHORT:\n      values = new Int16Array(count); readMethod = dataSlice.readInt16;\n      break;\n    case fieldTypes.LONG: case fieldTypes.IFD:\n      values = new Uint32Array(count); readMethod = dataSlice.readUint32;\n      break;\n    case fieldTypes.SLONG:\n      values = new Int32Array(count); readMethod = dataSlice.readInt32;\n      break;\n    case fieldTypes.LONG8: case fieldTypes.IFD8:\n      values = new Array(count); readMethod = dataSlice.readUint64;\n      break;\n    case fieldTypes.SLONG8:\n      values = new Array(count); readMethod = dataSlice.readInt64;\n      break;\n    case fieldTypes.RATIONAL:\n      values = new Uint32Array(count * 2); readMethod = dataSlice.readUint32;\n      break;\n    case fieldTypes.SRATIONAL:\n      values = new Int32Array(count * 2); readMethod = dataSlice.readInt32;\n      break;\n    case fieldTypes.FLOAT:\n      values = new Float32Array(count); readMethod = dataSlice.readFloat32;\n      break;\n    case fieldTypes.DOUBLE:\n      values = new Float64Array(count); readMethod = dataSlice.readFloat64;\n      break;\n    default:\n      throw new RangeError(`Invalid field type: ${fieldType}`);\n  }\n\n  // normal fields\n  if (!(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {\n    for (let i = 0; i < count; ++i) {\n      values[i] = readMethod.call(\n        dataSlice, offset + (i * fieldTypeLength),\n      );\n    }\n  } else { // RATIONAL or SRATIONAL\n    for (let i = 0; i < count; i += 2) {\n      values[i] = readMethod.call(\n        dataSlice, offset + (i * fieldTypeLength),\n      );\n      values[i + 1] = readMethod.call(\n        dataSlice, offset + ((i * fieldTypeLength) + 4),\n      );\n    }\n  }\n\n  if (fieldType === fieldTypes.ASCII) {\n    return new TextDecoder('utf-8').decode(values);\n  }\n  return values;\n}\n\n/**\n * Data class to store the parsed file directory, geo key directory and\n * offset to the next IFD\n */\nclass ImageFileDirectory {\n  constructor(fileDirectory, geoKeyDirectory, nextIFDByteOffset) {\n    this.fileDirectory = fileDirectory;\n    this.geoKeyDirectory = geoKeyDirectory;\n    this.nextIFDByteOffset = nextIFDByteOffset;\n  }\n}\n\n/**\n * Error class for cases when an IFD index was requested, that does not exist\n * in the file.\n */\nclass GeoTIFFImageIndexError extends Error {\n  constructor(index) {\n    super(`No image at index ${index}`);\n    this.index = index;\n  }\n}\n\nclass GeoTIFFBase {\n  /**\n   * (experimental) Reads raster data from the best fitting image. This function uses\n   * the image with the lowest resolution that is still a higher resolution than the\n   * requested resolution.\n   * When specified, the `bbox` option is translated to the `window` option and the\n   * `resX` and `resY` to `width` and `height` respectively.\n   * Then, the [readRasters]{@link GeoTIFFImage#readRasters} method of the selected\n   * image is called and the result returned.\n   * @see GeoTIFFImage.readRasters\n   * @param {import('./geotiffimage').ReadRasterOptions} [options={}] optional parameters\n   * @returns {Promise<ReadRasterResult>} the decoded array(s), with `height` and `width`, as a promise\n   */\n  async readRasters(options = {}) {\n    const { window: imageWindow, width, height } = options;\n    let { resX, resY, bbox } = options;\n\n    const firstImage = await this.getImage();\n    let usedImage = firstImage;\n    const imageCount = await this.getImageCount();\n    const imgBBox = firstImage.getBoundingBox();\n\n    if (imageWindow && bbox) {\n      throw new Error('Both \"bbox\" and \"window\" passed.');\n    }\n\n    // if width/height is passed, transform it to resolution\n    if (width || height) {\n      // if we have an image window (pixel coordinates), transform it to a BBox\n      // using the origin/resolution of the first image.\n      if (imageWindow) {\n        const [oX, oY] = firstImage.getOrigin();\n        const [rX, rY] = firstImage.getResolution();\n\n        bbox = [\n          oX + (imageWindow[0] * rX),\n          oY + (imageWindow[1] * rY),\n          oX + (imageWindow[2] * rX),\n          oY + (imageWindow[3] * rY),\n        ];\n      }\n\n      // if we have a bbox (or calculated one)\n\n      const usedBBox = bbox || imgBBox;\n\n      if (width) {\n        if (resX) {\n          throw new Error('Both width and resX passed');\n        }\n        resX = (usedBBox[2] - usedBBox[0]) / width;\n      }\n      if (height) {\n        if (resY) {\n          throw new Error('Both width and resY passed');\n        }\n        resY = (usedBBox[3] - usedBBox[1]) / height;\n      }\n    }\n\n    // if resolution is set or calculated, try to get the image with the worst acceptable resolution\n    if (resX || resY) {\n      const allImages = [];\n      for (let i = 0; i < imageCount; ++i) {\n        const image = await this.getImage(i);\n        const { SubfileType: subfileType, NewSubfileType: newSubfileType } = image.fileDirectory;\n        if (i === 0 || subfileType === 2 || newSubfileType & 1) {\n          allImages.push(image);\n        }\n      }\n\n      allImages.sort((a, b) => a.getWidth() - b.getWidth());\n      for (let i = 0; i < allImages.length; ++i) {\n        const image = allImages[i];\n        const imgResX = (imgBBox[2] - imgBBox[0]) / image.getWidth();\n        const imgResY = (imgBBox[3] - imgBBox[1]) / image.getHeight();\n\n        usedImage = image;\n        if ((resX && resX > imgResX) || (resY && resY > imgResY)) {\n          break;\n        }\n      }\n    }\n\n    let wnd = imageWindow;\n    if (bbox) {\n      const [oX, oY] = firstImage.getOrigin();\n      const [imageResX, imageResY] = usedImage.getResolution(firstImage);\n\n      wnd = [\n        Math.round((bbox[0] - oX) / imageResX),\n        Math.round((bbox[1] - oY) / imageResY),\n        Math.round((bbox[2] - oX) / imageResX),\n        Math.round((bbox[3] - oY) / imageResY),\n      ];\n      wnd = [\n        Math.min(wnd[0], wnd[2]),\n        Math.min(wnd[1], wnd[3]),\n        Math.max(wnd[0], wnd[2]),\n        Math.max(wnd[1], wnd[3]),\n      ];\n    }\n\n    return usedImage.readRasters({ ...options, window: wnd });\n  }\n}\n\n/**\n * @typedef {Object} GeoTIFFOptions\n * @property {boolean} [cache=false] whether or not decoded tiles shall be cached.\n */\n\n/**\n * The abstraction for a whole GeoTIFF file.\n * @augments GeoTIFFBase\n */\nclass GeoTIFF extends GeoTIFFBase {\n  /**\n   * @constructor\n   * @param {*} source The datasource to read from.\n   * @param {boolean} littleEndian Whether the image uses little endian.\n   * @param {boolean} bigTiff Whether the image uses bigTIFF conventions.\n   * @param {number} firstIFDOffset The numeric byte-offset from the start of the image\n   *                                to the first IFD.\n   * @param {GeoTIFFOptions} [options] further options.\n   */\n  constructor(source, littleEndian, bigTiff, firstIFDOffset, options = {}) {\n    super();\n    this.source = source;\n    this.littleEndian = littleEndian;\n    this.bigTiff = bigTiff;\n    this.firstIFDOffset = firstIFDOffset;\n    this.cache = options.cache || false;\n    this.ifdRequests = [];\n    this.ghostValues = null;\n  }\n\n  async getSlice(offset, size) {\n    const fallbackSize = this.bigTiff ? 4048 : 1024;\n    return new DataSlice(\n      (await this.source.fetch([{\n        offset,\n        length: typeof size !== 'undefined' ? size : fallbackSize,\n      }]))[0],\n      offset,\n      this.littleEndian,\n      this.bigTiff,\n    );\n  }\n\n  /**\n   * Instructs to parse an image file directory at the given file offset.\n   * As there is no way to ensure that a location is indeed the start of an IFD,\n   * this function must be called with caution (e.g only using the IFD offsets from\n   * the headers or other IFDs).\n   * @param {number} offset the offset to parse the IFD at\n   * @returns {Promise<ImageFileDirectory>} the parsed IFD\n   */\n  async parseFileDirectoryAt(offset) {\n    const entrySize = this.bigTiff ? 20 : 12;\n    const offsetSize = this.bigTiff ? 8 : 2;\n\n    let dataSlice = await this.getSlice(offset);\n    const numDirEntries = this.bigTiff\n      ? dataSlice.readUint64(offset)\n      : dataSlice.readUint16(offset);\n\n    // if the slice does not cover the whole IFD, request a bigger slice, where the\n    // whole IFD fits: num of entries + n x tag length + offset to next IFD\n    const byteSize = (numDirEntries * entrySize) + (this.bigTiff ? 16 : 6);\n    if (!dataSlice.covers(offset, byteSize)) {\n      dataSlice = await this.getSlice(offset, byteSize);\n    }\n\n    const fileDirectory = {};\n\n    // loop over the IFD and create a file directory object\n    let i = offset + (this.bigTiff ? 8 : 2);\n    for (let entryCount = 0; entryCount < numDirEntries; i += entrySize, ++entryCount) {\n      const fieldTag = dataSlice.readUint16(i);\n      const fieldType = dataSlice.readUint16(i + 2);\n      const typeCount = this.bigTiff\n        ? dataSlice.readUint64(i + 4)\n        : dataSlice.readUint32(i + 4);\n\n      let fieldValues;\n      let value;\n      const fieldTypeLength = getFieldTypeLength(fieldType);\n      const valueOffset = i + (this.bigTiff ? 12 : 8);\n\n      // check whether the value is directly encoded in the tag or refers to a\n      // different external byte range\n      if (fieldTypeLength * typeCount <= (this.bigTiff ? 8 : 4)) {\n        fieldValues = getValues(dataSlice, fieldType, typeCount, valueOffset);\n      } else {\n        // resolve the reference to the actual byte range\n        const actualOffset = dataSlice.readOffset(valueOffset);\n        const length = getFieldTypeLength(fieldType) * typeCount;\n\n        // check, whether we actually cover the referenced byte range; if not,\n        // request a new slice of bytes to read from it\n        if (dataSlice.covers(actualOffset, length)) {\n          fieldValues = getValues(dataSlice, fieldType, typeCount, actualOffset);\n        } else {\n          const fieldDataSlice = await this.getSlice(actualOffset, length);\n          fieldValues = getValues(fieldDataSlice, fieldType, typeCount, actualOffset);\n        }\n      }\n\n      // unpack single values from the array\n      if (typeCount === 1 && arrayFields.indexOf(fieldTag) === -1\n        && !(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {\n        value = fieldValues[0];\n      } else {\n        value = fieldValues;\n      }\n\n      // write the tags value to the file directly\n      fileDirectory[fieldTagNames[fieldTag]] = value;\n    }\n    const geoKeyDirectory = parseGeoKeyDirectory(fileDirectory);\n    const nextIFDByteOffset = dataSlice.readOffset(\n      offset + offsetSize + (entrySize * numDirEntries),\n    );\n\n    return new ImageFileDirectory(\n      fileDirectory,\n      geoKeyDirectory,\n      nextIFDByteOffset,\n    );\n  }\n\n  async requestIFD(index) {\n    // see if we already have that IFD index requested.\n    if (this.ifdRequests[index]) {\n      // attach to an already requested IFD\n      return this.ifdRequests[index];\n    } else if (index === 0) {\n      // special case for index 0\n      this.ifdRequests[index] = this.parseFileDirectoryAt(this.firstIFDOffset);\n      return this.ifdRequests[index];\n    } else if (!this.ifdRequests[index - 1]) {\n      // if the previous IFD was not yet loaded, load that one first\n      // this is the recursive call.\n      try {\n        this.ifdRequests[index - 1] = this.requestIFD(index - 1);\n      } catch (e) {\n        // if the previous one already was an index error, rethrow\n        // with the current index\n        if (e instanceof GeoTIFFImageIndexError) {\n          throw new GeoTIFFImageIndexError(index);\n        }\n        // rethrow anything else\n        throw e;\n      }\n    }\n    // if the previous IFD was loaded, we can finally fetch the one we are interested in.\n    // we need to wrap this in an IIFE, otherwise this.ifdRequests[index] would be delayed\n    this.ifdRequests[index] = (async () => {\n      const previousIfd = await this.ifdRequests[index - 1];\n      if (previousIfd.nextIFDByteOffset === 0) {\n        throw new GeoTIFFImageIndexError(index);\n      }\n      return this.parseFileDirectoryAt(previousIfd.nextIFDByteOffset);\n    })();\n    return this.ifdRequests[index];\n  }\n\n  /**\n   * Get the n-th internal subfile of an image. By default, the first is returned.\n   *\n   * @param {number} [index=0] the index of the image to return.\n   * @returns {Promise<GeoTIFFImage>} the image at the given index\n   */\n  async getImage(index = 0) {\n    const ifd = await this.requestIFD(index);\n    return new GeoTIFFImage(\n      ifd.fileDirectory, ifd.geoKeyDirectory,\n      this.dataView, this.littleEndian, this.cache, this.source,\n    );\n  }\n\n  /**\n   * Returns the count of the internal subfiles.\n   *\n   * @returns {Promise<number>} the number of internal subfile images\n   */\n  async getImageCount() {\n    let index = 0;\n    // loop until we run out of IFDs\n    let hasNext = true;\n    while (hasNext) {\n      try {\n        await this.requestIFD(index);\n        ++index;\n      } catch (e) {\n        if (e instanceof GeoTIFFImageIndexError) {\n          hasNext = false;\n        } else {\n          throw e;\n        }\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Get the values of the COG ghost area as a parsed map.\n   * See https://gdal.org/drivers/raster/cog.html#header-ghost-area for reference\n   * @returns {Promise<Object>} the parsed ghost area or null, if no such area was found\n   */\n  async getGhostValues() {\n    const offset = this.bigTiff ? 16 : 8;\n    if (this.ghostValues) {\n      return this.ghostValues;\n    }\n    const detectionString = 'GDAL_STRUCTURAL_METADATA_SIZE=';\n    const heuristicAreaSize = detectionString.length + 100;\n    let slice = await this.getSlice(offset, heuristicAreaSize);\n    if (detectionString === getValues(slice, fieldTypes.ASCII, detectionString.length, offset)) {\n      const valuesString = getValues(slice, fieldTypes.ASCII, heuristicAreaSize, offset);\n      const firstLine = valuesString.split('\\n')[0];\n      const metadataSize = Number(firstLine.split('=')[1].split(' ')[0]) + firstLine.length;\n      if (metadataSize > heuristicAreaSize) {\n        slice = await this.getSlice(offset, metadataSize);\n      }\n      const fullString = getValues(slice, fieldTypes.ASCII, metadataSize, offset);\n      this.ghostValues = {};\n      fullString\n        .split('\\n')\n        .filter((line) => line.length > 0)\n        .map((line) => line.split('='))\n        .forEach(([key, value]) => {\n          this.ghostValues[key] = value;\n        });\n    }\n    return this.ghostValues;\n  }\n\n  /**\n   * Parse a (Geo)TIFF file from the given source.\n   *\n   * @param {*} source The source of data to parse from.\n   * @param {GeoTIFFOptions} [options] Additional options.\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   */\n  static async fromSource(source, options, signal) {\n    const headerData = (await source.fetch([{ offset: 0, length: 1024 }], signal))[0];\n    const dataView = new DataView64(headerData);\n\n    const BOM = dataView.getUint16(0, 0);\n    let littleEndian;\n    if (BOM === 0x4949) {\n      littleEndian = true;\n    } else if (BOM === 0x4D4D) {\n      littleEndian = false;\n    } else {\n      throw new TypeError('Invalid byte order value.');\n    }\n\n    const magicNumber = dataView.getUint16(2, littleEndian);\n    let bigTiff;\n    if (magicNumber === 42) {\n      bigTiff = false;\n    } else if (magicNumber === 43) {\n      bigTiff = true;\n      const offsetByteSize = dataView.getUint16(4, littleEndian);\n      if (offsetByteSize !== 8) {\n        throw new Error('Unsupported offset byte-size.');\n      }\n    } else {\n      throw new TypeError('Invalid magic number.');\n    }\n\n    const firstIFDOffset = bigTiff\n      ? dataView.getUint64(8, littleEndian)\n      : dataView.getUint32(4, littleEndian);\n    return new GeoTIFF(source, littleEndian, bigTiff, firstIFDOffset, options);\n  }\n\n  /**\n   * Closes the underlying file buffer\n   * N.B. After the GeoTIFF has been completely processed it needs\n   * to be closed but only if it has been constructed from a file.\n   */\n  close() {\n    if (typeof this.source.close === 'function') {\n      return this.source.close();\n    }\n    return false;\n  }\n}\n\nexport { GeoTIFF };\nexport default GeoTIFF;\n\n/**\n * Wrapper for GeoTIFF files that have external overviews.\n * @augments GeoTIFFBase\n */\nclass MultiGeoTIFF extends GeoTIFFBase {\n  /**\n   * Construct a new MultiGeoTIFF from a main and several overview files.\n   * @param {GeoTIFF} mainFile The main GeoTIFF file.\n   * @param {GeoTIFF[]} overviewFiles An array of overview files.\n   */\n  constructor(mainFile, overviewFiles) {\n    super();\n    this.mainFile = mainFile;\n    this.overviewFiles = overviewFiles;\n    this.imageFiles = [mainFile].concat(overviewFiles);\n\n    this.fileDirectoriesPerFile = null;\n    this.fileDirectoriesPerFileParsing = null;\n    this.imageCount = null;\n  }\n\n  async parseFileDirectoriesPerFile() {\n    const requests = [this.mainFile.parseFileDirectoryAt(this.mainFile.firstIFDOffset)]\n      .concat(this.overviewFiles.map((file) => file.parseFileDirectoryAt(file.firstIFDOffset)));\n\n    this.fileDirectoriesPerFile = await Promise.all(requests);\n    return this.fileDirectoriesPerFile;\n  }\n\n  /**\n   * Get the n-th internal subfile of an image. By default, the first is returned.\n   *\n   * @param {number} [index=0] the index of the image to return.\n   * @returns {Promise<GeoTIFFImage>} the image at the given index\n   */\n  async getImage(index = 0) {\n    await this.getImageCount();\n    await this.parseFileDirectoriesPerFile();\n    let visited = 0;\n    let relativeIndex = 0;\n    for (let i = 0; i < this.imageFiles.length; i++) {\n      const imageFile = this.imageFiles[i];\n      for (let ii = 0; ii < this.imageCounts[i]; ii++) {\n        if (index === visited) {\n          const ifd = await imageFile.requestIFD(relativeIndex);\n          return new GeoTIFFImage(\n            ifd.fileDirectory, ifd.geoKeyDirectory,\n            imageFile.dataView, imageFile.littleEndian, imageFile.cache, imageFile.source,\n          );\n        }\n        visited++;\n        relativeIndex++;\n      }\n      relativeIndex = 0;\n    }\n\n    throw new RangeError('Invalid image index');\n  }\n\n  /**\n   * Returns the count of the internal subfiles.\n   *\n   * @returns {Promise<number>} the number of internal subfile images\n   */\n  async getImageCount() {\n    if (this.imageCount !== null) {\n      return this.imageCount;\n    }\n    const requests = [this.mainFile.getImageCount()]\n      .concat(this.overviewFiles.map((file) => file.getImageCount()));\n    this.imageCounts = await Promise.all(requests);\n    this.imageCount = this.imageCounts.reduce((count, ifds) => count + ifds, 0);\n    return this.imageCount;\n  }\n}\n\nexport { MultiGeoTIFF };\n\n/**\n * Creates a new GeoTIFF from a remote URL.\n * @param {string} url The URL to access the image from\n * @param {object} [options] Additional options to pass to the source.\n *                           See {@link makeRemoteSource} for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromUrl(url, options = {}, signal) {\n  return GeoTIFF.fromSource(makeRemoteSource(url, options), signal);\n}\n\n/**\n * Creates a new GeoTIFF from a custom {@link BaseClient}.\n * @param {BaseClient} client The client.\n * @param {object} [options] Additional options to pass to the source.\n *                           See {@link makeRemoteSource} for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromCustomClient(client, options = {}, signal) {\n  return GeoTIFF.fromSource(makeCustomSource(client, options), signal);\n}\n\n/**\n * Construct a new GeoTIFF from an\n * [ArrayBuffer]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer}.\n * @param {ArrayBuffer} arrayBuffer The data to read the file from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromArrayBuffer(arrayBuffer, signal) {\n  return GeoTIFF.fromSource(makeBufferSource(arrayBuffer), signal);\n}\n\n/**\n * Construct a GeoTIFF from a local file path. This uses the node\n * [filesystem API]{@link https://nodejs.org/api/fs.html} and is\n * not available on browsers.\n *\n * N.B. After the GeoTIFF has been completely processed it needs\n * to be closed but only if it has been constructed from a file.\n * @param {string} path The file path to read from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromFile(path, signal) {\n  return GeoTIFF.fromSource(makeFileSource(path), signal);\n}\n\n/**\n * Construct a GeoTIFF from an HTML\n * [Blob]{@link https://developer.mozilla.org/en-US/docs/Web/API/Blob} or\n * [File]{@link https://developer.mozilla.org/en-US/docs/Web/API/File}\n * object.\n * @param {Blob|File} blob The Blob or File object to read from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromBlob(blob, signal) {\n  return GeoTIFF.fromSource(makeFileReaderSource(blob), signal);\n}\n\n/**\n * Construct a MultiGeoTIFF from the given URLs.\n * @param {string} mainUrl The URL for the main file.\n * @param {string[]} overviewUrls An array of URLs for the overview images.\n * @param {Object} [options] Additional options to pass to the source.\n *                           See [makeRemoteSource]{@link module:source.makeRemoteSource}\n *                           for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<MultiGeoTIFF>} The resulting MultiGeoTIFF file.\n */\nexport async function fromUrls(mainUrl, overviewUrls = [], options = {}, signal) {\n  const mainFile = await GeoTIFF.fromSource(makeRemoteSource(mainUrl, options), signal);\n  const overviewFiles = await Promise.all(\n    overviewUrls.map((url) => GeoTIFF.fromSource(makeRemoteSource(url, options))),\n  );\n\n  return new MultiGeoTIFF(mainFile, overviewFiles);\n}\n\n/**\n * Main creating function for GeoTIFF files.\n * @param {(Array)} array of pixel values\n * @returns {metadata} metadata\n */\nexport function writeArrayBuffer(values, metadata) {\n  return writeGeotiff(values, metadata);\n}\n\nexport { Pool };\nexport { GeoTIFFImage };\nexport { BaseClient, BaseResponse };\n","export function fromWhiteIsZero(raster, max) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  let value;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    value = 256 - (raster[i] / max * 256);\n    rgbRaster[j] = value;\n    rgbRaster[j + 1] = value;\n    rgbRaster[j + 2] = value;\n  }\n  return rgbRaster;\n}\n\nexport function fromBlackIsZero(raster, max) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  let value;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    value = raster[i] / max * 256;\n    rgbRaster[j] = value;\n    rgbRaster[j + 1] = value;\n    rgbRaster[j + 2] = value;\n  }\n  return rgbRaster;\n}\n\nexport function fromPalette(raster, colorMap) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  const greenOffset = colorMap.length / 3;\n  const blueOffset = colorMap.length / 3 * 2;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    const mapIndex = raster[i];\n    rgbRaster[j] = colorMap[mapIndex] / 65536 * 256;\n    rgbRaster[j + 1] = colorMap[mapIndex + greenOffset] / 65536 * 256;\n    rgbRaster[j + 2] = colorMap[mapIndex + blueOffset] / 65536 * 256;\n  }\n  return rgbRaster;\n}\n\nexport function fromCMYK(cmykRaster) {\n  const { width, height } = cmykRaster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  for (let i = 0, j = 0; i < cmykRaster.length; i += 4, j += 3) {\n    const c = cmykRaster[i];\n    const m = cmykRaster[i + 1];\n    const y = cmykRaster[i + 2];\n    const k = cmykRaster[i + 3];\n\n    rgbRaster[j] = 255 * ((255 - c) / 256) * ((255 - k) / 256);\n    rgbRaster[j + 1] = 255 * ((255 - m) / 256) * ((255 - k) / 256);\n    rgbRaster[j + 2] = 255 * ((255 - y) / 256) * ((255 - k) / 256);\n  }\n  return rgbRaster;\n}\n\nexport function fromYCbCr(yCbCrRaster) {\n  const { width, height } = yCbCrRaster;\n  const rgbRaster = new Uint8ClampedArray(width * height * 3);\n  for (let i = 0, j = 0; i < yCbCrRaster.length; i += 3, j += 3) {\n    const y = yCbCrRaster[i];\n    const cb = yCbCrRaster[i + 1];\n    const cr = yCbCrRaster[i + 2];\n\n    rgbRaster[j] = (y + (1.40200 * (cr - 0x80)));\n    rgbRaster[j + 1] = (y - (0.34414 * (cb - 0x80)) - (0.71414 * (cr - 0x80)));\n    rgbRaster[j + 2] = (y + (1.77200 * (cb - 0x80)));\n  }\n  return rgbRaster;\n}\n\nconst Xn = 0.95047;\nconst Yn = 1.00000;\nconst Zn = 1.08883;\n\n// from https://github.com/antimatter15/rgb-lab/blob/master/color.js\n\nexport function fromCIELab(cieLabRaster) {\n  const { width, height } = cieLabRaster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n\n  for (let i = 0, j = 0; i < cieLabRaster.length; i += 3, j += 3) {\n    const L = cieLabRaster[i + 0];\n    const a_ = cieLabRaster[i + 1] << 24 >> 24; // conversion from uint8 to int8\n    const b_ = cieLabRaster[i + 2] << 24 >> 24; // same\n\n    let y = (L + 16) / 116;\n    let x = (a_ / 500) + y;\n    let z = y - (b_ / 200);\n    let r;\n    let g;\n    let b;\n\n    x = Xn * ((x * x * x > 0.008856) ? x * x * x : (x - (16 / 116)) / 7.787);\n    y = Yn * ((y * y * y > 0.008856) ? y * y * y : (y - (16 / 116)) / 7.787);\n    z = Zn * ((z * z * z > 0.008856) ? z * z * z : (z - (16 / 116)) / 7.787);\n\n    r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n    g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n    b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n    r = (r > 0.0031308) ? ((1.055 * (r ** (1 / 2.4))) - 0.055) : 12.92 * r;\n    g = (g > 0.0031308) ? ((1.055 * (g ** (1 / 2.4))) - 0.055) : 12.92 * g;\n    b = (b > 0.0031308) ? ((1.055 * (b ** (1 / 2.4))) - 0.055) : 12.92 * b;\n\n    rgbRaster[j] = Math.max(0, Math.min(1, r)) * 255;\n    rgbRaster[j + 1] = Math.max(0, Math.min(1, g)) * 255;\n    rgbRaster[j + 2] = Math.max(0, Math.min(1, b)) * 255;\n  }\n  return rgbRaster;\n}\n","/**\n * @module resample\n */\n\nfunction copyNewSize(array, width, height, samplesPerPixel = 1) {\n  return new (Object.getPrototypeOf(array).constructor)(width * height * samplesPerPixel);\n}\n\n/**\n * Resample the input arrays using nearest neighbor value selection.\n * @param {TypedArray[]} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @returns {TypedArray[]} The resampled rasters\n */\nexport function resampleNearest(valueArrays, inWidth, inHeight, outWidth, outHeight) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n  return valueArrays.map((array) => {\n    const newArray = copyNewSize(array, outWidth, outHeight);\n    for (let y = 0; y < outHeight; ++y) {\n      const cy = Math.min(Math.round(relY * y), inHeight - 1);\n      for (let x = 0; x < outWidth; ++x) {\n        const cx = Math.min(Math.round(relX * x), inWidth - 1);\n        const value = array[(cy * inWidth) + cx];\n        newArray[(y * outWidth) + x] = value;\n      }\n    }\n    return newArray;\n  });\n}\n\n// simple linear interpolation, code from:\n// https://en.wikipedia.org/wiki/Linear_interpolation#Programming_language_support\nfunction lerp(v0, v1, t) {\n  return ((1 - t) * v0) + (t * v1);\n}\n\n/**\n * Resample the input arrays using bilinear interpolation.\n * @param {TypedArray[]} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @returns {TypedArray[]} The resampled rasters\n */\nexport function resampleBilinear(valueArrays, inWidth, inHeight, outWidth, outHeight) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n\n  return valueArrays.map((array) => {\n    const newArray = copyNewSize(array, outWidth, outHeight);\n    for (let y = 0; y < outHeight; ++y) {\n      const rawY = relY * y;\n\n      const yl = Math.floor(rawY);\n      const yh = Math.min(Math.ceil(rawY), (inHeight - 1));\n\n      for (let x = 0; x < outWidth; ++x) {\n        const rawX = relX * x;\n        const tx = rawX % 1;\n\n        const xl = Math.floor(rawX);\n        const xh = Math.min(Math.ceil(rawX), (inWidth - 1));\n\n        const ll = array[(yl * inWidth) + xl];\n        const hl = array[(yl * inWidth) + xh];\n        const lh = array[(yh * inWidth) + xl];\n        const hh = array[(yh * inWidth) + xh];\n\n        const value = lerp(\n          lerp(ll, hl, tx),\n          lerp(lh, hh, tx),\n          rawY % 1,\n        );\n        newArray[(y * outWidth) + x] = value;\n      }\n    }\n    return newArray;\n  });\n}\n\n/**\n * Resample the input arrays using the selected resampling method.\n * @param {TypedArray[]} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {string} [method = 'nearest'] The desired resampling method\n * @returns {TypedArray[]} The resampled rasters\n */\nexport function resample(valueArrays, inWidth, inHeight, outWidth, outHeight, method = 'nearest') {\n  switch (method.toLowerCase()) {\n    case 'nearest':\n      return resampleNearest(valueArrays, inWidth, inHeight, outWidth, outHeight);\n    case 'bilinear':\n    case 'linear':\n      return resampleBilinear(valueArrays, inWidth, inHeight, outWidth, outHeight);\n    default:\n      throw new Error(`Unsupported resampling method: '${method}'`);\n  }\n}\n\n/**\n * Resample the pixel interleaved input array using nearest neighbor value selection.\n * @param {TypedArray} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {number} samples The number of samples per pixel for pixel\n *                         interleaved data\n * @returns {TypedArray} The resampled raster\n */\nexport function resampleNearestInterleaved(\n  valueArray, inWidth, inHeight, outWidth, outHeight, samples) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n\n  const newArray = copyNewSize(valueArray, outWidth, outHeight, samples);\n  for (let y = 0; y < outHeight; ++y) {\n    const cy = Math.min(Math.round(relY * y), inHeight - 1);\n    for (let x = 0; x < outWidth; ++x) {\n      const cx = Math.min(Math.round(relX * x), inWidth - 1);\n      for (let i = 0; i < samples; ++i) {\n        const value = valueArray[(cy * inWidth * samples) + (cx * samples) + i];\n        newArray[(y * outWidth * samples) + (x * samples) + i] = value;\n      }\n    }\n  }\n  return newArray;\n}\n\n/**\n * Resample the pixel interleaved input array using bilinear interpolation.\n * @param {TypedArray} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {number} samples The number of samples per pixel for pixel\n *                         interleaved data\n * @returns {TypedArray} The resampled raster\n */\nexport function resampleBilinearInterleaved(\n  valueArray, inWidth, inHeight, outWidth, outHeight, samples) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n  const newArray = copyNewSize(valueArray, outWidth, outHeight, samples);\n  for (let y = 0; y < outHeight; ++y) {\n    const rawY = relY * y;\n\n    const yl = Math.floor(rawY);\n    const yh = Math.min(Math.ceil(rawY), (inHeight - 1));\n\n    for (let x = 0; x < outWidth; ++x) {\n      const rawX = relX * x;\n      const tx = rawX % 1;\n\n      const xl = Math.floor(rawX);\n      const xh = Math.min(Math.ceil(rawX), (inWidth - 1));\n\n      for (let i = 0; i < samples; ++i) {\n        const ll = valueArray[(yl * inWidth * samples) + (xl * samples) + i];\n        const hl = valueArray[(yl * inWidth * samples) + (xh * samples) + i];\n        const lh = valueArray[(yh * inWidth * samples) + (xl * samples) + i];\n        const hh = valueArray[(yh * inWidth * samples) + (xh * samples) + i];\n\n        const value = lerp(\n          lerp(ll, hl, tx),\n          lerp(lh, hh, tx),\n          rawY % 1,\n        );\n        newArray[(y * outWidth * samples) + (x * samples) + i] = value;\n      }\n    }\n  }\n  return newArray;\n}\n\n/**\n * Resample the pixel interleaved input array using the selected resampling method.\n * @param {TypedArray} valueArray The input array to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {number} samples The number of samples per pixel for pixel\n *                                 interleaved data\n * @param {string} [method = 'nearest'] The desired resampling method\n * @returns {TypedArray} The resampled rasters\n */\nexport function resampleInterleaved(valueArray, inWidth, inHeight, outWidth, outHeight, samples, method = 'nearest') {\n  switch (method.toLowerCase()) {\n    case 'nearest':\n      return resampleNearestInterleaved(\n        valueArray, inWidth, inHeight, outWidth, outHeight, samples,\n      );\n    case 'bilinear':\n    case 'linear':\n      return resampleBilinearInterleaved(\n        valueArray, inWidth, inHeight, outWidth, outHeight, samples,\n      );\n    default:\n      throw new Error(`Unsupported resampling method: '${method}'`);\n  }\n}\n","/** @module geotiffimage */\nimport { getFloat16 } from '@petamoriken/float16';\nimport getAttribute from 'xml-utils/get-attribute.js';\nimport findTagsByName from 'xml-utils/find-tags-by-name.js';\n\nimport { photometricInterpretations, ExtraSamplesValues } from './globals.js';\nimport { fromWhiteIsZero, fromBlackIsZero, fromPalette, fromCMYK, fromYCbCr, fromCIELab } from './rgb.js';\nimport { getDecoder } from './compression/index.js';\nimport { resample, resampleInterleaved } from './resample.js';\n\n/**\n * @typedef {Object} ReadRasterOptions\n * @property {Array<number>} [window=whole window] the subset to read data from in pixels.\n * @property {Array<number>} [bbox=whole image] the subset to read data from in\n *                                           geographical coordinates.\n * @property {Array<number>} [samples=all samples] the selection of samples to read from. Default is all samples.\n * @property {boolean} [interleave=false] whether the data shall be read\n *                                             in one single array or separate\n *                                             arrays.\n * @property {Pool} [pool=null] The optional decoder pool to use.\n * @property {number} [width] The desired width of the output. When the width is not the\n *                                 same as the images, resampling will be performed.\n * @property {number} [height] The desired height of the output. When the width is not the\n *                                  same as the images, resampling will be performed.\n * @property {string} [resampleMethod='nearest'] The desired resampling method.\n * @property {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                                       to be aborted\n * @property {number|number[]} [fillValue] The value to use for parts of the image\n *                                              outside of the images extent. When multiple\n *                                              samples are requested, an array of fill values\n *                                              can be passed.\n */\n\n/** @typedef {import(\"./geotiff.js\").TypedArray} TypedArray */\n/** @typedef {import(\"./geotiff.js\").ReadRasterResult} ReadRasterResult */\n\nfunction sum(array, start, end) {\n  let s = 0;\n  for (let i = start; i < end; ++i) {\n    s += array[i];\n  }\n  return s;\n}\n\nfunction arrayForType(format, bitsPerSample, size) {\n  switch (format) {\n    case 1: // unsigned integer data\n      if (bitsPerSample <= 8) {\n        return new Uint8Array(size);\n      } else if (bitsPerSample <= 16) {\n        return new Uint16Array(size);\n      } else if (bitsPerSample <= 32) {\n        return new Uint32Array(size);\n      }\n      break;\n    case 2: // twos complement signed integer data\n      if (bitsPerSample === 8) {\n        return new Int8Array(size);\n      } else if (bitsPerSample === 16) {\n        return new Int16Array(size);\n      } else if (bitsPerSample === 32) {\n        return new Int32Array(size);\n      }\n      break;\n    case 3: // floating point data\n      switch (bitsPerSample) {\n        case 16:\n        case 32:\n          return new Float32Array(size);\n        case 64:\n          return new Float64Array(size);\n        default:\n          break;\n      }\n      break;\n    default:\n      break;\n  }\n  throw Error('Unsupported data format/bitsPerSample');\n}\n\nfunction needsNormalization(format, bitsPerSample) {\n  if ((format === 1 || format === 2) && bitsPerSample <= 32 && bitsPerSample % 8 === 0) {\n    return false;\n  } else if (format === 3 && (bitsPerSample === 16 || bitsPerSample === 32 || bitsPerSample === 64)) {\n    return false;\n  }\n  return true;\n}\n\nfunction normalizeArray(inBuffer, format, planarConfiguration, samplesPerPixel, bitsPerSample, tileWidth, tileHeight) {\n  // const inByteArray = new Uint8Array(inBuffer);\n  const view = new DataView(inBuffer);\n  const outSize = planarConfiguration === 2\n    ? tileHeight * tileWidth\n    : tileHeight * tileWidth * samplesPerPixel;\n  const samplesToTransfer = planarConfiguration === 2\n    ? 1 : samplesPerPixel;\n  const outArray = arrayForType(format, bitsPerSample, outSize);\n  // let pixel = 0;\n\n  const bitMask = parseInt('1'.repeat(bitsPerSample), 2);\n\n  if (format === 1) { // unsigned integer\n    // translation of https://github.com/OSGeo/gdal/blob/master/gdal/frmts/gtiff/geotiff.cpp#L7337\n    let pixelBitSkip;\n    // let sampleBitOffset = 0;\n    if (planarConfiguration === 1) {\n      pixelBitSkip = samplesPerPixel * bitsPerSample;\n      // sampleBitOffset = (samplesPerPixel - 1) * bitsPerSample;\n    } else {\n      pixelBitSkip = bitsPerSample;\n    }\n\n    // Bits per line rounds up to next byte boundary.\n    let bitsPerLine = tileWidth * pixelBitSkip;\n    if ((bitsPerLine & 7) !== 0) {\n      bitsPerLine = (bitsPerLine + 7) & (~7);\n    }\n\n    for (let y = 0; y < tileHeight; ++y) {\n      const lineBitOffset = y * bitsPerLine;\n      for (let x = 0; x < tileWidth; ++x) {\n        const pixelBitOffset = lineBitOffset + (x * samplesToTransfer * bitsPerSample);\n        for (let i = 0; i < samplesToTransfer; ++i) {\n          const bitOffset = pixelBitOffset + (i * bitsPerSample);\n          const outIndex = (((y * tileWidth) + x) * samplesToTransfer) + i;\n\n          const byteOffset = Math.floor(bitOffset / 8);\n          const innerBitOffset = bitOffset % 8;\n          if (innerBitOffset + bitsPerSample <= 8) {\n            outArray[outIndex] = (view.getUint8(byteOffset) >> (8 - bitsPerSample) - innerBitOffset) & bitMask;\n          } else if (innerBitOffset + bitsPerSample <= 16) {\n            outArray[outIndex] = (view.getUint16(byteOffset) >> (16 - bitsPerSample) - innerBitOffset) & bitMask;\n          } else if (innerBitOffset + bitsPerSample <= 24) {\n            const raw = (view.getUint16(byteOffset) << 8) | (view.getUint8(byteOffset + 2));\n            outArray[outIndex] = (raw >> (24 - bitsPerSample) - innerBitOffset) & bitMask;\n          } else {\n            outArray[outIndex] = (view.getUint32(byteOffset) >> (32 - bitsPerSample) - innerBitOffset) & bitMask;\n          }\n\n          // let outWord = 0;\n          // for (let bit = 0; bit < bitsPerSample; ++bit) {\n          //   if (inByteArray[bitOffset >> 3]\n          //     & (0x80 >> (bitOffset & 7))) {\n          //     outWord |= (1 << (bitsPerSample - 1 - bit));\n          //   }\n          //   ++bitOffset;\n          // }\n\n          // outArray[outIndex] = outWord;\n          // outArray[pixel] = outWord;\n          // pixel += 1;\n        }\n        // bitOffset = bitOffset + pixelBitSkip - bitsPerSample;\n      }\n    }\n  } else if (format === 3) { // floating point\n    // Float16 is handled elsewhere\n    // normalize 16/24 bit floats to 32 bit floats in the array\n    // console.time();\n    // if (bitsPerSample === 16) {\n    //   for (let byte = 0, outIndex = 0; byte < inBuffer.byteLength; byte += 2, ++outIndex) {\n    //     outArray[outIndex] = getFloat16(view, byte);\n    //   }\n    // }\n    // console.timeEnd()\n  }\n\n  return outArray.buffer;\n}\n\n/**\n * GeoTIFF sub-file image.\n */\nclass GeoTIFFImage {\n  /**\n   * @constructor\n   * @param {Object} fileDirectory The parsed file directory\n   * @param {Object} geoKeys The parsed geo-keys\n   * @param {DataView} dataView The DataView for the underlying file.\n   * @param {Boolean} littleEndian Whether the file is encoded in little or big endian\n   * @param {Boolean} cache Whether or not decoded tiles shall be cached\n   * @param {import('./source/basesource').BaseSource} source The datasource to read from\n   */\n  constructor(fileDirectory, geoKeys, dataView, littleEndian, cache, source) {\n    this.fileDirectory = fileDirectory;\n    this.geoKeys = geoKeys;\n    this.dataView = dataView;\n    this.littleEndian = littleEndian;\n    this.tiles = cache ? {} : null;\n    this.isTiled = !fileDirectory.StripOffsets;\n    const planarConfiguration = fileDirectory.PlanarConfiguration;\n    this.planarConfiguration = (typeof planarConfiguration === 'undefined') ? 1 : planarConfiguration;\n    if (this.planarConfiguration !== 1 && this.planarConfiguration !== 2) {\n      throw new Error('Invalid planar configuration.');\n    }\n\n    this.source = source;\n  }\n\n  /**\n   * Returns the associated parsed file directory.\n   * @returns {Object} the parsed file directory\n   */\n  getFileDirectory() {\n    return this.fileDirectory;\n  }\n\n  /**\n   * Returns the associated parsed geo keys.\n   * @returns {Object} the parsed geo keys\n   */\n  getGeoKeys() {\n    return this.geoKeys;\n  }\n\n  /**\n   * Returns the width of the image.\n   * @returns {Number} the width of the image\n   */\n  getWidth() {\n    return this.fileDirectory.ImageWidth;\n  }\n\n  /**\n   * Returns the height of the image.\n   * @returns {Number} the height of the image\n   */\n  getHeight() {\n    return this.fileDirectory.ImageLength;\n  }\n\n  /**\n   * Returns the number of samples per pixel.\n   * @returns {Number} the number of samples per pixel\n   */\n  getSamplesPerPixel() {\n    return typeof this.fileDirectory.SamplesPerPixel !== 'undefined'\n      ? this.fileDirectory.SamplesPerPixel : 1;\n  }\n\n  /**\n   * Returns the width of each tile.\n   * @returns {Number} the width of each tile\n   */\n  getTileWidth() {\n    return this.isTiled ? this.fileDirectory.TileWidth : this.getWidth();\n  }\n\n  /**\n   * Returns the height of each tile.\n   * @returns {Number} the height of each tile\n   */\n  getTileHeight() {\n    if (this.isTiled) {\n      return this.fileDirectory.TileLength;\n    }\n    if (typeof this.fileDirectory.RowsPerStrip !== 'undefined') {\n      return Math.min(this.fileDirectory.RowsPerStrip, this.getHeight());\n    }\n    return this.getHeight();\n  }\n\n  getBlockWidth() {\n    return this.getTileWidth();\n  }\n\n  getBlockHeight(y) {\n    if (this.isTiled || (y + 1) * this.getTileHeight() <= this.getHeight()) {\n      return this.getTileHeight();\n    } else {\n      return this.getHeight() - (y * this.getTileHeight());\n    }\n  }\n\n  /**\n   * Calculates the number of bytes for each pixel across all samples. Only full\n   * bytes are supported, an exception is thrown when this is not the case.\n   * @returns {Number} the bytes per pixel\n   */\n  getBytesPerPixel() {\n    let bytes = 0;\n    for (let i = 0; i < this.fileDirectory.BitsPerSample.length; ++i) {\n      bytes += this.getSampleByteSize(i);\n    }\n    return bytes;\n  }\n\n  getSampleByteSize(i) {\n    if (i >= this.fileDirectory.BitsPerSample.length) {\n      throw new RangeError(`Sample index ${i} is out of range.`);\n    }\n    return Math.ceil(this.fileDirectory.BitsPerSample[i] / 8);\n  }\n\n  getReaderForSample(sampleIndex) {\n    const format = this.fileDirectory.SampleFormat\n      ? this.fileDirectory.SampleFormat[sampleIndex] : 1;\n    const bitsPerSample = this.fileDirectory.BitsPerSample[sampleIndex];\n    switch (format) {\n      case 1: // unsigned integer data\n        if (bitsPerSample <= 8) {\n          return DataView.prototype.getUint8;\n        } else if (bitsPerSample <= 16) {\n          return DataView.prototype.getUint16;\n        } else if (bitsPerSample <= 32) {\n          return DataView.prototype.getUint32;\n        }\n        break;\n      case 2: // twos complement signed integer data\n        if (bitsPerSample <= 8) {\n          return DataView.prototype.getInt8;\n        } else if (bitsPerSample <= 16) {\n          return DataView.prototype.getInt16;\n        } else if (bitsPerSample <= 32) {\n          return DataView.prototype.getInt32;\n        }\n        break;\n      case 3:\n        switch (bitsPerSample) {\n          case 16:\n            return function (offset, littleEndian) {\n              return getFloat16(this, offset, littleEndian);\n            };\n          case 32:\n            return DataView.prototype.getFloat32;\n          case 64:\n            return DataView.prototype.getFloat64;\n          default:\n            break;\n        }\n        break;\n      default:\n        break;\n    }\n    throw Error('Unsupported data format/bitsPerSample');\n  }\n\n  getSampleFormat(sampleIndex = 0) {\n    return this.fileDirectory.SampleFormat\n      ? this.fileDirectory.SampleFormat[sampleIndex] : 1;\n  }\n\n  getBitsPerSample(sampleIndex = 0) {\n    return this.fileDirectory.BitsPerSample[sampleIndex];\n  }\n\n  getArrayForSample(sampleIndex, size) {\n    const format = this.getSampleFormat(sampleIndex);\n    const bitsPerSample = this.getBitsPerSample(sampleIndex);\n    return arrayForType(format, bitsPerSample, size);\n  }\n\n  /**\n   * Returns the decoded strip or tile.\n   * @param {Number} x the strip or tile x-offset\n   * @param {Number} y the tile y-offset (0 for stripped images)\n   * @param {Number} sample the sample to get for separated samples\n   * @param {import(\"./geotiff\").Pool|import(\"./geotiff\").BaseDecoder} poolOrDecoder the decoder or decoder pool\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   * @returns {Promise.<ArrayBuffer>}\n   */\n  async getTileOrStrip(x, y, sample, poolOrDecoder, signal) {\n    const numTilesPerRow = Math.ceil(this.getWidth() / this.getTileWidth());\n    const numTilesPerCol = Math.ceil(this.getHeight() / this.getTileHeight());\n    let index;\n    const { tiles } = this;\n    if (this.planarConfiguration === 1) {\n      index = (y * numTilesPerRow) + x;\n    } else if (this.planarConfiguration === 2) {\n      index = (sample * numTilesPerRow * numTilesPerCol) + (y * numTilesPerRow) + x;\n    }\n\n    let offset;\n    let byteCount;\n    if (this.isTiled) {\n      offset = this.fileDirectory.TileOffsets[index];\n      byteCount = this.fileDirectory.TileByteCounts[index];\n    } else {\n      offset = this.fileDirectory.StripOffsets[index];\n      byteCount = this.fileDirectory.StripByteCounts[index];\n    }\n    const slice = (await this.source.fetch([{ offset, length: byteCount }], signal))[0];\n\n    let request;\n    if (tiles === null || !tiles[index]) {\n    // resolve each request by potentially applying array normalization\n      request = (async () => {\n        let data = await poolOrDecoder.decode(this.fileDirectory, slice);\n        const sampleFormat = this.getSampleFormat();\n        const bitsPerSample = this.getBitsPerSample();\n        if (needsNormalization(sampleFormat, bitsPerSample)) {\n          data = normalizeArray(\n            data,\n            sampleFormat,\n            this.planarConfiguration,\n            this.getSamplesPerPixel(),\n            bitsPerSample,\n            this.getTileWidth(),\n            this.getBlockHeight(y),\n          );\n        }\n        return data;\n      })();\n\n      // set the cache\n      if (tiles !== null) {\n        tiles[index] = request;\n      }\n    } else {\n      // get from the cache\n      request = tiles[index];\n    }\n\n    // cache the tile request\n    return { x, y, sample, data: await request };\n  }\n\n  /**\n   * Internal read function.\n   * @private\n   * @param {Array} imageWindow The image window in pixel coordinates\n   * @param {Array} samples The selected samples (0-based indices)\n   * @param {TypedArray|TypedArray[]} valueArrays The array(s) to write into\n   * @param {Boolean} interleave Whether or not to write in an interleaved manner\n   * @param {import(\"./geotiff\").Pool|AbstractDecoder} poolOrDecoder the decoder or decoder pool\n   * @param {number} width the width of window to be read into\n   * @param {number} height the height of window to be read into\n   * @param {number} resampleMethod the resampling method to be used when interpolating\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   * @returns {Promise<ReadRasterResult>}\n   */\n  async _readRaster(imageWindow, samples, valueArrays, interleave, poolOrDecoder, width,\n    height, resampleMethod, signal) {\n    const tileWidth = this.getTileWidth();\n    const tileHeight = this.getTileHeight();\n    const imageWidth = this.getWidth();\n    const imageHeight = this.getHeight();\n\n    const minXTile = Math.max(Math.floor(imageWindow[0] / tileWidth), 0);\n    const maxXTile = Math.min(\n      Math.ceil(imageWindow[2] / tileWidth),\n      Math.ceil(imageWidth / tileWidth),\n    );\n    const minYTile = Math.max(Math.floor(imageWindow[1] / tileHeight), 0);\n    const maxYTile = Math.min(\n      Math.ceil(imageWindow[3] / tileHeight),\n      Math.ceil(imageHeight / tileHeight),\n    );\n    const windowWidth = imageWindow[2] - imageWindow[0];\n\n    let bytesPerPixel = this.getBytesPerPixel();\n\n    const srcSampleOffsets = [];\n    const sampleReaders = [];\n    for (let i = 0; i < samples.length; ++i) {\n      if (this.planarConfiguration === 1) {\n        srcSampleOffsets.push(sum(this.fileDirectory.BitsPerSample, 0, samples[i]) / 8);\n      } else {\n        srcSampleOffsets.push(0);\n      }\n      sampleReaders.push(this.getReaderForSample(samples[i]));\n    }\n\n    const promises = [];\n    const { littleEndian } = this;\n\n    for (let yTile = minYTile; yTile < maxYTile; ++yTile) {\n      for (let xTile = minXTile; xTile < maxXTile; ++xTile) {\n        let getPromise;\n        if (this.planarConfiguration === 1) {\n          getPromise = this.getTileOrStrip(xTile, yTile, 0, poolOrDecoder, signal);\n        }\n        for (let sampleIndex = 0; sampleIndex < samples.length; ++sampleIndex) {\n          const si = sampleIndex;\n          const sample = samples[sampleIndex];\n          if (this.planarConfiguration === 2) {\n            bytesPerPixel = this.getSampleByteSize(sample);\n            getPromise = this.getTileOrStrip(xTile, yTile, sample, poolOrDecoder, signal);\n          }\n          const promise = getPromise.then((tile) => {\n            const buffer = tile.data;\n            const dataView = new DataView(buffer);\n            const blockHeight = this.getBlockHeight(tile.y);\n            const firstLine = tile.y * tileHeight;\n            const firstCol = tile.x * tileWidth;\n            const lastLine = firstLine + blockHeight;\n            const lastCol = (tile.x + 1) * tileWidth;\n            const reader = sampleReaders[si];\n\n            const ymax = Math.min(blockHeight, blockHeight - (lastLine - imageWindow[3]), imageHeight - firstLine);\n            const xmax = Math.min(tileWidth, tileWidth - (lastCol - imageWindow[2]), imageWidth - firstCol);\n\n            for (let y = Math.max(0, imageWindow[1] - firstLine); y < ymax; ++y) {\n              for (let x = Math.max(0, imageWindow[0] - firstCol); x < xmax; ++x) {\n                const pixelOffset = ((y * tileWidth) + x) * bytesPerPixel;\n                const value = reader.call(\n                  dataView, pixelOffset + srcSampleOffsets[si], littleEndian,\n                );\n                let windowCoordinate;\n                if (interleave) {\n                  windowCoordinate = ((y + firstLine - imageWindow[1]) * windowWidth * samples.length)\n                    + ((x + firstCol - imageWindow[0]) * samples.length)\n                    + si;\n                  valueArrays[windowCoordinate] = value;\n                } else {\n                  windowCoordinate = (\n                    (y + firstLine - imageWindow[1]) * windowWidth\n                  ) + x + firstCol - imageWindow[0];\n                  valueArrays[si][windowCoordinate] = value;\n                }\n              }\n            }\n          });\n          promises.push(promise);\n        }\n      }\n    }\n    await Promise.all(promises);\n\n    if ((width && (imageWindow[2] - imageWindow[0]) !== width)\n        || (height && (imageWindow[3] - imageWindow[1]) !== height)) {\n      let resampled;\n      if (interleave) {\n        resampled = resampleInterleaved(\n          valueArrays,\n          imageWindow[2] - imageWindow[0],\n          imageWindow[3] - imageWindow[1],\n          width, height,\n          samples.length,\n          resampleMethod,\n        );\n      } else {\n        resampled = resample(\n          valueArrays,\n          imageWindow[2] - imageWindow[0],\n          imageWindow[3] - imageWindow[1],\n          width, height,\n          resampleMethod,\n        );\n      }\n      resampled.width = width;\n      resampled.height = height;\n      return resampled;\n    }\n\n    valueArrays.width = width || imageWindow[2] - imageWindow[0];\n    valueArrays.height = height || imageWindow[3] - imageWindow[1];\n\n    return valueArrays;\n  }\n\n  /**\n   * Reads raster data from the image. This function reads all selected samples\n   * into separate arrays of the correct type for that sample or into a single\n   * combined array when `interleave` is set. When provided, only a subset\n   * of the raster is read for each sample.\n   *\n   * @param {ReadRasterOptions} [options={}] optional parameters\n   * @returns {Promise<ReadRasterResult>} the decoded arrays as a promise\n   */\n  async readRasters({\n    window: wnd, samples = [], interleave, pool = null,\n    width, height, resampleMethod, fillValue, signal,\n  } = {}) {\n    const imageWindow = wnd || [0, 0, this.getWidth(), this.getHeight()];\n\n    // check parameters\n    if (imageWindow[0] > imageWindow[2] || imageWindow[1] > imageWindow[3]) {\n      throw new Error('Invalid subsets');\n    }\n\n    const imageWindowWidth = imageWindow[2] - imageWindow[0];\n    const imageWindowHeight = imageWindow[3] - imageWindow[1];\n    const numPixels = imageWindowWidth * imageWindowHeight;\n    const samplesPerPixel = this.getSamplesPerPixel();\n\n    if (!samples || !samples.length) {\n      for (let i = 0; i < samplesPerPixel; ++i) {\n        samples.push(i);\n      }\n    } else {\n      for (let i = 0; i < samples.length; ++i) {\n        if (samples[i] >= samplesPerPixel) {\n          return Promise.reject(new RangeError(`Invalid sample index '${samples[i]}'.`));\n        }\n      }\n    }\n    let valueArrays;\n    if (interleave) {\n      const format = this.fileDirectory.SampleFormat\n        ? Math.max.apply(null, this.fileDirectory.SampleFormat) : 1;\n      const bitsPerSample = Math.max.apply(null, this.fileDirectory.BitsPerSample);\n      valueArrays = arrayForType(format, bitsPerSample, numPixels * samples.length);\n      if (fillValue) {\n        valueArrays.fill(fillValue);\n      }\n    } else {\n      valueArrays = [];\n      for (let i = 0; i < samples.length; ++i) {\n        const valueArray = this.getArrayForSample(samples[i], numPixels);\n        if (Array.isArray(fillValue) && i < fillValue.length) {\n          valueArray.fill(fillValue[i]);\n        } else if (fillValue && !Array.isArray(fillValue)) {\n          valueArray.fill(fillValue);\n        }\n        valueArrays.push(valueArray);\n      }\n    }\n\n    const poolOrDecoder = pool || await getDecoder(this.fileDirectory);\n\n    const result = await this._readRaster(\n      imageWindow, samples, valueArrays, interleave, poolOrDecoder, width, height, resampleMethod, signal,\n    );\n    return result;\n  }\n\n  /**\n   * Reads raster data from the image as RGB. The result is always an\n   * interleaved typed array.\n   * Colorspaces other than RGB will be transformed to RGB, color maps expanded.\n   * When no other method is applicable, the first sample is used to produce a\n   * grayscale image.\n   * When provided, only a subset of the raster is read for each sample.\n   *\n   * @param {Object} [options] optional parameters\n   * @param {Array<number>} [options.window] the subset to read data from in pixels.\n   * @param {boolean} [options.interleave=true] whether the data shall be read\n   *                                             in one single array or separate\n   *                                             arrays.\n   * @param {import(\"./geotiff\").Pool} [options.pool=null] The optional decoder pool to use.\n   * @param {number} [options.width] The desired width of the output. When the width is no the\n   *                                 same as the images, resampling will be performed.\n   * @param {number} [options.height] The desired height of the output. When the width is no the\n   *                                  same as the images, resampling will be performed.\n   * @param {string} [options.resampleMethod='nearest'] The desired resampling method.\n   * @param {boolean} [options.enableAlpha=false] Enable reading alpha channel if present.\n   * @param {AbortSignal} [options.signal] An AbortSignal that may be signalled if the request is\n   *                                       to be aborted\n   * @returns {Promise<ReadRasterResult>} the RGB array as a Promise\n   */\n  async readRGB({ window, interleave = true, pool = null, width, height,\n    resampleMethod, enableAlpha = false, signal } = {}) {\n    const imageWindow = window || [0, 0, this.getWidth(), this.getHeight()];\n\n    // check parameters\n    if (imageWindow[0] > imageWindow[2] || imageWindow[1] > imageWindow[3]) {\n      throw new Error('Invalid subsets');\n    }\n\n    const pi = this.fileDirectory.PhotometricInterpretation;\n\n    if (pi === photometricInterpretations.RGB) {\n      let s = [0, 1, 2];\n      if ((!(this.fileDirectory.ExtraSamples === ExtraSamplesValues.Unspecified)) && enableAlpha) {\n        s = [];\n        for (let i = 0; i < this.fileDirectory.BitsPerSample.length; i += 1) {\n          s.push(i);\n        }\n      }\n      return this.readRasters({\n        window,\n        interleave,\n        samples: s,\n        pool,\n        width,\n        height,\n        resampleMethod,\n        signal,\n      });\n    }\n\n    let samples;\n    switch (pi) {\n      case photometricInterpretations.WhiteIsZero:\n      case photometricInterpretations.BlackIsZero:\n      case photometricInterpretations.Palette:\n        samples = [0];\n        break;\n      case photometricInterpretations.CMYK:\n        samples = [0, 1, 2, 3];\n        break;\n      case photometricInterpretations.YCbCr:\n      case photometricInterpretations.CIELab:\n        samples = [0, 1, 2];\n        break;\n      default:\n        throw new Error('Invalid or unsupported photometric interpretation.');\n    }\n\n    const subOptions = {\n      window: imageWindow,\n      interleave: true,\n      samples,\n      pool,\n      width,\n      height,\n      resampleMethod,\n      signal,\n    };\n    const { fileDirectory } = this;\n    const raster = await this.readRasters(subOptions);\n\n    const max = 2 ** this.fileDirectory.BitsPerSample[0];\n    let data;\n    switch (pi) {\n      case photometricInterpretations.WhiteIsZero:\n        data = fromWhiteIsZero(raster, max);\n        break;\n      case photometricInterpretations.BlackIsZero:\n        data = fromBlackIsZero(raster, max);\n        break;\n      case photometricInterpretations.Palette:\n        data = fromPalette(raster, fileDirectory.ColorMap);\n        break;\n      case photometricInterpretations.CMYK:\n        data = fromCMYK(raster);\n        break;\n      case photometricInterpretations.YCbCr:\n        data = fromYCbCr(raster);\n        break;\n      case photometricInterpretations.CIELab:\n        data = fromCIELab(raster);\n        break;\n      default:\n        throw new Error('Unsupported photometric interpretation.');\n    }\n\n    // if non-interleaved data is requested, we must split the channels\n    // into their respective arrays\n    if (!interleave) {\n      const red = new Uint8Array(data.length / 3);\n      const green = new Uint8Array(data.length / 3);\n      const blue = new Uint8Array(data.length / 3);\n      for (let i = 0, j = 0; i < data.length; i += 3, ++j) {\n        red[j] = data[i];\n        green[j] = data[i + 1];\n        blue[j] = data[i + 2];\n      }\n      data = [red, green, blue];\n    }\n\n    data.width = raster.width;\n    data.height = raster.height;\n    return data;\n  }\n\n  /**\n   * Returns an array of tiepoints.\n   * @returns {Object[]}\n   */\n  getTiePoints() {\n    if (!this.fileDirectory.ModelTiepoint) {\n      return [];\n    }\n\n    const tiePoints = [];\n    for (let i = 0; i < this.fileDirectory.ModelTiepoint.length; i += 6) {\n      tiePoints.push({\n        i: this.fileDirectory.ModelTiepoint[i],\n        j: this.fileDirectory.ModelTiepoint[i + 1],\n        k: this.fileDirectory.ModelTiepoint[i + 2],\n        x: this.fileDirectory.ModelTiepoint[i + 3],\n        y: this.fileDirectory.ModelTiepoint[i + 4],\n        z: this.fileDirectory.ModelTiepoint[i + 5],\n      });\n    }\n    return tiePoints;\n  }\n\n  /**\n   * Returns the parsed GDAL metadata items.\n   *\n   * If sample is passed to null, dataset-level metadata will be returned.\n   * Otherwise only metadata specific to the provided sample will be returned.\n   *\n   * @param {number} [sample=null] The sample index.\n   * @returns {Object}\n   */\n  getGDALMetadata(sample = null) {\n    const metadata = {};\n    if (!this.fileDirectory.GDAL_METADATA) {\n      return null;\n    }\n    const string = this.fileDirectory.GDAL_METADATA;\n\n    let items = findTagsByName(string, 'Item');\n\n    if (sample === null) {\n      items = items.filter((item) => getAttribute(item, 'sample') === undefined);\n    } else {\n      items = items.filter((item) => Number(getAttribute(item, 'sample')) === sample);\n    }\n\n    for (let i = 0; i < items.length; ++i) {\n      const item = items[i];\n      metadata[getAttribute(item, 'name')] = item.inner;\n    }\n    return metadata;\n  }\n\n  /**\n   * Returns the GDAL nodata value\n   * @returns {number|null}\n   */\n  getGDALNoData() {\n    if (!this.fileDirectory.GDAL_NODATA) {\n      return null;\n    }\n    const string = this.fileDirectory.GDAL_NODATA;\n    return Number(string.substring(0, string.length - 1));\n  }\n\n  /**\n   * Returns the image origin as a XYZ-vector. When the image has no affine\n   * transformation, then an exception is thrown.\n   * @returns {Array<number>} The origin as a vector\n   */\n  getOrigin() {\n    const tiePoints = this.fileDirectory.ModelTiepoint;\n    const modelTransformation = this.fileDirectory.ModelTransformation;\n    if (tiePoints && tiePoints.length === 6) {\n      return [\n        tiePoints[3],\n        tiePoints[4],\n        tiePoints[5],\n      ];\n    }\n    if (modelTransformation) {\n      return [\n        modelTransformation[3],\n        modelTransformation[7],\n        modelTransformation[11],\n      ];\n    }\n    throw new Error('The image does not have an affine transformation.');\n  }\n\n  /**\n   * Returns the image resolution as a XYZ-vector. When the image has no affine\n   * transformation, then an exception is thrown.\n   * @param {GeoTIFFImage} [referenceImage=null] A reference image to calculate the resolution from\n   *                                             in cases when the current image does not have the\n   *                                             required tags on its own.\n   * @returns {Array<number>} The resolution as a vector\n   */\n  getResolution(referenceImage = null) {\n    const modelPixelScale = this.fileDirectory.ModelPixelScale;\n    const modelTransformation = this.fileDirectory.ModelTransformation;\n\n    if (modelPixelScale) {\n      return [\n        modelPixelScale[0],\n        -modelPixelScale[1],\n        modelPixelScale[2],\n      ];\n    }\n    if (modelTransformation) {\n      if (modelTransformation[1] === 0 && modelTransformation[4] === 0) {\n        return [\n          modelTransformation[0],\n          -modelTransformation[5],\n          modelTransformation[10],\n        ];\n      }\n      return [\n        Math.sqrt((modelTransformation[0] * modelTransformation[0])\n          + (modelTransformation[4] * modelTransformation[4])),\n        -Math.sqrt((modelTransformation[1] * modelTransformation[1])\n          + (modelTransformation[5] * modelTransformation[5])),\n        modelTransformation[10]];\n    }\n\n    if (referenceImage) {\n      const [refResX, refResY, refResZ] = referenceImage.getResolution();\n      return [\n        refResX * referenceImage.getWidth() / this.getWidth(),\n        refResY * referenceImage.getHeight() / this.getHeight(),\n        refResZ * referenceImage.getWidth() / this.getWidth(),\n      ];\n    }\n\n    throw new Error('The image does not have an affine transformation.');\n  }\n\n  /**\n   * Returns whether or not the pixels of the image depict an area (or point).\n   * @returns {Boolean} Whether the pixels are a point\n   */\n  pixelIsArea() {\n    return this.geoKeys.GTRasterTypeGeoKey === 1;\n  }\n\n  /**\n   * Returns the image bounding box as an array of 4 values: min-x, min-y,\n   * max-x and max-y. When the image has no affine transformation, then an\n   * exception is thrown.\n   * @param {boolean} [tilegrid=false] If true return extent for a tilegrid\n   *                                   without adjustment for ModelTransformation.\n   * @returns {Array<number>} The bounding box\n   */\n  getBoundingBox(tilegrid = false) {\n    const height = this.getHeight();\n    const width = this.getWidth();\n\n    if (this.fileDirectory.ModelTransformation && !tilegrid) {\n      // eslint-disable-next-line no-unused-vars\n      const [a, b, c, d, e, f, g, h] = this.fileDirectory.ModelTransformation;\n\n      const corners = [\n        [0, 0],\n        [0, height],\n        [width, 0],\n        [width, height],\n      ];\n\n      const projected = corners.map(([I, J]) => [\n        d + (a * I) + (b * J),\n        h + (e * I) + (f * J),\n      ]);\n\n      const xs = projected.map((pt) => pt[0]);\n      const ys = projected.map((pt) => pt[1]);\n\n      return [\n        Math.min(...xs),\n        Math.min(...ys),\n        Math.max(...xs),\n        Math.max(...ys),\n      ];\n    } else {\n      const origin = this.getOrigin();\n      const resolution = this.getResolution();\n\n      const x1 = origin[0];\n      const y1 = origin[1];\n\n      const x2 = x1 + (resolution[0] * width);\n      const y2 = y1 + (resolution[1] * height);\n\n      return [\n        Math.min(x1, x2),\n        Math.min(y1, y2),\n        Math.max(x1, x2),\n        Math.max(y1, y2),\n      ];\n    }\n  }\n}\n\nexport default GeoTIFFImage;\n","export const fieldTagNames = {\n  // TIFF Baseline\n  0x013B: 'Artist',\n  0x0102: 'BitsPerSample',\n  0x0109: 'CellLength',\n  0x0108: 'CellWidth',\n  0x0140: 'ColorMap',\n  0x0103: 'Compression',\n  0x8298: 'Copyright',\n  0x0132: 'DateTime',\n  0x0152: 'ExtraSamples',\n  0x010A: 'FillOrder',\n  0x0121: 'FreeByteCounts',\n  0x0120: 'FreeOffsets',\n  0x0123: 'GrayResponseCurve',\n  0x0122: 'GrayResponseUnit',\n  0x013C: 'HostComputer',\n  0x010E: 'ImageDescription',\n  0x0101: 'ImageLength',\n  0x0100: 'ImageWidth',\n  0x010F: 'Make',\n  0x0119: 'MaxSampleValue',\n  0x0118: 'MinSampleValue',\n  0x0110: 'Model',\n  0x00FE: 'NewSubfileType',\n  0x0112: 'Orientation',\n  0x0106: 'PhotometricInterpretation',\n  0x011C: 'PlanarConfiguration',\n  0x0128: 'ResolutionUnit',\n  0x0116: 'RowsPerStrip',\n  0x0115: 'SamplesPerPixel',\n  0x0131: 'Software',\n  0x0117: 'StripByteCounts',\n  0x0111: 'StripOffsets',\n  0x00FF: 'SubfileType',\n  0x0107: 'Threshholding',\n  0x011A: 'XResolution',\n  0x011B: 'YResolution',\n\n  // TIFF Extended\n  0x0146: 'BadFaxLines',\n  0x0147: 'CleanFaxData',\n  0x0157: 'ClipPath',\n  0x0148: 'ConsecutiveBadFaxLines',\n  0x01B1: 'Decode',\n  0x01B2: 'DefaultImageColor',\n  0x010D: 'DocumentName',\n  0x0150: 'DotRange',\n  0x0141: 'HalftoneHints',\n  0x015A: 'Indexed',\n  0x015B: 'JPEGTables',\n  0x011D: 'PageName',\n  0x0129: 'PageNumber',\n  0x013D: 'Predictor',\n  0x013F: 'PrimaryChromaticities',\n  0x0214: 'ReferenceBlackWhite',\n  0x0153: 'SampleFormat',\n  0x0154: 'SMinSampleValue',\n  0x0155: 'SMaxSampleValue',\n  0x022F: 'StripRowCounts',\n  0x014A: 'SubIFDs',\n  0x0124: 'T4Options',\n  0x0125: 'T6Options',\n  0x0145: 'TileByteCounts',\n  0x0143: 'TileLength',\n  0x0144: 'TileOffsets',\n  0x0142: 'TileWidth',\n  0x012D: 'TransferFunction',\n  0x013E: 'WhitePoint',\n  0x0158: 'XClipPathUnits',\n  0x011E: 'XPosition',\n  0x0211: 'YCbCrCoefficients',\n  0x0213: 'YCbCrPositioning',\n  0x0212: 'YCbCrSubSampling',\n  0x0159: 'YClipPathUnits',\n  0x011F: 'YPosition',\n\n  // EXIF\n  0x9202: 'ApertureValue',\n  0xA001: 'ColorSpace',\n  0x9004: 'DateTimeDigitized',\n  0x9003: 'DateTimeOriginal',\n  0x8769: 'Exif IFD',\n  0x9000: 'ExifVersion',\n  0x829A: 'ExposureTime',\n  0xA300: 'FileSource',\n  0x9209: 'Flash',\n  0xA000: 'FlashpixVersion',\n  0x829D: 'FNumber',\n  0xA420: 'ImageUniqueID',\n  0x9208: 'LightSource',\n  0x927C: 'MakerNote',\n  0x9201: 'ShutterSpeedValue',\n  0x9286: 'UserComment',\n\n  // IPTC\n  0x83BB: 'IPTC',\n\n  // ICC\n  0x8773: 'ICC Profile',\n\n  // XMP\n  0x02BC: 'XMP',\n\n  // GDAL\n  0xA480: 'GDAL_METADATA',\n  0xA481: 'GDAL_NODATA',\n\n  // Photoshop\n  0x8649: 'Photoshop',\n\n  // GeoTiff\n  0x830E: 'ModelPixelScale',\n  0x8482: 'ModelTiepoint',\n  0x85D8: 'ModelTransformation',\n  0x87AF: 'GeoKeyDirectory',\n  0x87B0: 'GeoDoubleParams',\n  0x87B1: 'GeoAsciiParams',\n\n  // LERC\n  0xC5F2: 'LercParameters',\n};\n\nexport const fieldTags = {};\nfor (const key in fieldTagNames) {\n  if (fieldTagNames.hasOwnProperty(key)) {\n    fieldTags[fieldTagNames[key]] = parseInt(key, 10);\n  }\n}\n\nexport const fieldTagTypes = {\n  256: 'SHORT',\n  257: 'SHORT',\n  258: 'SHORT',\n  259: 'SHORT',\n  262: 'SHORT',\n  273: 'LONG',\n  274: 'SHORT',\n  277: 'SHORT',\n  278: 'LONG',\n  279: 'LONG',\n  282: 'RATIONAL',\n  283: 'RATIONAL',\n  284: 'SHORT',\n  286: 'SHORT',\n  287: 'RATIONAL',\n  296: 'SHORT',\n  297: 'SHORT',\n  305: 'ASCII',\n  306: 'ASCII',\n  338: 'SHORT',\n  339: 'SHORT',\n  513: 'LONG',\n  514: 'LONG',\n  1024: 'SHORT',\n  1025: 'SHORT',\n  2048: 'SHORT',\n  2049: 'ASCII',\n  3072: 'SHORT',\n  3073: 'ASCII',\n  33550: 'DOUBLE',\n  33922: 'DOUBLE',\n  34264: 'DOUBLE',\n  34665: 'LONG',\n  34735: 'SHORT',\n  34736: 'DOUBLE',\n  34737: 'ASCII',\n  42113: 'ASCII',\n};\n\nexport const arrayFields = [\n  fieldTags.BitsPerSample,\n  fieldTags.ExtraSamples,\n  fieldTags.SampleFormat,\n  fieldTags.StripByteCounts,\n  fieldTags.StripOffsets,\n  fieldTags.StripRowCounts,\n  fieldTags.TileByteCounts,\n  fieldTags.TileOffsets,\n  fieldTags.SubIFDs,\n];\n\nexport const fieldTypeNames = {\n  0x0001: 'BYTE',\n  0x0002: 'ASCII',\n  0x0003: 'SHORT',\n  0x0004: 'LONG',\n  0x0005: 'RATIONAL',\n  0x0006: 'SBYTE',\n  0x0007: 'UNDEFINED',\n  0x0008: 'SSHORT',\n  0x0009: 'SLONG',\n  0x000A: 'SRATIONAL',\n  0x000B: 'FLOAT',\n  0x000C: 'DOUBLE',\n  // IFD offset, suggested by https://owl.phy.queensu.ca/~phil/exiftool/standards.html\n  0x000D: 'IFD',\n  // introduced by BigTIFF\n  0x0010: 'LONG8',\n  0x0011: 'SLONG8',\n  0x0012: 'IFD8',\n};\n\nexport const fieldTypes = {};\nfor (const key in fieldTypeNames) {\n  if (fieldTypeNames.hasOwnProperty(key)) {\n    fieldTypes[fieldTypeNames[key]] = parseInt(key, 10);\n  }\n}\n\nexport const photometricInterpretations = {\n  WhiteIsZero: 0,\n  BlackIsZero: 1,\n  RGB: 2,\n  Palette: 3,\n  TransparencyMask: 4,\n  CMYK: 5,\n  YCbCr: 6,\n\n  CIELab: 8,\n  ICCLab: 9,\n};\n\nexport const ExtraSamplesValues = {\n  Unspecified: 0,\n  Assocalpha: 1,\n  Unassalpha: 2,\n};\n\nexport const LercParameters = {\n  Version: 0,\n  AddCompression: 1,\n};\n\nexport const LercAddCompression = {\n  None: 0,\n  Deflate: 1,\n  Zstandard: 2,\n};\n\nexport const geoKeyNames = {\n  1024: 'GTModelTypeGeoKey',\n  1025: 'GTRasterTypeGeoKey',\n  1026: 'GTCitationGeoKey',\n  2048: 'GeographicTypeGeoKey',\n  2049: 'GeogCitationGeoKey',\n  2050: 'GeogGeodeticDatumGeoKey',\n  2051: 'GeogPrimeMeridianGeoKey',\n  2052: 'GeogLinearUnitsGeoKey',\n  2053: 'GeogLinearUnitSizeGeoKey',\n  2054: 'GeogAngularUnitsGeoKey',\n  2055: 'GeogAngularUnitSizeGeoKey',\n  2056: 'GeogEllipsoidGeoKey',\n  2057: 'GeogSemiMajorAxisGeoKey',\n  2058: 'GeogSemiMinorAxisGeoKey',\n  2059: 'GeogInvFlatteningGeoKey',\n  2060: 'GeogAzimuthUnitsGeoKey',\n  2061: 'GeogPrimeMeridianLongGeoKey',\n  2062: 'GeogTOWGS84GeoKey',\n  3072: 'ProjectedCSTypeGeoKey',\n  3073: 'PCSCitationGeoKey',\n  3074: 'ProjectionGeoKey',\n  3075: 'ProjCoordTransGeoKey',\n  3076: 'ProjLinearUnitsGeoKey',\n  3077: 'ProjLinearUnitSizeGeoKey',\n  3078: 'ProjStdParallel1GeoKey',\n  3079: 'ProjStdParallel2GeoKey',\n  3080: 'ProjNatOriginLongGeoKey',\n  3081: 'ProjNatOriginLatGeoKey',\n  3082: 'ProjFalseEastingGeoKey',\n  3083: 'ProjFalseNorthingGeoKey',\n  3084: 'ProjFalseOriginLongGeoKey',\n  3085: 'ProjFalseOriginLatGeoKey',\n  3086: 'ProjFalseOriginEastingGeoKey',\n  3087: 'ProjFalseOriginNorthingGeoKey',\n  3088: 'ProjCenterLongGeoKey',\n  3089: 'ProjCenterLatGeoKey',\n  3090: 'ProjCenterEastingGeoKey',\n  3091: 'ProjCenterNorthingGeoKey',\n  3092: 'ProjScaleAtNatOriginGeoKey',\n  3093: 'ProjScaleAtCenterGeoKey',\n  3094: 'ProjAzimuthAngleGeoKey',\n  3095: 'ProjStraightVertPoleLongGeoKey',\n  3096: 'ProjRectifiedGridAngleGeoKey',\n  4096: 'VerticalCSTypeGeoKey',\n  4097: 'VerticalCitationGeoKey',\n  4098: 'VerticalDatumGeoKey',\n  4099: 'VerticalUnitsGeoKey',\n};\n\nexport const geoKeys = {};\nfor (const key in geoKeyNames) {\n  if (geoKeyNames.hasOwnProperty(key)) {\n    geoKeys[geoKeyNames[key]] = parseInt(key, 10);\n  }\n}\n"],"names":["undefined","$Object","$Error","$EvalError","$RangeError","$ReferenceError","$SyntaxError","$TypeError","$URIError","abs","floor","max","min","pow","$Function","Function","getEvalledConstructor","expressionSyntax","e","$gOPD","$defineProperty","throwTypeError","ThrowTypeError","calleeThrows","arguments","get","gOPDthrows","hasSymbols","getDunderProto","getProto","Reflect","getPrototypeOf","$apply","$call","needsEval","TypedArray","Uint8Array","INTRINSICS","__proto__","AggregateError","Array","ArrayBuffer","Symbol","iterator","Atomics","BigInt","BigInt64Array","BigUint64Array","Boolean","DataView","Date","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","eval","Float32Array","Float64Array","FinalizationRegistry","Int8Array","Int16Array","Int32Array","isFinite","isNaN","JSON","Map","Math","Number","parseFloat","parseInt","Promise","Proxy","RegExp","Set","SharedArrayBuffer","String","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","WeakRef","WeakSet","error","errorProto","doEval","name","value","fn","prototype","gen","LEGACY_ALIASES","bind","hasOwn","$concat","call","concat","$spliceApply","splice","$replace","replace","$strSlice","slice","$exec","exec","rePropName","reEscapeChar","stringToPath","string","first","last","result","match","number","quote","subString","length","getBaseIntrinsic","allowMissing","alias","intrinsicName","module","exports","parts","intrinsicBaseName","intrinsic","intrinsicRealName","skipFurtherCaching","i","isOwn","part","desc","registry","addDecoder","cases","importFn","isArray","forEach","c","set","async","getDecoder","fileDirectory","Compression","Error","Decoder","then","m","default","zstd","init","DataView64","constructor","arrayBuffer","this","_dataView","buffer","getUint64","offset","littleEndian","left","getUint32","right","combined","isSafeInteger","getInt64","isNegative","getUint8","carrying","byte","getInt8","getUint16","getInt16","getInt32","getFloat16","getFloat32","getFloat64","DataSlice","sliceOffset","bigTiff","_sliceOffset","_littleEndian","_bigTiff","sliceTop","byteLength","covers","readUint8","readInt8","readUint16","readInt16","readUint32","readInt32","readFloat32","readFloat64","readUint64","readInt64","readOffset","CRLFCRLF","itemsToObject","items","Object","fromEntries","obj","key","toLowerCase","parseHeaders","text","split","map","line","kv","str","trim","parseContentType","rawContentType","type","rawParams","s","paramsItems","param","params","parseContentRange","rawContentRange","start","end","total","parseByteRanges","responseArrayBuffer","boundary","decoder","TextDecoder","out","startBoundary","endBoundary","decode","startsWith","innerText","substr","endOfHeaders","indexOf","headers","startOfData","push","data","fileSize","BaseSource","fetch","slices","signal","all","fetchSlice","close","wait","milliseconds","resolve","setTimeout","zip","a","b","A","from","B","k","AbortError","super","captureStackTrace","CustomAggregateError","errors","message","Block","top","BlockGroup","blockIds","BlockedSource","source","blockSize","cacheSize","blockCache","maxSize","onEviction","blockId","block","evictedBlocks","blockRequests","blockIdsToFetch","abortedBlockIds","missingBlockIds","allBlockIds","clear","firstBlockOffset","current","has","add","fetchBlocks","missingRequests","allSettled","abortedBlockRequests","filter","id","aborted","blocks","failedBlocks","requiredBlocks","readSliceData","size","groups","groupBlocks","groupRequests","groupIndex","group","response","blockOffset","o","t","delete","err","sortedBlockIds","sort","lastBlockId","blockIdLow","blockIdHigh","sliceData","sliceView","delta","topDelta","usedBlockLength","blockInnerOffset","rangeInnerOffset","blockView","BaseResponse","ok","status","getHeader","headerName","getData","BaseClient","url","request","FetchResponse","FetchClient","credentials","XHRResponse","xhr","getResponseHeader","XHRClient","constructRequest","reject","XMLHttpRequest","open","responseType","entries","setRequestHeader","onload","onerror","onabort","send","abort","addEventListener","HttpResponse","dataPromise","statusCode","HttpClient","parsedUrl","httpApi","protocol","resolveData","chunks","on","chunk","Buffer","destroy","RemoteSource","client","maxRanges","allowFullFile","_fileSize","fetchSlices","Range","join","byteRanges","others","maybeWrapInBlockedSource","makeFetchSource","blockOptions","makeXHRSource","makeHttpSource","makeRemoteSource","forceXHR","clientOptions","FileReaderSource","file","blob","reader","FileReader","event","target","readAsArrayBuffer","makeFileReaderSource","getFieldTypeLength","fieldType","BYTE","ASCII","SBYTE","UNDEFINED","SHORT","SSHORT","LONG","SLONG","FLOAT","IFD","RATIONAL","SRATIONAL","DOUBLE","LONG8","SLONG8","IFD8","RangeError","parseGeoKeyDirectory","rawGeoKeyDirectory","GeoKeyDirectory","geoKeyDirectory","location","count","substring","subarray","getValues","dataSlice","values","readMethod","fieldTypeLength","ImageFileDirectory","nextIFDByteOffset","GeoTIFFImageIndexError","index","GeoTIFFBase","readRasters","options","window","imageWindow","width","height","resX","resY","bbox","firstImage","getImage","usedImage","imageCount","getImageCount","imgBBox","getBoundingBox","oX","oY","getOrigin","rX","rY","getResolution","usedBBox","allImages","image","SubfileType","subfileType","NewSubfileType","newSubfileType","getWidth","imgResX","imgResY","getHeight","wnd","imageResX","imageResY","round","GeoTIFF","firstIFDOffset","cache","ifdRequests","ghostValues","getSlice","fallbackSize","parseFileDirectoryAt","entrySize","offsetSize","numDirEntries","byteSize","entryCount","fieldTag","typeCount","fieldValues","valueOffset","actualOffset","fieldDataSlice","requestIFD","previousIfd","ifd","dataView","hasNext","getGhostValues","detectionString","heuristicAreaSize","valuesString","firstLine","metadataSize","fullString","fromSource","headerData","BOM","TypeError","magicNumber","offsetByteSize","MultiGeoTIFF","mainFile","overviewFiles","imageFiles","fileDirectoriesPerFile","fileDirectoriesPerFileParsing","parseFileDirectoriesPerFile","requests","visited","relativeIndex","imageFile","ii","imageCounts","reduce","ifds","fromUrl","fromBlob","fromUrls","mainUrl","overviewUrls","fromWhiteIsZero","raster","rgbRaster","j","fromBlackIsZero","fromPalette","colorMap","greenOffset","blueOffset","mapIndex","fromCMYK","cmykRaster","y","fromYCbCr","yCbCrRaster","cb","cr","Xn","Yn","Zn","fromCIELab","cieLabRaster","L","a_","b_","r","g","x","z","copyNewSize","array","samplesPerPixel","resampleNearest","valueArrays","inWidth","inHeight","outWidth","outHeight","relX","relY","newArray","cy","cx","lerp","v0","v1","resampleBilinear","rawY","yl","yh","ceil","rawX","tx","xl","xh","ll","hl","lh","hh","resample","method","resampleNearestInterleaved","valueArray","samples","resampleBilinearInterleaved","resampleInterleaved","sum","arrayForType","format","bitsPerSample","needsNormalization","normalizeArray","inBuffer","planarConfiguration","tileWidth","tileHeight","view","outSize","samplesToTransfer","outArray","bitMask","repeat","pixelBitSkip","bitsPerLine","lineBitOffset","pixelBitOffset","bitOffset","outIndex","byteOffset","innerBitOffset","raw","GeoTIFFImage","geoKeys","tiles","isTiled","StripOffsets","PlanarConfiguration","getFileDirectory","getGeoKeys","ImageWidth","ImageLength","getSamplesPerPixel","SamplesPerPixel","getTileWidth","TileWidth","getTileHeight","TileLength","RowsPerStrip","getBlockWidth","getBlockHeight","getBytesPerPixel","bytes","BitsPerSample","getSampleByteSize","getReaderForSample","sampleIndex","SampleFormat","getSampleFormat","getBitsPerSample","getArrayForSample","getTileOrStrip","sample","poolOrDecoder","numTilesPerRow","numTilesPerCol","byteCount","TileOffsets","TileByteCounts","StripByteCounts","sampleFormat","_readRaster","interleave","resampleMethod","imageWidth","imageHeight","minXTile","maxXTile","minYTile","maxYTile","windowWidth","bytesPerPixel","srcSampleOffsets","sampleReaders","promises","yTile","xTile","getPromise","si","promise","tile","blockHeight","firstCol","lastLine","lastCol","ymax","xmax","pixelOffset","windowCoordinate","resampled","pool","fillValue","imageWindowWidth","imageWindowHeight","numPixels","apply","fill","readRGB","enableAlpha","pi","PhotometricInterpretation","RGB","ExtraSamples","Unspecified","WhiteIsZero","BlackIsZero","Palette","CMYK","YCbCr","CIELab","subOptions","ColorMap","red","green","blue","getTiePoints","ModelTiepoint","tiePoints","getGDALMetadata","metadata","GDAL_METADATA","item","inner","getGDALNoData","GDAL_NODATA","modelTransformation","ModelTransformation","referenceImage","modelPixelScale","ModelPixelScale","sqrt","refResX","refResY","refResZ","pixelIsArea","GTRasterTypeGeoKey","tilegrid","d","f","h","corners","projected","I","J","xs","pt","ys","origin","resolution","x1","y1","x2","y2","fieldTagNames","fieldTags","hasOwnProperty","arrayFields","StripRowCounts","SubIFDs","fieldTypeNames","fieldTypes","photometricInterpretations","TransparencyMask","ICCLab","ExtraSamplesValues","Assocalpha","Unassalpha","LercParameters","Version","AddCompression","LercAddCompression","None","Deflate","Zstandard","geoKeyNames"],"sourceRoot":""}