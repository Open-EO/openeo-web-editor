{"version":3,"file":"js/3800.d0c58743.js","mappings":"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","sources":["webpack://@openeo/web-editor/./node_modules/ol/size.js","webpack://@openeo/web-editor/./node_modules/ol/rotationconstraint.js","webpack://@openeo/web-editor/./node_modules/ol/reproj.js","webpack://@openeo/web-editor/./node_modules/ol/resolutionconstraint.js"],"sourcesContent":["/**\n * @module ol/size\n */\n\n/**\n * An array of numbers representing a size: `[width, height]`.\n * @typedef {Array<number>} Size\n * @api\n */\n\n/**\n * Returns a buffered size.\n * @param {Size} size Size.\n * @param {number} num The amount by which to buffer.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} The buffered size.\n */\nexport function buffer(size, num, dest) {\n  if (dest === undefined) {\n    dest = [0, 0];\n  }\n  dest[0] = size[0] + 2 * num;\n  dest[1] = size[1] + 2 * num;\n  return dest;\n}\n\n/**\n * Determines if a size has a positive area.\n * @param {Size} size The size to test.\n * @return {boolean} The size has a positive area.\n */\nexport function hasArea(size) {\n  return size[0] > 0 && size[1] > 0;\n}\n\n/**\n * Returns a size scaled by a ratio. The result will be an array of integers.\n * @param {Size} size Size.\n * @param {number} ratio Ratio.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} The scaled size.\n */\nexport function scale(size, ratio, dest) {\n  if (dest === undefined) {\n    dest = [0, 0];\n  }\n  dest[0] = (size[0] * ratio + 0.5) | 0;\n  dest[1] = (size[1] * ratio + 0.5) | 0;\n  return dest;\n}\n\n/**\n * Returns an `Size` array for the passed in number (meaning: square) or\n * `Size` array.\n * (meaning: non-square),\n * @param {number|Size} size Width and height.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} Size.\n * @api\n */\nexport function toSize(size, dest) {\n  if (Array.isArray(size)) {\n    return size;\n  }\n  if (dest === undefined) {\n    dest = [size, size];\n  } else {\n    dest[0] = size;\n    dest[1] = size;\n  }\n  return dest;\n}\n","/**\n * @module ol/rotationconstraint\n */\nimport {toRadians} from './math.js';\n\n/**\n * @typedef {function((number|undefined), boolean=): (number|undefined)} Type\n */\n\n/**\n * @param {number|undefined} rotation Rotation.\n * @return {number|undefined} Rotation.\n */\nexport function disable(rotation) {\n  if (rotation !== undefined) {\n    return 0;\n  }\n  return undefined;\n}\n\n/**\n * @param {number|undefined} rotation Rotation.\n * @return {number|undefined} Rotation.\n */\nexport function none(rotation) {\n  if (rotation !== undefined) {\n    return rotation;\n  }\n  return undefined;\n}\n\n/**\n * @param {number} n N.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToN(n) {\n  const theta = (2 * Math.PI) / n;\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Rotation.\n     */\n    function (rotation, isMoving) {\n      if (isMoving) {\n        return rotation;\n      }\n\n      if (rotation !== undefined) {\n        rotation = Math.floor(rotation / theta + 0.5) * theta;\n        return rotation;\n      }\n      return undefined;\n    }\n  );\n}\n\n/**\n * @param {number} [tolerance] Tolerance.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToZero(tolerance) {\n  const t = tolerance === undefined ? toRadians(5) : tolerance;\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Rotation.\n     */\n    function (rotation, isMoving) {\n      if (isMoving || rotation === undefined) {\n        return rotation;\n      }\n\n      if (Math.abs(rotation) <= t) {\n        return 0;\n      }\n      return rotation;\n    }\n  );\n}\n","/**\n * @module ol/reproj\n */\nimport {\n  containsCoordinate,\n  createEmpty,\n  extend,\n  forEachCorner,\n  getCenter,\n  getHeight,\n  getTopLeft,\n  getWidth,\n} from './extent.js';\nimport {createCanvasContext2D, releaseCanvas} from './dom.js';\nimport {getPointResolution, transform} from './proj.js';\nimport {solveLinearSystem} from './math.js';\n\nlet brokenDiagonalRendering_;\n\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nexport const canvasPool = [];\n\n/**\n * This draws a small triangle into a canvas by setting the triangle as the clip region\n * and then drawing a (too large) rectangle\n *\n * @param {CanvasRenderingContext2D} ctx The context in which to draw the triangle\n * @param {number} u1 The x-coordinate of the second point. The first point is 0,0.\n * @param {number} v1 The y-coordinate of the second point.\n * @param {number} u2 The x-coordinate of the third point.\n * @param {number} v2 The y-coordinate of the third point.\n */\nfunction drawTestTriangle(ctx, u1, v1, u2, v2) {\n  ctx.beginPath();\n  ctx.moveTo(0, 0);\n  ctx.lineTo(u1, v1);\n  ctx.lineTo(u2, v2);\n  ctx.closePath();\n  ctx.save();\n  ctx.clip();\n  ctx.fillRect(0, 0, Math.max(u1, u2) + 1, Math.max(v1, v2));\n  ctx.restore();\n}\n\n/**\n * Given the data from getImageData, see if the right values appear at the provided offset.\n * Returns true if either the color or transparency is off\n *\n * @param {Uint8ClampedArray} data The data returned from getImageData\n * @param {number} offset The pixel offset from the start of data.\n * @return {boolean} true if the diagonal rendering is broken\n */\nfunction verifyBrokenDiagonalRendering(data, offset) {\n  // the values ought to be close to the rgba(210, 0, 0, 0.75)\n  return (\n    Math.abs(data[offset * 4] - 210) > 2 ||\n    Math.abs(data[offset * 4 + 3] - 0.75 * 255) > 2\n  );\n}\n\n/**\n * Determines if the current browser configuration can render triangular clip regions correctly.\n * This value is cached so the function is only expensive the first time called.\n * Firefox on Windows (as of now) does not if HWA is enabled. See https://bugzilla.mozilla.org/show_bug.cgi?id=1606976\n * Chrome works, and everything seems to work on OSX and Android. This function caches the\n * result. I suppose that it is conceivably possible that a browser might flip modes while the app is\n * running, but lets hope not.\n *\n * @return {boolean} true if the Diagonal Rendering is broken.\n */\nfunction isBrokenDiagonalRendering() {\n  if (brokenDiagonalRendering_ === undefined) {\n    const ctx = createCanvasContext2D(6, 6, canvasPool);\n    ctx.globalCompositeOperation = 'lighter';\n    ctx.fillStyle = 'rgba(210, 0, 0, 0.75)';\n    drawTestTriangle(ctx, 4, 5, 4, 0);\n    drawTestTriangle(ctx, 4, 5, 0, 5);\n    const data = ctx.getImageData(0, 0, 3, 3).data;\n    brokenDiagonalRendering_ =\n      verifyBrokenDiagonalRendering(data, 0) ||\n      verifyBrokenDiagonalRendering(data, 4) ||\n      verifyBrokenDiagonalRendering(data, 8);\n    releaseCanvas(ctx);\n    canvasPool.push(ctx.canvas);\n  }\n\n  return brokenDiagonalRendering_;\n}\n\n/**\n * Calculates ideal resolution to use from the source in order to achieve\n * pixel mapping as close as possible to 1:1 during reprojection.\n * The resolution is calculated regardless of what resolutions\n * are actually available in the dataset (TileGrid, Image, ...).\n *\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\n * @param {import(\"./coordinate.js\").Coordinate} targetCenter Target center.\n * @param {number} targetResolution Target resolution.\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\n */\nexport function calculateSourceResolution(\n  sourceProj,\n  targetProj,\n  targetCenter,\n  targetResolution,\n) {\n  const sourceCenter = transform(targetCenter, targetProj, sourceProj);\n\n  // calculate the ideal resolution of the source data\n  let sourceResolution = getPointResolution(\n    targetProj,\n    targetResolution,\n    targetCenter,\n  );\n\n  const targetMetersPerUnit = targetProj.getMetersPerUnit();\n  if (targetMetersPerUnit !== undefined) {\n    sourceResolution *= targetMetersPerUnit;\n  }\n  const sourceMetersPerUnit = sourceProj.getMetersPerUnit();\n  if (sourceMetersPerUnit !== undefined) {\n    sourceResolution /= sourceMetersPerUnit;\n  }\n\n  // Based on the projection properties, the point resolution at the specified\n  // coordinates may be slightly different. We need to reverse-compensate this\n  // in order to achieve optimal results.\n\n  const sourceExtent = sourceProj.getExtent();\n  if (!sourceExtent || containsCoordinate(sourceExtent, sourceCenter)) {\n    const compensationFactor =\n      getPointResolution(sourceProj, sourceResolution, sourceCenter) /\n      sourceResolution;\n    if (isFinite(compensationFactor) && compensationFactor > 0) {\n      sourceResolution /= compensationFactor;\n    }\n  }\n\n  return sourceResolution;\n}\n\n/**\n * Calculates ideal resolution to use from the source in order to achieve\n * pixel mapping as close as possible to 1:1 during reprojection.\n * The resolution is calculated regardless of what resolutions\n * are actually available in the dataset (TileGrid, Image, ...).\n *\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent\n * @param {number} targetResolution Target resolution.\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\n */\nexport function calculateSourceExtentResolution(\n  sourceProj,\n  targetProj,\n  targetExtent,\n  targetResolution,\n) {\n  const targetCenter = getCenter(targetExtent);\n  let sourceResolution = calculateSourceResolution(\n    sourceProj,\n    targetProj,\n    targetCenter,\n    targetResolution,\n  );\n\n  if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n    forEachCorner(targetExtent, function (corner) {\n      sourceResolution = calculateSourceResolution(\n        sourceProj,\n        targetProj,\n        corner,\n        targetResolution,\n      );\n      return isFinite(sourceResolution) && sourceResolution > 0;\n    });\n  }\n\n  return sourceResolution;\n}\n\n/**\n * @typedef {Object} ImageExtent\n * @property {import(\"./extent.js\").Extent} extent Extent.\n * @property {import(\"./extent.js\").Extent} [clipExtent] Clip extent.\n * @property {import('./DataTile.js').ImageLike} image Image.\n */\n\n/**\n * Renders the source data into new canvas based on the triangulation.\n *\n * @param {number} width Width of the canvas.\n * @param {number} height Height of the canvas.\n * @param {number} pixelRatio Pixel ratio.\n * @param {number} sourceResolution Source resolution.\n * @param {import(\"./extent.js\").Extent} sourceExtent Extent of the data source.\n * @param {number} targetResolution Target resolution.\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent.\n * @param {import(\"./reproj/Triangulation.js\").default} triangulation Calculated triangulation.\n * @param {Array<ImageExtent>} sources Array of sources.\n * @param {number} gutter Gutter of the sources.\n * @param {boolean} [renderEdges] Render reprojection edges.\n * @param {boolean} [interpolate] Use linear interpolation when resampling.\n * @param {boolean} [drawSingle] Draw single source images directly without stitchContext.\n * @param {boolean} [clipExtent] Clip stitchContext to sourceExtent.\n * @return {HTMLCanvasElement} Canvas with reprojected data.\n */\nexport function render(\n  width,\n  height,\n  pixelRatio,\n  sourceResolution,\n  sourceExtent,\n  targetResolution,\n  targetExtent,\n  triangulation,\n  sources,\n  gutter,\n  renderEdges,\n  interpolate,\n  drawSingle,\n  clipExtent,\n) {\n  const context = createCanvasContext2D(\n    Math.round(pixelRatio * width),\n    Math.round(pixelRatio * height),\n    canvasPool,\n  );\n\n  if (!interpolate) {\n    context.imageSmoothingEnabled = false;\n  }\n\n  if (sources.length === 0) {\n    return context.canvas;\n  }\n\n  context.scale(pixelRatio, pixelRatio);\n\n  function pixelRound(value) {\n    return Math.round(value * pixelRatio) / pixelRatio;\n  }\n\n  context.globalCompositeOperation = 'lighter';\n\n  const sourceDataExtent = createEmpty();\n  sources.forEach(function (src, i, arr) {\n    extend(sourceDataExtent, src.extent);\n  });\n\n  let stitchContext;\n  const stitchScale = pixelRatio / sourceResolution;\n  // Round up Float32 scale values to prevent interpolation in Firefox.\n  const inverseScale = (interpolate ? 1 : 1 + Math.pow(2, -24)) / stitchScale;\n\n  if (!drawSingle || sources.length !== 1 || gutter !== 0) {\n    stitchContext = createCanvasContext2D(\n      Math.round(getWidth(sourceDataExtent) * stitchScale),\n      Math.round(getHeight(sourceDataExtent) * stitchScale),\n      canvasPool,\n    );\n\n    if (!interpolate) {\n      stitchContext.imageSmoothingEnabled = false;\n    }\n    if (sourceExtent && clipExtent) {\n      const xPos = (sourceExtent[0] - sourceDataExtent[0]) * stitchScale;\n      const yPos = -(sourceExtent[3] - sourceDataExtent[3]) * stitchScale;\n      const width = getWidth(sourceExtent) * stitchScale;\n      const height = getHeight(sourceExtent) * stitchScale;\n      stitchContext.rect(xPos, yPos, width, height);\n      stitchContext.clip();\n    }\n\n    sources.forEach(function (src, i, arr) {\n      // This test should never fail -- but it does. Need to find a fix the upstream condition\n      if (src.image.width > 0 && src.image.height > 0) {\n        if (src.clipExtent) {\n          stitchContext.save();\n          const xPos = (src.clipExtent[0] - sourceDataExtent[0]) * stitchScale;\n          const yPos = -(src.clipExtent[3] - sourceDataExtent[3]) * stitchScale;\n          const width = getWidth(src.clipExtent) * stitchScale;\n          const height = getHeight(src.clipExtent) * stitchScale;\n          stitchContext.rect(\n            interpolate ? xPos : Math.round(xPos),\n            interpolate ? yPos : Math.round(yPos),\n            interpolate ? width : Math.round(xPos + width) - Math.round(xPos),\n            interpolate ? height : Math.round(yPos + height) - Math.round(yPos),\n          );\n          stitchContext.clip();\n        }\n\n        const xPos = (src.extent[0] - sourceDataExtent[0]) * stitchScale;\n        const yPos = -(src.extent[3] - sourceDataExtent[3]) * stitchScale;\n        const srcWidth = getWidth(src.extent) * stitchScale;\n        const srcHeight = getHeight(src.extent) * stitchScale;\n        stitchContext.drawImage(\n          src.image,\n          gutter,\n          gutter,\n          src.image.width - 2 * gutter,\n          src.image.height - 2 * gutter,\n          interpolate ? xPos : Math.round(xPos),\n          interpolate ? yPos : Math.round(yPos),\n          interpolate\n            ? srcWidth\n            : Math.round(xPos + srcWidth) - Math.round(xPos),\n          interpolate\n            ? srcHeight\n            : Math.round(yPos + srcHeight) - Math.round(yPos),\n        );\n\n        if (src.clipExtent) {\n          stitchContext.restore();\n        }\n      }\n    });\n  }\n  const targetTopLeft = getTopLeft(targetExtent);\n\n  triangulation.getTriangles().forEach(function (triangle, i, arr) {\n    /* Calculate affine transform (src -> dst)\n     * Resulting matrix can be used to transform coordinate\n     * from `sourceProjection` to destination pixels.\n     *\n     * To optimize number of context calls and increase numerical stability,\n     * we also do the following operations:\n     * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)\n     * here before solving the linear system so [ui, vi] are pixel coordinates.\n     *\n     * Src points: xi, yi\n     * Dst points: ui, vi\n     * Affine coefficients: aij\n     *\n     * | x0 y0 1  0  0 0 |   |a00|   |u0|\n     * | x1 y1 1  0  0 0 |   |a01|   |u1|\n     * | x2 y2 1  0  0 0 | x |a02| = |u2|\n     * |  0  0 0 x0 y0 1 |   |a10|   |v0|\n     * |  0  0 0 x1 y1 1 |   |a11|   |v1|\n     * |  0  0 0 x2 y2 1 |   |a12|   |v2|\n     */\n    const source = triangle.source;\n    const target = triangle.target;\n    let x0 = source[0][0],\n      y0 = source[0][1];\n    let x1 = source[1][0],\n      y1 = source[1][1];\n    let x2 = source[2][0],\n      y2 = source[2][1];\n    // Make sure that everything is on pixel boundaries\n    const u0 = pixelRound((target[0][0] - targetTopLeft[0]) / targetResolution);\n    const v0 = pixelRound(\n      -(target[0][1] - targetTopLeft[1]) / targetResolution,\n    );\n    const u1 = pixelRound((target[1][0] - targetTopLeft[0]) / targetResolution);\n    const v1 = pixelRound(\n      -(target[1][1] - targetTopLeft[1]) / targetResolution,\n    );\n    const u2 = pixelRound((target[2][0] - targetTopLeft[0]) / targetResolution);\n    const v2 = pixelRound(\n      -(target[2][1] - targetTopLeft[1]) / targetResolution,\n    );\n\n    // Shift all the source points to improve numerical stability\n    // of all the subsequent calculations. The [x0, y0] is used here.\n    // This is also used to simplify the linear system.\n    const sourceNumericalShiftX = x0;\n    const sourceNumericalShiftY = y0;\n    x0 = 0;\n    y0 = 0;\n    x1 -= sourceNumericalShiftX;\n    y1 -= sourceNumericalShiftY;\n    x2 -= sourceNumericalShiftX;\n    y2 -= sourceNumericalShiftY;\n\n    const augmentedMatrix = [\n      [x1, y1, 0, 0, u1 - u0],\n      [x2, y2, 0, 0, u2 - u0],\n      [0, 0, x1, y1, v1 - v0],\n      [0, 0, x2, y2, v2 - v0],\n    ];\n    const affineCoefs = solveLinearSystem(augmentedMatrix);\n    if (!affineCoefs) {\n      return;\n    }\n\n    context.save();\n    context.beginPath();\n\n    if (isBrokenDiagonalRendering() || !interpolate) {\n      // Make sure that all lines are horizontal or vertical\n      context.moveTo(u1, v1);\n      // This is the diagonal line. Do it in 4 steps\n      const steps = 4;\n      const ud = u0 - u1;\n      const vd = v0 - v1;\n      for (let step = 0; step < steps; step++) {\n        // Go horizontally\n        context.lineTo(\n          u1 + pixelRound(((step + 1) * ud) / steps),\n          v1 + pixelRound((step * vd) / (steps - 1)),\n        );\n        // Go vertically\n        if (step != steps - 1) {\n          context.lineTo(\n            u1 + pixelRound(((step + 1) * ud) / steps),\n            v1 + pixelRound(((step + 1) * vd) / (steps - 1)),\n          );\n        }\n      }\n      // We are almost at u0r, v0r\n      context.lineTo(u2, v2);\n    } else {\n      context.moveTo(u1, v1);\n      context.lineTo(u0, v0);\n      context.lineTo(u2, v2);\n    }\n\n    context.clip();\n\n    context.transform(\n      affineCoefs[0],\n      affineCoefs[2],\n      affineCoefs[1],\n      affineCoefs[3],\n      u0,\n      v0,\n    );\n\n    context.translate(\n      sourceDataExtent[0] - sourceNumericalShiftX,\n      sourceDataExtent[3] - sourceNumericalShiftY,\n    );\n\n    let image;\n    if (stitchContext) {\n      image = stitchContext.canvas;\n      context.scale(inverseScale, -inverseScale);\n    } else {\n      const source = sources[0];\n      const extent = source.extent;\n      image = source.image;\n      context.scale(\n        getWidth(extent) / image.width,\n        -getHeight(extent) / image.height,\n      );\n    }\n\n    context.drawImage(image, 0, 0);\n    context.restore();\n  });\n\n  if (stitchContext) {\n    releaseCanvas(stitchContext);\n    canvasPool.push(stitchContext.canvas);\n  }\n\n  if (renderEdges) {\n    context.save();\n\n    context.globalCompositeOperation = 'source-over';\n    context.strokeStyle = 'black';\n    context.lineWidth = 1;\n\n    triangulation.getTriangles().forEach(function (triangle, i, arr) {\n      const target = triangle.target;\n      const u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;\n      const v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;\n      const u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;\n      const v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;\n      const u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;\n      const v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;\n\n      context.beginPath();\n      context.moveTo(u1, v1);\n      context.lineTo(u0, v0);\n      context.lineTo(u2, v2);\n      context.closePath();\n      context.stroke();\n    });\n\n    context.restore();\n  }\n  return context.canvas;\n}\n","/**\n * @module ol/resolutionconstraint\n */\nimport {clamp} from './math.js';\nimport {getHeight, getWidth} from './extent.js';\nimport {linearFindNearest} from './array.js';\n\n/**\n * @typedef {function((number|undefined), number, import(\"./size.js\").Size, boolean=): (number|undefined)} Type\n */\n\n/**\n * Returns a modified resolution taking into account the viewport size and maximum\n * allowed extent.\n * @param {number} resolution Resolution\n * @param {import(\"./extent.js\").Extent} maxExtent Maximum allowed extent.\n * @param {import(\"./size.js\").Size} viewportSize Viewport size.\n * @param {boolean} showFullExtent Whether to show the full extent.\n * @return {number} Capped resolution.\n */\nfunction getViewportClampedResolution(\n  resolution,\n  maxExtent,\n  viewportSize,\n  showFullExtent,\n) {\n  const xResolution = getWidth(maxExtent) / viewportSize[0];\n  const yResolution = getHeight(maxExtent) / viewportSize[1];\n\n  if (showFullExtent) {\n    return Math.min(resolution, Math.max(xResolution, yResolution));\n  }\n  return Math.min(resolution, Math.min(xResolution, yResolution));\n}\n\n/**\n * Returns a modified resolution to be between maxResolution and minResolution while\n * still allowing the value to be slightly out of bounds.\n * Note: the computation is based on the logarithm function (ln):\n *  - at 1, ln(x) is 0\n *  - above 1, ln(x) keeps increasing but at a much slower pace than x\n * The final result is clamped to prevent getting too far away from bounds.\n * @param {number} resolution Resolution.\n * @param {number} maxResolution Max resolution.\n * @param {number} minResolution Min resolution.\n * @return {number} Smoothed resolution.\n */\nfunction getSmoothClampedResolution(resolution, maxResolution, minResolution) {\n  let result = Math.min(resolution, maxResolution);\n  const ratio = 50;\n\n  result *=\n    Math.log(1 + ratio * Math.max(0, resolution / maxResolution - 1)) / ratio +\n    1;\n  if (minResolution) {\n    result = Math.max(result, minResolution);\n    result /=\n      Math.log(1 + ratio * Math.max(0, minResolution / resolution - 1)) /\n        ratio +\n      1;\n  }\n  return clamp(result, minResolution / 2, maxResolution * 2);\n}\n\n/**\n * @param {Array<number>} resolutions Resolutions.\n * @param {boolean} [smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.\n * @param {import(\"./extent.js\").Extent} [maxExtent] Maximum allowed extent.\n * @param {boolean} [showFullExtent] If true, allows us to show the full extent. Default: false.\n * @return {Type} Zoom function.\n */\nexport function createSnapToResolutions(\n  resolutions,\n  smooth,\n  maxExtent,\n  showFullExtent,\n) {\n  smooth = smooth !== undefined ? smooth : true;\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} direction Direction.\n     * @param {import(\"./size.js\").Size} size Viewport size.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Resolution.\n     */\n    function (resolution, direction, size, isMoving) {\n      if (resolution !== undefined) {\n        const maxResolution = resolutions[0];\n        const minResolution = resolutions[resolutions.length - 1];\n        const cappedMaxRes = maxExtent\n          ? getViewportClampedResolution(\n              maxResolution,\n              maxExtent,\n              size,\n              showFullExtent,\n            )\n          : maxResolution;\n\n        // during interacting or animating, allow intermediary values\n        if (isMoving) {\n          if (!smooth) {\n            return clamp(resolution, minResolution, cappedMaxRes);\n          }\n          return getSmoothClampedResolution(\n            resolution,\n            cappedMaxRes,\n            minResolution,\n          );\n        }\n\n        const capped = Math.min(cappedMaxRes, resolution);\n        const z = Math.floor(linearFindNearest(resolutions, capped, direction));\n        if (resolutions[z] > cappedMaxRes && z < resolutions.length - 1) {\n          return resolutions[z + 1];\n        }\n        return resolutions[z];\n      }\n      return undefined;\n    }\n  );\n}\n\n/**\n * @param {number} power Power.\n * @param {number} maxResolution Maximum resolution.\n * @param {number} [minResolution] Minimum resolution.\n * @param {boolean} [smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.\n * @param {import(\"./extent.js\").Extent} [maxExtent] Maximum allowed extent.\n * @param {boolean} [showFullExtent] If true, allows us to show the full extent. Default: false.\n * @return {Type} Zoom function.\n */\nexport function createSnapToPower(\n  power,\n  maxResolution,\n  minResolution,\n  smooth,\n  maxExtent,\n  showFullExtent,\n) {\n  smooth = smooth !== undefined ? smooth : true;\n  minResolution = minResolution !== undefined ? minResolution : 0;\n\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} direction Direction.\n     * @param {import(\"./size.js\").Size} size Viewport size.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Resolution.\n     */\n    function (resolution, direction, size, isMoving) {\n      if (resolution !== undefined) {\n        const cappedMaxRes = maxExtent\n          ? getViewportClampedResolution(\n              maxResolution,\n              maxExtent,\n              size,\n              showFullExtent,\n            )\n          : maxResolution;\n\n        // during interacting or animating, allow intermediary values\n        if (isMoving) {\n          if (!smooth) {\n            return clamp(resolution, minResolution, cappedMaxRes);\n          }\n          return getSmoothClampedResolution(\n            resolution,\n            cappedMaxRes,\n            minResolution,\n          );\n        }\n\n        const tolerance = 1e-9;\n        const minZoomLevel = Math.ceil(\n          Math.log(maxResolution / cappedMaxRes) / Math.log(power) - tolerance,\n        );\n        const offset = -direction * (0.5 - tolerance) + 0.5;\n        const capped = Math.min(cappedMaxRes, resolution);\n        const cappedZoomLevel = Math.floor(\n          Math.log(maxResolution / capped) / Math.log(power) + offset,\n        );\n        const zoomLevel = Math.max(minZoomLevel, cappedZoomLevel);\n        const newResolution = maxResolution / Math.pow(power, zoomLevel);\n        return clamp(newResolution, minResolution, cappedMaxRes);\n      }\n      return undefined;\n    }\n  );\n}\n\n/**\n * @param {number} maxResolution Max resolution.\n * @param {number} minResolution Min resolution.\n * @param {boolean} [smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.\n * @param {import(\"./extent.js\").Extent} [maxExtent] Maximum allowed extent.\n * @param {boolean} [showFullExtent] If true, allows us to show the full extent. Default: false.\n * @return {Type} Zoom function.\n */\nexport function createMinMaxResolution(\n  maxResolution,\n  minResolution,\n  smooth,\n  maxExtent,\n  showFullExtent,\n) {\n  smooth = smooth !== undefined ? smooth : true;\n\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} direction Direction.\n     * @param {import(\"./size.js\").Size} size Viewport size.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Resolution.\n     */\n    function (resolution, direction, size, isMoving) {\n      if (resolution !== undefined) {\n        const cappedMaxRes = maxExtent\n          ? getViewportClampedResolution(\n              maxResolution,\n              maxExtent,\n              size,\n              showFullExtent,\n            )\n          : maxResolution;\n\n        if (!smooth || !isMoving) {\n          return clamp(resolution, minResolution, cappedMaxRes);\n        }\n        return getSmoothClampedResolution(\n          resolution,\n          cappedMaxRes,\n          minResolution,\n        );\n      }\n      return undefined;\n    }\n  );\n}\n"],"names":["hasArea","size","scale","ratio","dest","undefined","toSize","Array","isArray","disable","rotation","none","createSnapToN","n","theta","Math","PI","isMoving","floor","createSnapToZero","tolerance","t","abs","brokenDiagonalRendering_","canvasPool","drawTestTriangle","ctx","u1","v1","u2","v2","beginPath","moveTo","lineTo","closePath","save","clip","fillRect","max","restore","verifyBrokenDiagonalRendering","data","offset","isBrokenDiagonalRendering","globalCompositeOperation","fillStyle","getImageData","push","canvas","calculateSourceResolution","sourceProj","targetProj","targetCenter","targetResolution","sourceCenter","transform","sourceResolution","getPointResolution","targetMetersPerUnit","getMetersPerUnit","sourceMetersPerUnit","sourceExtent","getExtent","compensationFactor","isFinite","calculateSourceExtentResolution","targetExtent","corner","render","width","height","pixelRatio","triangulation","sources","gutter","renderEdges","interpolate","drawSingle","clipExtent","context","round","imageSmoothingEnabled","length","pixelRound","value","sourceDataExtent","stitchContext","forEach","src","i","arr","extent","stitchScale","inverseScale","pow","xPos","yPos","rect","image","srcWidth","srcHeight","drawImage","targetTopLeft","getTriangles","triangle","source","target","x0","y0","x1","y1","x2","y2","u0","v0","sourceNumericalShiftX","sourceNumericalShiftY","augmentedMatrix","affineCoefs","steps","ud","vd","step","translate","strokeStyle","lineWidth","stroke","getViewportClampedResolution","resolution","maxExtent","viewportSize","showFullExtent","xResolution","yResolution","min","getSmoothClampedResolution","maxResolution","minResolution","result","log","createSnapToResolutions","resolutions","smooth","direction","cappedMaxRes","capped","z","createSnapToPower","power","minZoomLevel","ceil","cappedZoomLevel","zoomLevel","newResolution","createMinMaxResolution"],"sourceRoot":""}