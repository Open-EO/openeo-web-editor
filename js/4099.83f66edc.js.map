{"version":3,"file":"js/4099.83f66edc.js","mappings":"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","sources":["webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/compression/index.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/dataview64.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/dataslice.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/httputils.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/basesource.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/utils.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/blockedsource.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/client/base.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/client/fetch.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/client/xhr.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/client/http.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/remote.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/filereader.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/geotiff.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/rgb.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/resample.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/geotiffimage.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/globals.js"],"sourcesContent":["const registry = new Map();\n\nexport function addDecoder(cases, importFn) {\n  if (!Array.isArray(cases)) {\n    cases = [cases]; // eslint-disable-line no-param-reassign\n  }\n  cases.forEach((c) => registry.set(c, importFn));\n}\n\nexport async function getDecoder(fileDirectory) {\n  const importFn = registry.get(fileDirectory.Compression);\n  if (!importFn) {\n    throw new Error(`Unknown compression method identifier: ${fileDirectory.Compression}`);\n  }\n  const Decoder = await importFn();\n  return new Decoder(fileDirectory);\n}\n\n// Add default decoders to registry (end-user may override with other implementations)\naddDecoder([undefined, 1], () => import('./raw.js').then((m) => m.default));\naddDecoder(5, () => import('./lzw.js').then((m) => m.default));\naddDecoder(6, () => {\n  throw new Error('old style JPEG compression is not supported.');\n});\naddDecoder(7, () => import('./jpeg.js').then((m) => m.default));\naddDecoder([8, 32946], () => import('./deflate.js').then((m) => m.default));\naddDecoder(32773, () => import('./packbits.js').then((m) => m.default));\naddDecoder(34887, () => import('./lerc.js')\n  .then(async (m) => {\n    await m.zstd.init();\n    return m;\n  })\n  .then((m) => m.default),\n);\naddDecoder(50001, () => import('./webimage.js').then((m) => m.default));\n","import { getFloat16 } from '@petamoriken/float16';\n\nexport default class DataView64 {\n  constructor(arrayBuffer) {\n    this._dataView = new DataView(arrayBuffer);\n  }\n\n  get buffer() {\n    return this._dataView.buffer;\n  }\n\n  getUint64(offset, littleEndian) {\n    const left = this.getUint32(offset, littleEndian);\n    const right = this.getUint32(offset + 4, littleEndian);\n    let combined;\n    if (littleEndian) {\n      combined = left + ((2 ** 32) * right);\n      if (!Number.isSafeInteger(combined)) {\n        throw new Error(\n          `${combined} exceeds MAX_SAFE_INTEGER. `\n          + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n        );\n      }\n      return combined;\n    }\n    combined = ((2 ** 32) * left) + right;\n    if (!Number.isSafeInteger(combined)) {\n      throw new Error(\n        `${combined} exceeds MAX_SAFE_INTEGER. `\n        + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n      );\n    }\n\n    return combined;\n  }\n\n  // adapted from https://stackoverflow.com/a/55338384/8060591\n  getInt64(offset, littleEndian) {\n    let value = 0;\n    const isNegative = (this._dataView.getUint8(offset + (littleEndian ? 7 : 0)) & 0x80) > 0;\n    let carrying = true;\n    for (let i = 0; i < 8; i++) {\n      let byte = this._dataView.getUint8(offset + (littleEndian ? i : 7 - i));\n      if (isNegative) {\n        if (carrying) {\n          if (byte !== 0x00) {\n            byte = ~(byte - 1) & 0xff;\n            carrying = false;\n          }\n        } else {\n          byte = ~byte & 0xff;\n        }\n      }\n      value += byte * (256 ** i);\n    }\n    if (isNegative) {\n      value = -value;\n    }\n    return value;\n  }\n\n  getUint8(offset, littleEndian) {\n    return this._dataView.getUint8(offset, littleEndian);\n  }\n\n  getInt8(offset, littleEndian) {\n    return this._dataView.getInt8(offset, littleEndian);\n  }\n\n  getUint16(offset, littleEndian) {\n    return this._dataView.getUint16(offset, littleEndian);\n  }\n\n  getInt16(offset, littleEndian) {\n    return this._dataView.getInt16(offset, littleEndian);\n  }\n\n  getUint32(offset, littleEndian) {\n    return this._dataView.getUint32(offset, littleEndian);\n  }\n\n  getInt32(offset, littleEndian) {\n    return this._dataView.getInt32(offset, littleEndian);\n  }\n\n  getFloat16(offset, littleEndian) {\n    return getFloat16(this._dataView, offset, littleEndian);\n  }\n\n  getFloat32(offset, littleEndian) {\n    return this._dataView.getFloat32(offset, littleEndian);\n  }\n\n  getFloat64(offset, littleEndian) {\n    return this._dataView.getFloat64(offset, littleEndian);\n  }\n}\n","export default class DataSlice {\n  constructor(arrayBuffer, sliceOffset, littleEndian, bigTiff) {\n    this._dataView = new DataView(arrayBuffer);\n    this._sliceOffset = sliceOffset;\n    this._littleEndian = littleEndian;\n    this._bigTiff = bigTiff;\n  }\n\n  get sliceOffset() {\n    return this._sliceOffset;\n  }\n\n  get sliceTop() {\n    return this._sliceOffset + this.buffer.byteLength;\n  }\n\n  get littleEndian() {\n    return this._littleEndian;\n  }\n\n  get bigTiff() {\n    return this._bigTiff;\n  }\n\n  get buffer() {\n    return this._dataView.buffer;\n  }\n\n  covers(offset, length) {\n    return this.sliceOffset <= offset && this.sliceTop >= offset + length;\n  }\n\n  readUint8(offset) {\n    return this._dataView.getUint8(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readInt8(offset) {\n    return this._dataView.getInt8(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readUint16(offset) {\n    return this._dataView.getUint16(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readInt16(offset) {\n    return this._dataView.getInt16(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readUint32(offset) {\n    return this._dataView.getUint32(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readInt32(offset) {\n    return this._dataView.getInt32(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readFloat32(offset) {\n    return this._dataView.getFloat32(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readFloat64(offset) {\n    return this._dataView.getFloat64(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readUint64(offset) {\n    const left = this.readUint32(offset);\n    const right = this.readUint32(offset + 4);\n    let combined;\n    if (this._littleEndian) {\n      combined = left + ((2 ** 32) * right);\n      if (!Number.isSafeInteger(combined)) {\n        throw new Error(\n          `${combined} exceeds MAX_SAFE_INTEGER. `\n          + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n        );\n      }\n      return combined;\n    }\n    combined = ((2 ** 32) * left) + right;\n    if (!Number.isSafeInteger(combined)) {\n      throw new Error(\n        `${combined} exceeds MAX_SAFE_INTEGER. `\n        + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n      );\n    }\n\n    return combined;\n  }\n\n  // adapted from https://stackoverflow.com/a/55338384/8060591\n  readInt64(offset) {\n    let value = 0;\n    const isNegative = (this._dataView.getUint8(offset + (this._littleEndian ? 7 : 0)) & 0x80)\n      > 0;\n    let carrying = true;\n    for (let i = 0; i < 8; i++) {\n      let byte = this._dataView.getUint8(\n        offset + (this._littleEndian ? i : 7 - i),\n      );\n      if (isNegative) {\n        if (carrying) {\n          if (byte !== 0x00) {\n            byte = ~(byte - 1) & 0xff;\n            carrying = false;\n          }\n        } else {\n          byte = ~byte & 0xff;\n        }\n      }\n      value += byte * (256 ** i);\n    }\n    if (isNegative) {\n      value = -value;\n    }\n    return value;\n  }\n\n  readOffset(offset) {\n    if (this._bigTiff) {\n      return this.readUint64(offset);\n    }\n    return this.readUint32(offset);\n  }\n}\n","const CRLFCRLF = '\\r\\n\\r\\n';\n\n/*\n * Shim for 'Object.fromEntries'\n */\nfunction itemsToObject(items) {\n  if (typeof Object.fromEntries !== 'undefined') {\n    return Object.fromEntries(items);\n  }\n  const obj = {};\n  for (const [key, value] of items) {\n    obj[key.toLowerCase()] = value;\n  }\n  return obj;\n}\n\n/**\n * Parse HTTP headers from a given string.\n * @param {String} text the text to parse the headers from\n * @returns {Object} the parsed headers with lowercase keys\n */\nfunction parseHeaders(text) {\n  const items = text\n    .split('\\r\\n')\n    .map((line) => {\n      const kv = line.split(':').map((str) => str.trim());\n      kv[0] = kv[0].toLowerCase();\n      return kv;\n    });\n\n  return itemsToObject(items);\n}\n\n/**\n * Parse a 'Content-Type' header value to the content-type and parameters\n * @param {String} rawContentType the raw string to parse from\n * @returns {Object} the parsed content type with the fields: type and params\n */\nexport function parseContentType(rawContentType) {\n  const [type, ...rawParams] = rawContentType.split(';').map((s) => s.trim());\n  const paramsItems = rawParams.map((param) => param.split('='));\n  return { type, params: itemsToObject(paramsItems) };\n}\n\n/**\n * Parse a 'Content-Range' header value to its start, end, and total parts\n * @param {String} rawContentRange the raw string to parse from\n * @returns {Object} the parsed parts\n */\nexport function parseContentRange(rawContentRange) {\n  let start;\n  let end;\n  let total;\n\n  if (rawContentRange) {\n    [, start, end, total] = rawContentRange.match(/bytes (\\d+)-(\\d+)\\/(\\d+)/);\n    start = parseInt(start, 10);\n    end = parseInt(end, 10);\n    total = parseInt(total, 10);\n  }\n\n  return { start, end, total };\n}\n\n/**\n * Parses a list of byteranges from the given 'multipart/byteranges' HTTP response.\n * Each item in the list has the following properties:\n * - headers: the HTTP headers\n * - data: the sliced ArrayBuffer for that specific part\n * - offset: the offset of the byterange within its originating file\n * - length: the length of the byterange\n * @param {ArrayBuffer} responseArrayBuffer the response to be parsed and split\n * @param {String} boundary the boundary string used to split the sections\n * @returns {Object[]} the parsed byteranges\n */\nexport function parseByteRanges(responseArrayBuffer, boundary) {\n  let offset = null;\n  const decoder = new TextDecoder('ascii');\n  const out = [];\n\n  const startBoundary = `--${boundary}`;\n  const endBoundary = `${startBoundary}--`;\n\n  // search for the initial boundary, may be offset by some bytes\n  // TODO: more efficient to check for `--` in bytes directly\n  for (let i = 0; i < 10; ++i) {\n    const text = decoder.decode(\n      new Uint8Array(responseArrayBuffer, i, startBoundary.length),\n    );\n    if (text === startBoundary) {\n      offset = i;\n    }\n  }\n\n  if (offset === null) {\n    throw new Error('Could not find initial boundary');\n  }\n\n  while (offset < responseArrayBuffer.byteLength) {\n    const text = decoder.decode(\n      new Uint8Array(responseArrayBuffer, offset,\n        Math.min(startBoundary.length + 1024, responseArrayBuffer.byteLength - offset),\n      ),\n    );\n\n    // break if we arrived at the end\n    if (text.length === 0 || text.startsWith(endBoundary)) {\n      break;\n    }\n\n    // assert that we are actually dealing with a byterange and are at the correct offset\n    if (!text.startsWith(startBoundary)) {\n      throw new Error('Part does not start with boundary');\n    }\n\n    // get a substring from where we read the headers\n    const innerText = text.substr(startBoundary.length + 2);\n\n    if (innerText.length === 0) {\n      break;\n    }\n\n    // find the double linebreak that denotes the end of the headers\n    const endOfHeaders = innerText.indexOf(CRLFCRLF);\n\n    // parse the headers to get the content range size\n    const headers = parseHeaders(innerText.substr(0, endOfHeaders));\n    const { start, end, total } = parseContentRange(headers['content-range']);\n\n    // calculate the length of the slice and the next offset\n    const startOfData = offset + startBoundary.length + endOfHeaders + CRLFCRLF.length;\n    const length = parseInt(end, 10) + 1 - parseInt(start, 10);\n    out.push({\n      headers,\n      data: responseArrayBuffer.slice(startOfData, startOfData + length),\n      offset: start,\n      length,\n      fileSize: total,\n    });\n\n    offset = startOfData + length + 4;\n  }\n\n  return out;\n}\n","/**\n * @typedef Slice\n * @property {number} offset\n * @property {number} length\n */\n\nexport class BaseSource {\n  /**\n   *\n   * @param {Slice[]} slices\n   * @returns {ArrayBuffer[]}\n   */\n  async fetch(slices, signal = undefined) {\n    return Promise.all(\n      slices.map((slice) => this.fetchSlice(slice, signal)),\n    );\n  }\n\n  /**\n   *\n   * @param {Slice} slice\n   * @returns {ArrayBuffer}\n   */\n  async fetchSlice(slice) {\n    throw new Error(`fetching of slice ${slice} not possible, not implemented`);\n  }\n\n  /**\n   * Returns the filesize if already determined and null otherwise\n   */\n  get fileSize() {\n    return null;\n  }\n\n  async close() {\n    // no-op by default\n  }\n}\n","export function assign(target, source) {\n  for (const key in source) {\n    if (source.hasOwnProperty(key)) {\n      target[key] = source[key];\n    }\n  }\n}\n\nexport function chunk(iterable, length) {\n  const results = [];\n  const lengthOfIterable = iterable.length;\n  for (let i = 0; i < lengthOfIterable; i += length) {\n    const chunked = [];\n    for (let ci = i; ci < i + length; ci++) {\n      chunked.push(iterable[ci]);\n    }\n    results.push(chunked);\n  }\n  return results;\n}\n\nexport function endsWith(string, expectedEnding) {\n  if (string.length < expectedEnding.length) {\n    return false;\n  }\n  const actualEnding = string.substr(string.length - expectedEnding.length);\n  return actualEnding === expectedEnding;\n}\n\nexport function forEach(iterable, func) {\n  const { length } = iterable;\n  for (let i = 0; i < length; i++) {\n    func(iterable[i], i);\n  }\n}\n\nexport function invert(oldObj) {\n  const newObj = {};\n  for (const key in oldObj) {\n    if (oldObj.hasOwnProperty(key)) {\n      const value = oldObj[key];\n      newObj[value] = key;\n    }\n  }\n  return newObj;\n}\n\nexport function range(n) {\n  const results = [];\n  for (let i = 0; i < n; i++) {\n    results.push(i);\n  }\n  return results;\n}\n\nexport function times(numTimes, func) {\n  const results = [];\n  for (let i = 0; i < numTimes; i++) {\n    results.push(func(i));\n  }\n  return results;\n}\n\nexport function toArray(iterable) {\n  const results = [];\n  const { length } = iterable;\n  for (let i = 0; i < length; i++) {\n    results.push(iterable[i]);\n  }\n  return results;\n}\n\nexport function toArrayRecursively(input) {\n  if (input.length) {\n    return toArray(input).map(toArrayRecursively);\n  }\n  return input;\n}\n\n// copied from https://github.com/academia-de-codigo/parse-content-range-header/blob/master/index.js\nexport function parseContentRange(headerValue) {\n  if (!headerValue) {\n    return null;\n  }\n\n  if (typeof headerValue !== 'string') {\n    throw new Error('invalid argument');\n  }\n\n  const parseInt = (number) => Number.parseInt(number, 10);\n\n  // Check for presence of unit\n  let matches = headerValue.match(/^(\\w*) /);\n  const unit = matches && matches[1];\n\n  // check for start-end/size header format\n  matches = headerValue.match(/(\\d+)-(\\d+)\\/(\\d+|\\*)/);\n  if (matches) {\n    return {\n      unit,\n      first: parseInt(matches[1]),\n      last: parseInt(matches[2]),\n      length: matches[3] === '*' ? null : parseInt(matches[3]),\n    };\n  }\n\n  // check for size header format\n  matches = headerValue.match(/(\\d+|\\*)/);\n  if (matches) {\n    return {\n      unit,\n      first: null,\n      last: null,\n      length: matches[1] === '*' ? null : parseInt(matches[1]),\n    };\n  }\n\n  return null;\n}\n\n/*\n * Promisified wrapper around 'setTimeout' to allow 'await'\n */\nexport async function wait(milliseconds) {\n  return new Promise((resolve) => setTimeout(resolve, milliseconds));\n}\n\nexport function zip(a, b) {\n  const A = Array.isArray(a) ? a : Array.from(a);\n  const B = Array.isArray(b) ? b : Array.from(b);\n  return A.map((k, i) => [k, B[i]]);\n}\n\n// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\nexport class AbortError extends Error {\n  constructor(params) {\n    // Pass remaining arguments (including vendor specific ones) to parent constructor\n    super(params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, AbortError);\n    }\n\n    this.name = 'AbortError';\n  }\n}\n\nexport class CustomAggregateError extends Error {\n  constructor(errors, message) {\n    super(message);\n    this.errors = errors;\n    this.message = message;\n    this.name = 'AggregateError';\n  }\n}\n\nexport const AggregateError = CustomAggregateError;\n","import QuickLRU from 'quick-lru';\nimport { BaseSource } from './basesource.js';\nimport { AbortError, AggregateError, wait, zip } from '../utils.js';\n\nclass Block {\n  /**\n   *\n   * @param {number} offset\n   * @param {number} length\n   * @param {ArrayBuffer} [data]\n   */\n  constructor(offset, length, data = null) {\n    this.offset = offset;\n    this.length = length;\n    this.data = data;\n  }\n\n  /**\n   * @returns {number} the top byte border\n   */\n  get top() {\n    return this.offset + this.length;\n  }\n}\n\nclass BlockGroup {\n  /**\n   *\n   * @param {number} offset\n   * @param {number} length\n   * @param {number[]} blockIds\n   */\n  constructor(offset, length, blockIds) {\n    this.offset = offset;\n    this.length = length;\n    this.blockIds = blockIds;\n  }\n}\n\nexport class BlockedSource extends BaseSource {\n  /**\n   *\n   * @param {BaseSource} source The underlying source that shall be blocked and cached\n   * @param {object} options\n   * @param {number} [options.blockSize]\n   * @param {number} [options.cacheSize]\n   */\n  constructor(source, { blockSize = 65536, cacheSize = 100 } = {}) {\n    super();\n    this.source = source;\n    this.blockSize = blockSize;\n\n    this.blockCache = new QuickLRU({\n      maxSize: cacheSize,\n      onEviction: (blockId, block) => {\n        this.evictedBlocks.set(blockId, block);\n      },\n    });\n\n    /** @type {Map<number, Block>} */\n    this.evictedBlocks = new Map();\n\n    // mapping blockId -> Block instance\n    this.blockRequests = new Map();\n\n    // set of blockIds missing for the current requests\n    this.blockIdsToFetch = new Set();\n\n    this.abortedBlockIds = new Set();\n  }\n\n  get fileSize() {\n    return this.source.fileSize;\n  }\n\n  /**\n   *\n   * @param {import(\"./basesource\").Slice[]} slices\n   */\n  async fetch(slices, signal) {\n    const blockRequests = [];\n    const missingBlockIds = [];\n    const allBlockIds = [];\n    this.evictedBlocks.clear();\n\n    for (const { offset, length } of slices) {\n      let top = offset + length;\n\n      const { fileSize } = this;\n      if (fileSize !== null) {\n        top = Math.min(top, fileSize);\n      }\n\n      const firstBlockOffset = Math.floor(offset / this.blockSize) * this.blockSize;\n\n      for (let current = firstBlockOffset; current < top; current += this.blockSize) {\n        const blockId = Math.floor(current / this.blockSize);\n        if (!this.blockCache.has(blockId) && !this.blockRequests.has(blockId)) {\n          this.blockIdsToFetch.add(blockId);\n          missingBlockIds.push(blockId);\n        }\n        if (this.blockRequests.has(blockId)) {\n          blockRequests.push(this.blockRequests.get(blockId));\n        }\n        allBlockIds.push(blockId);\n      }\n    }\n\n    // allow additional block requests to accumulate\n    await wait();\n    this.fetchBlocks(signal);\n\n    // Gather all of the new requests that this fetch call is contributing to `fetch`.\n    const missingRequests = [];\n    for (const blockId of missingBlockIds) {\n      // The requested missing block could already be in the cache\n      // instead of having its request still be outstanding.\n      if (this.blockRequests.has(blockId)) {\n        missingRequests.push(this.blockRequests.get(blockId));\n      }\n    }\n\n    // Actually await all pending requests that are needed for this `fetch`.\n    await Promise.allSettled(blockRequests);\n    await Promise.allSettled(missingRequests);\n\n    // Perform retries if a block was interrupted by a previous signal\n    const abortedBlockRequests = [];\n    const abortedBlockIds = allBlockIds\n      .filter((id) => this.abortedBlockIds.has(id) || !this.blockCache.has(id));\n    abortedBlockIds.forEach((id) => this.blockIdsToFetch.add(id));\n    // start the retry of some blocks if required\n    if (abortedBlockIds.length > 0 && signal && !signal.aborted) {\n      this.fetchBlocks(null);\n      for (const blockId of abortedBlockIds) {\n        const block = this.blockRequests.get(blockId);\n        if (!block) {\n          throw new Error(`Block ${blockId} is not in the block requests`);\n        }\n        abortedBlockRequests.push(block);\n      }\n      await Promise.allSettled(abortedBlockRequests);\n    }\n\n    // throw an  abort error\n    if (signal && signal.aborted) {\n      throw new AbortError('Request was aborted');\n    }\n\n    const blocks = allBlockIds.map((id) => this.blockCache.get(id) || this.evictedBlocks.get(id));\n    const failedBlocks = blocks.filter((i) => !i);\n    if (failedBlocks.length) {\n      throw new AggregateError(failedBlocks, 'Request failed');\n    }\n\n    // create a final Map, with all required blocks for this request to satisfy\n    const requiredBlocks = new Map(zip(allBlockIds, blocks));\n\n    // TODO: satisfy each slice\n    return this.readSliceData(slices, requiredBlocks);\n  }\n\n  /**\n   *\n   * @param {AbortSignal} signal\n   */\n  fetchBlocks(signal) {\n    // check if we still need to\n    if (this.blockIdsToFetch.size > 0) {\n      const groups = this.groupBlocks(this.blockIdsToFetch);\n\n      // start requesting slices of data\n      const groupRequests = this.source.fetch(groups, signal);\n\n      for (let groupIndex = 0; groupIndex < groups.length; ++groupIndex) {\n        const group = groups[groupIndex];\n\n        for (const blockId of group.blockIds) {\n          // make an async IIFE for each block\n          this.blockRequests.set(blockId, (async () => {\n            try {\n              const response = (await groupRequests)[groupIndex];\n              const blockOffset = blockId * this.blockSize;\n              const o = blockOffset - response.offset;\n              const t = Math.min(o + this.blockSize, response.data.byteLength);\n              const data = response.data.slice(o, t);\n              const block = new Block(\n                blockOffset,\n                data.byteLength,\n                data,\n                blockId,\n              );\n              this.blockCache.set(blockId, block);\n              this.abortedBlockIds.delete(blockId);\n            } catch (err) {\n              if (err.name === 'AbortError') {\n                // store the signal here, we need it to determine later if an\n                // error was caused by this signal\n                err.signal = signal;\n                this.blockCache.delete(blockId);\n                this.abortedBlockIds.add(blockId);\n              } else {\n                throw err;\n              }\n            } finally {\n              this.blockRequests.delete(blockId);\n            }\n          })());\n        }\n      }\n      this.blockIdsToFetch.clear();\n    }\n  }\n\n  /**\n   *\n   * @param {Set} blockIds\n   * @returns {BlockGroup[]}\n   */\n  groupBlocks(blockIds) {\n    const sortedBlockIds = Array.from(blockIds).sort((a, b) => a - b);\n    if (sortedBlockIds.length === 0) {\n      return [];\n    }\n    let current = [];\n    let lastBlockId = null;\n    const groups = [];\n\n    for (const blockId of sortedBlockIds) {\n      if (lastBlockId === null || lastBlockId + 1 === blockId) {\n        current.push(blockId);\n        lastBlockId = blockId;\n      } else {\n        groups.push(new BlockGroup(\n          current[0] * this.blockSize,\n          current.length * this.blockSize,\n          current,\n        ));\n        current = [blockId];\n        lastBlockId = blockId;\n      }\n    }\n\n    groups.push(new BlockGroup(\n      current[0] * this.blockSize,\n      current.length * this.blockSize,\n      current,\n    ));\n\n    return groups;\n  }\n\n  /**\n   *\n   * @param {import(\"./basesource\").Slice[]} slices\n   * @param {Map} blocks\n   */\n  readSliceData(slices, blocks) {\n    return slices.map((slice) => {\n      let top = slice.offset + slice.length;\n      if (this.fileSize !== null) {\n        top = Math.min(this.fileSize, top);\n      }\n      const blockIdLow = Math.floor(slice.offset / this.blockSize);\n      const blockIdHigh = Math.floor(top / this.blockSize);\n      const sliceData = new ArrayBuffer(slice.length);\n      const sliceView = new Uint8Array(sliceData);\n\n      for (let blockId = blockIdLow; blockId <= blockIdHigh; ++blockId) {\n        const block = blocks.get(blockId);\n        const delta = block.offset - slice.offset;\n        const topDelta = block.top - top;\n        let blockInnerOffset = 0;\n        let rangeInnerOffset = 0;\n        let usedBlockLength;\n\n        if (delta < 0) {\n          blockInnerOffset = -delta;\n        } else if (delta > 0) {\n          rangeInnerOffset = delta;\n        }\n\n        if (topDelta < 0) {\n          usedBlockLength = block.length - blockInnerOffset;\n        } else {\n          usedBlockLength = top - block.offset - blockInnerOffset;\n        }\n\n        const blockView = new Uint8Array(block.data, blockInnerOffset, usedBlockLength);\n        sliceView.set(blockView, rangeInnerOffset);\n      }\n\n      return sliceData;\n    });\n  }\n}\n","export class BaseResponse {\n  /**\n   * Returns whether the response has an ok'ish status code\n   */\n  get ok() {\n    return this.status >= 200 && this.status <= 299;\n  }\n\n  /**\n   * Returns the status code of the response\n   */\n  get status() {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * Returns the value of the specified header\n   * @param {string} headerName the header name\n   * @returns {string} the header value\n   */\n  getHeader(headerName) { // eslint-disable-line no-unused-vars\n    throw new Error('not implemented');\n  }\n\n  /**\n   * @returns {ArrayBuffer} the response data of the request\n   */\n  async getData() {\n    throw new Error('not implemented');\n  }\n}\n\nexport class BaseClient {\n  constructor(url) {\n    this.url = url;\n  }\n\n  /**\n   * Send a request with the options\n   * @param {{headers: HeadersInit, signal: AbortSignal}} [options={}]\n   * @returns {Promise<BaseResponse>}\n   */\n  async request({ headers, signal } = {}) { // eslint-disable-line no-unused-vars\n    throw new Error('request is not implemented');\n  }\n}\n","import { BaseClient, BaseResponse } from './base.js';\n\nclass FetchResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for fetch API Response\n   * @param {Response} response\n   */\n  constructor(response) {\n    super();\n    this.response = response;\n  }\n\n  get status() {\n    return this.response.status;\n  }\n\n  getHeader(name) {\n    return this.response.headers.get(name);\n  }\n\n  async getData() {\n    const data = this.response.arrayBuffer\n      ? await this.response.arrayBuffer()\n      : (await this.response.buffer()).buffer;\n    return data;\n  }\n}\n\nexport class FetchClient extends BaseClient {\n  constructor(url, credentials) {\n    super(url);\n    this.credentials = credentials;\n  }\n\n  /**\n   * @param {{headers: HeadersInit, signal: AbortSignal}} [options={}]\n   * @returns {Promise<FetchResponse>}\n   */\n  async request({ headers, signal } = {}) {\n    const response = await fetch(this.url, {\n      headers, credentials: this.credentials, signal,\n    });\n    return new FetchResponse(response);\n  }\n}\n","import { BaseClient, BaseResponse } from './base.js';\nimport { AbortError } from '../../utils.js';\n\nclass XHRResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for XMLHttpRequest\n   * @param {XMLHttpRequest} xhr\n   * @param {ArrayBuffer} data\n   */\n  constructor(xhr, data) {\n    super();\n    this.xhr = xhr;\n    this.data = data;\n  }\n\n  get status() {\n    return this.xhr.status;\n  }\n\n  getHeader(name) {\n    return this.xhr.getResponseHeader(name);\n  }\n\n  async getData() {\n    return this.data;\n  }\n}\n\nexport class XHRClient extends BaseClient {\n  constructRequest(headers, signal) {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.open('GET', this.url);\n      xhr.responseType = 'arraybuffer';\n      for (const [key, value] of Object.entries(headers)) {\n        xhr.setRequestHeader(key, value);\n      }\n\n      // hook signals\n      xhr.onload = () => {\n        const data = xhr.response;\n        resolve(new XHRResponse(xhr, data));\n      };\n      xhr.onerror = reject;\n      xhr.onabort = () => reject(new AbortError('Request aborted'));\n      xhr.send();\n\n      if (signal) {\n        if (signal.aborted) {\n          xhr.abort();\n        }\n        signal.addEventListener('abort', () => xhr.abort());\n      }\n    });\n  }\n\n  async request({ headers, signal } = {}) {\n    const response = await this.constructRequest(headers, signal);\n    return response;\n  }\n}\n","import http from 'http';\nimport https from 'https';\nimport urlMod from 'url';\n\nimport { BaseClient, BaseResponse } from './base.js';\nimport { AbortError } from '../../utils.js';\n\nclass HttpResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for node HTTP/HTTPS API Response\n   * @param {http.ServerResponse} response\n   */\n  constructor(response, dataPromise) {\n    super();\n    this.response = response;\n    this.dataPromise = dataPromise;\n  }\n\n  get status() {\n    return this.response.statusCode;\n  }\n\n  getHeader(name) {\n    return this.response.headers[name];\n  }\n\n  async getData() {\n    const data = await this.dataPromise;\n    return data;\n  }\n}\n\nexport class HttpClient extends BaseClient {\n  constructor(url) {\n    super(url);\n    this.parsedUrl = urlMod.parse(this.url);\n    this.httpApi = (this.parsedUrl.protocol === 'http:' ? http : https);\n  }\n\n  constructRequest(headers, signal) {\n    return new Promise((resolve, reject) => {\n      const request = this.httpApi.get(\n        {\n          ...this.parsedUrl,\n          headers,\n        },\n        (response) => {\n          const dataPromise = new Promise((resolveData) => {\n            const chunks = [];\n\n            // collect chunks\n            response.on('data', (chunk) => {\n              chunks.push(chunk);\n            });\n\n            // concatenate all chunks and resolve the promise with the resulting buffer\n            response.on('end', () => {\n              const data = Buffer.concat(chunks).buffer;\n              resolveData(data);\n            });\n            response.on('error', reject);\n          });\n          resolve(new HttpResponse(response, dataPromise));\n        },\n      );\n      request.on('error', reject);\n\n      if (signal) {\n        if (signal.aborted) {\n          request.destroy(new AbortError('Request aborted'));\n        }\n        signal.addEventListener('abort', () => request.destroy(new AbortError('Request aborted')));\n      }\n    });\n  }\n\n  async request({ headers, signal } = {}) {\n    const response = await this.constructRequest(headers, signal);\n    return response;\n  }\n}\n","import { parseByteRanges, parseContentRange, parseContentType } from './httputils.js';\nimport { BaseSource } from './basesource.js';\nimport { BlockedSource } from './blockedsource.js';\n\nimport { FetchClient } from './client/fetch.js';\nimport { XHRClient } from './client/xhr.js';\nimport { HttpClient } from './client/http.js';\n\nclass RemoteSource extends BaseSource {\n  /**\n   *\n   * @param {BaseClient} client\n   * @param {object} headers\n   * @param {numbers} maxRanges\n   * @param {boolean} allowFullFile\n   */\n  constructor(client, headers, maxRanges, allowFullFile) {\n    super();\n    this.client = client;\n    this.headers = headers;\n    this.maxRanges = maxRanges;\n    this.allowFullFile = allowFullFile;\n    this._fileSize = null;\n  }\n\n  /**\n   *\n   * @param {Slice[]} slices\n   */\n  async fetch(slices, signal) {\n    // if we allow multi-ranges, split the incoming request into that many sub-requests\n    // and join them afterwards\n    if (this.maxRanges >= slices.length) {\n      return this.fetchSlices(slices, signal);\n    } else if (this.maxRanges > 0 && slices.length > 1) {\n      // TODO: split into multiple multi-range requests\n\n      // const subSlicesRequests = [];\n      // for (let i = 0; i < slices.length; i += this.maxRanges) {\n      //   subSlicesRequests.push(\n      //     this.fetchSlices(slices.slice(i, i + this.maxRanges), signal),\n      //   );\n      // }\n      // return (await Promise.all(subSlicesRequests)).flat();\n    }\n\n    // otherwise make a single request for each slice\n    return Promise.all(\n      slices.map((slice) => this.fetchSlice(slice, signal)),\n    );\n  }\n\n  async fetchSlices(slices, signal) {\n    const response = await this.client.request({\n      headers: {\n        ...this.headers,\n        Range: `bytes=${slices\n          .map(({ offset, length }) => `${offset}-${offset + length}`)\n          .join(',')\n        }`,\n      },\n      signal,\n    });\n\n    if (!response.ok) {\n      throw new Error('Error fetching data.');\n    } else if (response.status === 206) {\n      const { type, params } = parseContentType(response.getHeader('content-type'));\n      if (type === 'multipart/byteranges') {\n        const byteRanges = parseByteRanges(await response.getData(), params.boundary);\n        this._fileSize = byteRanges[0].fileSize || null;\n        return byteRanges;\n      }\n\n      const data = await response.getData();\n\n      const { start, end, total } = parseContentRange(response.getHeader('content-range'));\n      this._fileSize = total || null;\n      const first = [{\n        data,\n        offset: start,\n        length: end - start,\n      }];\n\n      if (slices.length > 1) {\n        // we requested more than one slice, but got only the first\n        // unfortunately, some HTTP Servers don't support multi-ranges\n        // and return only the first\n\n        // get the rest of the slices and fetch them iteratively\n        const others = await Promise.all(slices.slice(1).map((slice) => this.fetchSlice(slice, signal)));\n        return first.concat(others);\n      }\n      return first;\n    } else {\n      if (!this.allowFullFile) {\n        throw new Error('Server responded with full file');\n      }\n      const data = await response.getData();\n      this._fileSize = data.byteLength;\n      return [{\n        data,\n        offset: 0,\n        length: data.byteLength,\n      }];\n    }\n  }\n\n  async fetchSlice(slice, signal) {\n    const { offset, length } = slice;\n    const response = await this.client.request({\n      headers: {\n        ...this.headers,\n        Range: `bytes=${offset}-${offset + length}`,\n      },\n      signal,\n    });\n\n    // check the response was okay and if the server actually understands range requests\n    if (!response.ok) {\n      throw new Error('Error fetching data.');\n    } else if (response.status === 206) {\n      const data = await response.getData();\n\n      const { total } = parseContentRange(response.getHeader('content-range'));\n      this._fileSize = total || null;\n      return {\n        data,\n        offset,\n        length,\n      };\n    } else {\n      if (!this.allowFullFile) {\n        throw new Error('Server responded with full file');\n      }\n\n      const data = await response.getData();\n\n      this._fileSize = data.byteLength;\n      return {\n        data,\n        offset: 0,\n        length: data.byteLength,\n      };\n    }\n  }\n\n  get fileSize() {\n    return this._fileSize;\n  }\n}\n\nfunction maybeWrapInBlockedSource(source, { blockSize, cacheSize }) {\n  if (blockSize === null) {\n    return source;\n  }\n  return new BlockedSource(source, { blockSize, cacheSize });\n}\n\nexport function makeFetchSource(url, { headers = {}, credentials, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\n  const client = new FetchClient(url, credentials);\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\n\nexport function makeXHRSource(url, { headers = {}, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\n  const client = new XHRClient(url);\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\n\nexport function makeHttpSource(url, { headers = {}, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\n  const client = new HttpClient(url);\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\n\nexport function makeCustomSource(client, { headers = {}, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\n\n/**\n *\n * @param {string} url\n * @param {object} options\n */\nexport function makeRemoteSource(url, { forceXHR = false, ...clientOptions } = {}) {\n  if (typeof fetch === 'function' && !forceXHR) {\n    return makeFetchSource(url, clientOptions);\n  }\n  if (typeof XMLHttpRequest !== 'undefined') {\n    return makeXHRSource(url, clientOptions);\n  }\n  return makeHttpSource(url, clientOptions);\n}\n","import { BaseSource } from './basesource.js';\n\nclass FileReaderSource extends BaseSource {\n  constructor(file) {\n    super();\n    this.file = file;\n  }\n\n  async fetchSlice(slice, signal) {\n    return new Promise((resolve, reject) => {\n      const blob = this.file.slice(slice.offset, slice.offset + slice.length);\n      const reader = new FileReader();\n      reader.onload = (event) => resolve(event.target.result);\n      reader.onerror = reject;\n      reader.onabort = reject;\n      reader.readAsArrayBuffer(blob);\n\n      if (signal) {\n        signal.addEventListener('abort', () => reader.abort());\n      }\n    });\n  }\n}\n\n/**\n * Create a new source from a given file/blob.\n * @param {Blob} file The file or blob to read from.\n * @returns The constructed source\n */\nexport function makeFileReaderSource(file) {\n  return new FileReaderSource(file);\n}\n","/** @module geotiff */\nimport GeoTIFFImage from './geotiffimage.js';\nimport DataView64 from './dataview64.js';\nimport DataSlice from './dataslice.js';\nimport Pool from './pool.js';\n\nimport { makeRemoteSource, makeCustomSource } from './source/remote.js';\nimport { makeBufferSource } from './source/arraybuffer.js';\nimport { makeFileReaderSource } from './source/filereader.js';\nimport { makeFileSource } from './source/file.js';\nimport { BaseClient, BaseResponse } from './source/client/base.js';\n\nimport { fieldTypes, fieldTagNames, arrayFields, geoKeyNames } from './globals.js';\nimport { writeGeotiff } from './geotiffwriter.js';\nimport * as globals from './globals.js';\nimport * as rgb from './rgb.js';\nimport { getDecoder, addDecoder } from './compression/index.js';\nimport { setLogger } from './logging.js';\n\nexport { globals };\nexport { rgb };\nexport { default as BaseDecoder } from './compression/basedecoder.js';\nexport { getDecoder, addDecoder };\nexport { setLogger };\n\n/**\n * @typedef {Uint8Array | Int8Array | Uint16Array | Int16Array | Uint32Array | Int32Array | Float32Array | Float64Array}\n * TypedArray\n */\n\n/**\n * @typedef {{ height:number, width: number }} Dimensions\n */\n\n/**\n * The autogenerated docs are a little confusing here. The effective type is:\n *\n * `TypedArray & { height: number; width: number}`\n * @typedef {TypedArray & Dimensions} TypedArrayWithDimensions\n */\n\n/**\n * The autogenerated docs are a little confusing here. The effective type is:\n *\n * `TypedArray[] & { height: number; width: number}`\n * @typedef {TypedArray[] & Dimensions} TypedArrayArrayWithDimensions\n */\n\n/**\n *  The autogenerated docs are a little confusing here. The effective type is:\n *\n * `(TypedArray | TypedArray[]) & { height: number; width: number}`\n * @typedef {TypedArrayWithDimensions | TypedArrayArrayWithDimensions} ReadRasterResult\n */\n\nfunction getFieldTypeLength(fieldType) {\n  switch (fieldType) {\n    case fieldTypes.BYTE: case fieldTypes.ASCII: case fieldTypes.SBYTE: case fieldTypes.UNDEFINED:\n      return 1;\n    case fieldTypes.SHORT: case fieldTypes.SSHORT:\n      return 2;\n    case fieldTypes.LONG: case fieldTypes.SLONG: case fieldTypes.FLOAT: case fieldTypes.IFD:\n      return 4;\n    case fieldTypes.RATIONAL: case fieldTypes.SRATIONAL: case fieldTypes.DOUBLE:\n    case fieldTypes.LONG8: case fieldTypes.SLONG8: case fieldTypes.IFD8:\n      return 8;\n    default:\n      throw new RangeError(`Invalid field type: ${fieldType}`);\n  }\n}\n\nfunction parseGeoKeyDirectory(fileDirectory) {\n  const rawGeoKeyDirectory = fileDirectory.GeoKeyDirectory;\n  if (!rawGeoKeyDirectory) {\n    return null;\n  }\n\n  const geoKeyDirectory = {};\n  for (let i = 4; i <= rawGeoKeyDirectory[3] * 4; i += 4) {\n    const key = geoKeyNames[rawGeoKeyDirectory[i]];\n    const location = (rawGeoKeyDirectory[i + 1])\n      ? (fieldTagNames[rawGeoKeyDirectory[i + 1]]) : null;\n    const count = rawGeoKeyDirectory[i + 2];\n    const offset = rawGeoKeyDirectory[i + 3];\n\n    let value = null;\n    if (!location) {\n      value = offset;\n    } else {\n      value = fileDirectory[location];\n      if (typeof value === 'undefined' || value === null) {\n        throw new Error(`Could not get value of geoKey '${key}'.`);\n      } else if (typeof value === 'string') {\n        value = value.substring(offset, offset + count - 1);\n      } else if (value.subarray) {\n        value = value.subarray(offset, offset + count);\n        if (count === 1) {\n          value = value[0];\n        }\n      }\n    }\n    geoKeyDirectory[key] = value;\n  }\n  return geoKeyDirectory;\n}\n\nfunction getValues(dataSlice, fieldType, count, offset) {\n  let values = null;\n  let readMethod = null;\n  const fieldTypeLength = getFieldTypeLength(fieldType);\n\n  switch (fieldType) {\n    case fieldTypes.BYTE: case fieldTypes.ASCII: case fieldTypes.UNDEFINED:\n      values = new Uint8Array(count); readMethod = dataSlice.readUint8;\n      break;\n    case fieldTypes.SBYTE:\n      values = new Int8Array(count); readMethod = dataSlice.readInt8;\n      break;\n    case fieldTypes.SHORT:\n      values = new Uint16Array(count); readMethod = dataSlice.readUint16;\n      break;\n    case fieldTypes.SSHORT:\n      values = new Int16Array(count); readMethod = dataSlice.readInt16;\n      break;\n    case fieldTypes.LONG: case fieldTypes.IFD:\n      values = new Uint32Array(count); readMethod = dataSlice.readUint32;\n      break;\n    case fieldTypes.SLONG:\n      values = new Int32Array(count); readMethod = dataSlice.readInt32;\n      break;\n    case fieldTypes.LONG8: case fieldTypes.IFD8:\n      values = new Array(count); readMethod = dataSlice.readUint64;\n      break;\n    case fieldTypes.SLONG8:\n      values = new Array(count); readMethod = dataSlice.readInt64;\n      break;\n    case fieldTypes.RATIONAL:\n      values = new Uint32Array(count * 2); readMethod = dataSlice.readUint32;\n      break;\n    case fieldTypes.SRATIONAL:\n      values = new Int32Array(count * 2); readMethod = dataSlice.readInt32;\n      break;\n    case fieldTypes.FLOAT:\n      values = new Float32Array(count); readMethod = dataSlice.readFloat32;\n      break;\n    case fieldTypes.DOUBLE:\n      values = new Float64Array(count); readMethod = dataSlice.readFloat64;\n      break;\n    default:\n      throw new RangeError(`Invalid field type: ${fieldType}`);\n  }\n\n  // normal fields\n  if (!(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {\n    for (let i = 0; i < count; ++i) {\n      values[i] = readMethod.call(\n        dataSlice, offset + (i * fieldTypeLength),\n      );\n    }\n  } else { // RATIONAL or SRATIONAL\n    for (let i = 0; i < count; i += 2) {\n      values[i] = readMethod.call(\n        dataSlice, offset + (i * fieldTypeLength),\n      );\n      values[i + 1] = readMethod.call(\n        dataSlice, offset + ((i * fieldTypeLength) + 4),\n      );\n    }\n  }\n\n  if (fieldType === fieldTypes.ASCII) {\n    return new TextDecoder('utf-8').decode(values);\n  }\n  return values;\n}\n\n/**\n * Data class to store the parsed file directory, geo key directory and\n * offset to the next IFD\n */\nclass ImageFileDirectory {\n  constructor(fileDirectory, geoKeyDirectory, nextIFDByteOffset) {\n    this.fileDirectory = fileDirectory;\n    this.geoKeyDirectory = geoKeyDirectory;\n    this.nextIFDByteOffset = nextIFDByteOffset;\n  }\n}\n\n/**\n * Error class for cases when an IFD index was requested, that does not exist\n * in the file.\n */\nclass GeoTIFFImageIndexError extends Error {\n  constructor(index) {\n    super(`No image at index ${index}`);\n    this.index = index;\n  }\n}\n\nclass GeoTIFFBase {\n  /**\n   * (experimental) Reads raster data from the best fitting image. This function uses\n   * the image with the lowest resolution that is still a higher resolution than the\n   * requested resolution.\n   * When specified, the `bbox` option is translated to the `window` option and the\n   * `resX` and `resY` to `width` and `height` respectively.\n   * Then, the [readRasters]{@link GeoTIFFImage#readRasters} method of the selected\n   * image is called and the result returned.\n   * @see GeoTIFFImage.readRasters\n   * @param {import('./geotiffimage').ReadRasterOptions} [options={}] optional parameters\n   * @returns {Promise<ReadRasterResult>} the decoded array(s), with `height` and `width`, as a promise\n   */\n  async readRasters(options = {}) {\n    const { window: imageWindow, width, height } = options;\n    let { resX, resY, bbox } = options;\n\n    const firstImage = await this.getImage();\n    let usedImage = firstImage;\n    const imageCount = await this.getImageCount();\n    const imgBBox = firstImage.getBoundingBox();\n\n    if (imageWindow && bbox) {\n      throw new Error('Both \"bbox\" and \"window\" passed.');\n    }\n\n    // if width/height is passed, transform it to resolution\n    if (width || height) {\n      // if we have an image window (pixel coordinates), transform it to a BBox\n      // using the origin/resolution of the first image.\n      if (imageWindow) {\n        const [oX, oY] = firstImage.getOrigin();\n        const [rX, rY] = firstImage.getResolution();\n\n        bbox = [\n          oX + (imageWindow[0] * rX),\n          oY + (imageWindow[1] * rY),\n          oX + (imageWindow[2] * rX),\n          oY + (imageWindow[3] * rY),\n        ];\n      }\n\n      // if we have a bbox (or calculated one)\n\n      const usedBBox = bbox || imgBBox;\n\n      if (width) {\n        if (resX) {\n          throw new Error('Both width and resX passed');\n        }\n        resX = (usedBBox[2] - usedBBox[0]) / width;\n      }\n      if (height) {\n        if (resY) {\n          throw new Error('Both width and resY passed');\n        }\n        resY = (usedBBox[3] - usedBBox[1]) / height;\n      }\n    }\n\n    // if resolution is set or calculated, try to get the image with the worst acceptable resolution\n    if (resX || resY) {\n      const allImages = [];\n      for (let i = 0; i < imageCount; ++i) {\n        const image = await this.getImage(i);\n        const { SubfileType: subfileType, NewSubfileType: newSubfileType } = image.fileDirectory;\n        if (i === 0 || subfileType === 2 || newSubfileType & 1) {\n          allImages.push(image);\n        }\n      }\n\n      allImages.sort((a, b) => a.getWidth() - b.getWidth());\n      for (let i = 0; i < allImages.length; ++i) {\n        const image = allImages[i];\n        const imgResX = (imgBBox[2] - imgBBox[0]) / image.getWidth();\n        const imgResY = (imgBBox[3] - imgBBox[1]) / image.getHeight();\n\n        usedImage = image;\n        if ((resX && resX > imgResX) || (resY && resY > imgResY)) {\n          break;\n        }\n      }\n    }\n\n    let wnd = imageWindow;\n    if (bbox) {\n      const [oX, oY] = firstImage.getOrigin();\n      const [imageResX, imageResY] = usedImage.getResolution(firstImage);\n\n      wnd = [\n        Math.round((bbox[0] - oX) / imageResX),\n        Math.round((bbox[1] - oY) / imageResY),\n        Math.round((bbox[2] - oX) / imageResX),\n        Math.round((bbox[3] - oY) / imageResY),\n      ];\n      wnd = [\n        Math.min(wnd[0], wnd[2]),\n        Math.min(wnd[1], wnd[3]),\n        Math.max(wnd[0], wnd[2]),\n        Math.max(wnd[1], wnd[3]),\n      ];\n    }\n\n    return usedImage.readRasters({ ...options, window: wnd });\n  }\n}\n\n/**\n * @typedef {Object} GeoTIFFOptions\n * @property {boolean} [cache=false] whether or not decoded tiles shall be cached.\n */\n\n/**\n * The abstraction for a whole GeoTIFF file.\n * @augments GeoTIFFBase\n */\nclass GeoTIFF extends GeoTIFFBase {\n  /**\n   * @constructor\n   * @param {*} source The datasource to read from.\n   * @param {boolean} littleEndian Whether the image uses little endian.\n   * @param {boolean} bigTiff Whether the image uses bigTIFF conventions.\n   * @param {number} firstIFDOffset The numeric byte-offset from the start of the image\n   *                                to the first IFD.\n   * @param {GeoTIFFOptions} [options] further options.\n   */\n  constructor(source, littleEndian, bigTiff, firstIFDOffset, options = {}) {\n    super();\n    this.source = source;\n    this.littleEndian = littleEndian;\n    this.bigTiff = bigTiff;\n    this.firstIFDOffset = firstIFDOffset;\n    this.cache = options.cache || false;\n    this.ifdRequests = [];\n    this.ghostValues = null;\n  }\n\n  async getSlice(offset, size) {\n    const fallbackSize = this.bigTiff ? 4048 : 1024;\n    return new DataSlice(\n      (await this.source.fetch([{\n        offset,\n        length: typeof size !== 'undefined' ? size : fallbackSize,\n      }]))[0],\n      offset,\n      this.littleEndian,\n      this.bigTiff,\n    );\n  }\n\n  /**\n   * Instructs to parse an image file directory at the given file offset.\n   * As there is no way to ensure that a location is indeed the start of an IFD,\n   * this function must be called with caution (e.g only using the IFD offsets from\n   * the headers or other IFDs).\n   * @param {number} offset the offset to parse the IFD at\n   * @returns {Promise<ImageFileDirectory>} the parsed IFD\n   */\n  async parseFileDirectoryAt(offset) {\n    const entrySize = this.bigTiff ? 20 : 12;\n    const offsetSize = this.bigTiff ? 8 : 2;\n\n    let dataSlice = await this.getSlice(offset);\n    const numDirEntries = this.bigTiff\n      ? dataSlice.readUint64(offset)\n      : dataSlice.readUint16(offset);\n\n    // if the slice does not cover the whole IFD, request a bigger slice, where the\n    // whole IFD fits: num of entries + n x tag length + offset to next IFD\n    const byteSize = (numDirEntries * entrySize) + (this.bigTiff ? 16 : 6);\n    if (!dataSlice.covers(offset, byteSize)) {\n      dataSlice = await this.getSlice(offset, byteSize);\n    }\n\n    const fileDirectory = {};\n\n    // loop over the IFD and create a file directory object\n    let i = offset + (this.bigTiff ? 8 : 2);\n    for (let entryCount = 0; entryCount < numDirEntries; i += entrySize, ++entryCount) {\n      const fieldTag = dataSlice.readUint16(i);\n      const fieldType = dataSlice.readUint16(i + 2);\n      const typeCount = this.bigTiff\n        ? dataSlice.readUint64(i + 4)\n        : dataSlice.readUint32(i + 4);\n\n      let fieldValues;\n      let value;\n      const fieldTypeLength = getFieldTypeLength(fieldType);\n      const valueOffset = i + (this.bigTiff ? 12 : 8);\n\n      // check whether the value is directly encoded in the tag or refers to a\n      // different external byte range\n      if (fieldTypeLength * typeCount <= (this.bigTiff ? 8 : 4)) {\n        fieldValues = getValues(dataSlice, fieldType, typeCount, valueOffset);\n      } else {\n        // resolve the reference to the actual byte range\n        const actualOffset = dataSlice.readOffset(valueOffset);\n        const length = getFieldTypeLength(fieldType) * typeCount;\n\n        // check, whether we actually cover the referenced byte range; if not,\n        // request a new slice of bytes to read from it\n        if (dataSlice.covers(actualOffset, length)) {\n          fieldValues = getValues(dataSlice, fieldType, typeCount, actualOffset);\n        } else {\n          const fieldDataSlice = await this.getSlice(actualOffset, length);\n          fieldValues = getValues(fieldDataSlice, fieldType, typeCount, actualOffset);\n        }\n      }\n\n      // unpack single values from the array\n      if (typeCount === 1 && arrayFields.indexOf(fieldTag) === -1\n        && !(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {\n        value = fieldValues[0];\n      } else {\n        value = fieldValues;\n      }\n\n      // write the tags value to the file directly\n      fileDirectory[fieldTagNames[fieldTag]] = value;\n    }\n    const geoKeyDirectory = parseGeoKeyDirectory(fileDirectory);\n    const nextIFDByteOffset = dataSlice.readOffset(\n      offset + offsetSize + (entrySize * numDirEntries),\n    );\n\n    return new ImageFileDirectory(\n      fileDirectory,\n      geoKeyDirectory,\n      nextIFDByteOffset,\n    );\n  }\n\n  async requestIFD(index) {\n    // see if we already have that IFD index requested.\n    if (this.ifdRequests[index]) {\n      // attach to an already requested IFD\n      return this.ifdRequests[index];\n    } else if (index === 0) {\n      // special case for index 0\n      this.ifdRequests[index] = this.parseFileDirectoryAt(this.firstIFDOffset);\n      return this.ifdRequests[index];\n    } else if (!this.ifdRequests[index - 1]) {\n      // if the previous IFD was not yet loaded, load that one first\n      // this is the recursive call.\n      try {\n        this.ifdRequests[index - 1] = this.requestIFD(index - 1);\n      } catch (e) {\n        // if the previous one already was an index error, rethrow\n        // with the current index\n        if (e instanceof GeoTIFFImageIndexError) {\n          throw new GeoTIFFImageIndexError(index);\n        }\n        // rethrow anything else\n        throw e;\n      }\n    }\n    // if the previous IFD was loaded, we can finally fetch the one we are interested in.\n    // we need to wrap this in an IIFE, otherwise this.ifdRequests[index] would be delayed\n    this.ifdRequests[index] = (async () => {\n      const previousIfd = await this.ifdRequests[index - 1];\n      if (previousIfd.nextIFDByteOffset === 0) {\n        throw new GeoTIFFImageIndexError(index);\n      }\n      return this.parseFileDirectoryAt(previousIfd.nextIFDByteOffset);\n    })();\n    return this.ifdRequests[index];\n  }\n\n  /**\n   * Get the n-th internal subfile of an image. By default, the first is returned.\n   *\n   * @param {number} [index=0] the index of the image to return.\n   * @returns {Promise<GeoTIFFImage>} the image at the given index\n   */\n  async getImage(index = 0) {\n    const ifd = await this.requestIFD(index);\n    return new GeoTIFFImage(\n      ifd.fileDirectory, ifd.geoKeyDirectory,\n      this.dataView, this.littleEndian, this.cache, this.source,\n    );\n  }\n\n  /**\n   * Returns the count of the internal subfiles.\n   *\n   * @returns {Promise<number>} the number of internal subfile images\n   */\n  async getImageCount() {\n    let index = 0;\n    // loop until we run out of IFDs\n    let hasNext = true;\n    while (hasNext) {\n      try {\n        await this.requestIFD(index);\n        ++index;\n      } catch (e) {\n        if (e instanceof GeoTIFFImageIndexError) {\n          hasNext = false;\n        } else {\n          throw e;\n        }\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Get the values of the COG ghost area as a parsed map.\n   * See https://gdal.org/drivers/raster/cog.html#header-ghost-area for reference\n   * @returns {Promise<Object>} the parsed ghost area or null, if no such area was found\n   */\n  async getGhostValues() {\n    const offset = this.bigTiff ? 16 : 8;\n    if (this.ghostValues) {\n      return this.ghostValues;\n    }\n    const detectionString = 'GDAL_STRUCTURAL_METADATA_SIZE=';\n    const heuristicAreaSize = detectionString.length + 100;\n    let slice = await this.getSlice(offset, heuristicAreaSize);\n    if (detectionString === getValues(slice, fieldTypes.ASCII, detectionString.length, offset)) {\n      const valuesString = getValues(slice, fieldTypes.ASCII, heuristicAreaSize, offset);\n      const firstLine = valuesString.split('\\n')[0];\n      const metadataSize = Number(firstLine.split('=')[1].split(' ')[0]) + firstLine.length;\n      if (metadataSize > heuristicAreaSize) {\n        slice = await this.getSlice(offset, metadataSize);\n      }\n      const fullString = getValues(slice, fieldTypes.ASCII, metadataSize, offset);\n      this.ghostValues = {};\n      fullString\n        .split('\\n')\n        .filter((line) => line.length > 0)\n        .map((line) => line.split('='))\n        .forEach(([key, value]) => {\n          this.ghostValues[key] = value;\n        });\n    }\n    return this.ghostValues;\n  }\n\n  /**\n   * Parse a (Geo)TIFF file from the given source.\n   *\n   * @param {*} source The source of data to parse from.\n   * @param {GeoTIFFOptions} [options] Additional options.\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   */\n  static async fromSource(source, options, signal) {\n    const headerData = (await source.fetch([{ offset: 0, length: 1024 }], signal))[0];\n    const dataView = new DataView64(headerData);\n\n    const BOM = dataView.getUint16(0, 0);\n    let littleEndian;\n    if (BOM === 0x4949) {\n      littleEndian = true;\n    } else if (BOM === 0x4D4D) {\n      littleEndian = false;\n    } else {\n      throw new TypeError('Invalid byte order value.');\n    }\n\n    const magicNumber = dataView.getUint16(2, littleEndian);\n    let bigTiff;\n    if (magicNumber === 42) {\n      bigTiff = false;\n    } else if (magicNumber === 43) {\n      bigTiff = true;\n      const offsetByteSize = dataView.getUint16(4, littleEndian);\n      if (offsetByteSize !== 8) {\n        throw new Error('Unsupported offset byte-size.');\n      }\n    } else {\n      throw new TypeError('Invalid magic number.');\n    }\n\n    const firstIFDOffset = bigTiff\n      ? dataView.getUint64(8, littleEndian)\n      : dataView.getUint32(4, littleEndian);\n    return new GeoTIFF(source, littleEndian, bigTiff, firstIFDOffset, options);\n  }\n\n  /**\n   * Closes the underlying file buffer\n   * N.B. After the GeoTIFF has been completely processed it needs\n   * to be closed but only if it has been constructed from a file.\n   */\n  close() {\n    if (typeof this.source.close === 'function') {\n      return this.source.close();\n    }\n    return false;\n  }\n}\n\nexport { GeoTIFF };\nexport default GeoTIFF;\n\n/**\n * Wrapper for GeoTIFF files that have external overviews.\n * @augments GeoTIFFBase\n */\nclass MultiGeoTIFF extends GeoTIFFBase {\n  /**\n   * Construct a new MultiGeoTIFF from a main and several overview files.\n   * @param {GeoTIFF} mainFile The main GeoTIFF file.\n   * @param {GeoTIFF[]} overviewFiles An array of overview files.\n   */\n  constructor(mainFile, overviewFiles) {\n    super();\n    this.mainFile = mainFile;\n    this.overviewFiles = overviewFiles;\n    this.imageFiles = [mainFile].concat(overviewFiles);\n\n    this.fileDirectoriesPerFile = null;\n    this.fileDirectoriesPerFileParsing = null;\n    this.imageCount = null;\n  }\n\n  async parseFileDirectoriesPerFile() {\n    const requests = [this.mainFile.parseFileDirectoryAt(this.mainFile.firstIFDOffset)]\n      .concat(this.overviewFiles.map((file) => file.parseFileDirectoryAt(file.firstIFDOffset)));\n\n    this.fileDirectoriesPerFile = await Promise.all(requests);\n    return this.fileDirectoriesPerFile;\n  }\n\n  /**\n   * Get the n-th internal subfile of an image. By default, the first is returned.\n   *\n   * @param {number} [index=0] the index of the image to return.\n   * @returns {Promise<GeoTIFFImage>} the image at the given index\n   */\n  async getImage(index = 0) {\n    await this.getImageCount();\n    await this.parseFileDirectoriesPerFile();\n    let visited = 0;\n    let relativeIndex = 0;\n    for (let i = 0; i < this.imageFiles.length; i++) {\n      const imageFile = this.imageFiles[i];\n      for (let ii = 0; ii < this.imageCounts[i]; ii++) {\n        if (index === visited) {\n          const ifd = await imageFile.requestIFD(relativeIndex);\n          return new GeoTIFFImage(\n            ifd.fileDirectory, ifd.geoKeyDirectory,\n            imageFile.dataView, imageFile.littleEndian, imageFile.cache, imageFile.source,\n          );\n        }\n        visited++;\n        relativeIndex++;\n      }\n      relativeIndex = 0;\n    }\n\n    throw new RangeError('Invalid image index');\n  }\n\n  /**\n   * Returns the count of the internal subfiles.\n   *\n   * @returns {Promise<number>} the number of internal subfile images\n   */\n  async getImageCount() {\n    if (this.imageCount !== null) {\n      return this.imageCount;\n    }\n    const requests = [this.mainFile.getImageCount()]\n      .concat(this.overviewFiles.map((file) => file.getImageCount()));\n    this.imageCounts = await Promise.all(requests);\n    this.imageCount = this.imageCounts.reduce((count, ifds) => count + ifds, 0);\n    return this.imageCount;\n  }\n}\n\nexport { MultiGeoTIFF };\n\n/**\n * Creates a new GeoTIFF from a remote URL.\n * @param {string} url The URL to access the image from\n * @param {object} [options] Additional options to pass to the source.\n *                           See {@link makeRemoteSource} for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromUrl(url, options = {}, signal) {\n  return GeoTIFF.fromSource(makeRemoteSource(url, options), signal);\n}\n\n/**\n * Creates a new GeoTIFF from a custom {@link BaseClient}.\n * @param {BaseClient} client The client.\n * @param {object} [options] Additional options to pass to the source.\n *                           See {@link makeRemoteSource} for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromCustomClient(client, options = {}, signal) {\n  return GeoTIFF.fromSource(makeCustomSource(client, options), signal);\n}\n\n/**\n * Construct a new GeoTIFF from an\n * [ArrayBuffer]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer}.\n * @param {ArrayBuffer} arrayBuffer The data to read the file from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromArrayBuffer(arrayBuffer, signal) {\n  return GeoTIFF.fromSource(makeBufferSource(arrayBuffer), signal);\n}\n\n/**\n * Construct a GeoTIFF from a local file path. This uses the node\n * [filesystem API]{@link https://nodejs.org/api/fs.html} and is\n * not available on browsers.\n *\n * N.B. After the GeoTIFF has been completely processed it needs\n * to be closed but only if it has been constructed from a file.\n * @param {string} path The file path to read from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromFile(path, signal) {\n  return GeoTIFF.fromSource(makeFileSource(path), signal);\n}\n\n/**\n * Construct a GeoTIFF from an HTML\n * [Blob]{@link https://developer.mozilla.org/en-US/docs/Web/API/Blob} or\n * [File]{@link https://developer.mozilla.org/en-US/docs/Web/API/File}\n * object.\n * @param {Blob|File} blob The Blob or File object to read from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromBlob(blob, signal) {\n  return GeoTIFF.fromSource(makeFileReaderSource(blob), signal);\n}\n\n/**\n * Construct a MultiGeoTIFF from the given URLs.\n * @param {string} mainUrl The URL for the main file.\n * @param {string[]} overviewUrls An array of URLs for the overview images.\n * @param {Object} [options] Additional options to pass to the source.\n *                           See [makeRemoteSource]{@link module:source.makeRemoteSource}\n *                           for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<MultiGeoTIFF>} The resulting MultiGeoTIFF file.\n */\nexport async function fromUrls(mainUrl, overviewUrls = [], options = {}, signal) {\n  const mainFile = await GeoTIFF.fromSource(makeRemoteSource(mainUrl, options), signal);\n  const overviewFiles = await Promise.all(\n    overviewUrls.map((url) => GeoTIFF.fromSource(makeRemoteSource(url, options))),\n  );\n\n  return new MultiGeoTIFF(mainFile, overviewFiles);\n}\n\n/**\n * Main creating function for GeoTIFF files.\n * @param {(Array)} array of pixel values\n * @returns {metadata} metadata\n */\nexport function writeArrayBuffer(values, metadata) {\n  return writeGeotiff(values, metadata);\n}\n\nexport { Pool };\nexport { GeoTIFFImage };\nexport { BaseClient, BaseResponse };\n","export function fromWhiteIsZero(raster, max) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  let value;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    value = 256 - (raster[i] / max * 256);\n    rgbRaster[j] = value;\n    rgbRaster[j + 1] = value;\n    rgbRaster[j + 2] = value;\n  }\n  return rgbRaster;\n}\n\nexport function fromBlackIsZero(raster, max) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  let value;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    value = raster[i] / max * 256;\n    rgbRaster[j] = value;\n    rgbRaster[j + 1] = value;\n    rgbRaster[j + 2] = value;\n  }\n  return rgbRaster;\n}\n\nexport function fromPalette(raster, colorMap) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  const greenOffset = colorMap.length / 3;\n  const blueOffset = colorMap.length / 3 * 2;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    const mapIndex = raster[i];\n    rgbRaster[j] = colorMap[mapIndex] / 65536 * 256;\n    rgbRaster[j + 1] = colorMap[mapIndex + greenOffset] / 65536 * 256;\n    rgbRaster[j + 2] = colorMap[mapIndex + blueOffset] / 65536 * 256;\n  }\n  return rgbRaster;\n}\n\nexport function fromCMYK(cmykRaster) {\n  const { width, height } = cmykRaster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  for (let i = 0, j = 0; i < cmykRaster.length; i += 4, j += 3) {\n    const c = cmykRaster[i];\n    const m = cmykRaster[i + 1];\n    const y = cmykRaster[i + 2];\n    const k = cmykRaster[i + 3];\n\n    rgbRaster[j] = 255 * ((255 - c) / 256) * ((255 - k) / 256);\n    rgbRaster[j + 1] = 255 * ((255 - m) / 256) * ((255 - k) / 256);\n    rgbRaster[j + 2] = 255 * ((255 - y) / 256) * ((255 - k) / 256);\n  }\n  return rgbRaster;\n}\n\nexport function fromYCbCr(yCbCrRaster) {\n  const { width, height } = yCbCrRaster;\n  const rgbRaster = new Uint8ClampedArray(width * height * 3);\n  for (let i = 0, j = 0; i < yCbCrRaster.length; i += 3, j += 3) {\n    const y = yCbCrRaster[i];\n    const cb = yCbCrRaster[i + 1];\n    const cr = yCbCrRaster[i + 2];\n\n    rgbRaster[j] = (y + (1.40200 * (cr - 0x80)));\n    rgbRaster[j + 1] = (y - (0.34414 * (cb - 0x80)) - (0.71414 * (cr - 0x80)));\n    rgbRaster[j + 2] = (y + (1.77200 * (cb - 0x80)));\n  }\n  return rgbRaster;\n}\n\nconst Xn = 0.95047;\nconst Yn = 1.00000;\nconst Zn = 1.08883;\n\n// from https://github.com/antimatter15/rgb-lab/blob/master/color.js\n\nexport function fromCIELab(cieLabRaster) {\n  const { width, height } = cieLabRaster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n\n  for (let i = 0, j = 0; i < cieLabRaster.length; i += 3, j += 3) {\n    const L = cieLabRaster[i + 0];\n    const a_ = cieLabRaster[i + 1] << 24 >> 24; // conversion from uint8 to int8\n    const b_ = cieLabRaster[i + 2] << 24 >> 24; // same\n\n    let y = (L + 16) / 116;\n    let x = (a_ / 500) + y;\n    let z = y - (b_ / 200);\n    let r;\n    let g;\n    let b;\n\n    x = Xn * ((x * x * x > 0.008856) ? x * x * x : (x - (16 / 116)) / 7.787);\n    y = Yn * ((y * y * y > 0.008856) ? y * y * y : (y - (16 / 116)) / 7.787);\n    z = Zn * ((z * z * z > 0.008856) ? z * z * z : (z - (16 / 116)) / 7.787);\n\n    r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n    g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n    b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n    r = (r > 0.0031308) ? ((1.055 * (r ** (1 / 2.4))) - 0.055) : 12.92 * r;\n    g = (g > 0.0031308) ? ((1.055 * (g ** (1 / 2.4))) - 0.055) : 12.92 * g;\n    b = (b > 0.0031308) ? ((1.055 * (b ** (1 / 2.4))) - 0.055) : 12.92 * b;\n\n    rgbRaster[j] = Math.max(0, Math.min(1, r)) * 255;\n    rgbRaster[j + 1] = Math.max(0, Math.min(1, g)) * 255;\n    rgbRaster[j + 2] = Math.max(0, Math.min(1, b)) * 255;\n  }\n  return rgbRaster;\n}\n","/**\n * @module resample\n */\n\nfunction copyNewSize(array, width, height, samplesPerPixel = 1) {\n  return new (Object.getPrototypeOf(array).constructor)(width * height * samplesPerPixel);\n}\n\n/**\n * Resample the input arrays using nearest neighbor value selection.\n * @param {TypedArray[]} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @returns {TypedArray[]} The resampled rasters\n */\nexport function resampleNearest(valueArrays, inWidth, inHeight, outWidth, outHeight) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n  return valueArrays.map((array) => {\n    const newArray = copyNewSize(array, outWidth, outHeight);\n    for (let y = 0; y < outHeight; ++y) {\n      const cy = Math.min(Math.round(relY * y), inHeight - 1);\n      for (let x = 0; x < outWidth; ++x) {\n        const cx = Math.min(Math.round(relX * x), inWidth - 1);\n        const value = array[(cy * inWidth) + cx];\n        newArray[(y * outWidth) + x] = value;\n      }\n    }\n    return newArray;\n  });\n}\n\n// simple linear interpolation, code from:\n// https://en.wikipedia.org/wiki/Linear_interpolation#Programming_language_support\nfunction lerp(v0, v1, t) {\n  return ((1 - t) * v0) + (t * v1);\n}\n\n/**\n * Resample the input arrays using bilinear interpolation.\n * @param {TypedArray[]} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @returns {TypedArray[]} The resampled rasters\n */\nexport function resampleBilinear(valueArrays, inWidth, inHeight, outWidth, outHeight) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n\n  return valueArrays.map((array) => {\n    const newArray = copyNewSize(array, outWidth, outHeight);\n    for (let y = 0; y < outHeight; ++y) {\n      const rawY = relY * y;\n\n      const yl = Math.floor(rawY);\n      const yh = Math.min(Math.ceil(rawY), (inHeight - 1));\n\n      for (let x = 0; x < outWidth; ++x) {\n        const rawX = relX * x;\n        const tx = rawX % 1;\n\n        const xl = Math.floor(rawX);\n        const xh = Math.min(Math.ceil(rawX), (inWidth - 1));\n\n        const ll = array[(yl * inWidth) + xl];\n        const hl = array[(yl * inWidth) + xh];\n        const lh = array[(yh * inWidth) + xl];\n        const hh = array[(yh * inWidth) + xh];\n\n        const value = lerp(\n          lerp(ll, hl, tx),\n          lerp(lh, hh, tx),\n          rawY % 1,\n        );\n        newArray[(y * outWidth) + x] = value;\n      }\n    }\n    return newArray;\n  });\n}\n\n/**\n * Resample the input arrays using the selected resampling method.\n * @param {TypedArray[]} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {string} [method = 'nearest'] The desired resampling method\n * @returns {TypedArray[]} The resampled rasters\n */\nexport function resample(valueArrays, inWidth, inHeight, outWidth, outHeight, method = 'nearest') {\n  switch (method.toLowerCase()) {\n    case 'nearest':\n      return resampleNearest(valueArrays, inWidth, inHeight, outWidth, outHeight);\n    case 'bilinear':\n    case 'linear':\n      return resampleBilinear(valueArrays, inWidth, inHeight, outWidth, outHeight);\n    default:\n      throw new Error(`Unsupported resampling method: '${method}'`);\n  }\n}\n\n/**\n * Resample the pixel interleaved input array using nearest neighbor value selection.\n * @param {TypedArray} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {number} samples The number of samples per pixel for pixel\n *                         interleaved data\n * @returns {TypedArray} The resampled raster\n */\nexport function resampleNearestInterleaved(\n  valueArray, inWidth, inHeight, outWidth, outHeight, samples) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n\n  const newArray = copyNewSize(valueArray, outWidth, outHeight, samples);\n  for (let y = 0; y < outHeight; ++y) {\n    const cy = Math.min(Math.round(relY * y), inHeight - 1);\n    for (let x = 0; x < outWidth; ++x) {\n      const cx = Math.min(Math.round(relX * x), inWidth - 1);\n      for (let i = 0; i < samples; ++i) {\n        const value = valueArray[(cy * inWidth * samples) + (cx * samples) + i];\n        newArray[(y * outWidth * samples) + (x * samples) + i] = value;\n      }\n    }\n  }\n  return newArray;\n}\n\n/**\n * Resample the pixel interleaved input array using bilinear interpolation.\n * @param {TypedArray} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {number} samples The number of samples per pixel for pixel\n *                         interleaved data\n * @returns {TypedArray} The resampled raster\n */\nexport function resampleBilinearInterleaved(\n  valueArray, inWidth, inHeight, outWidth, outHeight, samples) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n  const newArray = copyNewSize(valueArray, outWidth, outHeight, samples);\n  for (let y = 0; y < outHeight; ++y) {\n    const rawY = relY * y;\n\n    const yl = Math.floor(rawY);\n    const yh = Math.min(Math.ceil(rawY), (inHeight - 1));\n\n    for (let x = 0; x < outWidth; ++x) {\n      const rawX = relX * x;\n      const tx = rawX % 1;\n\n      const xl = Math.floor(rawX);\n      const xh = Math.min(Math.ceil(rawX), (inWidth - 1));\n\n      for (let i = 0; i < samples; ++i) {\n        const ll = valueArray[(yl * inWidth * samples) + (xl * samples) + i];\n        const hl = valueArray[(yl * inWidth * samples) + (xh * samples) + i];\n        const lh = valueArray[(yh * inWidth * samples) + (xl * samples) + i];\n        const hh = valueArray[(yh * inWidth * samples) + (xh * samples) + i];\n\n        const value = lerp(\n          lerp(ll, hl, tx),\n          lerp(lh, hh, tx),\n          rawY % 1,\n        );\n        newArray[(y * outWidth * samples) + (x * samples) + i] = value;\n      }\n    }\n  }\n  return newArray;\n}\n\n/**\n * Resample the pixel interleaved input array using the selected resampling method.\n * @param {TypedArray} valueArray The input array to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {number} samples The number of samples per pixel for pixel\n *                                 interleaved data\n * @param {string} [method = 'nearest'] The desired resampling method\n * @returns {TypedArray} The resampled rasters\n */\nexport function resampleInterleaved(valueArray, inWidth, inHeight, outWidth, outHeight, samples, method = 'nearest') {\n  switch (method.toLowerCase()) {\n    case 'nearest':\n      return resampleNearestInterleaved(\n        valueArray, inWidth, inHeight, outWidth, outHeight, samples,\n      );\n    case 'bilinear':\n    case 'linear':\n      return resampleBilinearInterleaved(\n        valueArray, inWidth, inHeight, outWidth, outHeight, samples,\n      );\n    default:\n      throw new Error(`Unsupported resampling method: '${method}'`);\n  }\n}\n","/** @module geotiffimage */\nimport { getFloat16 } from '@petamoriken/float16';\nimport getAttribute from 'xml-utils/get-attribute.js';\nimport findTagsByName from 'xml-utils/find-tags-by-name.js';\n\nimport { photometricInterpretations, ExtraSamplesValues } from './globals.js';\nimport { fromWhiteIsZero, fromBlackIsZero, fromPalette, fromCMYK, fromYCbCr, fromCIELab } from './rgb.js';\nimport { getDecoder } from './compression/index.js';\nimport { resample, resampleInterleaved } from './resample.js';\n\n/**\n * @typedef {Object} ReadRasterOptions\n * @property {Array<number>} [window=whole window] the subset to read data from in pixels.\n * @property {Array<number>} [bbox=whole image] the subset to read data from in\n *                                           geographical coordinates.\n * @property {Array<number>} [samples=all samples] the selection of samples to read from. Default is all samples.\n * @property {boolean} [interleave=false] whether the data shall be read\n *                                             in one single array or separate\n *                                             arrays.\n * @property {Pool} [pool=null] The optional decoder pool to use.\n * @property {number} [width] The desired width of the output. When the width is not the\n *                                 same as the images, resampling will be performed.\n * @property {number} [height] The desired height of the output. When the width is not the\n *                                  same as the images, resampling will be performed.\n * @property {string} [resampleMethod='nearest'] The desired resampling method.\n * @property {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                                       to be aborted\n * @property {number|number[]} [fillValue] The value to use for parts of the image\n *                                              outside of the images extent. When multiple\n *                                              samples are requested, an array of fill values\n *                                              can be passed.\n */\n\n/** @typedef {import(\"./geotiff.js\").TypedArray} TypedArray */\n/** @typedef {import(\"./geotiff.js\").ReadRasterResult} ReadRasterResult */\n\nfunction sum(array, start, end) {\n  let s = 0;\n  for (let i = start; i < end; ++i) {\n    s += array[i];\n  }\n  return s;\n}\n\nfunction arrayForType(format, bitsPerSample, size) {\n  switch (format) {\n    case 1: // unsigned integer data\n      if (bitsPerSample <= 8) {\n        return new Uint8Array(size);\n      } else if (bitsPerSample <= 16) {\n        return new Uint16Array(size);\n      } else if (bitsPerSample <= 32) {\n        return new Uint32Array(size);\n      }\n      break;\n    case 2: // twos complement signed integer data\n      if (bitsPerSample === 8) {\n        return new Int8Array(size);\n      } else if (bitsPerSample === 16) {\n        return new Int16Array(size);\n      } else if (bitsPerSample === 32) {\n        return new Int32Array(size);\n      }\n      break;\n    case 3: // floating point data\n      switch (bitsPerSample) {\n        case 16:\n        case 32:\n          return new Float32Array(size);\n        case 64:\n          return new Float64Array(size);\n        default:\n          break;\n      }\n      break;\n    default:\n      break;\n  }\n  throw Error('Unsupported data format/bitsPerSample');\n}\n\nfunction needsNormalization(format, bitsPerSample) {\n  if ((format === 1 || format === 2) && bitsPerSample <= 32 && bitsPerSample % 8 === 0) {\n    return false;\n  } else if (format === 3 && (bitsPerSample === 16 || bitsPerSample === 32 || bitsPerSample === 64)) {\n    return false;\n  }\n  return true;\n}\n\nfunction normalizeArray(inBuffer, format, planarConfiguration, samplesPerPixel, bitsPerSample, tileWidth, tileHeight) {\n  // const inByteArray = new Uint8Array(inBuffer);\n  const view = new DataView(inBuffer);\n  const outSize = planarConfiguration === 2\n    ? tileHeight * tileWidth\n    : tileHeight * tileWidth * samplesPerPixel;\n  const samplesToTransfer = planarConfiguration === 2\n    ? 1 : samplesPerPixel;\n  const outArray = arrayForType(format, bitsPerSample, outSize);\n  // let pixel = 0;\n\n  const bitMask = parseInt('1'.repeat(bitsPerSample), 2);\n\n  if (format === 1) { // unsigned integer\n    // translation of https://github.com/OSGeo/gdal/blob/master/gdal/frmts/gtiff/geotiff.cpp#L7337\n    let pixelBitSkip;\n    // let sampleBitOffset = 0;\n    if (planarConfiguration === 1) {\n      pixelBitSkip = samplesPerPixel * bitsPerSample;\n      // sampleBitOffset = (samplesPerPixel - 1) * bitsPerSample;\n    } else {\n      pixelBitSkip = bitsPerSample;\n    }\n\n    // Bits per line rounds up to next byte boundary.\n    let bitsPerLine = tileWidth * pixelBitSkip;\n    if ((bitsPerLine & 7) !== 0) {\n      bitsPerLine = (bitsPerLine + 7) & (~7);\n    }\n\n    for (let y = 0; y < tileHeight; ++y) {\n      const lineBitOffset = y * bitsPerLine;\n      for (let x = 0; x < tileWidth; ++x) {\n        const pixelBitOffset = lineBitOffset + (x * samplesToTransfer * bitsPerSample);\n        for (let i = 0; i < samplesToTransfer; ++i) {\n          const bitOffset = pixelBitOffset + (i * bitsPerSample);\n          const outIndex = (((y * tileWidth) + x) * samplesToTransfer) + i;\n\n          const byteOffset = Math.floor(bitOffset / 8);\n          const innerBitOffset = bitOffset % 8;\n          if (innerBitOffset + bitsPerSample <= 8) {\n            outArray[outIndex] = (view.getUint8(byteOffset) >> (8 - bitsPerSample) - innerBitOffset) & bitMask;\n          } else if (innerBitOffset + bitsPerSample <= 16) {\n            outArray[outIndex] = (view.getUint16(byteOffset) >> (16 - bitsPerSample) - innerBitOffset) & bitMask;\n          } else if (innerBitOffset + bitsPerSample <= 24) {\n            const raw = (view.getUint16(byteOffset) << 8) | (view.getUint8(byteOffset + 2));\n            outArray[outIndex] = (raw >> (24 - bitsPerSample) - innerBitOffset) & bitMask;\n          } else {\n            outArray[outIndex] = (view.getUint32(byteOffset) >> (32 - bitsPerSample) - innerBitOffset) & bitMask;\n          }\n\n          // let outWord = 0;\n          // for (let bit = 0; bit < bitsPerSample; ++bit) {\n          //   if (inByteArray[bitOffset >> 3]\n          //     & (0x80 >> (bitOffset & 7))) {\n          //     outWord |= (1 << (bitsPerSample - 1 - bit));\n          //   }\n          //   ++bitOffset;\n          // }\n\n          // outArray[outIndex] = outWord;\n          // outArray[pixel] = outWord;\n          // pixel += 1;\n        }\n        // bitOffset = bitOffset + pixelBitSkip - bitsPerSample;\n      }\n    }\n  } else if (format === 3) { // floating point\n    // Float16 is handled elsewhere\n    // normalize 16/24 bit floats to 32 bit floats in the array\n    // console.time();\n    // if (bitsPerSample === 16) {\n    //   for (let byte = 0, outIndex = 0; byte < inBuffer.byteLength; byte += 2, ++outIndex) {\n    //     outArray[outIndex] = getFloat16(view, byte);\n    //   }\n    // }\n    // console.timeEnd()\n  }\n\n  return outArray.buffer;\n}\n\n/**\n * GeoTIFF sub-file image.\n */\nclass GeoTIFFImage {\n  /**\n   * @constructor\n   * @param {Object} fileDirectory The parsed file directory\n   * @param {Object} geoKeys The parsed geo-keys\n   * @param {DataView} dataView The DataView for the underlying file.\n   * @param {Boolean} littleEndian Whether the file is encoded in little or big endian\n   * @param {Boolean} cache Whether or not decoded tiles shall be cached\n   * @param {import('./source/basesource').BaseSource} source The datasource to read from\n   */\n  constructor(fileDirectory, geoKeys, dataView, littleEndian, cache, source) {\n    this.fileDirectory = fileDirectory;\n    this.geoKeys = geoKeys;\n    this.dataView = dataView;\n    this.littleEndian = littleEndian;\n    this.tiles = cache ? {} : null;\n    this.isTiled = !fileDirectory.StripOffsets;\n    const planarConfiguration = fileDirectory.PlanarConfiguration;\n    this.planarConfiguration = (typeof planarConfiguration === 'undefined') ? 1 : planarConfiguration;\n    if (this.planarConfiguration !== 1 && this.planarConfiguration !== 2) {\n      throw new Error('Invalid planar configuration.');\n    }\n\n    this.source = source;\n  }\n\n  /**\n   * Returns the associated parsed file directory.\n   * @returns {Object} the parsed file directory\n   */\n  getFileDirectory() {\n    return this.fileDirectory;\n  }\n\n  /**\n   * Returns the associated parsed geo keys.\n   * @returns {Object} the parsed geo keys\n   */\n  getGeoKeys() {\n    return this.geoKeys;\n  }\n\n  /**\n   * Returns the width of the image.\n   * @returns {Number} the width of the image\n   */\n  getWidth() {\n    return this.fileDirectory.ImageWidth;\n  }\n\n  /**\n   * Returns the height of the image.\n   * @returns {Number} the height of the image\n   */\n  getHeight() {\n    return this.fileDirectory.ImageLength;\n  }\n\n  /**\n   * Returns the number of samples per pixel.\n   * @returns {Number} the number of samples per pixel\n   */\n  getSamplesPerPixel() {\n    return typeof this.fileDirectory.SamplesPerPixel !== 'undefined'\n      ? this.fileDirectory.SamplesPerPixel : 1;\n  }\n\n  /**\n   * Returns the width of each tile.\n   * @returns {Number} the width of each tile\n   */\n  getTileWidth() {\n    return this.isTiled ? this.fileDirectory.TileWidth : this.getWidth();\n  }\n\n  /**\n   * Returns the height of each tile.\n   * @returns {Number} the height of each tile\n   */\n  getTileHeight() {\n    if (this.isTiled) {\n      return this.fileDirectory.TileLength;\n    }\n    if (typeof this.fileDirectory.RowsPerStrip !== 'undefined') {\n      return Math.min(this.fileDirectory.RowsPerStrip, this.getHeight());\n    }\n    return this.getHeight();\n  }\n\n  getBlockWidth() {\n    return this.getTileWidth();\n  }\n\n  getBlockHeight(y) {\n    if (this.isTiled || (y + 1) * this.getTileHeight() <= this.getHeight()) {\n      return this.getTileHeight();\n    } else {\n      return this.getHeight() - (y * this.getTileHeight());\n    }\n  }\n\n  /**\n   * Calculates the number of bytes for each pixel across all samples. Only full\n   * bytes are supported, an exception is thrown when this is not the case.\n   * @returns {Number} the bytes per pixel\n   */\n  getBytesPerPixel() {\n    let bytes = 0;\n    for (let i = 0; i < this.fileDirectory.BitsPerSample.length; ++i) {\n      bytes += this.getSampleByteSize(i);\n    }\n    return bytes;\n  }\n\n  getSampleByteSize(i) {\n    if (i >= this.fileDirectory.BitsPerSample.length) {\n      throw new RangeError(`Sample index ${i} is out of range.`);\n    }\n    return Math.ceil(this.fileDirectory.BitsPerSample[i] / 8);\n  }\n\n  getReaderForSample(sampleIndex) {\n    const format = this.fileDirectory.SampleFormat\n      ? this.fileDirectory.SampleFormat[sampleIndex] : 1;\n    const bitsPerSample = this.fileDirectory.BitsPerSample[sampleIndex];\n    switch (format) {\n      case 1: // unsigned integer data\n        if (bitsPerSample <= 8) {\n          return DataView.prototype.getUint8;\n        } else if (bitsPerSample <= 16) {\n          return DataView.prototype.getUint16;\n        } else if (bitsPerSample <= 32) {\n          return DataView.prototype.getUint32;\n        }\n        break;\n      case 2: // twos complement signed integer data\n        if (bitsPerSample <= 8) {\n          return DataView.prototype.getInt8;\n        } else if (bitsPerSample <= 16) {\n          return DataView.prototype.getInt16;\n        } else if (bitsPerSample <= 32) {\n          return DataView.prototype.getInt32;\n        }\n        break;\n      case 3:\n        switch (bitsPerSample) {\n          case 16:\n            return function (offset, littleEndian) {\n              return getFloat16(this, offset, littleEndian);\n            };\n          case 32:\n            return DataView.prototype.getFloat32;\n          case 64:\n            return DataView.prototype.getFloat64;\n          default:\n            break;\n        }\n        break;\n      default:\n        break;\n    }\n    throw Error('Unsupported data format/bitsPerSample');\n  }\n\n  getSampleFormat(sampleIndex = 0) {\n    return this.fileDirectory.SampleFormat\n      ? this.fileDirectory.SampleFormat[sampleIndex] : 1;\n  }\n\n  getBitsPerSample(sampleIndex = 0) {\n    return this.fileDirectory.BitsPerSample[sampleIndex];\n  }\n\n  getArrayForSample(sampleIndex, size) {\n    const format = this.getSampleFormat(sampleIndex);\n    const bitsPerSample = this.getBitsPerSample(sampleIndex);\n    return arrayForType(format, bitsPerSample, size);\n  }\n\n  /**\n   * Returns the decoded strip or tile.\n   * @param {Number} x the strip or tile x-offset\n   * @param {Number} y the tile y-offset (0 for stripped images)\n   * @param {Number} sample the sample to get for separated samples\n   * @param {import(\"./geotiff\").Pool|import(\"./geotiff\").BaseDecoder} poolOrDecoder the decoder or decoder pool\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   * @returns {Promise.<ArrayBuffer>}\n   */\n  async getTileOrStrip(x, y, sample, poolOrDecoder, signal) {\n    const numTilesPerRow = Math.ceil(this.getWidth() / this.getTileWidth());\n    const numTilesPerCol = Math.ceil(this.getHeight() / this.getTileHeight());\n    let index;\n    const { tiles } = this;\n    if (this.planarConfiguration === 1) {\n      index = (y * numTilesPerRow) + x;\n    } else if (this.planarConfiguration === 2) {\n      index = (sample * numTilesPerRow * numTilesPerCol) + (y * numTilesPerRow) + x;\n    }\n\n    let offset;\n    let byteCount;\n    if (this.isTiled) {\n      offset = this.fileDirectory.TileOffsets[index];\n      byteCount = this.fileDirectory.TileByteCounts[index];\n    } else {\n      offset = this.fileDirectory.StripOffsets[index];\n      byteCount = this.fileDirectory.StripByteCounts[index];\n    }\n    const slice = (await this.source.fetch([{ offset, length: byteCount }], signal))[0];\n\n    let request;\n    if (tiles === null || !tiles[index]) {\n    // resolve each request by potentially applying array normalization\n      request = (async () => {\n        let data = await poolOrDecoder.decode(this.fileDirectory, slice);\n        const sampleFormat = this.getSampleFormat();\n        const bitsPerSample = this.getBitsPerSample();\n        if (needsNormalization(sampleFormat, bitsPerSample)) {\n          data = normalizeArray(\n            data,\n            sampleFormat,\n            this.planarConfiguration,\n            this.getSamplesPerPixel(),\n            bitsPerSample,\n            this.getTileWidth(),\n            this.getBlockHeight(y),\n          );\n        }\n        return data;\n      })();\n\n      // set the cache\n      if (tiles !== null) {\n        tiles[index] = request;\n      }\n    } else {\n      // get from the cache\n      request = tiles[index];\n    }\n\n    // cache the tile request\n    return { x, y, sample, data: await request };\n  }\n\n  /**\n   * Internal read function.\n   * @private\n   * @param {Array} imageWindow The image window in pixel coordinates\n   * @param {Array} samples The selected samples (0-based indices)\n   * @param {TypedArray|TypedArray[]} valueArrays The array(s) to write into\n   * @param {Boolean} interleave Whether or not to write in an interleaved manner\n   * @param {import(\"./geotiff\").Pool|AbstractDecoder} poolOrDecoder the decoder or decoder pool\n   * @param {number} width the width of window to be read into\n   * @param {number} height the height of window to be read into\n   * @param {number} resampleMethod the resampling method to be used when interpolating\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   * @returns {Promise<ReadRasterResult>}\n   */\n  async _readRaster(imageWindow, samples, valueArrays, interleave, poolOrDecoder, width,\n    height, resampleMethod, signal) {\n    const tileWidth = this.getTileWidth();\n    const tileHeight = this.getTileHeight();\n    const imageWidth = this.getWidth();\n    const imageHeight = this.getHeight();\n\n    const minXTile = Math.max(Math.floor(imageWindow[0] / tileWidth), 0);\n    const maxXTile = Math.min(\n      Math.ceil(imageWindow[2] / tileWidth),\n      Math.ceil(imageWidth / tileWidth),\n    );\n    const minYTile = Math.max(Math.floor(imageWindow[1] / tileHeight), 0);\n    const maxYTile = Math.min(\n      Math.ceil(imageWindow[3] / tileHeight),\n      Math.ceil(imageHeight / tileHeight),\n    );\n    const windowWidth = imageWindow[2] - imageWindow[0];\n\n    let bytesPerPixel = this.getBytesPerPixel();\n\n    const srcSampleOffsets = [];\n    const sampleReaders = [];\n    for (let i = 0; i < samples.length; ++i) {\n      if (this.planarConfiguration === 1) {\n        srcSampleOffsets.push(sum(this.fileDirectory.BitsPerSample, 0, samples[i]) / 8);\n      } else {\n        srcSampleOffsets.push(0);\n      }\n      sampleReaders.push(this.getReaderForSample(samples[i]));\n    }\n\n    const promises = [];\n    const { littleEndian } = this;\n\n    for (let yTile = minYTile; yTile < maxYTile; ++yTile) {\n      for (let xTile = minXTile; xTile < maxXTile; ++xTile) {\n        let getPromise;\n        if (this.planarConfiguration === 1) {\n          getPromise = this.getTileOrStrip(xTile, yTile, 0, poolOrDecoder, signal);\n        }\n        for (let sampleIndex = 0; sampleIndex < samples.length; ++sampleIndex) {\n          const si = sampleIndex;\n          const sample = samples[sampleIndex];\n          if (this.planarConfiguration === 2) {\n            bytesPerPixel = this.getSampleByteSize(sample);\n            getPromise = this.getTileOrStrip(xTile, yTile, sample, poolOrDecoder, signal);\n          }\n          const promise = getPromise.then((tile) => {\n            const buffer = tile.data;\n            const dataView = new DataView(buffer);\n            const blockHeight = this.getBlockHeight(tile.y);\n            const firstLine = tile.y * tileHeight;\n            const firstCol = tile.x * tileWidth;\n            const lastLine = firstLine + blockHeight;\n            const lastCol = (tile.x + 1) * tileWidth;\n            const reader = sampleReaders[si];\n\n            const ymax = Math.min(blockHeight, blockHeight - (lastLine - imageWindow[3]), imageHeight - firstLine);\n            const xmax = Math.min(tileWidth, tileWidth - (lastCol - imageWindow[2]), imageWidth - firstCol);\n\n            for (let y = Math.max(0, imageWindow[1] - firstLine); y < ymax; ++y) {\n              for (let x = Math.max(0, imageWindow[0] - firstCol); x < xmax; ++x) {\n                const pixelOffset = ((y * tileWidth) + x) * bytesPerPixel;\n                const value = reader.call(\n                  dataView, pixelOffset + srcSampleOffsets[si], littleEndian,\n                );\n                let windowCoordinate;\n                if (interleave) {\n                  windowCoordinate = ((y + firstLine - imageWindow[1]) * windowWidth * samples.length)\n                    + ((x + firstCol - imageWindow[0]) * samples.length)\n                    + si;\n                  valueArrays[windowCoordinate] = value;\n                } else {\n                  windowCoordinate = (\n                    (y + firstLine - imageWindow[1]) * windowWidth\n                  ) + x + firstCol - imageWindow[0];\n                  valueArrays[si][windowCoordinate] = value;\n                }\n              }\n            }\n          });\n          promises.push(promise);\n        }\n      }\n    }\n    await Promise.all(promises);\n\n    if ((width && (imageWindow[2] - imageWindow[0]) !== width)\n        || (height && (imageWindow[3] - imageWindow[1]) !== height)) {\n      let resampled;\n      if (interleave) {\n        resampled = resampleInterleaved(\n          valueArrays,\n          imageWindow[2] - imageWindow[0],\n          imageWindow[3] - imageWindow[1],\n          width, height,\n          samples.length,\n          resampleMethod,\n        );\n      } else {\n        resampled = resample(\n          valueArrays,\n          imageWindow[2] - imageWindow[0],\n          imageWindow[3] - imageWindow[1],\n          width, height,\n          resampleMethod,\n        );\n      }\n      resampled.width = width;\n      resampled.height = height;\n      return resampled;\n    }\n\n    valueArrays.width = width || imageWindow[2] - imageWindow[0];\n    valueArrays.height = height || imageWindow[3] - imageWindow[1];\n\n    return valueArrays;\n  }\n\n  /**\n   * Reads raster data from the image. This function reads all selected samples\n   * into separate arrays of the correct type for that sample or into a single\n   * combined array when `interleave` is set. When provided, only a subset\n   * of the raster is read for each sample.\n   *\n   * @param {ReadRasterOptions} [options={}] optional parameters\n   * @returns {Promise<ReadRasterResult>} the decoded arrays as a promise\n   */\n  async readRasters({\n    window: wnd, samples = [], interleave, pool = null,\n    width, height, resampleMethod, fillValue, signal,\n  } = {}) {\n    const imageWindow = wnd || [0, 0, this.getWidth(), this.getHeight()];\n\n    // check parameters\n    if (imageWindow[0] > imageWindow[2] || imageWindow[1] > imageWindow[3]) {\n      throw new Error('Invalid subsets');\n    }\n\n    const imageWindowWidth = imageWindow[2] - imageWindow[0];\n    const imageWindowHeight = imageWindow[3] - imageWindow[1];\n    const numPixels = imageWindowWidth * imageWindowHeight;\n    const samplesPerPixel = this.getSamplesPerPixel();\n\n    if (!samples || !samples.length) {\n      for (let i = 0; i < samplesPerPixel; ++i) {\n        samples.push(i);\n      }\n    } else {\n      for (let i = 0; i < samples.length; ++i) {\n        if (samples[i] >= samplesPerPixel) {\n          return Promise.reject(new RangeError(`Invalid sample index '${samples[i]}'.`));\n        }\n      }\n    }\n    let valueArrays;\n    if (interleave) {\n      const format = this.fileDirectory.SampleFormat\n        ? Math.max.apply(null, this.fileDirectory.SampleFormat) : 1;\n      const bitsPerSample = Math.max.apply(null, this.fileDirectory.BitsPerSample);\n      valueArrays = arrayForType(format, bitsPerSample, numPixels * samples.length);\n      if (fillValue) {\n        valueArrays.fill(fillValue);\n      }\n    } else {\n      valueArrays = [];\n      for (let i = 0; i < samples.length; ++i) {\n        const valueArray = this.getArrayForSample(samples[i], numPixels);\n        if (Array.isArray(fillValue) && i < fillValue.length) {\n          valueArray.fill(fillValue[i]);\n        } else if (fillValue && !Array.isArray(fillValue)) {\n          valueArray.fill(fillValue);\n        }\n        valueArrays.push(valueArray);\n      }\n    }\n\n    const poolOrDecoder = pool || await getDecoder(this.fileDirectory);\n\n    const result = await this._readRaster(\n      imageWindow, samples, valueArrays, interleave, poolOrDecoder, width, height, resampleMethod, signal,\n    );\n    return result;\n  }\n\n  /**\n   * Reads raster data from the image as RGB. The result is always an\n   * interleaved typed array.\n   * Colorspaces other than RGB will be transformed to RGB, color maps expanded.\n   * When no other method is applicable, the first sample is used to produce a\n   * grayscale image.\n   * When provided, only a subset of the raster is read for each sample.\n   *\n   * @param {Object} [options] optional parameters\n   * @param {Array<number>} [options.window] the subset to read data from in pixels.\n   * @param {boolean} [options.interleave=true] whether the data shall be read\n   *                                             in one single array or separate\n   *                                             arrays.\n   * @param {import(\"./geotiff\").Pool} [options.pool=null] The optional decoder pool to use.\n   * @param {number} [options.width] The desired width of the output. When the width is no the\n   *                                 same as the images, resampling will be performed.\n   * @param {number} [options.height] The desired height of the output. When the width is no the\n   *                                  same as the images, resampling will be performed.\n   * @param {string} [options.resampleMethod='nearest'] The desired resampling method.\n   * @param {boolean} [options.enableAlpha=false] Enable reading alpha channel if present.\n   * @param {AbortSignal} [options.signal] An AbortSignal that may be signalled if the request is\n   *                                       to be aborted\n   * @returns {Promise<ReadRasterResult>} the RGB array as a Promise\n   */\n  async readRGB({ window, interleave = true, pool = null, width, height,\n    resampleMethod, enableAlpha = false, signal } = {}) {\n    const imageWindow = window || [0, 0, this.getWidth(), this.getHeight()];\n\n    // check parameters\n    if (imageWindow[0] > imageWindow[2] || imageWindow[1] > imageWindow[3]) {\n      throw new Error('Invalid subsets');\n    }\n\n    const pi = this.fileDirectory.PhotometricInterpretation;\n\n    if (pi === photometricInterpretations.RGB) {\n      let s = [0, 1, 2];\n      if ((!(this.fileDirectory.ExtraSamples === ExtraSamplesValues.Unspecified)) && enableAlpha) {\n        s = [];\n        for (let i = 0; i < this.fileDirectory.BitsPerSample.length; i += 1) {\n          s.push(i);\n        }\n      }\n      return this.readRasters({\n        window,\n        interleave,\n        samples: s,\n        pool,\n        width,\n        height,\n        resampleMethod,\n        signal,\n      });\n    }\n\n    let samples;\n    switch (pi) {\n      case photometricInterpretations.WhiteIsZero:\n      case photometricInterpretations.BlackIsZero:\n      case photometricInterpretations.Palette:\n        samples = [0];\n        break;\n      case photometricInterpretations.CMYK:\n        samples = [0, 1, 2, 3];\n        break;\n      case photometricInterpretations.YCbCr:\n      case photometricInterpretations.CIELab:\n        samples = [0, 1, 2];\n        break;\n      default:\n        throw new Error('Invalid or unsupported photometric interpretation.');\n    }\n\n    const subOptions = {\n      window: imageWindow,\n      interleave: true,\n      samples,\n      pool,\n      width,\n      height,\n      resampleMethod,\n      signal,\n    };\n    const { fileDirectory } = this;\n    const raster = await this.readRasters(subOptions);\n\n    const max = 2 ** this.fileDirectory.BitsPerSample[0];\n    let data;\n    switch (pi) {\n      case photometricInterpretations.WhiteIsZero:\n        data = fromWhiteIsZero(raster, max);\n        break;\n      case photometricInterpretations.BlackIsZero:\n        data = fromBlackIsZero(raster, max);\n        break;\n      case photometricInterpretations.Palette:\n        data = fromPalette(raster, fileDirectory.ColorMap);\n        break;\n      case photometricInterpretations.CMYK:\n        data = fromCMYK(raster);\n        break;\n      case photometricInterpretations.YCbCr:\n        data = fromYCbCr(raster);\n        break;\n      case photometricInterpretations.CIELab:\n        data = fromCIELab(raster);\n        break;\n      default:\n        throw new Error('Unsupported photometric interpretation.');\n    }\n\n    // if non-interleaved data is requested, we must split the channels\n    // into their respective arrays\n    if (!interleave) {\n      const red = new Uint8Array(data.length / 3);\n      const green = new Uint8Array(data.length / 3);\n      const blue = new Uint8Array(data.length / 3);\n      for (let i = 0, j = 0; i < data.length; i += 3, ++j) {\n        red[j] = data[i];\n        green[j] = data[i + 1];\n        blue[j] = data[i + 2];\n      }\n      data = [red, green, blue];\n    }\n\n    data.width = raster.width;\n    data.height = raster.height;\n    return data;\n  }\n\n  /**\n   * Returns an array of tiepoints.\n   * @returns {Object[]}\n   */\n  getTiePoints() {\n    if (!this.fileDirectory.ModelTiepoint) {\n      return [];\n    }\n\n    const tiePoints = [];\n    for (let i = 0; i < this.fileDirectory.ModelTiepoint.length; i += 6) {\n      tiePoints.push({\n        i: this.fileDirectory.ModelTiepoint[i],\n        j: this.fileDirectory.ModelTiepoint[i + 1],\n        k: this.fileDirectory.ModelTiepoint[i + 2],\n        x: this.fileDirectory.ModelTiepoint[i + 3],\n        y: this.fileDirectory.ModelTiepoint[i + 4],\n        z: this.fileDirectory.ModelTiepoint[i + 5],\n      });\n    }\n    return tiePoints;\n  }\n\n  /**\n   * Returns the parsed GDAL metadata items.\n   *\n   * If sample is passed to null, dataset-level metadata will be returned.\n   * Otherwise only metadata specific to the provided sample will be returned.\n   *\n   * @param {number} [sample=null] The sample index.\n   * @returns {Object}\n   */\n  getGDALMetadata(sample = null) {\n    const metadata = {};\n    if (!this.fileDirectory.GDAL_METADATA) {\n      return null;\n    }\n    const string = this.fileDirectory.GDAL_METADATA;\n\n    let items = findTagsByName(string, 'Item');\n\n    if (sample === null) {\n      items = items.filter((item) => getAttribute(item, 'sample') === undefined);\n    } else {\n      items = items.filter((item) => Number(getAttribute(item, 'sample')) === sample);\n    }\n\n    for (let i = 0; i < items.length; ++i) {\n      const item = items[i];\n      metadata[getAttribute(item, 'name')] = item.inner;\n    }\n    return metadata;\n  }\n\n  /**\n   * Returns the GDAL nodata value\n   * @returns {number|null}\n   */\n  getGDALNoData() {\n    if (!this.fileDirectory.GDAL_NODATA) {\n      return null;\n    }\n    const string = this.fileDirectory.GDAL_NODATA;\n    return Number(string.substring(0, string.length - 1));\n  }\n\n  /**\n   * Returns the image origin as a XYZ-vector. When the image has no affine\n   * transformation, then an exception is thrown.\n   * @returns {Array<number>} The origin as a vector\n   */\n  getOrigin() {\n    const tiePoints = this.fileDirectory.ModelTiepoint;\n    const modelTransformation = this.fileDirectory.ModelTransformation;\n    if (tiePoints && tiePoints.length === 6) {\n      return [\n        tiePoints[3],\n        tiePoints[4],\n        tiePoints[5],\n      ];\n    }\n    if (modelTransformation) {\n      return [\n        modelTransformation[3],\n        modelTransformation[7],\n        modelTransformation[11],\n      ];\n    }\n    throw new Error('The image does not have an affine transformation.');\n  }\n\n  /**\n   * Returns the image resolution as a XYZ-vector. When the image has no affine\n   * transformation, then an exception is thrown.\n   * @param {GeoTIFFImage} [referenceImage=null] A reference image to calculate the resolution from\n   *                                             in cases when the current image does not have the\n   *                                             required tags on its own.\n   * @returns {Array<number>} The resolution as a vector\n   */\n  getResolution(referenceImage = null) {\n    const modelPixelScale = this.fileDirectory.ModelPixelScale;\n    const modelTransformation = this.fileDirectory.ModelTransformation;\n\n    if (modelPixelScale) {\n      return [\n        modelPixelScale[0],\n        -modelPixelScale[1],\n        modelPixelScale[2],\n      ];\n    }\n    if (modelTransformation) {\n      if (modelTransformation[1] === 0 && modelTransformation[4] === 0) {\n        return [\n          modelTransformation[0],\n          -modelTransformation[5],\n          modelTransformation[10],\n        ];\n      }\n      return [\n        Math.sqrt((modelTransformation[0] * modelTransformation[0])\n          + (modelTransformation[4] * modelTransformation[4])),\n        -Math.sqrt((modelTransformation[1] * modelTransformation[1])\n          + (modelTransformation[5] * modelTransformation[5])),\n        modelTransformation[10]];\n    }\n\n    if (referenceImage) {\n      const [refResX, refResY, refResZ] = referenceImage.getResolution();\n      return [\n        refResX * referenceImage.getWidth() / this.getWidth(),\n        refResY * referenceImage.getHeight() / this.getHeight(),\n        refResZ * referenceImage.getWidth() / this.getWidth(),\n      ];\n    }\n\n    throw new Error('The image does not have an affine transformation.');\n  }\n\n  /**\n   * Returns whether or not the pixels of the image depict an area (or point).\n   * @returns {Boolean} Whether the pixels are a point\n   */\n  pixelIsArea() {\n    return this.geoKeys.GTRasterTypeGeoKey === 1;\n  }\n\n  /**\n   * Returns the image bounding box as an array of 4 values: min-x, min-y,\n   * max-x and max-y. When the image has no affine transformation, then an\n   * exception is thrown.\n   * @param {boolean} [tilegrid=false] If true return extent for a tilegrid\n   *                                   without adjustment for ModelTransformation.\n   * @returns {Array<number>} The bounding box\n   */\n  getBoundingBox(tilegrid = false) {\n    const height = this.getHeight();\n    const width = this.getWidth();\n\n    if (this.fileDirectory.ModelTransformation && !tilegrid) {\n      // eslint-disable-next-line no-unused-vars\n      const [a, b, c, d, e, f, g, h] = this.fileDirectory.ModelTransformation;\n\n      const corners = [\n        [0, 0],\n        [0, height],\n        [width, 0],\n        [width, height],\n      ];\n\n      const projected = corners.map(([I, J]) => [\n        d + (a * I) + (b * J),\n        h + (e * I) + (f * J),\n      ]);\n\n      const xs = projected.map((pt) => pt[0]);\n      const ys = projected.map((pt) => pt[1]);\n\n      return [\n        Math.min(...xs),\n        Math.min(...ys),\n        Math.max(...xs),\n        Math.max(...ys),\n      ];\n    } else {\n      const origin = this.getOrigin();\n      const resolution = this.getResolution();\n\n      const x1 = origin[0];\n      const y1 = origin[1];\n\n      const x2 = x1 + (resolution[0] * width);\n      const y2 = y1 + (resolution[1] * height);\n\n      return [\n        Math.min(x1, x2),\n        Math.min(y1, y2),\n        Math.max(x1, x2),\n        Math.max(y1, y2),\n      ];\n    }\n  }\n}\n\nexport default GeoTIFFImage;\n","export const fieldTagNames = {\n  // TIFF Baseline\n  0x013B: 'Artist',\n  0x0102: 'BitsPerSample',\n  0x0109: 'CellLength',\n  0x0108: 'CellWidth',\n  0x0140: 'ColorMap',\n  0x0103: 'Compression',\n  0x8298: 'Copyright',\n  0x0132: 'DateTime',\n  0x0152: 'ExtraSamples',\n  0x010A: 'FillOrder',\n  0x0121: 'FreeByteCounts',\n  0x0120: 'FreeOffsets',\n  0x0123: 'GrayResponseCurve',\n  0x0122: 'GrayResponseUnit',\n  0x013C: 'HostComputer',\n  0x010E: 'ImageDescription',\n  0x0101: 'ImageLength',\n  0x0100: 'ImageWidth',\n  0x010F: 'Make',\n  0x0119: 'MaxSampleValue',\n  0x0118: 'MinSampleValue',\n  0x0110: 'Model',\n  0x00FE: 'NewSubfileType',\n  0x0112: 'Orientation',\n  0x0106: 'PhotometricInterpretation',\n  0x011C: 'PlanarConfiguration',\n  0x0128: 'ResolutionUnit',\n  0x0116: 'RowsPerStrip',\n  0x0115: 'SamplesPerPixel',\n  0x0131: 'Software',\n  0x0117: 'StripByteCounts',\n  0x0111: 'StripOffsets',\n  0x00FF: 'SubfileType',\n  0x0107: 'Threshholding',\n  0x011A: 'XResolution',\n  0x011B: 'YResolution',\n\n  // TIFF Extended\n  0x0146: 'BadFaxLines',\n  0x0147: 'CleanFaxData',\n  0x0157: 'ClipPath',\n  0x0148: 'ConsecutiveBadFaxLines',\n  0x01B1: 'Decode',\n  0x01B2: 'DefaultImageColor',\n  0x010D: 'DocumentName',\n  0x0150: 'DotRange',\n  0x0141: 'HalftoneHints',\n  0x015A: 'Indexed',\n  0x015B: 'JPEGTables',\n  0x011D: 'PageName',\n  0x0129: 'PageNumber',\n  0x013D: 'Predictor',\n  0x013F: 'PrimaryChromaticities',\n  0x0214: 'ReferenceBlackWhite',\n  0x0153: 'SampleFormat',\n  0x0154: 'SMinSampleValue',\n  0x0155: 'SMaxSampleValue',\n  0x022F: 'StripRowCounts',\n  0x014A: 'SubIFDs',\n  0x0124: 'T4Options',\n  0x0125: 'T6Options',\n  0x0145: 'TileByteCounts',\n  0x0143: 'TileLength',\n  0x0144: 'TileOffsets',\n  0x0142: 'TileWidth',\n  0x012D: 'TransferFunction',\n  0x013E: 'WhitePoint',\n  0x0158: 'XClipPathUnits',\n  0x011E: 'XPosition',\n  0x0211: 'YCbCrCoefficients',\n  0x0213: 'YCbCrPositioning',\n  0x0212: 'YCbCrSubSampling',\n  0x0159: 'YClipPathUnits',\n  0x011F: 'YPosition',\n\n  // EXIF\n  0x9202: 'ApertureValue',\n  0xA001: 'ColorSpace',\n  0x9004: 'DateTimeDigitized',\n  0x9003: 'DateTimeOriginal',\n  0x8769: 'Exif IFD',\n  0x9000: 'ExifVersion',\n  0x829A: 'ExposureTime',\n  0xA300: 'FileSource',\n  0x9209: 'Flash',\n  0xA000: 'FlashpixVersion',\n  0x829D: 'FNumber',\n  0xA420: 'ImageUniqueID',\n  0x9208: 'LightSource',\n  0x927C: 'MakerNote',\n  0x9201: 'ShutterSpeedValue',\n  0x9286: 'UserComment',\n\n  // IPTC\n  0x83BB: 'IPTC',\n\n  // ICC\n  0x8773: 'ICC Profile',\n\n  // XMP\n  0x02BC: 'XMP',\n\n  // GDAL\n  0xA480: 'GDAL_METADATA',\n  0xA481: 'GDAL_NODATA',\n\n  // Photoshop\n  0x8649: 'Photoshop',\n\n  // GeoTiff\n  0x830E: 'ModelPixelScale',\n  0x8482: 'ModelTiepoint',\n  0x85D8: 'ModelTransformation',\n  0x87AF: 'GeoKeyDirectory',\n  0x87B0: 'GeoDoubleParams',\n  0x87B1: 'GeoAsciiParams',\n\n  // LERC\n  0xC5F2: 'LercParameters',\n};\n\nexport const fieldTags = {};\nfor (const key in fieldTagNames) {\n  if (fieldTagNames.hasOwnProperty(key)) {\n    fieldTags[fieldTagNames[key]] = parseInt(key, 10);\n  }\n}\n\nexport const fieldTagTypes = {\n  256: 'SHORT',\n  257: 'SHORT',\n  258: 'SHORT',\n  259: 'SHORT',\n  262: 'SHORT',\n  273: 'LONG',\n  274: 'SHORT',\n  277: 'SHORT',\n  278: 'LONG',\n  279: 'LONG',\n  282: 'RATIONAL',\n  283: 'RATIONAL',\n  284: 'SHORT',\n  286: 'SHORT',\n  287: 'RATIONAL',\n  296: 'SHORT',\n  297: 'SHORT',\n  305: 'ASCII',\n  306: 'ASCII',\n  338: 'SHORT',\n  339: 'SHORT',\n  513: 'LONG',\n  514: 'LONG',\n  1024: 'SHORT',\n  1025: 'SHORT',\n  2048: 'SHORT',\n  2049: 'ASCII',\n  3072: 'SHORT',\n  3073: 'ASCII',\n  33550: 'DOUBLE',\n  33922: 'DOUBLE',\n  34264: 'DOUBLE',\n  34665: 'LONG',\n  34735: 'SHORT',\n  34736: 'DOUBLE',\n  34737: 'ASCII',\n  42113: 'ASCII',\n};\n\nexport const arrayFields = [\n  fieldTags.BitsPerSample,\n  fieldTags.ExtraSamples,\n  fieldTags.SampleFormat,\n  fieldTags.StripByteCounts,\n  fieldTags.StripOffsets,\n  fieldTags.StripRowCounts,\n  fieldTags.TileByteCounts,\n  fieldTags.TileOffsets,\n  fieldTags.SubIFDs,\n];\n\nexport const fieldTypeNames = {\n  0x0001: 'BYTE',\n  0x0002: 'ASCII',\n  0x0003: 'SHORT',\n  0x0004: 'LONG',\n  0x0005: 'RATIONAL',\n  0x0006: 'SBYTE',\n  0x0007: 'UNDEFINED',\n  0x0008: 'SSHORT',\n  0x0009: 'SLONG',\n  0x000A: 'SRATIONAL',\n  0x000B: 'FLOAT',\n  0x000C: 'DOUBLE',\n  // IFD offset, suggested by https://owl.phy.queensu.ca/~phil/exiftool/standards.html\n  0x000D: 'IFD',\n  // introduced by BigTIFF\n  0x0010: 'LONG8',\n  0x0011: 'SLONG8',\n  0x0012: 'IFD8',\n};\n\nexport const fieldTypes = {};\nfor (const key in fieldTypeNames) {\n  if (fieldTypeNames.hasOwnProperty(key)) {\n    fieldTypes[fieldTypeNames[key]] = parseInt(key, 10);\n  }\n}\n\nexport const photometricInterpretations = {\n  WhiteIsZero: 0,\n  BlackIsZero: 1,\n  RGB: 2,\n  Palette: 3,\n  TransparencyMask: 4,\n  CMYK: 5,\n  YCbCr: 6,\n\n  CIELab: 8,\n  ICCLab: 9,\n};\n\nexport const ExtraSamplesValues = {\n  Unspecified: 0,\n  Assocalpha: 1,\n  Unassalpha: 2,\n};\n\nexport const LercParameters = {\n  Version: 0,\n  AddCompression: 1,\n};\n\nexport const LercAddCompression = {\n  None: 0,\n  Deflate: 1,\n  Zstandard: 2,\n};\n\nexport const geoKeyNames = {\n  1024: 'GTModelTypeGeoKey',\n  1025: 'GTRasterTypeGeoKey',\n  1026: 'GTCitationGeoKey',\n  2048: 'GeographicTypeGeoKey',\n  2049: 'GeogCitationGeoKey',\n  2050: 'GeogGeodeticDatumGeoKey',\n  2051: 'GeogPrimeMeridianGeoKey',\n  2052: 'GeogLinearUnitsGeoKey',\n  2053: 'GeogLinearUnitSizeGeoKey',\n  2054: 'GeogAngularUnitsGeoKey',\n  2055: 'GeogAngularUnitSizeGeoKey',\n  2056: 'GeogEllipsoidGeoKey',\n  2057: 'GeogSemiMajorAxisGeoKey',\n  2058: 'GeogSemiMinorAxisGeoKey',\n  2059: 'GeogInvFlatteningGeoKey',\n  2060: 'GeogAzimuthUnitsGeoKey',\n  2061: 'GeogPrimeMeridianLongGeoKey',\n  2062: 'GeogTOWGS84GeoKey',\n  3072: 'ProjectedCSTypeGeoKey',\n  3073: 'PCSCitationGeoKey',\n  3074: 'ProjectionGeoKey',\n  3075: 'ProjCoordTransGeoKey',\n  3076: 'ProjLinearUnitsGeoKey',\n  3077: 'ProjLinearUnitSizeGeoKey',\n  3078: 'ProjStdParallel1GeoKey',\n  3079: 'ProjStdParallel2GeoKey',\n  3080: 'ProjNatOriginLongGeoKey',\n  3081: 'ProjNatOriginLatGeoKey',\n  3082: 'ProjFalseEastingGeoKey',\n  3083: 'ProjFalseNorthingGeoKey',\n  3084: 'ProjFalseOriginLongGeoKey',\n  3085: 'ProjFalseOriginLatGeoKey',\n  3086: 'ProjFalseOriginEastingGeoKey',\n  3087: 'ProjFalseOriginNorthingGeoKey',\n  3088: 'ProjCenterLongGeoKey',\n  3089: 'ProjCenterLatGeoKey',\n  3090: 'ProjCenterEastingGeoKey',\n  3091: 'ProjCenterNorthingGeoKey',\n  3092: 'ProjScaleAtNatOriginGeoKey',\n  3093: 'ProjScaleAtCenterGeoKey',\n  3094: 'ProjAzimuthAngleGeoKey',\n  3095: 'ProjStraightVertPoleLongGeoKey',\n  3096: 'ProjRectifiedGridAngleGeoKey',\n  4096: 'VerticalCSTypeGeoKey',\n  4097: 'VerticalCitationGeoKey',\n  4098: 'VerticalDatumGeoKey',\n  4099: 'VerticalUnitsGeoKey',\n};\n\nexport const geoKeys = {};\nfor (const key in geoKeyNames) {\n  if (geoKeyNames.hasOwnProperty(key)) {\n    geoKeys[geoKeyNames[key]] = parseInt(key, 10);\n  }\n}\n"],"names":["registry","Map","addDecoder","cases","importFn","Array","isArray","forEach","c","set","async","getDecoder","fileDirectory","get","Compression","Error","Decoder","undefined","then","m","default","zstd","init","DataView64","constructor","arrayBuffer","this","_dataView","DataView","buffer","getUint64","offset","littleEndian","left","getUint32","right","combined","Number","isSafeInteger","getInt64","value","isNegative","getUint8","carrying","i","byte","getInt8","getUint16","getInt16","getInt32","getFloat16","getFloat32","getFloat64","DataSlice","sliceOffset","bigTiff","_sliceOffset","_littleEndian","_bigTiff","sliceTop","byteLength","covers","length","readUint8","readInt8","readUint16","readInt16","readUint32","readInt32","readFloat32","readFloat64","readUint64","readInt64","readOffset","CRLFCRLF","itemsToObject","items","Object","fromEntries","obj","key","toLowerCase","parseHeaders","text","split","map","line","kv","str","trim","parseContentType","rawContentType","type","rawParams","s","paramsItems","param","params","parseContentRange","rawContentRange","start","end","total","match","parseInt","parseByteRanges","responseArrayBuffer","boundary","decoder","TextDecoder","out","startBoundary","endBoundary","decode","Uint8Array","Math","min","startsWith","innerText","substr","endOfHeaders","indexOf","headers","startOfData","push","data","slice","fileSize","BaseSource","fetch","slices","signal","Promise","all","fetchSlice","close","wait","milliseconds","resolve","setTimeout","zip","a","b","A","from","B","k","AbortError","super","captureStackTrace","name","CustomAggregateError","errors","message","AggregateError","Block","top","BlockGroup","blockIds","BlockedSource","source","blockSize","cacheSize","blockCache","maxSize","onEviction","blockId","block","evictedBlocks","blockRequests","blockIdsToFetch","Set","abortedBlockIds","missingBlockIds","allBlockIds","clear","firstBlockOffset","floor","current","has","add","fetchBlocks","missingRequests","allSettled","abortedBlockRequests","filter","id","aborted","blocks","failedBlocks","requiredBlocks","readSliceData","size","groups","groupBlocks","groupRequests","groupIndex","group","response","blockOffset","o","t","delete","err","sortedBlockIds","sort","lastBlockId","blockIdLow","blockIdHigh","sliceData","ArrayBuffer","sliceView","delta","topDelta","usedBlockLength","blockInnerOffset","rangeInnerOffset","blockView","BaseResponse","ok","status","getHeader","headerName","getData","BaseClient","url","request","FetchResponse","FetchClient","credentials","XHRResponse","xhr","getResponseHeader","XHRClient","constructRequest","reject","XMLHttpRequest","open","responseType","entries","setRequestHeader","onload","onerror","onabort","send","abort","addEventListener","HttpResponse","dataPromise","statusCode","HttpClient","parsedUrl","httpApi","protocol","resolveData","chunks","on","chunk","Buffer","concat","destroy","RemoteSource","client","maxRanges","allowFullFile","_fileSize","fetchSlices","Range","join","byteRanges","first","others","maybeWrapInBlockedSource","makeFetchSource","blockOptions","makeXHRSource","makeHttpSource","makeRemoteSource","forceXHR","clientOptions","FileReaderSource","file","blob","reader","FileReader","event","target","result","readAsArrayBuffer","makeFileReaderSource","getFieldTypeLength","fieldType","BYTE","ASCII","SBYTE","UNDEFINED","SHORT","SSHORT","LONG","SLONG","FLOAT","IFD","RATIONAL","SRATIONAL","DOUBLE","LONG8","SLONG8","IFD8","RangeError","parseGeoKeyDirectory","rawGeoKeyDirectory","GeoKeyDirectory","geoKeyDirectory","location","count","substring","subarray","getValues","dataSlice","values","readMethod","fieldTypeLength","Int8Array","Uint16Array","Int16Array","Uint32Array","Int32Array","Float32Array","Float64Array","call","ImageFileDirectory","nextIFDByteOffset","GeoTIFFImageIndexError","index","GeoTIFFBase","readRasters","options","window","imageWindow","width","height","resX","resY","bbox","firstImage","getImage","usedImage","imageCount","getImageCount","imgBBox","getBoundingBox","oX","oY","getOrigin","rX","rY","getResolution","usedBBox","allImages","image","SubfileType","subfileType","NewSubfileType","newSubfileType","getWidth","imgResX","imgResY","getHeight","wnd","imageResX","imageResY","round","max","GeoTIFF","firstIFDOffset","cache","ifdRequests","ghostValues","getSlice","fallbackSize","parseFileDirectoryAt","entrySize","offsetSize","numDirEntries","byteSize","entryCount","fieldTag","typeCount","fieldValues","valueOffset","actualOffset","fieldDataSlice","requestIFD","e","previousIfd","ifd","dataView","hasNext","getGhostValues","detectionString","heuristicAreaSize","valuesString","firstLine","metadataSize","fullString","fromSource","headerData","BOM","TypeError","magicNumber","offsetByteSize","MultiGeoTIFF","mainFile","overviewFiles","imageFiles","fileDirectoriesPerFile","fileDirectoriesPerFileParsing","parseFileDirectoriesPerFile","requests","visited","relativeIndex","imageFile","ii","imageCounts","reduce","ifds","fromUrl","fromBlob","fromUrls","mainUrl","overviewUrls","fromWhiteIsZero","raster","rgbRaster","j","fromBlackIsZero","fromPalette","colorMap","greenOffset","blueOffset","mapIndex","fromCMYK","cmykRaster","y","fromYCbCr","yCbCrRaster","Uint8ClampedArray","cb","cr","Xn","Yn","Zn","fromCIELab","cieLabRaster","L","a_","b_","r","g","x","z","copyNewSize","array","samplesPerPixel","getPrototypeOf","resampleNearest","valueArrays","inWidth","inHeight","outWidth","outHeight","relX","relY","newArray","cy","cx","lerp","v0","v1","resampleBilinear","rawY","yl","yh","ceil","rawX","tx","xl","xh","ll","hl","lh","hh","resample","method","resampleNearestInterleaved","valueArray","samples","resampleBilinearInterleaved","resampleInterleaved","sum","arrayForType","format","bitsPerSample","needsNormalization","normalizeArray","inBuffer","planarConfiguration","tileWidth","tileHeight","view","outSize","samplesToTransfer","outArray","bitMask","repeat","pixelBitSkip","bitsPerLine","lineBitOffset","pixelBitOffset","bitOffset","outIndex","byteOffset","innerBitOffset","raw","GeoTIFFImage","geoKeys","tiles","isTiled","StripOffsets","PlanarConfiguration","getFileDirectory","getGeoKeys","ImageWidth","ImageLength","getSamplesPerPixel","SamplesPerPixel","getTileWidth","TileWidth","getTileHeight","TileLength","RowsPerStrip","getBlockWidth","getBlockHeight","getBytesPerPixel","bytes","BitsPerSample","getSampleByteSize","getReaderForSample","sampleIndex","SampleFormat","prototype","getSampleFormat","getBitsPerSample","getArrayForSample","getTileOrStrip","sample","poolOrDecoder","numTilesPerRow","numTilesPerCol","byteCount","TileOffsets","TileByteCounts","StripByteCounts","sampleFormat","_readRaster","interleave","resampleMethod","imageWidth","imageHeight","minXTile","maxXTile","minYTile","maxYTile","windowWidth","bytesPerPixel","srcSampleOffsets","sampleReaders","promises","yTile","xTile","getPromise","si","promise","tile","blockHeight","firstCol","lastLine","lastCol","ymax","xmax","pixelOffset","windowCoordinate","resampled","pool","fillValue","imageWindowWidth","imageWindowHeight","numPixels","apply","fill","readRGB","enableAlpha","pi","PhotometricInterpretation","RGB","ExtraSamples","Unspecified","WhiteIsZero","BlackIsZero","Palette","CMYK","YCbCr","CIELab","subOptions","ColorMap","red","green","blue","getTiePoints","ModelTiepoint","tiePoints","getGDALMetadata","metadata","GDAL_METADATA","string","item","inner","getGDALNoData","GDAL_NODATA","modelTransformation","ModelTransformation","referenceImage","modelPixelScale","ModelPixelScale","sqrt","refResX","refResY","refResZ","pixelIsArea","GTRasterTypeGeoKey","tilegrid","d","f","h","corners","projected","I","J","xs","pt","ys","origin","resolution","x1","y1","x2","y2","fieldTagNames","fieldTags","hasOwnProperty","arrayFields","StripRowCounts","SubIFDs","fieldTypeNames","fieldTypes","photometricInterpretations","TransparencyMask","ICCLab","ExtraSamplesValues","Assocalpha","Unassalpha","LercParameters","Version","AddCompression","LercAddCompression","None","Deflate","Zstandard","geoKeyNames"],"sourceRoot":""}