{"version":3,"file":"js/6617.6a7b64b8.js","mappings":"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","sources":["webpack://@openeo/web-editor/./node_modules/ol/pointer/EventType.js","webpack://@openeo/web-editor/./node_modules/ol/render/Event.js","webpack://@openeo/web-editor/./node_modules/ol/render/Feature.js","webpack://@openeo/web-editor/./node_modules/ol/render/VectorContext.js","webpack://@openeo/web-editor/./node_modules/ol/render/Box.js","webpack://@openeo/web-editor/./node_modules/ol/render/EventType.js"],"sourcesContent":["/**\n * @module ol/pointer/EventType\n */\n\n/**\n * Constants for event names.\n * @enum {string}\n */\nexport default {\n  POINTERMOVE: 'pointermove',\n  POINTERDOWN: 'pointerdown',\n  POINTERUP: 'pointerup',\n  POINTEROVER: 'pointerover',\n  POINTEROUT: 'pointerout',\n  POINTERENTER: 'pointerenter',\n  POINTERLEAVE: 'pointerleave',\n  POINTERCANCEL: 'pointercancel',\n};\n","/**\n * @module ol/render/Event\n */\n\nimport Event from '../events/Event.js';\n\nclass RenderEvent extends Event {\n  /**\n   * @param {import(\"./EventType.js\").default} type Type.\n   * @param {import(\"../transform.js\").Transform} [inversePixelTransform] Transform for\n   *     CSS pixels to rendered pixels.\n   * @param {import(\"../Map.js\").FrameState} [frameState] Frame state.\n   * @param {?(CanvasRenderingContext2D|WebGLRenderingContext)} [context] Context.\n   */\n  constructor(type, inversePixelTransform, frameState, context) {\n    super(type);\n\n    /**\n     * Transform from CSS pixels (relative to the top-left corner of the map viewport)\n     * to rendered pixels on this event's `context`. Only available when a Canvas renderer is used, null otherwise.\n     * @type {import(\"../transform.js\").Transform|undefined}\n     * @api\n     */\n    this.inversePixelTransform = inversePixelTransform;\n\n    /**\n     * An object representing the current render frame state.\n     * @type {import(\"../Map.js\").FrameState|undefined}\n     * @api\n     */\n    this.frameState = frameState;\n\n    /**\n     * Canvas context. Not available when the event is dispatched by the map. For Canvas 2D layers,\n     * the context will be the 2D rendering context.  For WebGL layers, the context will be the WebGL\n     * context.\n     * @type {CanvasRenderingContext2D|WebGLRenderingContext|undefined}\n     * @api\n     */\n    this.context = context;\n  }\n}\n\nexport default RenderEvent;\n","/**\n * @module ol/render/Feature\n */\nimport Feature from '../Feature.js';\nimport {\n  LineString,\n  MultiLineString,\n  MultiPoint,\n  MultiPolygon,\n  Point,\n  Polygon,\n} from '../geom.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../transform.js';\nimport {\n  createOrUpdateFromCoordinate,\n  createOrUpdateFromFlatCoordinates,\n  getCenter,\n  getHeight,\n} from '../extent.js';\nimport {\n  douglasPeucker,\n  douglasPeuckerArray,\n  quantizeArray,\n} from '../geom/flat/simplify.js';\nimport {extend} from '../array.js';\nimport {\n  getInteriorPointOfArray,\n  getInteriorPointsOfMultiArray,\n} from '../geom/flat/interiorpoint.js';\nimport {get as getProjection} from '../proj.js';\nimport {inflateEnds} from '../geom/flat/orient.js';\nimport {interpolatePoint} from '../geom/flat/interpolate.js';\nimport {linearRingss as linearRingssCenter} from '../geom/flat/center.js';\nimport {memoizeOne} from '../functions.js';\nimport {transform2D} from '../geom/flat/transform.js';\n\n/**\n * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString'} Type\n * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,\n * `'Polygon'`, `'MultiPoint'` or 'MultiLineString'`.\n */\n\n/**\n * @type {import(\"../transform.js\").Transform}\n */\nconst tmpTransform = createTransform();\n\n/**\n * Lightweight, read-only, {@link module:ol/Feature~Feature} and {@link module:ol/geom/Geometry~Geometry} like\n * structure, optimized for vector tile rendering and styling. Geometry access\n * through the API is limited to getting the type and extent of the geometry.\n */\nclass RenderFeature {\n  /**\n   * @param {Type} type Geometry type.\n   * @param {Array<number>} flatCoordinates Flat coordinates. These always need\n   *     to be right-handed for polygons.\n   * @param {Array<number>} ends Ends.\n   * @param {number} stride Stride.\n   * @param {Object<string, *>} properties Properties.\n   * @param {number|string|undefined} id Feature id.\n   */\n  constructor(type, flatCoordinates, ends, stride, properties, id) {\n    /**\n     * @type {import(\"../style/Style.js\").StyleFunction|undefined}\n     */\n    this.styleFunction;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent|undefined}\n     */\n    this.extent_;\n\n    /**\n     * @private\n     * @type {number|string|undefined}\n     */\n    this.id_ = id;\n\n    /**\n     * @private\n     * @type {Type}\n     */\n    this.type_ = type;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.flatCoordinates_ = flatCoordinates;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.flatInteriorPoints_ = null;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.flatMidpoints_ = null;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.ends_ = ends || null;\n\n    /**\n     * @private\n     * @type {Object<string, *>}\n     */\n    this.properties_ = properties;\n\n    /**\n     * @type {number}\n     */\n    this.squaredTolerance_;\n\n    /**\n     * @type {number}\n     */\n    this.stride_ = stride;\n\n    /**\n     * @private\n     * @type {RenderFeature}\n     */\n    this.simplifiedGeometry_;\n  }\n\n  /**\n   * Get a feature property by its key.\n   * @param {string} key Key\n   * @return {*} Value for the requested key.\n   * @api\n   */\n  get(key) {\n    return this.properties_[key];\n  }\n\n  /**\n   * Get the extent of this feature's geometry.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getExtent() {\n    if (!this.extent_) {\n      this.extent_ =\n        this.type_ === 'Point'\n          ? createOrUpdateFromCoordinate(this.flatCoordinates_)\n          : createOrUpdateFromFlatCoordinates(\n              this.flatCoordinates_,\n              0,\n              this.flatCoordinates_.length,\n              2,\n            );\n    }\n    return this.extent_;\n  }\n\n  /**\n   * @return {Array<number>} Flat interior points.\n   */\n  getFlatInteriorPoint() {\n    if (!this.flatInteriorPoints_) {\n      const flatCenter = getCenter(this.getExtent());\n      this.flatInteriorPoints_ = getInteriorPointOfArray(\n        this.flatCoordinates_,\n        0,\n        this.ends_,\n        2,\n        flatCenter,\n        0,\n      );\n    }\n    return this.flatInteriorPoints_;\n  }\n\n  /**\n   * @return {Array<number>} Flat interior points.\n   */\n  getFlatInteriorPoints() {\n    if (!this.flatInteriorPoints_) {\n      const ends = inflateEnds(this.flatCoordinates_, this.ends_);\n      const flatCenters = linearRingssCenter(this.flatCoordinates_, 0, ends, 2);\n      this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(\n        this.flatCoordinates_,\n        0,\n        ends,\n        2,\n        flatCenters,\n      );\n    }\n    return this.flatInteriorPoints_;\n  }\n\n  /**\n   * @return {Array<number>} Flat midpoint.\n   */\n  getFlatMidpoint() {\n    if (!this.flatMidpoints_) {\n      this.flatMidpoints_ = interpolatePoint(\n        this.flatCoordinates_,\n        0,\n        this.flatCoordinates_.length,\n        2,\n        0.5,\n      );\n    }\n    return this.flatMidpoints_;\n  }\n\n  /**\n   * @return {Array<number>} Flat midpoints.\n   */\n  getFlatMidpoints() {\n    if (!this.flatMidpoints_) {\n      this.flatMidpoints_ = [];\n      const flatCoordinates = this.flatCoordinates_;\n      let offset = 0;\n      const ends = /** @type {Array<number>} */ (this.ends_);\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\n        const end = ends[i];\n        const midpoint = interpolatePoint(flatCoordinates, offset, end, 2, 0.5);\n        extend(this.flatMidpoints_, midpoint);\n        offset = end;\n      }\n    }\n    return this.flatMidpoints_;\n  }\n\n  /**\n   * Get the feature identifier.  This is a stable identifier for the feature and\n   * is set when reading data from a remote source.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n  getId() {\n    return this.id_;\n  }\n\n  /**\n   * @return {Array<number>} Flat coordinates.\n   */\n  getOrientedFlatCoordinates() {\n    return this.flatCoordinates_;\n  }\n\n  /**\n   * For API compatibility with {@link module:ol/Feature~Feature}, this method is useful when\n   * determining the geometry type in style function (see {@link #getType}).\n   * @return {RenderFeature} Feature.\n   * @api\n   */\n  getGeometry() {\n    return this;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {RenderFeature} Simplified geometry.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    return this;\n  }\n\n  /**\n   * Get a transformed and simplified version of the geometry.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n   * @return {RenderFeature} Simplified geometry.\n   */\n  simplifyTransformed(squaredTolerance, transform) {\n    return this;\n  }\n\n  /**\n   * Get the feature properties.\n   * @return {Object<string, *>} Feature properties.\n   * @api\n   */\n  getProperties() {\n    return this.properties_;\n  }\n\n  /**\n   * Get an object of all property names and values.  This has the same behavior as getProperties,\n   * but is here to conform with the {@link module:ol/Feature~Feature} interface.\n   * @return {Object<string, *>?} Object.\n   */\n  getPropertiesInternal() {\n    return this.properties_;\n  }\n\n  /**\n   * @return {number} Stride.\n   */\n  getStride() {\n    return this.stride_;\n  }\n\n  /**\n   * @return {import('../style/Style.js').StyleFunction|undefined} Style\n   */\n  getStyleFunction() {\n    return this.styleFunction;\n  }\n\n  /**\n   * Get the type of this feature's geometry.\n   * @return {Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return this.type_;\n  }\n\n  /**\n   * Transform geometry coordinates from tile pixel space to projected.\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection The data projection\n   */\n  transform(projection) {\n    projection = getProjection(projection);\n    const pixelExtent = projection.getExtent();\n    const projectedExtent = projection.getWorldExtent();\n    if (pixelExtent && projectedExtent) {\n      const scale = getHeight(projectedExtent) / getHeight(pixelExtent);\n      composeTransform(\n        tmpTransform,\n        projectedExtent[0],\n        projectedExtent[3],\n        scale,\n        -scale,\n        0,\n        0,\n        0,\n      );\n      transform2D(\n        this.flatCoordinates_,\n        0,\n        this.flatCoordinates_.length,\n        2,\n        tmpTransform,\n        this.flatCoordinates_,\n      );\n    }\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   */\n  applyTransform(transformFn) {\n    transformFn(this.flatCoordinates_, this.flatCoordinates_, this.stride_);\n  }\n\n  /**\n   * @return {RenderFeature} A cloned render feature.\n   */\n  clone() {\n    return new RenderFeature(\n      this.type_,\n      this.flatCoordinates_.slice(),\n      this.ends_?.slice(),\n      this.stride_,\n      Object.assign({}, this.properties_),\n      this.id_,\n    );\n  }\n\n  /**\n   * @return {Array<number>|null} Ends.\n   */\n  getEnds() {\n    return this.ends_;\n  }\n\n  /**\n   * Add transform and resolution based geometry simplification to this instance.\n   * @return {RenderFeature} This render feature.\n   */\n  enableSimplifyTransformed() {\n    this.simplifyTransformed = memoizeOne((squaredTolerance, transform) => {\n      if (squaredTolerance === this.squaredTolerance_) {\n        return this.simplifiedGeometry_;\n      }\n      this.simplifiedGeometry_ = this.clone();\n      if (transform) {\n        this.simplifiedGeometry_.applyTransform(transform);\n      }\n      const simplifiedFlatCoordinates =\n        this.simplifiedGeometry_.getFlatCoordinates();\n      let simplifiedEnds;\n      switch (this.type_) {\n        case 'LineString':\n          simplifiedFlatCoordinates.length = douglasPeucker(\n            simplifiedFlatCoordinates,\n            0,\n            this.simplifiedGeometry_.flatCoordinates_.length,\n            this.simplifiedGeometry_.stride_,\n            squaredTolerance,\n            simplifiedFlatCoordinates,\n            0,\n          );\n          simplifiedEnds = [simplifiedFlatCoordinates.length];\n          break;\n        case 'MultiLineString':\n          simplifiedEnds = [];\n          simplifiedFlatCoordinates.length = douglasPeuckerArray(\n            simplifiedFlatCoordinates,\n            0,\n            this.simplifiedGeometry_.ends_,\n            this.simplifiedGeometry_.stride_,\n            squaredTolerance,\n            simplifiedFlatCoordinates,\n            0,\n            simplifiedEnds,\n          );\n          break;\n        case 'Polygon':\n          simplifiedEnds = [];\n          simplifiedFlatCoordinates.length = quantizeArray(\n            simplifiedFlatCoordinates,\n            0,\n            this.simplifiedGeometry_.ends_,\n            this.simplifiedGeometry_.stride_,\n            Math.sqrt(squaredTolerance),\n            simplifiedFlatCoordinates,\n            0,\n            simplifiedEnds,\n          );\n          break;\n        default:\n      }\n      if (simplifiedEnds) {\n        this.simplifiedGeometry_ = new RenderFeature(\n          this.type_,\n          simplifiedFlatCoordinates,\n          simplifiedEnds,\n          2,\n          this.properties_,\n          this.id_,\n        );\n      }\n      this.squaredTolerance_ = squaredTolerance;\n      return this.simplifiedGeometry_;\n    });\n    return this;\n  }\n}\n\n/**\n * @return {Array<number>} Flat coordinates.\n */\nRenderFeature.prototype.getFlatCoordinates =\n  RenderFeature.prototype.getOrientedFlatCoordinates;\n\n/**\n * Create a geometry from an `ol/render/Feature`\n * @param {RenderFeature} renderFeature\n * Render Feature\n * @return {Point|MultiPoint|LineString|MultiLineString|Polygon|MultiPolygon}\n * New geometry instance.\n * @api\n */\nexport function toGeometry(renderFeature) {\n  const geometryType = renderFeature.getType();\n  switch (geometryType) {\n    case 'Point':\n      return new Point(renderFeature.getFlatCoordinates());\n    case 'MultiPoint':\n      return new MultiPoint(renderFeature.getFlatCoordinates(), 'XY');\n    case 'LineString':\n      return new LineString(renderFeature.getFlatCoordinates(), 'XY');\n    case 'MultiLineString':\n      return new MultiLineString(\n        renderFeature.getFlatCoordinates(),\n        'XY',\n        /** @type {Array<number>} */ (renderFeature.getEnds()),\n      );\n    case 'Polygon':\n      const flatCoordinates = renderFeature.getFlatCoordinates();\n      const ends = renderFeature.getEnds();\n      const endss = inflateEnds(flatCoordinates, ends);\n      return endss.length > 1\n        ? new MultiPolygon(flatCoordinates, 'XY', endss)\n        : new Polygon(flatCoordinates, 'XY', ends);\n    default:\n      throw new Error('Invalid geometry type:' + geometryType);\n  }\n}\n\n/**\n * Create an `ol/Feature` from an `ol/render/Feature`\n * @param {RenderFeature} renderFeature RenderFeature\n * @param {string} [geometryName='geometry'] Geometry name to use\n * when creating the Feature.\n * @return {Feature} Newly constructed `ol/Feature` with properties,\n * geometry, and id copied over.\n * @api\n */\nexport function toFeature(renderFeature, geometryName) {\n  const id = renderFeature.getId();\n  const geometry = toGeometry(renderFeature);\n  const properties = renderFeature.getProperties();\n  const feature = new Feature();\n  if (geometryName !== undefined) {\n    feature.setGeometryName(geometryName);\n  }\n  feature.setGeometry(geometry);\n  if (id !== undefined) {\n    feature.setId(id);\n  }\n  feature.setProperties(properties, true);\n  return feature;\n}\n\nexport default RenderFeature;\n","/**\n * @module ol/render/VectorContext\n */\n\n/**\n * @classdesc\n * Context for drawing geometries.  A vector context is available on render\n * events and does not need to be constructed directly.\n * @api\n */\nclass VectorContext {\n  /**\n   * Render a geometry with a custom renderer.\n   *\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   * @param {Function} renderer Renderer.\n   * @param {Function} hitDetectionRenderer Renderer.\n   * @param {number} [index] Render order index.\n   */\n  drawCustom(geometry, feature, renderer, hitDetectionRenderer, index) {}\n\n  /**\n   * Render a geometry.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry The geometry to render.\n   */\n  drawGeometry(geometry) {}\n\n  /**\n   * Set the rendering style.\n   *\n   * @param {import(\"../style/Style.js\").default} style The rendering style.\n   */\n  setStyle(style) {}\n\n  /**\n   * @param {import(\"../geom/Circle.js\").default} circleGeometry Circle geometry.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {number} [index] Render order index.\n   */\n  drawCircle(circleGeometry, feature, index) {}\n\n  /**\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"../style/Style.js\").default} style Style.\n   * @param {number} [index] Render order index.\n   */\n  drawFeature(feature, style, index) {}\n\n  /**\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometryCollectionGeometry Geometry collection.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {number} [index] Render order index.\n   */\n  drawGeometryCollection(geometryCollectionGeometry, feature, index) {}\n\n  /**\n   * @param {import(\"../geom/LineString.js\").default|import(\"./Feature.js\").default} lineStringGeometry Line string geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} [index] Render order index.\n   */\n  drawLineString(lineStringGeometry, feature, index) {}\n\n  /**\n   * @param {import(\"../geom/MultiLineString.js\").default|import(\"./Feature.js\").default} multiLineStringGeometry MultiLineString geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} [index] Render order index.\n   */\n  drawMultiLineString(multiLineStringGeometry, feature, index) {}\n\n  /**\n   * @param {import(\"../geom/MultiPoint.js\").default|import(\"./Feature.js\").default} multiPointGeometry MultiPoint geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} [index] Render order index.\n   */\n  drawMultiPoint(multiPointGeometry, feature, index) {}\n\n  /**\n   * @param {import(\"../geom/MultiPolygon.js\").default} multiPolygonGeometry MultiPolygon geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} [index] Render order index.\n   */\n  drawMultiPolygon(multiPolygonGeometry, feature, index) {}\n\n  /**\n   * @param {import(\"../geom/Point.js\").default|import(\"./Feature.js\").default} pointGeometry Point geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} [index] Render order index.\n   */\n  drawPoint(pointGeometry, feature, index) {}\n\n  /**\n   * @param {import(\"../geom/Polygon.js\").default|import(\"./Feature.js\").default} polygonGeometry Polygon geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} [index] Render order index.\n   */\n  drawPolygon(polygonGeometry, feature, index) {}\n\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default|import(\"./Feature.js\").default} geometry Geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} [index] Render order index.\n   */\n  drawText(geometry, feature, index) {}\n\n  /**\n   * @param {import(\"../style/Fill.js\").default} fillStyle Fill style.\n   * @param {import(\"../style/Stroke.js\").default} strokeStyle Stroke style.\n   */\n  setFillStrokeStyle(fillStyle, strokeStyle) {}\n\n  /**\n   * @param {import(\"../style/Image.js\").default} imageStyle Image style.\n   * @param {import(\"../render/canvas.js\").DeclutterImageWithText} [declutterImageWithText] Shared data for combined decluttering with a text style.\n   */\n  setImageStyle(imageStyle, declutterImageWithText) {}\n\n  /**\n   * @param {import(\"../style/Text.js\").default} textStyle Text style.\n   * @param {import(\"../render/canvas.js\").DeclutterImageWithText} [declutterImageWithText] Shared data for combined decluttering with an image style.\n   */\n  setTextStyle(textStyle, declutterImageWithText) {}\n}\n\nexport default VectorContext;\n","/**\n * @module ol/render/Box\n */\n\nimport Disposable from '../Disposable.js';\nimport Polygon from '../geom/Polygon.js';\n\nclass RenderBox extends Disposable {\n  /**\n   * @param {string} className CSS class name.\n   */\n  constructor(className) {\n    super();\n\n    /**\n     * @type {import(\"../geom/Polygon.js\").default}\n     * @private\n     */\n    this.geometry_ = null;\n\n    /**\n     * @type {HTMLDivElement}\n     * @private\n     */\n    this.element_ = document.createElement('div');\n    this.element_.style.position = 'absolute';\n    this.element_.style.pointerEvents = 'auto';\n    this.element_.className = 'ol-box ' + className;\n\n    /**\n     * @private\n     * @type {import(\"../Map.js\").default|null}\n     */\n    this.map_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../pixel.js\").Pixel}\n     */\n    this.startPixel_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../pixel.js\").Pixel}\n     */\n    this.endPixel_ = null;\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    this.setMap(null);\n  }\n\n  /**\n   * @private\n   */\n  render_() {\n    const startPixel = this.startPixel_;\n    const endPixel = this.endPixel_;\n    const px = 'px';\n    const style = this.element_.style;\n    style.left = Math.min(startPixel[0], endPixel[0]) + px;\n    style.top = Math.min(startPixel[1], endPixel[1]) + px;\n    style.width = Math.abs(endPixel[0] - startPixel[0]) + px;\n    style.height = Math.abs(endPixel[1] - startPixel[1]) + px;\n  }\n\n  /**\n   * @param {import(\"../Map.js\").default|null} map Map.\n   */\n  setMap(map) {\n    if (this.map_) {\n      this.map_.getOverlayContainer().removeChild(this.element_);\n      const style = this.element_.style;\n      style.left = 'inherit';\n      style.top = 'inherit';\n      style.width = 'inherit';\n      style.height = 'inherit';\n    }\n    this.map_ = map;\n    if (this.map_) {\n      this.map_.getOverlayContainer().appendChild(this.element_);\n    }\n  }\n\n  /**\n   * @param {import(\"../pixel.js\").Pixel} startPixel Start pixel.\n   * @param {import(\"../pixel.js\").Pixel} endPixel End pixel.\n   */\n  setPixels(startPixel, endPixel) {\n    this.startPixel_ = startPixel;\n    this.endPixel_ = endPixel;\n    this.createOrUpdateGeometry();\n    this.render_();\n  }\n\n  /**\n   * Creates or updates the cached geometry.\n   */\n  createOrUpdateGeometry() {\n    if (!this.map_) {\n      return;\n    }\n\n    const startPixel = this.startPixel_;\n    const endPixel = this.endPixel_;\n    const pixels = [\n      startPixel,\n      [startPixel[0], endPixel[1]],\n      endPixel,\n      [endPixel[0], startPixel[1]],\n    ];\n    const coordinates = pixels.map(\n      this.map_.getCoordinateFromPixelInternal,\n      this.map_,\n    );\n    // close the polygon\n    coordinates[4] = coordinates[0].slice();\n    if (!this.geometry_) {\n      this.geometry_ = new Polygon([coordinates]);\n    } else {\n      this.geometry_.setCoordinates([coordinates]);\n    }\n  }\n\n  /**\n   * @return {import(\"../geom/Polygon.js\").default} Geometry.\n   */\n  getGeometry() {\n    return this.geometry_;\n  }\n}\n\nexport default RenderBox;\n","/**\n * @module ol/render/EventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered before a layer is rendered.\n   * @event module:ol/render/Event~RenderEvent#prerender\n   * @api\n   */\n  PRERENDER: 'prerender',\n\n  /**\n   * Triggered after a layer is rendered.\n   * @event module:ol/render/Event~RenderEvent#postrender\n   * @api\n   */\n  POSTRENDER: 'postrender',\n\n  /**\n   * Triggered before layers are composed.  When dispatched by the map, the event object will not have\n   * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only\n   * WebGL layers currently dispatch this event.\n   * @event module:ol/render/Event~RenderEvent#precompose\n   * @api\n   */\n  PRECOMPOSE: 'precompose',\n\n  /**\n   * Triggered after layers are composed.  When dispatched by the map, the event object will not have\n   * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only\n   * WebGL layers currently dispatch this event.\n   * @event module:ol/render/Event~RenderEvent#postcompose\n   * @api\n   */\n  POSTCOMPOSE: 'postcompose',\n\n  /**\n   * Triggered when rendering is complete, i.e. all sources and tiles have\n   * finished loading for the current viewport, and all tiles are faded in.\n   * The event object will not have a `context` set.\n   * @event module:ol/render/Event~RenderEvent#rendercomplete\n   * @api\n   */\n  RENDERCOMPLETE: 'rendercomplete',\n};\n\n/**\n * @typedef {'postrender'|'precompose'|'postcompose'|'rendercomplete'} MapRenderEventTypes\n */\n\n/**\n * @typedef {'postrender'|'prerender'} LayerRenderEventTypes\n */\n"],"names":["POINTERMOVE","POINTERDOWN","POINTERUP","POINTEROVER","POINTEROUT","POINTERENTER","POINTERLEAVE","POINTERCANCEL","RenderEvent","constructor","type","inversePixelTransform","frameState","context","super","this","tmpTransform","RenderFeature","flatCoordinates","ends","stride","properties","id","styleFunction","extent_","id_","type_","flatCoordinates_","flatInteriorPoints_","flatMidpoints_","ends_","properties_","squaredTolerance_","stride_","simplifiedGeometry_","get","key","getExtent","length","getFlatInteriorPoint","flatCenter","getFlatInteriorPoints","flatCenters","getFlatMidpoint","getFlatMidpoints","offset","i","ii","end","midpoint","getId","getOrientedFlatCoordinates","getGeometry","getSimplifiedGeometry","squaredTolerance","simplifyTransformed","transform","getProperties","getPropertiesInternal","getStride","getStyleFunction","getType","projection","pixelExtent","projectedExtent","getWorldExtent","scale","applyTransform","transformFn","clone","slice","Object","assign","getEnds","enableSimplifyTransformed","simplifiedFlatCoordinates","getFlatCoordinates","simplifiedEnds","Math","sqrt","prototype","VectorContext","drawCustom","geometry","feature","renderer","hitDetectionRenderer","index","drawGeometry","setStyle","style","drawCircle","circleGeometry","drawFeature","drawGeometryCollection","geometryCollectionGeometry","drawLineString","lineStringGeometry","drawMultiLineString","multiLineStringGeometry","drawMultiPoint","multiPointGeometry","drawMultiPolygon","multiPolygonGeometry","drawPoint","pointGeometry","drawPolygon","polygonGeometry","drawText","setFillStrokeStyle","fillStyle","strokeStyle","setImageStyle","imageStyle","declutterImageWithText","setTextStyle","textStyle","RenderBox","className","geometry_","element_","document","createElement","position","pointerEvents","map_","startPixel_","endPixel_","disposeInternal","setMap","render_","startPixel","endPixel","px","left","min","top","width","abs","height","map","getOverlayContainer","removeChild","appendChild","setPixels","createOrUpdateGeometry","pixels","coordinates","getCoordinateFromPixelInternal","setCoordinates","PRERENDER","POSTRENDER","PRECOMPOSE","POSTCOMPOSE","RENDERCOMPLETE"],"sourceRoot":""}