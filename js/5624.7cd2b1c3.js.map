{"version":3,"file":"js/5624.7cd2b1c3.js","mappings":"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","sources":["webpack://@openeo/web-editor/./node_modules/ol/geom/MultiPolygon.js","webpack://@openeo/web-editor/./node_modules/ol/geom/LineString.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/interiorpoint.js","webpack://@openeo/web-editor/./node_modules/ol/geom/LinearRing.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/textpath.js","webpack://@openeo/web-editor/./node_modules/ol/geom/Geometry.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/area.js","webpack://@openeo/web-editor/./node_modules/ol/geom/MultiPoint.js","webpack://@openeo/web-editor/./node_modules/ol/geom/Polygon.js","webpack://@openeo/web-editor/./node_modules/ol/geom/GeometryCollection.js","webpack://@openeo/web-editor/./node_modules/ol/geom/Point.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/length.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/contains.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/center.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/inflate.js","webpack://@openeo/web-editor/./node_modules/ol/geom/SimpleGeometry.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/closest.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/linechunk.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/reverse.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/orient.js","webpack://@openeo/web-editor/./node_modules/ol/functions.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/interpolate.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/intersectsextent.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/simplify.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/transform.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/straightchunk.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/segments.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/deflate.js","webpack://@openeo/web-editor/./node_modules/ol/geom/MultiLineString.js"],"sourcesContent":["/**\n * @module ol/geom/MultiPolygon\n */\nimport MultiPoint from './MultiPoint.js';\nimport Polygon from './Polygon.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {\n  assignClosestMultiArrayPoint,\n  multiArrayMaxSquaredDelta,\n} from './flat/closest.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport {deflateMultiCoordinatesArray} from './flat/deflate.js';\nimport {extend} from '../array.js';\nimport {getInteriorPointsOfMultiArray} from './flat/interiorpoint.js';\nimport {inflateMultiCoordinatesArray} from './flat/inflate.js';\nimport {intersectsLinearRingMultiArray} from './flat/intersectsextent.js';\nimport {\n  linearRingssAreOriented,\n  orientLinearRingsArray,\n} from './flat/orient.js';\nimport {linearRingss as linearRingssArea} from './flat/area.js';\nimport {linearRingss as linearRingssCenter} from './flat/center.js';\nimport {linearRingssContainsXY} from './flat/contains.js';\nimport {quantizeMultiArray} from './flat/simplify.js';\n\n/**\n * @classdesc\n * Multi-polygon geometry.\n *\n * @api\n */\nclass MultiPolygon extends SimpleGeometry {\n  /**\n   * @param {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>|Polygon>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` and `endss` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @param {Array<Array<number>>} [endss] Array of ends for internal use with flat coordinates.\n   */\n  constructor(coordinates, layout, endss) {\n    super();\n\n    /**\n     * @type {Array<Array<number>>}\n     * @private\n     */\n    this.endss_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatInteriorPointsRevision_ = -1;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.flatInteriorPoints_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.orientedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.orientedFlatCoordinates_ = null;\n\n    if (!endss && !Array.isArray(coordinates[0])) {\n      const polygons = /** @type {Array<Polygon>} */ (coordinates);\n      /** @type {Array<number>} */\n      const flatCoordinates = [];\n      const thisEndss = [];\n      for (let i = 0, ii = polygons.length; i < ii; ++i) {\n        const polygon = polygons[i];\n        const offset = flatCoordinates.length;\n        const ends = polygon.getEnds();\n        for (let j = 0, jj = ends.length; j < jj; ++j) {\n          ends[j] += offset;\n        }\n        extend(flatCoordinates, polygon.getFlatCoordinates());\n        thisEndss.push(ends);\n      }\n      layout =\n        polygons.length === 0 ? this.getLayout() : polygons[0].getLayout();\n      coordinates = flatCoordinates;\n      endss = thisEndss;\n    }\n    if (layout !== undefined && endss) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates),\n      );\n      this.endss_ = endss;\n    } else {\n      this.setCoordinates(\n        /** @type {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} */ (\n          coordinates\n        ),\n        layout,\n      );\n    }\n  }\n\n  /**\n   * Append the passed polygon to this multipolygon.\n   * @param {Polygon} polygon Polygon.\n   * @api\n   */\n  appendPolygon(polygon) {\n    /** @type {Array<number>} */\n    let ends;\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = polygon.getFlatCoordinates().slice();\n      ends = polygon.getEnds().slice();\n      this.endss_.push();\n    } else {\n      const offset = this.flatCoordinates.length;\n      extend(this.flatCoordinates, polygon.getFlatCoordinates());\n      ends = polygon.getEnds().slice();\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\n        ends[i] += offset;\n      }\n    }\n    this.endss_.push(ends);\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiPolygon} Clone.\n   * @api\n   */\n  clone() {\n    const len = this.endss_.length;\n    const newEndss = new Array(len);\n    for (let i = 0; i < len; ++i) {\n      newEndss[i] = this.endss_[i].slice();\n    }\n\n    const multiPolygon = new MultiPolygon(\n      this.flatCoordinates.slice(),\n      this.layout,\n      newEndss,\n    );\n    multiPolygon.applyProperties(this);\n\n    return multiPolygon;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        multiArrayMaxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.endss_,\n          this.stride,\n          0,\n        ),\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestMultiArrayPoint(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.endss_,\n      this.stride,\n      this.maxDelta_,\n      true,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance,\n    );\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    return linearRingssContainsXY(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.endss_,\n      this.stride,\n      x,\n      y,\n    );\n  }\n\n  /**\n   * Return the area of the multipolygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  getArea() {\n    return linearRingssArea(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.endss_,\n      this.stride,\n    );\n  }\n\n  /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for multi-polygons.\n   *\n   * @param {boolean} [right] Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} Coordinates.\n   * @api\n   */\n  getCoordinates(right) {\n    let flatCoordinates;\n    if (right !== undefined) {\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\n      orientLinearRingsArray(\n        flatCoordinates,\n        0,\n        this.endss_,\n        this.stride,\n        right,\n      );\n    } else {\n      flatCoordinates = this.flatCoordinates;\n    }\n\n    return inflateMultiCoordinatesArray(\n      flatCoordinates,\n      0,\n      this.endss_,\n      this.stride,\n    );\n  }\n\n  /**\n   * @return {Array<Array<number>>} Endss.\n   */\n  getEndss() {\n    return this.endss_;\n  }\n\n  /**\n   * @return {Array<number>} Flat interior points.\n   */\n  getFlatInteriorPoints() {\n    if (this.flatInteriorPointsRevision_ != this.getRevision()) {\n      const flatCenters = linearRingssCenter(\n        this.flatCoordinates,\n        0,\n        this.endss_,\n        this.stride,\n      );\n      this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(\n        this.getOrientedFlatCoordinates(),\n        0,\n        this.endss_,\n        this.stride,\n        flatCenters,\n      );\n      this.flatInteriorPointsRevision_ = this.getRevision();\n    }\n    return /** @type {Array<number>} */ (this.flatInteriorPoints_);\n  }\n\n  /**\n   * Return the interior points as {@link module:ol/geom/MultiPoint~MultiPoint multipoint}.\n   * @return {MultiPoint} Interior points as XYM coordinates, where M is\n   * the length of the horizontal intersection that the point belongs to.\n   * @api\n   */\n  getInteriorPoints() {\n    return new MultiPoint(this.getFlatInteriorPoints().slice(), 'XYM');\n  }\n\n  /**\n   * @return {Array<number>} Oriented flat coordinates.\n   */\n  getOrientedFlatCoordinates() {\n    if (this.orientedRevision_ != this.getRevision()) {\n      const flatCoordinates = this.flatCoordinates;\n      if (\n        linearRingssAreOriented(flatCoordinates, 0, this.endss_, this.stride)\n      ) {\n        this.orientedFlatCoordinates_ = flatCoordinates;\n      } else {\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\n        this.orientedFlatCoordinates_.length = orientLinearRingsArray(\n          this.orientedFlatCoordinates_,\n          0,\n          this.endss_,\n          this.stride,\n        );\n      }\n      this.orientedRevision_ = this.getRevision();\n    }\n    return /** @type {Array<number>} */ (this.orientedFlatCoordinates_);\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {MultiPolygon} Simplified MultiPolygon.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    /** @type {Array<number>} */\n    const simplifiedFlatCoordinates = [];\n    /** @type {Array<Array<number>>} */\n    const simplifiedEndss = [];\n    simplifiedFlatCoordinates.length = quantizeMultiArray(\n      this.flatCoordinates,\n      0,\n      this.endss_,\n      this.stride,\n      Math.sqrt(squaredTolerance),\n      simplifiedFlatCoordinates,\n      0,\n      simplifiedEndss,\n    );\n    return new MultiPolygon(simplifiedFlatCoordinates, 'XY', simplifiedEndss);\n  }\n\n  /**\n   * Return the polygon at the specified index.\n   * @param {number} index Index.\n   * @return {Polygon} Polygon.\n   * @api\n   */\n  getPolygon(index) {\n    if (index < 0 || this.endss_.length <= index) {\n      return null;\n    }\n    let offset;\n    if (index === 0) {\n      offset = 0;\n    } else {\n      const prevEnds = this.endss_[index - 1];\n      offset = prevEnds[prevEnds.length - 1];\n    }\n    const ends = this.endss_[index].slice();\n    const end = ends[ends.length - 1];\n    if (offset !== 0) {\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\n        ends[i] -= offset;\n      }\n    }\n    return new Polygon(\n      this.flatCoordinates.slice(offset, end),\n      this.layout,\n      ends,\n    );\n  }\n\n  /**\n   * Return the polygons of this multipolygon.\n   * @return {Array<Polygon>} Polygons.\n   * @api\n   */\n  getPolygons() {\n    const layout = this.layout;\n    const flatCoordinates = this.flatCoordinates;\n    const endss = this.endss_;\n    const polygons = [];\n    let offset = 0;\n    for (let i = 0, ii = endss.length; i < ii; ++i) {\n      const ends = endss[i].slice();\n      const end = ends[ends.length - 1];\n      if (offset !== 0) {\n        for (let j = 0, jj = ends.length; j < jj; ++j) {\n          ends[j] -= offset;\n        }\n      }\n      const polygon = new Polygon(\n        flatCoordinates.slice(offset, end),\n        layout,\n        ends,\n      );\n      polygons.push(polygon);\n      offset = end;\n    }\n    return polygons;\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'MultiPolygon';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLinearRingMultiArray(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.endss_,\n      this.stride,\n      extent,\n    );\n  }\n\n  /**\n   * Set the coordinates of the multipolygon.\n   * @param {!Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 3);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const endss = deflateMultiCoordinatesArray(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride,\n      this.endss_,\n    );\n    if (endss.length === 0) {\n      this.flatCoordinates.length = 0;\n    } else {\n      const lastEnds = endss[endss.length - 1];\n      this.flatCoordinates.length =\n        lastEnds.length === 0 ? 0 : lastEnds[lastEnds.length - 1];\n    }\n    this.changed();\n  }\n}\n\nexport default MultiPolygon;\n","/**\n * @module ol/geom/LineString\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {assignClosestPoint, maxSquaredDelta} from './flat/closest.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport {deflateCoordinates} from './flat/deflate.js';\nimport {douglasPeucker} from './flat/simplify.js';\nimport {extend} from '../array.js';\nimport {forEach as forEachSegment} from './flat/segments.js';\nimport {inflateCoordinates} from './flat/inflate.js';\nimport {interpolatePoint, lineStringCoordinateAtM} from './flat/interpolate.js';\nimport {intersectsLineString} from './flat/intersectsextent.js';\nimport {lineStringLength} from './flat/length.js';\n\n/**\n * @classdesc\n * Linestring geometry.\n *\n * @api\n */\nclass LineString extends SimpleGeometry {\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate|null}\n     */\n    this.flatMidpoint_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatMidpointRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (layout !== undefined && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates),\n      );\n    } else {\n      this.setCoordinates(\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\n          coordinates\n        ),\n        layout,\n      );\n    }\n  }\n\n  /**\n   * Append the passed coordinate to the coordinates of the linestring.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @api\n   */\n  appendCoordinate(coordinate) {\n    extend(this.flatCoordinates, coordinate);\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!LineString} Clone.\n   * @api\n   */\n  clone() {\n    const lineString = new LineString(\n      this.flatCoordinates.slice(),\n      this.layout,\n    );\n    lineString.applyProperties(this);\n    return lineString;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        maxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.flatCoordinates.length,\n          this.stride,\n          0,\n        ),\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestPoint(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      this.maxDelta_,\n      false,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance,\n    );\n  }\n\n  /**\n   * Iterate over each segment, calling the provided callback.\n   * If the callback returns a truthy value the function returns that\n   * value immediately. Otherwise the function returns `false`.\n   *\n   * @param {function(this: S, import(\"../coordinate.js\").Coordinate, import(\"../coordinate.js\").Coordinate): T} callback Function\n   *     called for each segment. The function will receive two arguments, the start and end coordinates of the segment.\n   * @return {T|boolean} Value.\n   * @template T,S\n   * @api\n   */\n  forEachSegment(callback) {\n    return forEachSegment(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      callback,\n    );\n  }\n\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * @param {number} m M.\n   * @param {boolean} [extrapolate] Extrapolate. Default is `false`.\n   * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\n   * @api\n   */\n  getCoordinateAtM(m, extrapolate) {\n    if (this.layout != 'XYM' && this.layout != 'XYZM') {\n      return null;\n    }\n    extrapolate = extrapolate !== undefined ? extrapolate : false;\n    return lineStringCoordinateAtM(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      m,\n      extrapolate,\n    );\n  }\n\n  /**\n   * Return the coordinates of the linestring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n    );\n  }\n\n  /**\n   * Return the coordinate at the provided fraction along the linestring.\n   * The `fraction` is a number between 0 and 1, where 0 is the start of the\n   * linestring and 1 is the end.\n   * @param {number} fraction Fraction.\n   * @param {import(\"../coordinate.js\").Coordinate} [dest] Optional coordinate whose values will\n   *     be modified. If not provided, a new coordinate will be returned.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate of the interpolated point.\n   * @api\n   */\n  getCoordinateAt(fraction, dest) {\n    return interpolatePoint(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      fraction,\n      dest,\n      this.stride,\n    );\n  }\n\n  /**\n   * Return the length of the linestring on projected plane.\n   * @return {number} Length (on projected plane).\n   * @api\n   */\n  getLength() {\n    return lineStringLength(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n    );\n  }\n\n  /**\n   * @return {Array<number>} Flat midpoint.\n   */\n  getFlatMidpoint() {\n    if (this.flatMidpointRevision_ != this.getRevision()) {\n      this.flatMidpoint_ = this.getCoordinateAt(\n        0.5,\n        this.flatMidpoint_ ?? undefined,\n      );\n      this.flatMidpointRevision_ = this.getRevision();\n    }\n    return /** @type {Array<number>} */ (this.flatMidpoint_);\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LineString} Simplified LineString.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    /** @type {Array<number>} */\n    const simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      0,\n    );\n    return new LineString(simplifiedFlatCoordinates, 'XY');\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'LineString';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLineString(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      extent,\n    );\n  }\n\n  /**\n   * Set the coordinates of the linestring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride,\n    );\n    this.changed();\n  }\n}\n\nexport default LineString;\n","/**\n * @module ol/geom/flat/interiorpoint\n */\nimport {ascending} from '../../array.js';\nimport {linearRingsContainsXY} from './contains.js';\n\n/**\n * Calculates a point that is likely to lie in the interior of the linear rings.\n * Inspired by JTS's com.vividsolutions.jts.geom.Geometry#getInteriorPoint.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {Array<number>} flatCenters Flat centers.\n * @param {number} flatCentersOffset Flat center offset.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Destination point as XYM coordinate, where M is the\n * length of the horizontal intersection that the point belongs to.\n */\nexport function getInteriorPointOfArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  flatCenters,\n  flatCentersOffset,\n  dest,\n) {\n  let i, ii, x, x1, x2, y1, y2;\n  const y = flatCenters[flatCentersOffset + 1];\n  /** @type {Array<number>} */\n  const intersections = [];\n  // Calculate intersections with the horizontal line\n  for (let r = 0, rr = ends.length; r < rr; ++r) {\n    const end = ends[r];\n    x1 = flatCoordinates[end - stride];\n    y1 = flatCoordinates[end - stride + 1];\n    for (i = offset; i < end; i += stride) {\n      x2 = flatCoordinates[i];\n      y2 = flatCoordinates[i + 1];\n      if ((y <= y1 && y2 <= y) || (y1 <= y && y <= y2)) {\n        x = ((y - y1) / (y2 - y1)) * (x2 - x1) + x1;\n        intersections.push(x);\n      }\n      x1 = x2;\n      y1 = y2;\n    }\n  }\n  // Find the longest segment of the horizontal line that has its center point\n  // inside the linear ring.\n  let pointX = NaN;\n  let maxSegmentLength = -Infinity;\n  intersections.sort(ascending);\n  x1 = intersections[0];\n  for (i = 1, ii = intersections.length; i < ii; ++i) {\n    x2 = intersections[i];\n    const segmentLength = Math.abs(x2 - x1);\n    if (segmentLength > maxSegmentLength) {\n      x = (x1 + x2) / 2;\n      if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {\n        pointX = x;\n        maxSegmentLength = segmentLength;\n      }\n    }\n    x1 = x2;\n  }\n  if (isNaN(pointX)) {\n    // There is no horizontal line that has its center point inside the linear\n    // ring.  Use the center of the the linear ring's extent.\n    pointX = flatCenters[flatCentersOffset];\n  }\n  if (dest) {\n    dest.push(pointX, y, maxSegmentLength);\n    return dest;\n  }\n  return [pointX, y, maxSegmentLength];\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {Array<number>} flatCenters Flat centers.\n * @return {Array<number>} Interior points as XYM coordinates, where M is the\n * length of the horizontal intersection that the point belongs to.\n */\nexport function getInteriorPointsOfMultiArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  flatCenters,\n) {\n  /** @type {Array<number>} */\n  let interiorPoints = [];\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    interiorPoints = getInteriorPointOfArray(\n      flatCoordinates,\n      offset,\n      ends,\n      stride,\n      flatCenters,\n      2 * i,\n      interiorPoints,\n    );\n    offset = ends[ends.length - 1];\n  }\n  return interiorPoints;\n}\n","/**\n * @module ol/geom/LinearRing\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {assignClosestPoint, maxSquaredDelta} from './flat/closest.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport {deflateCoordinates} from './flat/deflate.js';\nimport {douglasPeucker} from './flat/simplify.js';\nimport {inflateCoordinates} from './flat/inflate.js';\nimport {linearRing as linearRingArea} from './flat/area.js';\n\n/**\n * @classdesc\n * Linear ring geometry. Only used as part of polygon; cannot be rendered\n * on its own.\n *\n * @api\n */\nclass LinearRing extends SimpleGeometry {\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (layout !== undefined && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates),\n      );\n    } else {\n      this.setCoordinates(\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\n          coordinates\n        ),\n        layout,\n      );\n    }\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!LinearRing} Clone.\n   * @api\n   */\n  clone() {\n    return new LinearRing(this.flatCoordinates.slice(), this.layout);\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        maxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.flatCoordinates.length,\n          this.stride,\n          0,\n        ),\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestPoint(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      this.maxDelta_,\n      true,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance,\n    );\n  }\n\n  /**\n   * Return the area of the linear ring on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  getArea() {\n    return linearRingArea(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n    );\n  }\n\n  /**\n   * Return the coordinates of the linear ring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n    );\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LinearRing} Simplified LinearRing.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    /** @type {Array<number>} */\n    const simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      0,\n    );\n    return new LinearRing(simplifiedFlatCoordinates, 'XY');\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'LinearRing';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return false;\n  }\n\n  /**\n   * Set the coordinates of the linear ring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride,\n    );\n    this.changed();\n  }\n}\n\nexport default LinearRing;\n","/**\n * @module ol/geom/flat/textpath\n */\nimport {lerp} from '../../math.js';\nimport {rotate} from './transform.js';\n\n/**\n * @param {Array<number>} flatCoordinates Path to put text on.\n * @param {number} offset Start offset of the `flatCoordinates`.\n * @param {number} end End offset of the `flatCoordinates`.\n * @param {number} stride Stride.\n * @param {string} text Text to place on the path.\n * @param {number} startM m along the path where the text starts.\n * @param {number} maxAngle Max angle between adjacent chars in radians.\n * @param {number} scale The product of the text scale and the device pixel ratio.\n * @param {function(string, string, Object<string, number>):number} measureAndCacheTextWidth Measure and cache text width.\n * @param {string} font The font.\n * @param {Object<string, number>} cache A cache of measured widths.\n * @param {number} rotation Rotation to apply to the flatCoordinates to determine whether text needs to be reversed.\n * @return {Array<Array<*>>|null} The result array (or null if `maxAngle` was\n * exceeded). Entries of the array are x, y, anchorX, angle, chunk.\n */\nexport function drawTextOnPath(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  text,\n  startM,\n  maxAngle,\n  scale,\n  measureAndCacheTextWidth,\n  font,\n  cache,\n  rotation,\n) {\n  let x2 = flatCoordinates[offset];\n  let y2 = flatCoordinates[offset + 1];\n  let x1 = 0;\n  let y1 = 0;\n  let segmentLength = 0;\n  let segmentM = 0;\n\n  function advance() {\n    x1 = x2;\n    y1 = y2;\n    offset += stride;\n    x2 = flatCoordinates[offset];\n    y2 = flatCoordinates[offset + 1];\n    segmentM += segmentLength;\n    segmentLength = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n  }\n  do {\n    advance();\n  } while (offset < end - stride && segmentM + segmentLength < startM);\n\n  let interpolate =\n    segmentLength === 0 ? 0 : (startM - segmentM) / segmentLength;\n  const beginX = lerp(x1, x2, interpolate);\n  const beginY = lerp(y1, y2, interpolate);\n\n  const startOffset = offset - stride;\n  const startLength = segmentM;\n  const endM = startM + scale * measureAndCacheTextWidth(font, text, cache);\n  while (offset < end - stride && segmentM + segmentLength < endM) {\n    advance();\n  }\n  interpolate = segmentLength === 0 ? 0 : (endM - segmentM) / segmentLength;\n  const endX = lerp(x1, x2, interpolate);\n  const endY = lerp(y1, y2, interpolate);\n\n  // Keep text upright\n  let reverse;\n  if (rotation) {\n    const flat = [beginX, beginY, endX, endY];\n    rotate(flat, 0, 4, 2, rotation, flat, flat);\n    reverse = flat[0] > flat[2];\n  } else {\n    reverse = beginX > endX;\n  }\n\n  const PI = Math.PI;\n  const result = [];\n  const singleSegment = startOffset + stride === offset;\n\n  offset = startOffset;\n  segmentLength = 0;\n  segmentM = startLength;\n  x2 = flatCoordinates[offset];\n  y2 = flatCoordinates[offset + 1];\n\n  let previousAngle;\n  // All on the same segment\n  if (singleSegment) {\n    advance();\n\n    previousAngle = Math.atan2(y2 - y1, x2 - x1);\n    if (reverse) {\n      previousAngle += previousAngle > 0 ? -PI : PI;\n    }\n    const x = (endX + beginX) / 2;\n    const y = (endY + beginY) / 2;\n    result[0] = [x, y, (endM - startM) / 2, previousAngle, text];\n    return result;\n  }\n\n  // rendering across line segments\n  text = text.replace(/\\n/g, ' '); // ensure rendering in single-line as all calculations below don't handle multi-lines\n\n  for (let i = 0, ii = text.length; i < ii; ) {\n    advance();\n    let angle = Math.atan2(y2 - y1, x2 - x1);\n    if (reverse) {\n      angle += angle > 0 ? -PI : PI;\n    }\n    if (previousAngle !== undefined) {\n      let delta = angle - previousAngle;\n      delta += delta > PI ? -2 * PI : delta < -PI ? 2 * PI : 0;\n      if (Math.abs(delta) > maxAngle) {\n        return null;\n      }\n    }\n    previousAngle = angle;\n\n    const iStart = i;\n    let charLength = 0;\n    for (; i < ii; ++i) {\n      const index = reverse ? ii - i - 1 : i;\n      const len = scale * measureAndCacheTextWidth(font, text[index], cache);\n      if (\n        offset + stride < end &&\n        segmentM + segmentLength < startM + charLength + len / 2\n      ) {\n        break;\n      }\n      charLength += len;\n    }\n    if (i === iStart) {\n      continue;\n    }\n    const chars = reverse\n      ? text.substring(ii - iStart, ii - i)\n      : text.substring(iStart, i);\n    interpolate =\n      segmentLength === 0\n        ? 0\n        : (startM + charLength / 2 - segmentM) / segmentLength;\n    const x = lerp(x1, x2, interpolate);\n    const y = lerp(y1, y2, interpolate);\n    result.push([x, y, charLength / 2, angle, chars]);\n    startM += charLength;\n  }\n  return result;\n}\n","/**\n * @module ol/geom/Geometry\n */\nimport BaseObject from '../Object.js';\nimport {abstract} from '../util.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../transform.js';\nimport {\n  createEmpty,\n  createOrUpdateEmpty,\n  getHeight,\n  returnOrUpdate,\n} from '../extent.js';\nimport {get as getProjection, getTransform} from '../proj.js';\nimport {memoizeOne} from '../functions.js';\nimport {transform2D} from './flat/transform.js';\n\n/**\n * @typedef {'XY' | 'XYZ' | 'XYM' | 'XYZM'} GeometryLayout\n * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')\n * or measure ('M') coordinate is available.\n */\n\n/**\n * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString' | 'MultiPolygon' | 'GeometryCollection' | 'Circle'} Type\n * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,\n * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,\n * `'GeometryCollection'`, or `'Circle'`.\n */\n\n/**\n * @type {import(\"../transform.js\").Transform}\n */\nconst tmpTransform = createTransform();\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for vector geometries.\n *\n * To get notified of changes to the geometry, register a listener for the\n * generic `change` event on your geometry instance.\n *\n * @abstract\n * @api\n */\nclass Geometry extends BaseObject {\n  constructor() {\n    super();\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.extentRevision_ = -1;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.simplifiedGeometryRevision = 0;\n\n    /**\n     * Get a transformed and simplified version of the geometry.\n     * @abstract\n     * @param {number} revision The geometry revision.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n     * @return {Geometry} Simplified geometry.\n     */\n    this.simplifyTransformedInternal = memoizeOne(\n      (revision, squaredTolerance, transform) => {\n        if (!transform) {\n          return this.getSimplifiedGeometry(squaredTolerance);\n        }\n        const clone = this.clone();\n        clone.applyTransform(transform);\n        return clone.getSimplifiedGeometry(squaredTolerance);\n      },\n    );\n  }\n\n  /**\n   * Get a transformed and simplified version of the geometry.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n   * @return {Geometry} Simplified geometry.\n   */\n  simplifyTransformed(squaredTolerance, transform) {\n    return this.simplifyTransformedInternal(\n      this.getRevision(),\n      squaredTolerance,\n      transform,\n    );\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @abstract\n   * @return {!Geometry} Clone.\n   */\n  clone() {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    return abstract();\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    const coord = this.getClosestPoint([x, y]);\n    return coord[0] === x && coord[1] === y;\n  }\n\n  /**\n   * Return the closest point of the geometry to the passed point as\n   * {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} point Point.\n   * @param {import(\"../coordinate.js\").Coordinate} [closestPoint] Closest point.\n   * @return {import(\"../coordinate.js\").Coordinate} Closest point.\n   * @api\n   */\n  getClosestPoint(point, closestPoint) {\n    closestPoint = closestPoint ? closestPoint : [NaN, NaN];\n    this.closestPointXY(point[0], point[1], closestPoint, Infinity);\n    return closestPoint;\n  }\n\n  /**\n   * Returns true if this geometry includes the specified coordinate. If the\n   * coordinate is on the boundary of the geometry, returns false.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {boolean} Contains coordinate.\n   * @api\n   */\n  intersectsCoordinate(coordinate) {\n    return this.containsXY(coordinate[0], coordinate[1]);\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    return abstract();\n  }\n\n  /**\n   * Get the extent of the geometry.\n   * @param {import(\"../extent.js\").Extent} [extent] Extent.\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  getExtent(extent) {\n    if (this.extentRevision_ != this.getRevision()) {\n      const extent = this.computeExtent(this.extent_);\n      if (isNaN(extent[0]) || isNaN(extent[1])) {\n        createOrUpdateEmpty(extent);\n      }\n      this.extentRevision_ = this.getRevision();\n    }\n    return returnOrUpdate(this.extent_, extent);\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    abstract();\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  scale(sx, sy, anchor) {\n    abstract();\n  }\n\n  /**\n   * Create a simplified version of this geometry.  For linestrings, this uses\n   * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)\n   * algorithm.  For polygons, a quantization-based\n   * simplification is used to preserve topology.\n   * @param {number} tolerance The tolerance distance for simplification.\n   * @return {Geometry} A new, simplified version of the original geometry.\n   * @api\n   */\n  simplify(tolerance) {\n    return this.getSimplifiedGeometry(tolerance * tolerance);\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker\n   * algorithm.\n   * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Geometry} Simplified geometry.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    return abstract();\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @abstract\n   * @return {Type} Geometry type.\n   */\n  getType() {\n    return abstract();\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @abstract\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   */\n  applyTransform(transformFn) {\n    abstract();\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   */\n  intersectsExtent(extent) {\n    return abstract();\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @abstract\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    abstract();\n  }\n\n  /**\n   * Transform each coordinate of the geometry from one coordinate reference\n   * system to another. The geometry is modified in place.\n   * For example, a line will be transformed to a line and a circle to a circle.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @return {this} This geometry.  Note that original geometry is\n   *     modified in place.\n   * @api\n   */\n  transform(source, destination) {\n    /** @type {import(\"../proj/Projection.js\").default} */\n    const sourceProj = getProjection(source);\n    const transformFn =\n      sourceProj.getUnits() == 'tile-pixels'\n        ? function (inCoordinates, outCoordinates, stride) {\n            const pixelExtent = sourceProj.getExtent();\n            const projectedExtent = sourceProj.getWorldExtent();\n            const scale = getHeight(projectedExtent) / getHeight(pixelExtent);\n            composeTransform(\n              tmpTransform,\n              projectedExtent[0],\n              projectedExtent[3],\n              scale,\n              -scale,\n              0,\n              0,\n              0,\n            );\n            transform2D(\n              inCoordinates,\n              0,\n              inCoordinates.length,\n              stride,\n              tmpTransform,\n              outCoordinates,\n            );\n            return getTransform(sourceProj, destination)(\n              inCoordinates,\n              outCoordinates,\n              stride,\n            );\n          }\n        : getTransform(sourceProj, destination);\n    this.applyTransform(transformFn);\n    return this;\n  }\n}\n\nexport default Geometry;\n","/**\n * @module ol/geom/flat/area\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {number} Area.\n */\nexport function linearRing(flatCoordinates, offset, end, stride) {\n  let twiceArea = 0;\n  let x1 = flatCoordinates[end - stride];\n  let y1 = flatCoordinates[end - stride + 1];\n  for (; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    twiceArea += y1 * x2 - x1 * y2;\n    x1 = x2;\n    y1 = y2;\n  }\n  return twiceArea / 2;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @return {number} Area.\n */\nexport function linearRings(flatCoordinates, offset, ends, stride) {\n  let area = 0;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    area += linearRing(flatCoordinates, offset, end, stride);\n    offset = end;\n  }\n  return area;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @return {number} Area.\n */\nexport function linearRingss(flatCoordinates, offset, endss, stride) {\n  let area = 0;\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    area += linearRings(flatCoordinates, offset, ends, stride);\n    offset = ends[ends.length - 1];\n  }\n  return area;\n}\n","/**\n * @module ol/geom/MultiPoint\n */\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {closestSquaredDistanceXY, containsXY} from '../extent.js';\nimport {deflateCoordinates} from './flat/deflate.js';\nimport {extend} from '../array.js';\nimport {inflateCoordinates} from './flat/inflate.js';\nimport {squaredDistance as squaredDx} from '../math.js';\n\n/**\n * @classdesc\n * Multi-point geometry.\n *\n * @api\n */\nclass MultiPoint extends SimpleGeometry {\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n    if (layout && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates),\n      );\n    } else {\n      this.setCoordinates(\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\n          coordinates\n        ),\n        layout,\n      );\n    }\n  }\n\n  /**\n   * Append the passed point to this multipoint.\n   * @param {Point} point Point.\n   * @api\n   */\n  appendPoint(point) {\n    extend(this.flatCoordinates, point.getFlatCoordinates());\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiPoint} Clone.\n   * @api\n   */\n  clone() {\n    const multiPoint = new MultiPoint(\n      this.flatCoordinates.slice(),\n      this.layout,\n    );\n    multiPoint.applyProperties(this);\n    return multiPoint;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    const flatCoordinates = this.flatCoordinates;\n    const stride = this.stride;\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const squaredDistance = squaredDx(\n        x,\n        y,\n        flatCoordinates[i],\n        flatCoordinates[i + 1],\n      );\n      if (squaredDistance < minSquaredDistance) {\n        minSquaredDistance = squaredDistance;\n        for (let j = 0; j < stride; ++j) {\n          closestPoint[j] = flatCoordinates[i + j];\n        }\n        closestPoint.length = stride;\n      }\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * Return the coordinates of the multipoint.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n    );\n  }\n\n  /**\n   * Return the point at the specified index.\n   * @param {number} index Index.\n   * @return {Point} Point.\n   * @api\n   */\n  getPoint(index) {\n    const n = this.flatCoordinates.length / this.stride;\n    if (index < 0 || n <= index) {\n      return null;\n    }\n    return new Point(\n      this.flatCoordinates.slice(\n        index * this.stride,\n        (index + 1) * this.stride,\n      ),\n      this.layout,\n    );\n  }\n\n  /**\n   * Return the points of this multipoint.\n   * @return {Array<Point>} Points.\n   * @api\n   */\n  getPoints() {\n    const flatCoordinates = this.flatCoordinates;\n    const layout = this.layout;\n    const stride = this.stride;\n    /** @type {Array<Point>} */\n    const points = [];\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const point = new Point(flatCoordinates.slice(i, i + stride), layout);\n      points.push(point);\n    }\n    return points;\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'MultiPoint';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    const flatCoordinates = this.flatCoordinates;\n    const stride = this.stride;\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const x = flatCoordinates[i];\n      const y = flatCoordinates[i + 1];\n      if (containsXY(extent, x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set the coordinates of the multipoint.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride,\n    );\n    this.changed();\n  }\n}\n\nexport default MultiPoint;\n","/**\n * @module ol/geom/Polygon\n */\nimport LinearRing from './LinearRing.js';\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {arrayMaxSquaredDelta, assignClosestArrayPoint} from './flat/closest.js';\nimport {closestSquaredDistanceXY, getCenter, isEmpty} from '../extent.js';\nimport {deflateCoordinatesArray} from './flat/deflate.js';\nimport {extend} from '../array.js';\nimport {getInteriorPointOfArray} from './flat/interiorpoint.js';\nimport {inflateCoordinatesArray} from './flat/inflate.js';\nimport {intersectsLinearRingArray} from './flat/intersectsextent.js';\nimport {linearRingsAreOriented, orientLinearRings} from './flat/orient.js';\nimport {linearRings as linearRingsArea} from './flat/area.js';\nimport {linearRingsContainsXY} from './flat/contains.js';\nimport {modulo} from '../math.js';\nimport {quantizeArray} from './flat/simplify.js';\nimport {offset as sphereOffset} from '../sphere.js';\n\n/**\n * @classdesc\n * Polygon geometry.\n *\n * @api\n */\nclass Polygon extends SimpleGeometry {\n  /**\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>|!Array<number>} coordinates\n   *     Array of linear rings that define the polygon. The first linear ring of the\n   *     array defines the outer-boundary or surface of the polygon. Each subsequent\n   *     linear ring defines a hole in the surface of the polygon. A linear ring is\n   *     an array of vertices' coordinates where the first coordinate and the last are\n   *     equivalent. (For internal use, flat coordinates in combination with\n   *     `layout` and `ends` are also accepted.)\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @param {Array<number>} [ends] Ends (for internal use with flat coordinates).\n   */\n  constructor(coordinates, layout, ends) {\n    super();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.ends_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatInteriorPointRevision_ = -1;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate|null}\n     */\n    this.flatInteriorPoint_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.orientedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.orientedFlatCoordinates_ = null;\n\n    if (layout !== undefined && ends) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates),\n      );\n      this.ends_ = ends;\n    } else {\n      this.setCoordinates(\n        /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (\n          coordinates\n        ),\n        layout,\n      );\n    }\n  }\n\n  /**\n   * Append the passed linear ring to this polygon.\n   * @param {LinearRing} linearRing Linear ring.\n   * @api\n   */\n  appendLinearRing(linearRing) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = linearRing.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, linearRing.getFlatCoordinates());\n    }\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Polygon} Clone.\n   * @api\n   */\n  clone() {\n    const polygon = new Polygon(\n      this.flatCoordinates.slice(),\n      this.layout,\n      this.ends_.slice(),\n    );\n    polygon.applyProperties(this);\n    return polygon;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        arrayMaxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.ends_,\n          this.stride,\n          0,\n        ),\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestArrayPoint(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      this.maxDelta_,\n      true,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance,\n    );\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    return linearRingsContainsXY(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride,\n      x,\n      y,\n    );\n  }\n\n  /**\n   * Return the area of the polygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  getArea() {\n    return linearRingsArea(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride,\n    );\n  }\n\n  /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for polygons.\n   *\n   * @param {boolean} [right] Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @api\n   */\n  getCoordinates(right) {\n    let flatCoordinates;\n    if (right !== undefined) {\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\n      orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, right);\n    } else {\n      flatCoordinates = this.flatCoordinates;\n    }\n\n    return inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Ends.\n   */\n  getEnds() {\n    return this.ends_;\n  }\n\n  /**\n   * @return {Array<number>} Interior point.\n   */\n  getFlatInteriorPoint() {\n    if (this.flatInteriorPointRevision_ != this.getRevision()) {\n      const flatCenter = getCenter(this.getExtent());\n      this.flatInteriorPoint_ = getInteriorPointOfArray(\n        this.getOrientedFlatCoordinates(),\n        0,\n        this.ends_,\n        this.stride,\n        flatCenter,\n        0,\n      );\n      this.flatInteriorPointRevision_ = this.getRevision();\n    }\n    return /** @type {import(\"../coordinate.js\").Coordinate} */ (\n      this.flatInteriorPoint_\n    );\n  }\n\n  /**\n   * Return an interior point of the polygon.\n   * @return {Point} Interior point as XYM coordinate, where M is the\n   * length of the horizontal intersection that the point belongs to.\n   * @api\n   */\n  getInteriorPoint() {\n    return new Point(this.getFlatInteriorPoint(), 'XYM');\n  }\n\n  /**\n   * Return the number of rings of the polygon,  this includes the exterior\n   * ring and any interior rings.\n   *\n   * @return {number} Number of rings.\n   * @api\n   */\n  getLinearRingCount() {\n    return this.ends_.length;\n  }\n\n  /**\n   * Return the Nth linear ring of the polygon geometry. Return `null` if the\n   * given index is out of range.\n   * The exterior linear ring is available at index `0` and the interior rings\n   * at index `1` and beyond.\n   *\n   * @param {number} index Index.\n   * @return {LinearRing|null} Linear ring.\n   * @api\n   */\n  getLinearRing(index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new LinearRing(\n      this.flatCoordinates.slice(\n        index === 0 ? 0 : this.ends_[index - 1],\n        this.ends_[index],\n      ),\n      this.layout,\n    );\n  }\n\n  /**\n   * Return the linear rings of the polygon.\n   * @return {Array<LinearRing>} Linear rings.\n   * @api\n   */\n  getLinearRings() {\n    const layout = this.layout;\n    const flatCoordinates = this.flatCoordinates;\n    const ends = this.ends_;\n    const linearRings = [];\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const linearRing = new LinearRing(\n        flatCoordinates.slice(offset, end),\n        layout,\n      );\n      linearRings.push(linearRing);\n      offset = end;\n    }\n    return linearRings;\n  }\n\n  /**\n   * @return {Array<number>} Oriented flat coordinates.\n   */\n  getOrientedFlatCoordinates() {\n    if (this.orientedRevision_ != this.getRevision()) {\n      const flatCoordinates = this.flatCoordinates;\n      if (linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {\n        this.orientedFlatCoordinates_ = flatCoordinates;\n      } else {\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\n        this.orientedFlatCoordinates_.length = orientLinearRings(\n          this.orientedFlatCoordinates_,\n          0,\n          this.ends_,\n          this.stride,\n        );\n      }\n      this.orientedRevision_ = this.getRevision();\n    }\n    return /** @type {Array<number>} */ (this.orientedFlatCoordinates_);\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Polygon} Simplified Polygon.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    /** @type {Array<number>} */\n    const simplifiedFlatCoordinates = [];\n    /** @type {Array<number>} */\n    const simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = quantizeArray(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      Math.sqrt(squaredTolerance),\n      simplifiedFlatCoordinates,\n      0,\n      simplifiedEnds,\n    );\n    return new Polygon(simplifiedFlatCoordinates, 'XY', simplifiedEnds);\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'Polygon';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLinearRingArray(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride,\n      extent,\n    );\n  }\n\n  /**\n   * Set the coordinates of the polygon.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const ends = deflateCoordinatesArray(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride,\n      this.ends_,\n    );\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n}\n\nexport default Polygon;\n\n/**\n * Create an approximation of a circle on the surface of a sphere.\n * @param {import(\"../coordinate.js\").Coordinate} center Center (`[lon, lat]` in degrees).\n * @param {number} radius The great-circle distance from the center to\n *     the polygon vertices in meters.\n * @param {number} [n] Optional number of vertices for the resulting\n *     polygon. Default is `32`.\n * @param {number} [sphereRadius] Optional radius for the sphere (defaults to\n *     the Earth's mean radius using the WGS84 ellipsoid).\n * @return {Polygon} The \"circular\" polygon.\n * @api\n */\nexport function circular(center, radius, n, sphereRadius) {\n  n = n ? n : 32;\n  /** @type {Array<number>} */\n  const flatCoordinates = [];\n  for (let i = 0; i < n; ++i) {\n    extend(\n      flatCoordinates,\n      sphereOffset(center, radius, (2 * Math.PI * i) / n, sphereRadius),\n    );\n  }\n  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\n  return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);\n}\n\n/**\n * Create a polygon from an extent. The layout used is `XY`.\n * @param {import(\"../extent.js\").Extent} extent The extent.\n * @return {Polygon} The polygon.\n * @api\n */\nexport function fromExtent(extent) {\n  if (isEmpty(extent)) {\n    throw new Error('Cannot create polygon from empty extent');\n  }\n  const minX = extent[0];\n  const minY = extent[1];\n  const maxX = extent[2];\n  const maxY = extent[3];\n  const flatCoordinates = [\n    minX,\n    minY,\n    minX,\n    maxY,\n    maxX,\n    maxY,\n    maxX,\n    minY,\n    minX,\n    minY,\n  ];\n  return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);\n}\n\n/**\n * Create a regular polygon from a circle.\n * @param {import(\"./Circle.js\").default} circle Circle geometry.\n * @param {number} [sides] Number of sides of the polygon. Default is 32.\n * @param {number} [angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n * @return {Polygon} Polygon geometry.\n * @api\n */\nexport function fromCircle(circle, sides, angle) {\n  sides = sides ? sides : 32;\n  const stride = circle.getStride();\n  const layout = circle.getLayout();\n  const center = circle.getCenter();\n  const arrayLength = stride * (sides + 1);\n  const flatCoordinates = new Array(arrayLength);\n  for (let i = 0; i < arrayLength; i += stride) {\n    flatCoordinates[i] = 0;\n    flatCoordinates[i + 1] = 0;\n    for (let j = 2; j < stride; j++) {\n      flatCoordinates[i + j] = center[j];\n    }\n  }\n  const ends = [flatCoordinates.length];\n  const polygon = new Polygon(flatCoordinates, layout, ends);\n  makeRegular(polygon, center, circle.getRadius(), angle);\n  return polygon;\n}\n\n/**\n * Modify the coordinates of a polygon to make it a regular polygon.\n * @param {Polygon} polygon Polygon geometry.\n * @param {import(\"../coordinate.js\").Coordinate} center Center of the regular polygon.\n * @param {number} radius Radius of the regular polygon.\n * @param {number} [angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n */\nexport function makeRegular(polygon, center, radius, angle) {\n  const flatCoordinates = polygon.getFlatCoordinates();\n  const stride = polygon.getStride();\n  const sides = flatCoordinates.length / stride - 1;\n  const startAngle = angle ? angle : 0;\n  for (let i = 0; i <= sides; ++i) {\n    const offset = i * stride;\n    const angle = startAngle + (modulo(i, sides) * 2 * Math.PI) / sides;\n    flatCoordinates[offset] = center[0] + radius * Math.cos(angle);\n    flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);\n  }\n  polygon.changed();\n}\n","/**\n * @module ol/geom/GeometryCollection\n */\nimport EventType from '../events/EventType.js';\nimport Geometry from './Geometry.js';\nimport {\n  closestSquaredDistanceXY,\n  createOrUpdateEmpty,\n  extend,\n  getCenter,\n} from '../extent.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @classdesc\n * An array of {@link module:ol/geom/Geometry~Geometry} objects.\n *\n * @api\n */\nclass GeometryCollection extends Geometry {\n  /**\n   * @param {Array<Geometry>} geometries Geometries.\n   */\n  constructor(geometries) {\n    super();\n\n    /**\n     * @private\n     * @type {Array<Geometry>}\n     */\n    this.geometries_ = geometries;\n\n    /**\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    this.changeEventsKeys_ = [];\n\n    this.listenGeometriesChange_();\n  }\n\n  /**\n   * @private\n   */\n  unlistenGeometriesChange_() {\n    this.changeEventsKeys_.forEach(unlistenByKey);\n    this.changeEventsKeys_.length = 0;\n  }\n\n  /**\n   * @private\n   */\n  listenGeometriesChange_() {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      this.changeEventsKeys_.push(\n        listen(geometries[i], EventType.CHANGE, this.changed, this),\n      );\n    }\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!GeometryCollection} Clone.\n   * @api\n   */\n  clone() {\n    const geometryCollection = new GeometryCollection(\n      cloneGeometries(this.geometries_),\n    );\n    geometryCollection.applyProperties(this);\n    return geometryCollection;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      minSquaredDistance = geometries[i].closestPointXY(\n        x,\n        y,\n        closestPoint,\n        minSquaredDistance,\n      );\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].containsXY(x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    createOrUpdateEmpty(extent);\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      extend(extent, geometries[i].getExtent());\n    }\n    return extent;\n  }\n\n  /**\n   * Return the geometries that make up this geometry collection.\n   * @return {Array<Geometry>} Geometries.\n   * @api\n   */\n  getGeometries() {\n    return cloneGeometries(this.geometries_);\n  }\n\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n  getGeometriesArray() {\n    return this.geometries_;\n  }\n\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n  getGeometriesArrayRecursive() {\n    /** @type {Array<Geometry>} */\n    let geometriesArray = [];\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].getType() === this.getType()) {\n        geometriesArray = geometriesArray.concat(\n          /** @type {GeometryCollection} */ (\n            geometries[i]\n          ).getGeometriesArrayRecursive(),\n        );\n      } else {\n        geometriesArray.push(geometries[i]);\n      }\n    }\n    return geometriesArray;\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {GeometryCollection} Simplified GeometryCollection.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n    if (\n      squaredTolerance < 0 ||\n      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n        squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance)\n    ) {\n      return this;\n    }\n\n    const simplifiedGeometries = [];\n    const geometries = this.geometries_;\n    let simplified = false;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      const geometry = geometries[i];\n      const simplifiedGeometry =\n        geometry.getSimplifiedGeometry(squaredTolerance);\n      simplifiedGeometries.push(simplifiedGeometry);\n      if (simplifiedGeometry !== geometry) {\n        simplified = true;\n      }\n    }\n    if (simplified) {\n      const simplifiedGeometryCollection = new GeometryCollection(\n        simplifiedGeometries,\n      );\n      return simplifiedGeometryCollection;\n    }\n    this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n    return this;\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'GeometryCollection';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].intersectsExtent(extent)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return this.geometries_.length === 0;\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].rotate(angle, anchor);\n    }\n    this.changed();\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  scale(sx, sy, anchor) {\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].scale(sx, sy, anchor);\n    }\n    this.changed();\n  }\n\n  /**\n   * Set the geometries that make up this geometry collection.\n   * @param {Array<Geometry>} geometries Geometries.\n   * @api\n   */\n  setGeometries(geometries) {\n    this.setGeometriesArray(cloneGeometries(geometries));\n  }\n\n  /**\n   * @param {Array<Geometry>} geometries Geometries.\n   */\n  setGeometriesArray(geometries) {\n    this.unlistenGeometriesChange_();\n    this.geometries_ = geometries;\n    this.listenGeometriesChange_();\n    this.changed();\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   */\n  applyTransform(transformFn) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].applyTransform(transformFn);\n    }\n    this.changed();\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].translate(deltaX, deltaY);\n    }\n    this.changed();\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    this.unlistenGeometriesChange_();\n    super.disposeInternal();\n  }\n}\n\n/**\n * @param {Array<Geometry>} geometries Geometries.\n * @return {Array<Geometry>} Cloned geometries.\n */\nfunction cloneGeometries(geometries) {\n  return geometries.map((geometry) => geometry.clone());\n}\n\nexport default GeometryCollection;\n","/**\n * @module ol/geom/Point\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {containsXY, createOrUpdateFromCoordinate} from '../extent.js';\nimport {deflateCoordinate} from './flat/deflate.js';\nimport {squaredDistance as squaredDx} from '../math.js';\n\n/**\n * @classdesc\n * Point geometry.\n *\n * @api\n */\nclass Point extends SimpleGeometry {\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n    this.setCoordinates(coordinates, layout);\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Point} Clone.\n   * @api\n   */\n  clone() {\n    const point = new Point(this.flatCoordinates.slice(), this.layout);\n    point.applyProperties(this);\n    return point;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    const flatCoordinates = this.flatCoordinates;\n    const squaredDistance = squaredDx(\n      x,\n      y,\n      flatCoordinates[0],\n      flatCoordinates[1],\n    );\n    if (squaredDistance < minSquaredDistance) {\n      const stride = this.stride;\n      for (let i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[i];\n      }\n      closestPoint.length = stride;\n      return squaredDistance;\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * Return the coordinate of the point.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return this.flatCoordinates.slice();\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    return createOrUpdateFromCoordinate(this.flatCoordinates, extent);\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'Point';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);\n  }\n\n  /**\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 0);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinate(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride,\n    );\n    this.changed();\n  }\n}\n\nexport default Point;\n","/**\n * @module ol/geom/flat/length\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {number} Length.\n */\nexport function lineStringLength(flatCoordinates, offset, end, stride) {\n  let x1 = flatCoordinates[offset];\n  let y1 = flatCoordinates[offset + 1];\n  let length = 0;\n  for (let i = offset + stride; i < end; i += stride) {\n    const x2 = flatCoordinates[i];\n    const y2 = flatCoordinates[i + 1];\n    length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n    x1 = x2;\n    y1 = y2;\n  }\n  return length;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {number} Perimeter.\n */\nexport function linearRingLength(flatCoordinates, offset, end, stride) {\n  let perimeter = lineStringLength(flatCoordinates, offset, end, stride);\n  const dx = flatCoordinates[end - stride] - flatCoordinates[offset];\n  const dy = flatCoordinates[end - stride + 1] - flatCoordinates[offset + 1];\n  perimeter += Math.sqrt(dx * dx + dy * dy);\n  return perimeter;\n}\n","/**\n * @module ol/geom/flat/contains\n */\nimport {forEachCorner} from '../../extent.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} Contains extent.\n */\nexport function linearRingContainsExtent(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  extent,\n) {\n  const outside = forEachCorner(\n    extent,\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @return {boolean} Contains (x, y).\n     */\n    function (coordinate) {\n      return !linearRingContainsXY(\n        flatCoordinates,\n        offset,\n        end,\n        stride,\n        coordinate[0],\n        coordinate[1],\n      );\n    },\n  );\n  return !outside;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\nexport function linearRingContainsXY(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  x,\n  y,\n) {\n  // https://geomalgorithms.com/a03-_inclusion.html\n  // Copyright 2000 softSurfer, 2012 Dan Sunday\n  // This code may be freely used and modified for any purpose\n  // providing that this copyright notice is included with it.\n  // SoftSurfer makes no warranty for this code, and cannot be held\n  // liable for any real or imagined damage resulting from its use.\n  // Users of this code must verify correctness for their application.\n  let wn = 0;\n  let x1 = flatCoordinates[end - stride];\n  let y1 = flatCoordinates[end - stride + 1];\n  for (; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    if (y1 <= y) {\n      if (y2 > y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0) {\n        wn++;\n      }\n    } else if (y2 <= y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) < 0) {\n      wn--;\n    }\n    x1 = x2;\n    y1 = y2;\n  }\n  return wn !== 0;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\nexport function linearRingsContainsXY(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  x,\n  y,\n) {\n  if (ends.length === 0) {\n    return false;\n  }\n  if (!linearRingContainsXY(flatCoordinates, offset, ends[0], stride, x, y)) {\n    return false;\n  }\n  for (let i = 1, ii = ends.length; i < ii; ++i) {\n    if (\n      linearRingContainsXY(flatCoordinates, ends[i - 1], ends[i], stride, x, y)\n    ) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\nexport function linearRingssContainsXY(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  x,\n  y,\n) {\n  if (endss.length === 0) {\n    return false;\n  }\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {\n      return true;\n    }\n    offset = ends[ends.length - 1];\n  }\n  return false;\n}\n","/**\n * @module ol/geom/flat/center\n */\nimport {createEmpty, createOrUpdateFromFlatCoordinates} from '../../extent.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @return {Array<number>} Flat centers.\n */\nexport function linearRingss(flatCoordinates, offset, endss, stride) {\n  const flatCenters = [];\n  let extent = createEmpty();\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    extent = createOrUpdateFromFlatCoordinates(\n      flatCoordinates,\n      offset,\n      ends[0],\n      stride,\n    );\n    flatCenters.push((extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2);\n    offset = ends[ends.length - 1];\n  }\n  return flatCenters;\n}\n","/**\n * @module ol/geom/flat/inflate\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Array<import(\"../../coordinate.js\").Coordinate>} [coordinates] Coordinates.\n * @return {Array<import(\"../../coordinate.js\").Coordinate>} Coordinates.\n */\nexport function inflateCoordinates(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  coordinates,\n) {\n  coordinates = coordinates !== undefined ? coordinates : [];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    coordinates[i++] = flatCoordinates.slice(j, j + stride);\n  }\n  coordinates.length = i;\n  return coordinates;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {Array<Array<import(\"../../coordinate.js\").Coordinate>>} [coordinatess] Coordinatess.\n * @return {Array<Array<import(\"../../coordinate.js\").Coordinate>>} Coordinatess.\n */\nexport function inflateCoordinatesArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  coordinatess,\n) {\n  coordinatess = coordinatess !== undefined ? coordinatess : [];\n  let i = 0;\n  for (let j = 0, jj = ends.length; j < jj; ++j) {\n    const end = ends[j];\n    coordinatess[i++] = inflateCoordinates(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      coordinatess[i],\n    );\n    offset = end;\n  }\n  coordinatess.length = i;\n  return coordinatess;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} [coordinatesss]\n *     Coordinatesss.\n * @return {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} Coordinatesss.\n */\nexport function inflateMultiCoordinatesArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  coordinatesss,\n) {\n  coordinatesss = coordinatesss !== undefined ? coordinatesss : [];\n  let i = 0;\n  for (let j = 0, jj = endss.length; j < jj; ++j) {\n    const ends = endss[j];\n    coordinatesss[i++] =\n      ends.length === 1 && ends[0] === offset\n        ? []\n        : inflateCoordinatesArray(\n            flatCoordinates,\n            offset,\n            ends,\n            stride,\n            coordinatesss[i],\n          );\n    offset = ends[ends.length - 1];\n  }\n  coordinatesss.length = i;\n  return coordinatesss;\n}\n","/**\n * @module ol/geom/SimpleGeometry\n */\nimport Geometry from './Geometry.js';\nimport {abstract} from '../util.js';\nimport {createOrUpdateFromFlatCoordinates, getCenter} from '../extent.js';\nimport {rotate, scale, transform2D, translate} from './flat/transform.js';\n\n/**\n * @classdesc\n * Abstract base class; only used for creating subclasses; do not instantiate\n * in apps, as cannot be rendered.\n *\n * @abstract\n * @api\n */\nclass SimpleGeometry extends Geometry {\n  constructor() {\n    super();\n\n    /**\n     * @protected\n     * @type {import(\"./Geometry.js\").GeometryLayout}\n     */\n    this.layout = 'XY';\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.stride = 2;\n\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    this.flatCoordinates;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    return createOrUpdateFromFlatCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      extent,\n    );\n  }\n\n  /**\n   * @abstract\n   * @return {Array<*> | null} Coordinates.\n   */\n  getCoordinates() {\n    return abstract();\n  }\n\n  /**\n   * Return the first coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} First coordinate.\n   * @api\n   */\n  getFirstCoordinate() {\n    return this.flatCoordinates.slice(0, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Flat coordinates.\n   */\n  getFlatCoordinates() {\n    return this.flatCoordinates;\n  }\n\n  /**\n   * Return the last coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} Last point.\n   * @api\n   */\n  getLastCoordinate() {\n    return this.flatCoordinates.slice(\n      this.flatCoordinates.length - this.stride,\n    );\n  }\n\n  /**\n   * Return the {@link import(\"./Geometry.js\").GeometryLayout layout} of the geometry.\n   * @return {import(\"./Geometry.js\").GeometryLayout} Layout.\n   * @api\n   */\n  getLayout() {\n    return this.layout;\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n    // If squaredTolerance is negative or if we know that simplification will not\n    // have any effect then just return this.\n    if (\n      squaredTolerance < 0 ||\n      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n        squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)\n    ) {\n      return this;\n    }\n\n    const simplifiedGeometry =\n      this.getSimplifiedGeometryInternal(squaredTolerance);\n    const simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\n    if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {\n      return simplifiedGeometry;\n    }\n    // Simplification did not actually remove any coordinates.  We now know\n    // that any calls to getSimplifiedGeometry with a squaredTolerance less\n    // than or equal to the current squaredTolerance will also not have any\n    // effect.  This allows us to short circuit simplification (saving CPU\n    // cycles) and prevents the cache of simplified geometries from filling\n    // up with useless identical copies of this geometry (saving memory).\n    this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n    return this;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    return this;\n  }\n\n  /**\n   * @return {number} Stride.\n   */\n  getStride() {\n    return this.stride;\n  }\n\n  /**\n   * @param {import(\"./Geometry.js\").GeometryLayout} layout Layout.\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   */\n  setFlatCoordinates(layout, flatCoordinates) {\n    this.stride = getStrideForLayout(layout);\n    this.layout = layout;\n    this.flatCoordinates = flatCoordinates;\n  }\n\n  /**\n   * @abstract\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  setCoordinates(coordinates, layout) {\n    abstract();\n  }\n\n  /**\n   * @param {import(\"./Geometry.js\").GeometryLayout|undefined} layout Layout.\n   * @param {Array<*>} coordinates Coordinates.\n   * @param {number} nesting Nesting.\n   * @protected\n   */\n  setLayout(layout, coordinates, nesting) {\n    let stride;\n    if (layout) {\n      stride = getStrideForLayout(layout);\n    } else {\n      for (let i = 0; i < nesting; ++i) {\n        if (coordinates.length === 0) {\n          this.layout = 'XY';\n          this.stride = 2;\n          return;\n        }\n        coordinates = /** @type {Array<unknown>} */ (coordinates[0]);\n      }\n      stride = coordinates.length;\n      layout = getLayoutForStride(stride);\n    }\n    this.layout = layout;\n    this.stride = stride;\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   */\n  applyTransform(transformFn) {\n    if (this.flatCoordinates) {\n      transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);\n      this.changed();\n    }\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in counter-clockwise radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      rotate(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        stride,\n        angle,\n        anchor,\n        flatCoordinates,\n      );\n      this.changed();\n    }\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  scale(sx, sy, anchor) {\n    if (sy === undefined) {\n      sy = sx;\n    }\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      scale(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        stride,\n        sx,\n        sy,\n        anchor,\n        flatCoordinates,\n      );\n      this.changed();\n    }\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      translate(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        stride,\n        deltaX,\n        deltaY,\n        flatCoordinates,\n      );\n      this.changed();\n    }\n  }\n}\n\n/**\n * @param {number} stride Stride.\n * @return {import(\"./Geometry.js\").GeometryLayout} layout Layout.\n */\nexport function getLayoutForStride(stride) {\n  let layout;\n  if (stride == 2) {\n    layout = 'XY';\n  } else if (stride == 3) {\n    layout = 'XYZ';\n  } else if (stride == 4) {\n    layout = 'XYZM';\n  }\n  return /** @type {import(\"./Geometry.js\").GeometryLayout} */ (layout);\n}\n\n/**\n * @param {import(\"./Geometry.js\").GeometryLayout} layout Layout.\n * @return {number} Stride.\n */\nexport function getStrideForLayout(layout) {\n  let stride;\n  if (layout == 'XY') {\n    stride = 2;\n  } else if (layout == 'XYZ' || layout == 'XYM') {\n    stride = 3;\n  } else if (layout == 'XYZM') {\n    stride = 4;\n  }\n  return /** @type {number} */ (stride);\n}\n\n/**\n * @param {SimpleGeometry} simpleGeometry Simple geometry.\n * @param {import(\"../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed flat coordinates.\n */\nexport function transformGeom2D(simpleGeometry, transform, dest) {\n  const flatCoordinates = simpleGeometry.getFlatCoordinates();\n  if (!flatCoordinates) {\n    return null;\n  }\n  const stride = simpleGeometry.getStride();\n  return transform2D(\n    flatCoordinates,\n    0,\n    flatCoordinates.length,\n    stride,\n    transform,\n    dest,\n  );\n}\n\nexport default SimpleGeometry;\n","/**\n * @module ol/geom/flat/closest\n */\nimport {lerp, squaredDistance as squaredDx} from '../../math.js';\n\n/**\n * Returns the point on the 2D line segment flatCoordinates[offset1] to\n * flatCoordinates[offset2] that is closest to the point (x, y).  Extra\n * dimensions are linearly interpolated.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset1 Offset 1.\n * @param {number} offset2 Offset 2.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n */\nfunction assignClosest(\n  flatCoordinates,\n  offset1,\n  offset2,\n  stride,\n  x,\n  y,\n  closestPoint,\n) {\n  const x1 = flatCoordinates[offset1];\n  const y1 = flatCoordinates[offset1 + 1];\n  const dx = flatCoordinates[offset2] - x1;\n  const dy = flatCoordinates[offset2 + 1] - y1;\n  let offset;\n  if (dx === 0 && dy === 0) {\n    offset = offset1;\n  } else {\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      offset = offset2;\n    } else if (t > 0) {\n      for (let i = 0; i < stride; ++i) {\n        closestPoint[i] = lerp(\n          flatCoordinates[offset1 + i],\n          flatCoordinates[offset2 + i],\n          t,\n        );\n      }\n      closestPoint.length = stride;\n      return;\n    } else {\n      offset = offset1;\n    }\n  }\n  for (let i = 0; i < stride; ++i) {\n    closestPoint[i] = flatCoordinates[offset + i];\n  }\n  closestPoint.length = stride;\n}\n\n/**\n * Return the squared of the largest distance between any pair of consecutive\n * coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function maxSquaredDelta(flatCoordinates, offset, end, stride, max) {\n  let x1 = flatCoordinates[offset];\n  let y1 = flatCoordinates[offset + 1];\n  for (offset += stride; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    const squaredDelta = squaredDx(x1, y1, x2, y2);\n    if (squaredDelta > max) {\n      max = squaredDelta;\n    }\n    x1 = x2;\n    y1 = y2;\n  }\n  return max;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function arrayMaxSquaredDelta(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  max,\n) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    max = maxSquaredDelta(flatCoordinates, offset, end, stride, max);\n    offset = end;\n  }\n  return max;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function multiArrayMaxSquaredDelta(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  max,\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    max = arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max);\n    offset = ends[ends.length - 1];\n  }\n  return max;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestPoint(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  maxDelta,\n  isRing,\n  x,\n  y,\n  closestPoint,\n  minSquaredDistance,\n  tmpPoint,\n) {\n  if (offset == end) {\n    return minSquaredDistance;\n  }\n  let i, squaredDistance;\n  if (maxDelta === 0) {\n    // All points are identical, so just test the first point.\n    squaredDistance = squaredDx(\n      x,\n      y,\n      flatCoordinates[offset],\n      flatCoordinates[offset + 1],\n    );\n    if (squaredDistance < minSquaredDistance) {\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[offset + i];\n      }\n      closestPoint.length = stride;\n      return squaredDistance;\n    }\n    return minSquaredDistance;\n  }\n  tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];\n  let index = offset + stride;\n  while (index < end) {\n    assignClosest(\n      flatCoordinates,\n      index - stride,\n      index,\n      stride,\n      x,\n      y,\n      tmpPoint,\n    );\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\n    if (squaredDistance < minSquaredDistance) {\n      minSquaredDistance = squaredDistance;\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = tmpPoint[i];\n      }\n      closestPoint.length = stride;\n      index += stride;\n    } else {\n      // Skip ahead multiple points, because we know that all the skipped\n      // points cannot be any closer than the closest point we have found so\n      // far.  We know this because we know how close the current point is, how\n      // close the closest point we have found so far is, and the maximum\n      // distance between consecutive points.  For example, if we're currently\n      // at distance 10, the best we've found so far is 3, and that the maximum\n      // distance between consecutive points is 2, then we'll need to skip at\n      // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of\n      // finding a closer point.  We use Math.max(..., 1) to ensure that we\n      // always advance at least one point, to avoid an infinite loop.\n      index +=\n        stride *\n        Math.max(\n          ((Math.sqrt(squaredDistance) - Math.sqrt(minSquaredDistance)) /\n            maxDelta) |\n            0,\n          1,\n        );\n    }\n  }\n  if (isRing) {\n    // Check the closing segment.\n    assignClosest(\n      flatCoordinates,\n      end - stride,\n      offset,\n      stride,\n      x,\n      y,\n      tmpPoint,\n    );\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\n    if (squaredDistance < minSquaredDistance) {\n      minSquaredDistance = squaredDistance;\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = tmpPoint[i];\n      }\n      closestPoint.length = stride;\n    }\n  }\n  return minSquaredDistance;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestArrayPoint(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  maxDelta,\n  isRing,\n  x,\n  y,\n  closestPoint,\n  minSquaredDistance,\n  tmpPoint,\n) {\n  tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    minSquaredDistance = assignClosestPoint(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      maxDelta,\n      isRing,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance,\n      tmpPoint,\n    );\n    offset = end;\n  }\n  return minSquaredDistance;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestMultiArrayPoint(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  maxDelta,\n  isRing,\n  x,\n  y,\n  closestPoint,\n  minSquaredDistance,\n  tmpPoint,\n) {\n  tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    minSquaredDistance = assignClosestArrayPoint(\n      flatCoordinates,\n      offset,\n      ends,\n      stride,\n      maxDelta,\n      isRing,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance,\n      tmpPoint,\n    );\n    offset = ends[ends.length - 1];\n  }\n  return minSquaredDistance;\n}\n","import {lerp} from '../../math.js';\n\n/**\n * Creates chunks of equal length from a linestring\n * @param {number} chunkLength Length of each chunk.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Start offset of the `flatCoordinates`.\n * @param {number} end End offset of the `flatCoordinates`.\n * @param {number} stride Stride.\n * @return {Array<Array<number>>} Chunks of linestrings with stride 2.\n */\nexport function lineChunk(chunkLength, flatCoordinates, offset, end, stride) {\n  const chunks = [];\n  let cursor = offset;\n  let chunkM = 0;\n  let currentChunk = flatCoordinates.slice(offset, 2);\n  while (chunkM < chunkLength && cursor + stride < end) {\n    const [x1, y1] = currentChunk.slice(-2);\n    const x2 = flatCoordinates[cursor + stride];\n    const y2 = flatCoordinates[cursor + stride + 1];\n    const segmentLength = Math.sqrt(\n      (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1),\n    );\n    chunkM += segmentLength;\n    if (chunkM >= chunkLength) {\n      const m = (chunkLength - chunkM + segmentLength) / segmentLength;\n      const x = lerp(x1, x2, m);\n      const y = lerp(y1, y2, m);\n      currentChunk.push(x, y);\n      chunks.push(currentChunk);\n      currentChunk = [x, y];\n      if (chunkM == chunkLength) {\n        cursor += stride;\n      }\n      chunkM = 0;\n    } else if (chunkM < chunkLength) {\n      currentChunk.push(\n        flatCoordinates[cursor + stride],\n        flatCoordinates[cursor + stride + 1],\n      );\n      cursor += stride;\n    } else {\n      const missing = segmentLength - chunkM;\n      const x = lerp(x1, x2, missing / segmentLength);\n      const y = lerp(y1, y2, missing / segmentLength);\n      currentChunk.push(x, y);\n      chunks.push(currentChunk);\n      currentChunk = [x, y];\n      chunkM = 0;\n      cursor += stride;\n    }\n  }\n  if (chunkM > 0) {\n    chunks.push(currentChunk);\n  }\n  return chunks;\n}\n","/**\n * @module ol/geom/flat/reverse\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n */\nexport function coordinates(flatCoordinates, offset, end, stride) {\n  while (offset < end - stride) {\n    for (let i = 0; i < stride; ++i) {\n      const tmp = flatCoordinates[offset + i];\n      flatCoordinates[offset + i] = flatCoordinates[end - stride + i];\n      flatCoordinates[end - stride + i] = tmp;\n    }\n    offset += stride;\n    end -= stride;\n  }\n}\n","/**\n * @module ol/geom/flat/orient\n */\nimport {coordinates as reverseCoordinates} from './reverse.js';\n\n/**\n * Is the linear ring oriented clockwise in a coordinate system with a bottom-left\n * coordinate origin? For a coordinate system with a top-left coordinate origin,\n * the ring's orientation is clockwise when this function returns false.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {boolean|undefined} Is clockwise.\n */\nexport function linearRingIsClockwise(flatCoordinates, offset, end, stride) {\n  // https://stackoverflow.com/q/1165647/clockwise-method#1165943\n  // https://github.com/OSGeo/gdal/blob/master/gdal/ogr/ogrlinearring.cpp\n  let edge = 0;\n  let x1 = flatCoordinates[end - stride];\n  let y1 = flatCoordinates[end - stride + 1];\n  for (; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    edge += (x2 - x1) * (y2 + y1);\n    x1 = x2;\n    y1 = y2;\n  }\n  return edge === 0 ? undefined : edge > 0;\n}\n\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [right] Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\nexport function linearRingsAreOriented(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  right,\n) {\n  right = right !== undefined ? right : false;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const isClockwise = linearRingIsClockwise(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n    );\n    if (i === 0) {\n      if ((right && isClockwise) || (!right && !isClockwise)) {\n        return false;\n      }\n    } else {\n      if ((right && !isClockwise) || (!right && isClockwise)) {\n        return false;\n      }\n    }\n    offset = end;\n  }\n  return true;\n}\n\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [right] Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\nexport function linearRingssAreOriented(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  right,\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    if (!linearRingsAreOriented(flatCoordinates, offset, ends, stride, right)) {\n      return false;\n    }\n    if (ends.length) {\n      offset = ends[ends.length - 1];\n    }\n  }\n  return true;\n}\n\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {boolean} [right] Follow the right-hand rule for orientation.\n * @return {number} End.\n */\nexport function orientLinearRings(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  right,\n) {\n  right = right !== undefined ? right : false;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const isClockwise = linearRingIsClockwise(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n    );\n    const reverse =\n      i === 0\n        ? (right && isClockwise) || (!right && !isClockwise)\n        : (right && !isClockwise) || (!right && isClockwise);\n    if (reverse) {\n      reverseCoordinates(flatCoordinates, offset, end, stride);\n    }\n    offset = end;\n  }\n  return offset;\n}\n\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [right] Follow the right-hand rule for orientation.\n * @return {number} End.\n */\nexport function orientLinearRingsArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  right,\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    offset = orientLinearRings(\n      flatCoordinates,\n      offset,\n      endss[i],\n      stride,\n      right,\n    );\n  }\n  return offset;\n}\n\n/**\n * Return a two-dimensional endss\n * @param {Array<number>} flatCoordinates Flat coordinates\n * @param {Array<number>} ends Linear ring end indexes\n * @return {Array<Array<number>>} Two dimensional endss array that can\n * be used to construct a MultiPolygon\n */\nexport function inflateEnds(flatCoordinates, ends) {\n  const endss = [];\n  let offset = 0;\n  let prevEndIndex = 0;\n  let startOrientation;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    // classifies an array of rings into polygons with outer rings and holes\n    const orientation = linearRingIsClockwise(flatCoordinates, offset, end, 2);\n    if (startOrientation === undefined) {\n      startOrientation = orientation;\n    }\n    if (orientation === startOrientation) {\n      endss.push(ends.slice(prevEndIndex, i + 1));\n    } else {\n      if (endss.length === 0) {\n        continue;\n      }\n      endss[endss.length - 1].push(ends[prevEndIndex]);\n    }\n    prevEndIndex = i + 1;\n    offset = end;\n  }\n  return endss;\n}\n","/**\n * @module ol/functions\n */\n\nimport {equals as arrayEquals} from './array.js';\n\n/**\n * Always returns true.\n * @return {boolean} true.\n */\nexport function TRUE() {\n  return true;\n}\n\n/**\n * Always returns false.\n * @return {boolean} false.\n */\nexport function FALSE() {\n  return false;\n}\n\n/**\n * A reusable function, used e.g. as a default for callbacks.\n *\n * @return {void} Nothing.\n */\nexport function VOID() {}\n\n/**\n * Wrap a function in another function that remembers the last return.  If the\n * returned function is called twice in a row with the same arguments and the same\n * this object, it will return the value from the first call in the second call.\n *\n * @param {function(...any): ReturnType} fn The function to memoize.\n * @return {function(...any): ReturnType} The memoized function.\n * @template ReturnType\n */\nexport function memoizeOne(fn) {\n  let called = false;\n\n  /** @type {ReturnType} */\n  let lastResult;\n\n  /** @type {Array<any>} */\n  let lastArgs;\n\n  let lastThis;\n\n  return function () {\n    const nextArgs = Array.prototype.slice.call(arguments);\n    if (!called || this !== lastThis || !arrayEquals(nextArgs, lastArgs)) {\n      called = true;\n      lastThis = this;\n      lastArgs = nextArgs;\n      lastResult = fn.apply(this, arguments);\n    }\n    return lastResult;\n  };\n}\n\n/**\n * @template T\n * @param {function(): (T | Promise<T>)} getter A function that returns a value or a promise for a value.\n * @return {Promise<T>} A promise for the value.\n */\nexport function toPromise(getter) {\n  function promiseGetter() {\n    let value;\n    try {\n      value = getter();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    if (value instanceof Promise) {\n      return value;\n    }\n    return Promise.resolve(value);\n  }\n  return promiseGetter();\n}\n","/**\n * @module ol/geom/flat/interpolate\n */\nimport {binarySearch} from '../../array.js';\nimport {lerp} from '../../math.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} fraction Fraction.\n * @param {Array<number>} [dest] Destination.\n * @param {number} [dimension] Destination dimension (default is `2`)\n * @return {Array<number>} Destination.\n */\nexport function interpolatePoint(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  fraction,\n  dest,\n  dimension,\n) {\n  let o, t;\n  const n = (end - offset) / stride;\n  if (n === 1) {\n    o = offset;\n  } else if (n === 2) {\n    o = offset;\n    t = fraction;\n  } else if (n !== 0) {\n    let x1 = flatCoordinates[offset];\n    let y1 = flatCoordinates[offset + 1];\n    let length = 0;\n    const cumulativeLengths = [0];\n    for (let i = offset + stride; i < end; i += stride) {\n      const x2 = flatCoordinates[i];\n      const y2 = flatCoordinates[i + 1];\n      length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n      cumulativeLengths.push(length);\n      x1 = x2;\n      y1 = y2;\n    }\n    const target = fraction * length;\n    const index = binarySearch(cumulativeLengths, target);\n    if (index < 0) {\n      t =\n        (target - cumulativeLengths[-index - 2]) /\n        (cumulativeLengths[-index - 1] - cumulativeLengths[-index - 2]);\n      o = offset + (-index - 2) * stride;\n    } else {\n      o = offset + index * stride;\n    }\n  }\n  dimension = dimension > 1 ? dimension : 2;\n  dest = dest ? dest : new Array(dimension);\n  for (let i = 0; i < dimension; ++i) {\n    dest[i] =\n      o === undefined\n        ? NaN\n        : t === undefined\n          ? flatCoordinates[o + i]\n          : lerp(flatCoordinates[o + i], flatCoordinates[o + stride + i], t);\n  }\n  return dest;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} m M.\n * @param {boolean} extrapolate Extrapolate.\n * @return {import(\"../../coordinate.js\").Coordinate|null} Coordinate.\n */\nexport function lineStringCoordinateAtM(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  m,\n  extrapolate,\n) {\n  if (end == offset) {\n    return null;\n  }\n  let coordinate;\n  if (m < flatCoordinates[offset + stride - 1]) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(offset, offset + stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    }\n    return null;\n  }\n  if (flatCoordinates[end - 1] < m) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(end - stride, end);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    }\n    return null;\n  }\n  // FIXME use O(1) search\n  if (m == flatCoordinates[offset + stride - 1]) {\n    return flatCoordinates.slice(offset, offset + stride);\n  }\n  let lo = offset / stride;\n  let hi = end / stride;\n  while (lo < hi) {\n    const mid = (lo + hi) >> 1;\n    if (m < flatCoordinates[(mid + 1) * stride - 1]) {\n      hi = mid;\n    } else {\n      lo = mid + 1;\n    }\n  }\n  const m0 = flatCoordinates[lo * stride - 1];\n  if (m == m0) {\n    return flatCoordinates.slice((lo - 1) * stride, (lo - 1) * stride + stride);\n  }\n  const m1 = flatCoordinates[(lo + 1) * stride - 1];\n  const t = (m - m0) / (m1 - m0);\n  coordinate = [];\n  for (let i = 0; i < stride - 1; ++i) {\n    coordinate.push(\n      lerp(\n        flatCoordinates[(lo - 1) * stride + i],\n        flatCoordinates[lo * stride + i],\n        t,\n      ),\n    );\n  }\n  coordinate.push(m);\n  return coordinate;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} m M.\n * @param {boolean} extrapolate Extrapolate.\n * @param {boolean} interpolate Interpolate.\n * @return {import(\"../../coordinate.js\").Coordinate|null} Coordinate.\n */\nexport function lineStringsCoordinateAtM(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  m,\n  extrapolate,\n  interpolate,\n) {\n  if (interpolate) {\n    return lineStringCoordinateAtM(\n      flatCoordinates,\n      offset,\n      ends[ends.length - 1],\n      stride,\n      m,\n      extrapolate,\n    );\n  }\n  let coordinate;\n  if (m < flatCoordinates[stride - 1]) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(0, stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    }\n    return null;\n  }\n  if (flatCoordinates[flatCoordinates.length - 1] < m) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(flatCoordinates.length - stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    }\n    return null;\n  }\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    if (offset == end) {\n      continue;\n    }\n    if (m < flatCoordinates[offset + stride - 1]) {\n      return null;\n    }\n    if (m <= flatCoordinates[end - 1]) {\n      return lineStringCoordinateAtM(\n        flatCoordinates,\n        offset,\n        end,\n        stride,\n        m,\n        false,\n      );\n    }\n    offset = end;\n  }\n  return null;\n}\n","/**\n * @module ol/geom/flat/intersectsextent\n */\nimport {\n  containsExtent,\n  createEmpty,\n  extendFlatCoordinates,\n  intersects,\n  intersectsSegment,\n} from '../../extent.js';\nimport {forEach as forEachSegment} from './segments.js';\nimport {linearRingContainsExtent, linearRingContainsXY} from './contains.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLineString(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  extent,\n) {\n  const coordinatesExtent = extendFlatCoordinates(\n    createEmpty(),\n    flatCoordinates,\n    offset,\n    end,\n    stride,\n  );\n  if (!intersects(extent, coordinatesExtent)) {\n    return false;\n  }\n  if (containsExtent(extent, coordinatesExtent)) {\n    return true;\n  }\n  if (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) {\n    return true;\n  }\n  if (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3]) {\n    return true;\n  }\n  return forEachSegment(\n    flatCoordinates,\n    offset,\n    end,\n    stride,\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} point1 Start point.\n     * @param {import(\"../../coordinate.js\").Coordinate} point2 End point.\n     * @return {boolean} `true` if the segment and the extent intersect,\n     *     `false` otherwise.\n     */\n    function (point1, point2) {\n      return intersectsSegment(extent, point1, point2);\n    },\n  );\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLineStringArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  extent,\n) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    if (\n      intersectsLineString(flatCoordinates, offset, ends[i], stride, extent)\n    ) {\n      return true;\n    }\n    offset = ends[i];\n  }\n  return false;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRing(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  extent,\n) {\n  if (intersectsLineString(flatCoordinates, offset, end, stride, extent)) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[0],\n      extent[1],\n    )\n  ) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[0],\n      extent[3],\n    )\n  ) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[2],\n      extent[1],\n    )\n  ) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[2],\n      extent[3],\n    )\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRingArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  extent,\n) {\n  if (!intersectsLinearRing(flatCoordinates, offset, ends[0], stride, extent)) {\n    return false;\n  }\n  if (ends.length === 1) {\n    return true;\n  }\n  for (let i = 1, ii = ends.length; i < ii; ++i) {\n    if (\n      linearRingContainsExtent(\n        flatCoordinates,\n        ends[i - 1],\n        ends[i],\n        stride,\n        extent,\n      )\n    ) {\n      if (\n        !intersectsLineString(\n          flatCoordinates,\n          ends[i - 1],\n          ends[i],\n          stride,\n          extent,\n        )\n      ) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRingMultiArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  extent,\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    if (\n      intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent)\n    ) {\n      return true;\n    }\n    offset = ends[ends.length - 1];\n  }\n  return false;\n}\n","/**\n * @module ol/geom/flat/simplify\n */\n// Based on simplify-js https://github.com/mourner/simplify-js\n// Copyright (c) 2012, Vladimir Agafonkin\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n//    1. Redistributions of source code must retain the above copyright notice,\n//       this list of conditions and the following disclaimer.\n//\n//    2. Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\n\nimport {squaredDistance, squaredSegmentDistance} from '../../math.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {boolean} highQuality Highest quality.\n * @param {Array<number>} [simplifiedFlatCoordinates] Simplified flat\n *     coordinates.\n * @return {Array<number>} Simplified line string.\n */\nexport function simplifyLineString(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  squaredTolerance,\n  highQuality,\n  simplifiedFlatCoordinates,\n) {\n  simplifiedFlatCoordinates =\n    simplifiedFlatCoordinates !== undefined ? simplifiedFlatCoordinates : [];\n  if (!highQuality) {\n    end = radialDistance(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      0,\n    );\n    flatCoordinates = simplifiedFlatCoordinates;\n    offset = 0;\n    stride = 2;\n  }\n  simplifiedFlatCoordinates.length = douglasPeucker(\n    flatCoordinates,\n    offset,\n    end,\n    stride,\n    squaredTolerance,\n    simplifiedFlatCoordinates,\n    0,\n  );\n  return simplifiedFlatCoordinates;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\nexport function douglasPeucker(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  squaredTolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n) {\n  const n = (end - offset) / stride;\n  if (n < 3) {\n    for (; offset < end; offset += stride) {\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\n      simplifiedFlatCoordinates[simplifiedOffset++] =\n        flatCoordinates[offset + 1];\n    }\n    return simplifiedOffset;\n  }\n  /** @type {Array<number>} */\n  const markers = new Array(n);\n  markers[0] = 1;\n  markers[n - 1] = 1;\n  /** @type {Array<number>} */\n  const stack = [offset, end - stride];\n  let index = 0;\n  while (stack.length > 0) {\n    const last = stack.pop();\n    const first = stack.pop();\n    let maxSquaredDistance = 0;\n    const x1 = flatCoordinates[first];\n    const y1 = flatCoordinates[first + 1];\n    const x2 = flatCoordinates[last];\n    const y2 = flatCoordinates[last + 1];\n    for (let i = first + stride; i < last; i += stride) {\n      const x = flatCoordinates[i];\n      const y = flatCoordinates[i + 1];\n      const squaredDistance = squaredSegmentDistance(x, y, x1, y1, x2, y2);\n      if (squaredDistance > maxSquaredDistance) {\n        index = i;\n        maxSquaredDistance = squaredDistance;\n      }\n    }\n    if (maxSquaredDistance > squaredTolerance) {\n      markers[(index - offset) / stride] = 1;\n      if (first + stride < index) {\n        stack.push(first, index);\n      }\n      if (index + stride < last) {\n        stack.push(index, last);\n      }\n    }\n  }\n  for (let i = 0; i < n; ++i) {\n    if (markers[i]) {\n      simplifiedFlatCoordinates[simplifiedOffset++] =\n        flatCoordinates[offset + i * stride];\n      simplifiedFlatCoordinates[simplifiedOffset++] =\n        flatCoordinates[offset + i * stride + 1];\n    }\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<number>} simplifiedEnds Simplified ends.\n * @return {number} Simplified offset.\n */\nexport function douglasPeuckerArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  squaredTolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n  simplifiedEnds,\n) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    simplifiedOffset = douglasPeucker(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      simplifiedOffset,\n    );\n    simplifiedEnds.push(simplifiedOffset);\n    offset = end;\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<Array<number>>} simplifiedEndss Simplified endss.\n * @return {number} Simplified offset.\n */\nexport function douglasPeuckerMultiArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  squaredTolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n  simplifiedEndss,\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    /** @type {Array<number>} */\n    const simplifiedEnds = [];\n    simplifiedOffset = douglasPeuckerArray(\n      flatCoordinates,\n      offset,\n      ends,\n      stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      simplifiedOffset,\n      simplifiedEnds,\n    );\n    simplifiedEndss.push(simplifiedEnds);\n    offset = ends[ends.length - 1];\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\nexport function radialDistance(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  squaredTolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n) {\n  if (end <= offset + stride) {\n    // zero or one point, no simplification possible, so copy and return\n    for (; offset < end; offset += stride) {\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\n      simplifiedFlatCoordinates[simplifiedOffset++] =\n        flatCoordinates[offset + 1];\n    }\n    return simplifiedOffset;\n  }\n  let x1 = flatCoordinates[offset];\n  let y1 = flatCoordinates[offset + 1];\n  // copy first point\n  simplifiedFlatCoordinates[simplifiedOffset++] = x1;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y1;\n  let x2 = x1;\n  let y2 = y1;\n  for (offset += stride; offset < end; offset += stride) {\n    x2 = flatCoordinates[offset];\n    y2 = flatCoordinates[offset + 1];\n    if (squaredDistance(x1, y1, x2, y2) > squaredTolerance) {\n      // copy point at offset\n      simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n      simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n      x1 = x2;\n      y1 = y2;\n    }\n  }\n  if (x2 != x1 || y2 != y1) {\n    // copy last point\n    simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {number} value Value.\n * @param {number} tolerance Tolerance.\n * @return {number} Rounded value.\n */\nexport function snap(value, tolerance) {\n  return tolerance * Math.round(value / tolerance);\n}\n\n/**\n * Simplifies a line string using an algorithm designed by Tim Schaub.\n * Coordinates are snapped to the nearest value in a virtual grid and\n * consecutive duplicate coordinates are discarded.  This effectively preserves\n * topology as the simplification of any subsection of a line string is\n * independent of the rest of the line string.  This means that, for examples,\n * the common edge between two polygons will be simplified to the same line\n * string independently in both polygons.  This implementation uses a single\n * pass over the coordinates and eliminates intermediate collinear points.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\nexport function quantize(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  tolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n) {\n  // do nothing if the line is empty\n  if (offset == end) {\n    return simplifiedOffset;\n  }\n  // snap the first coordinate (P1)\n  let x1 = snap(flatCoordinates[offset], tolerance);\n  let y1 = snap(flatCoordinates[offset + 1], tolerance);\n  offset += stride;\n  // add the first coordinate to the output\n  simplifiedFlatCoordinates[simplifiedOffset++] = x1;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y1;\n  // find the next coordinate that does not snap to the same value as the first\n  // coordinate (P2)\n  let x2, y2;\n  do {\n    x2 = snap(flatCoordinates[offset], tolerance);\n    y2 = snap(flatCoordinates[offset + 1], tolerance);\n    offset += stride;\n    if (offset == end) {\n      // all coordinates snap to the same value, the line collapses to a point\n      // push the last snapped value anyway to ensure that the output contains\n      // at least two points\n      // FIXME should we really return at least two points anyway?\n      simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n      simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n      return simplifiedOffset;\n    }\n  } while (x2 == x1 && y2 == y1);\n  while (offset < end) {\n    // snap the next coordinate (P3)\n    const x3 = snap(flatCoordinates[offset], tolerance);\n    const y3 = snap(flatCoordinates[offset + 1], tolerance);\n    offset += stride;\n    // skip P3 if it is equal to P2\n    if (x3 == x2 && y3 == y2) {\n      continue;\n    }\n    // calculate the delta between P1 and P2\n    const dx1 = x2 - x1;\n    const dy1 = y2 - y1;\n    // calculate the delta between P3 and P1\n    const dx2 = x3 - x1;\n    const dy2 = y3 - y1;\n    // if P1, P2, and P3 are colinear and P3 is further from P1 than P2 is from\n    // P1 in the same direction then P2 is on the straight line between P1 and\n    // P3\n    if (\n      dx1 * dy2 == dy1 * dx2 &&\n      ((dx1 < 0 && dx2 < dx1) || dx1 == dx2 || (dx1 > 0 && dx2 > dx1)) &&\n      ((dy1 < 0 && dy2 < dy1) || dy1 == dy2 || (dy1 > 0 && dy2 > dy1))\n    ) {\n      // discard P2 and set P2 = P3\n      x2 = x3;\n      y2 = y3;\n      continue;\n    }\n    // either P1, P2, and P3 are not colinear, or they are colinear but P3 is\n    // between P3 and P1 or on the opposite half of the line to P2.  add P2,\n    // and continue with P1 = P2 and P2 = P3\n    simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n    x1 = x2;\n    y1 = y2;\n    x2 = x3;\n    y2 = y3;\n  }\n  // add the last point (P2)\n  simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<number>} simplifiedEnds Simplified ends.\n * @return {number} Simplified offset.\n */\nexport function quantizeArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  tolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n  simplifiedEnds,\n) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    simplifiedOffset = quantize(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      tolerance,\n      simplifiedFlatCoordinates,\n      simplifiedOffset,\n    );\n    simplifiedEnds.push(simplifiedOffset);\n    offset = end;\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<Array<number>>} simplifiedEndss Simplified endss.\n * @return {number} Simplified offset.\n */\nexport function quantizeMultiArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  tolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n  simplifiedEndss,\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    /** @type {Array<number>} */\n    const simplifiedEnds = [];\n    simplifiedOffset = quantizeArray(\n      flatCoordinates,\n      offset,\n      ends,\n      stride,\n      tolerance,\n      simplifiedFlatCoordinates,\n      simplifiedOffset,\n      simplifiedEnds,\n    );\n    simplifiedEndss.push(simplifiedEnds);\n    offset = ends[ends.length - 1];\n  }\n  return simplifiedOffset;\n}\n","/**\n * @module ol/geom/flat/transform\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function transform2D(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  transform,\n  dest,\n) {\n  dest = dest ? dest : [];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const x = flatCoordinates[j];\n    const y = flatCoordinates[j + 1];\n    dest[i++] = transform[0] * x + transform[2] * y + transform[4];\n    dest[i++] = transform[1] * x + transform[3] * y + transform[5];\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} angle Angle.\n * @param {Array<number>} anchor Rotation anchor point.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function rotate(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  angle,\n  anchor,\n  dest,\n) {\n  dest = dest ? dest : [];\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  const anchorX = anchor[0];\n  const anchorY = anchor[1];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const deltaX = flatCoordinates[j] - anchorX;\n    const deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + deltaX * cos - deltaY * sin;\n    dest[i++] = anchorY + deltaX * sin + deltaY * cos;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * Scale the coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} sx Scale factor in the x-direction.\n * @param {number} sy Scale factor in the y-direction.\n * @param {Array<number>} anchor Scale anchor point.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function scale(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  sx,\n  sy,\n  anchor,\n  dest,\n) {\n  dest = dest ? dest : [];\n  const anchorX = anchor[0];\n  const anchorY = anchor[1];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const deltaX = flatCoordinates[j] - anchorX;\n    const deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + sx * deltaX;\n    dest[i++] = anchorY + sy * deltaY;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} deltaX Delta X.\n * @param {number} deltaY Delta Y.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function translate(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  deltaX,\n  deltaY,\n  dest,\n) {\n  dest = dest ? dest : [];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    dest[i++] = flatCoordinates[j] + deltaX;\n    dest[i++] = flatCoordinates[j + 1] + deltaY;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n","/**\n * @module ol/geom/flat/straightchunk\n */\n\n/**\n * @param {number} maxAngle Maximum acceptable angle delta between segments.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {Array<number>} Start and end of the first suitable chunk of the\n * given `flatCoordinates`.\n */\nexport function matchingChunk(maxAngle, flatCoordinates, offset, end, stride) {\n  let chunkStart = offset;\n  let chunkEnd = offset;\n  let chunkM = 0;\n  let m = 0;\n  let start = offset;\n  let acos, i, m12, m23, x1, y1, x12, y12, x23, y23;\n  for (i = offset; i < end; i += stride) {\n    const x2 = flatCoordinates[i];\n    const y2 = flatCoordinates[i + 1];\n    if (x1 !== undefined) {\n      x23 = x2 - x1;\n      y23 = y2 - y1;\n      m23 = Math.sqrt(x23 * x23 + y23 * y23);\n      if (x12 !== undefined) {\n        m += m12;\n        acos = Math.acos((x12 * x23 + y12 * y23) / (m12 * m23));\n        if (acos > maxAngle) {\n          if (m > chunkM) {\n            chunkM = m;\n            chunkStart = start;\n            chunkEnd = i;\n          }\n          m = 0;\n          start = i - stride;\n        }\n      }\n      m12 = m23;\n      x12 = x23;\n      y12 = y23;\n    }\n    x1 = x2;\n    y1 = y2;\n  }\n  m += m23;\n  return m > chunkM ? [start, i] : [chunkStart, chunkEnd];\n}\n","/**\n * @module ol/geom/flat/segments\n */\n\n/**\n * This function calls `callback` for each segment of the flat coordinates\n * array. If the callback returns a truthy value the function returns that\n * value immediately. Otherwise the function returns `false`.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {function(import(\"../../coordinate.js\").Coordinate, import(\"../../coordinate.js\").Coordinate): T} callback Function\n *     called for each segment.\n * @return {T|boolean} Value.\n * @template T\n */\nexport function forEach(flatCoordinates, offset, end, stride, callback) {\n  let ret;\n  offset += stride;\n  for (; offset < end; offset += stride) {\n    ret = callback(\n      flatCoordinates.slice(offset - stride, offset),\n      flatCoordinates.slice(offset, offset + stride),\n    );\n    if (ret) {\n      return ret;\n    }\n  }\n  return false;\n}\n","/**\n * @module ol/geom/flat/deflate\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {number} stride Stride.\n * @return {number} offset Offset.\n */\nexport function deflateCoordinate(flatCoordinates, offset, coordinate, stride) {\n  for (let i = 0, ii = coordinate.length; i < ii; ++i) {\n    flatCoordinates[offset++] = coordinate[i];\n  }\n  return offset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<import(\"../../coordinate.js\").Coordinate>} coordinates Coordinates.\n * @param {number} stride Stride.\n * @return {number} offset Offset.\n */\nexport function deflateCoordinates(\n  flatCoordinates,\n  offset,\n  coordinates,\n  stride,\n) {\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    const coordinate = coordinates[i];\n    for (let j = 0; j < stride; ++j) {\n      flatCoordinates[offset++] = coordinate[j];\n    }\n  }\n  return offset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<import(\"../../coordinate.js\").Coordinate>>} coordinatess Coordinatess.\n * @param {number} stride Stride.\n * @param {Array<number>} [ends] Ends.\n * @return {Array<number>} Ends.\n */\nexport function deflateCoordinatesArray(\n  flatCoordinates,\n  offset,\n  coordinatess,\n  stride,\n  ends,\n) {\n  ends = ends ? ends : [];\n  let i = 0;\n  for (let j = 0, jj = coordinatess.length; j < jj; ++j) {\n    const end = deflateCoordinates(\n      flatCoordinates,\n      offset,\n      coordinatess[j],\n      stride,\n    );\n    ends[i++] = end;\n    offset = end;\n  }\n  ends.length = i;\n  return ends;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} coordinatesss Coordinatesss.\n * @param {number} stride Stride.\n * @param {Array<Array<number>>} [endss] Endss.\n * @return {Array<Array<number>>} Endss.\n */\nexport function deflateMultiCoordinatesArray(\n  flatCoordinates,\n  offset,\n  coordinatesss,\n  stride,\n  endss,\n) {\n  endss = endss ? endss : [];\n  let i = 0;\n  for (let j = 0, jj = coordinatesss.length; j < jj; ++j) {\n    const ends = deflateCoordinatesArray(\n      flatCoordinates,\n      offset,\n      coordinatesss[j],\n      stride,\n      endss[i],\n    );\n    if (ends.length === 0) {\n      ends[0] = offset;\n    }\n    endss[i++] = ends;\n    offset = ends[ends.length - 1];\n  }\n  endss.length = i;\n  return endss;\n}\n","/**\n * @module ol/geom/MultiLineString\n */\nimport LineString from './LineString.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {arrayMaxSquaredDelta, assignClosestArrayPoint} from './flat/closest.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport {deflateCoordinatesArray} from './flat/deflate.js';\nimport {douglasPeuckerArray} from './flat/simplify.js';\nimport {extend} from '../array.js';\nimport {inflateCoordinatesArray} from './flat/inflate.js';\nimport {\n  interpolatePoint,\n  lineStringsCoordinateAtM,\n} from './flat/interpolate.js';\nimport {intersectsLineStringArray} from './flat/intersectsextent.js';\n\n/**\n * @classdesc\n * Multi-linestring geometry.\n *\n * @api\n */\nclass MultiLineString extends SimpleGeometry {\n  /**\n   * @param {Array<Array<import(\"../coordinate.js\").Coordinate>|LineString>|Array<number>} coordinates\n   *     Coordinates or LineString geometries. (For internal use, flat coordinates in\n   *     combination with `layout` and `ends` are also accepted.)\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @param {Array<number>} [ends] Flat coordinate ends for internal use.\n   */\n  constructor(coordinates, layout, ends) {\n    super();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.ends_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (Array.isArray(coordinates[0])) {\n      this.setCoordinates(\n        /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (\n          coordinates\n        ),\n        layout,\n      );\n    } else if (layout !== undefined && ends) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates),\n      );\n      this.ends_ = ends;\n    } else {\n      const lineStrings = /** @type {Array<LineString>} */ (coordinates);\n      /** @type {Array<number>} */\n      const flatCoordinates = [];\n      const ends = [];\n      for (let i = 0, ii = lineStrings.length; i < ii; ++i) {\n        const lineString = lineStrings[i];\n        extend(flatCoordinates, lineString.getFlatCoordinates());\n        ends.push(flatCoordinates.length);\n      }\n      const layout =\n        lineStrings.length === 0\n          ? this.getLayout()\n          : lineStrings[0].getLayout();\n      this.setFlatCoordinates(layout, flatCoordinates);\n      this.ends_ = ends;\n    }\n  }\n\n  /**\n   * Append the passed linestring to the multilinestring.\n   * @param {LineString} lineString LineString.\n   * @api\n   */\n  appendLineString(lineString) {\n    extend(this.flatCoordinates, lineString.getFlatCoordinates().slice());\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiLineString} Clone.\n   * @api\n   */\n  clone() {\n    const multiLineString = new MultiLineString(\n      this.flatCoordinates.slice(),\n      this.layout,\n      this.ends_.slice(),\n    );\n    multiLineString.applyProperties(this);\n    return multiLineString;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        arrayMaxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.ends_,\n          this.stride,\n          0,\n        ),\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestArrayPoint(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      this.maxDelta_,\n      false,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance,\n    );\n  }\n\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * `interpolate` controls interpolation between consecutive LineStrings\n   * within the MultiLineString. If `interpolate` is `true` the coordinates\n   * will be linearly interpolated between the last coordinate of one LineString\n   * and the first coordinate of the next LineString.  If `interpolate` is\n   * `false` then the function will return `null` for Ms falling between\n   * LineStrings.\n   *\n   * @param {number} m M.\n   * @param {boolean} [extrapolate] Extrapolate. Default is `false`.\n   * @param {boolean} [interpolate] Interpolate. Default is `false`.\n   * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\n   * @api\n   */\n  getCoordinateAtM(m, extrapolate, interpolate) {\n    if (\n      (this.layout != 'XYM' && this.layout != 'XYZM') ||\n      this.flatCoordinates.length === 0\n    ) {\n      return null;\n    }\n    extrapolate = extrapolate !== undefined ? extrapolate : false;\n    interpolate = interpolate !== undefined ? interpolate : false;\n    return lineStringsCoordinateAtM(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      m,\n      extrapolate,\n      interpolate,\n    );\n  }\n\n  /**\n   * Return the coordinates of the multilinestring.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinatesArray(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n    );\n  }\n\n  /**\n   * @return {Array<number>} Ends.\n   */\n  getEnds() {\n    return this.ends_;\n  }\n\n  /**\n   * Return the linestring at the specified index.\n   * @param {number} index Index.\n   * @return {LineString} LineString.\n   * @api\n   */\n  getLineString(index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new LineString(\n      this.flatCoordinates.slice(\n        index === 0 ? 0 : this.ends_[index - 1],\n        this.ends_[index],\n      ),\n      this.layout,\n    );\n  }\n\n  /**\n   * Return the linestrings of this multilinestring.\n   * @return {Array<LineString>} LineStrings.\n   * @api\n   */\n  getLineStrings() {\n    const flatCoordinates = this.flatCoordinates;\n    const ends = this.ends_;\n    const layout = this.layout;\n    /** @type {Array<LineString>} */\n    const lineStrings = [];\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const lineString = new LineString(\n        flatCoordinates.slice(offset, end),\n        layout,\n      );\n      lineStrings.push(lineString);\n      offset = end;\n    }\n    return lineStrings;\n  }\n\n  /**\n   * @return {Array<number>} Flat midpoints.\n   */\n  getFlatMidpoints() {\n    /** @type {Array<number>} */\n    const midpoints = [];\n    const flatCoordinates = this.flatCoordinates;\n    let offset = 0;\n    const ends = this.ends_;\n    const stride = this.stride;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const midpoint = interpolatePoint(\n        flatCoordinates,\n        offset,\n        end,\n        stride,\n        0.5,\n      );\n      extend(midpoints, midpoint);\n      offset = end;\n    }\n    return midpoints;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {MultiLineString} Simplified MultiLineString.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    /** @type {Array<number>} */\n    const simplifiedFlatCoordinates = [];\n    /** @type {Array<number>} */\n    const simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = douglasPeuckerArray(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      0,\n      simplifiedEnds,\n    );\n    return new MultiLineString(simplifiedFlatCoordinates, 'XY', simplifiedEnds);\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'MultiLineString';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLineStringArray(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      extent,\n    );\n  }\n\n  /**\n   * Set the coordinates of the multilinestring.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const ends = deflateCoordinatesArray(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride,\n      this.ends_,\n    );\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n}\n\nexport default MultiLineString;\n"],"names":["MultiPolygon","constructor","coordinates","layout","endss","super","this","endss_","flatInteriorPointsRevision_","flatInteriorPoints_","maxDelta_","maxDeltaRevision_","orientedRevision_","orientedFlatCoordinates_","Array","isArray","polygons","flatCoordinates","thisEndss","i","ii","length","polygon","offset","ends","getEnds","j","jj","getFlatCoordinates","push","getLayout","undefined","setFlatCoordinates","setCoordinates","appendPolygon","slice","changed","clone","len","newEndss","multiPolygon","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","getRevision","Math","sqrt","stride","getOrientedFlatCoordinates","containsXY","getArea","getCoordinates","right","getEndss","getFlatInteriorPoints","flatCenters","getInteriorPoints","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","simplifiedEndss","getPolygon","index","prevEnds","end","getPolygons","getType","intersectsExtent","extent","setLayout","lastEnds","LineString","flatMidpoint_","flatMidpointRevision_","appendCoordinate","coordinate","lineString","forEachSegment","callback","getCoordinateAtM","m","extrapolate","getCoordinateAt","fraction","dest","getLength","getFlatMidpoint","getInteriorPointOfArray","flatCentersOffset","x1","x2","y1","y2","intersections","r","rr","pointX","NaN","maxSegmentLength","Infinity","sort","segmentLength","abs","isNaN","getInteriorPointsOfMultiArray","interiorPoints","LinearRing","drawTextOnPath","text","startM","maxAngle","scale","measureAndCacheTextWidth","font","cache","rotation","segmentM","advance","interpolate","beginX","beginY","startOffset","startLength","endM","endX","endY","reverse","flat","PI","result","singleSegment","previousAngle","atan2","replace","angle","delta","iStart","charLength","chars","substring","tmpTransform","Geometry","extent_","extentRevision_","simplifiedGeometryMaxMinSquaredTolerance","simplifiedGeometryRevision","simplifyTransformedInternal","revision","transform","getSimplifiedGeometry","applyTransform","simplifyTransformed","coord","getClosestPoint","point","intersectsCoordinate","computeExtent","rotate","anchor","sx","sy","simplify","tolerance","transformFn","translate","deltaX","deltaY","source","destination","sourceProj","get","getUnits","inCoordinates","outCoordinates","pixelExtent","projectedExtent","getWorldExtent","getTransform","linearRing","twiceArea","linearRings","area","linearRingss","MultiPoint","appendPoint","multiPoint","squaredDistance","getPoint","n","getPoints","points","Polygon","ends_","flatInteriorPointRevision_","flatInteriorPoint_","appendLinearRing","getFlatInteriorPoint","flatCenter","getInteriorPoint","getLinearRingCount","getLinearRing","getLinearRings","simplifiedEnds","fromExtent","Error","minX","minY","maxX","maxY","fromCircle","circle","sides","getStride","center","getCenter","arrayLength","makeRegular","getRadius","radius","startAngle","cos","sin","GeometryCollection","geometries","geometries_","changeEventsKeys_","listenGeometriesChange_","unlistenGeometriesChange_","forEach","CHANGE","geometryCollection","cloneGeometries","getGeometries","getGeometriesArray","getGeometriesArrayRecursive","geometriesArray","concat","simplifiedGeometries","simplified","geometry","simplifiedGeometry","simplifiedGeometryCollection","isEmpty","setGeometries","setGeometriesArray","disposeInternal","map","Point","lineStringLength","linearRingContainsExtent","outside","linearRingContainsXY","wn","linearRingsContainsXY","linearRingssContainsXY","inflateCoordinates","inflateCoordinatesArray","coordinatess","inflateMultiCoordinatesArray","coordinatesss","SimpleGeometry","getFirstCoordinate","getLastCoordinate","getStrideForLayout","nesting","getLayoutForStride","transformGeom2D","simpleGeometry","assignClosest","offset1","offset2","dx","dy","t","maxSquaredDelta","max","squaredDelta","arrayMaxSquaredDelta","multiArrayMaxSquaredDelta","assignClosestPoint","maxDelta","isRing","tmpPoint","assignClosestArrayPoint","assignClosestMultiArrayPoint","lineChunk","chunkLength","chunks","cursor","chunkM","currentChunk","missing","tmp","linearRingIsClockwise","edge","linearRingsAreOriented","isClockwise","linearRingssAreOriented","orientLinearRings","orientLinearRingsArray","inflateEnds","startOrientation","prevEndIndex","orientation","TRUE","FALSE","VOID","memoizeOne","fn","lastResult","lastArgs","lastThis","called","nextArgs","prototype","call","arguments","apply","toPromise","getter","promiseGetter","value","err","Promise","reject","resolve","interpolatePoint","dimension","o","cumulativeLengths","target","lineStringCoordinateAtM","lo","hi","mid","m0","m1","lineStringsCoordinateAtM","intersectsLineString","coordinatesExtent","point1","point2","intersectsLineStringArray","intersectsLinearRing","intersectsLinearRingArray","intersectsLinearRingMultiArray","douglasPeucker","simplifiedOffset","markers","stack","last","pop","first","maxSquaredDistance","douglasPeuckerArray","snap","round","quantize","x3","y3","dx1","dy1","dx2","dy2","quantizeArray","quantizeMultiArray","transform2D","anchorX","anchorY","k","matchingChunk","acos","m12","m23","x12","y12","x23","y23","chunkStart","chunkEnd","start","ret","deflateCoordinate","deflateCoordinates","deflateCoordinatesArray","deflateMultiCoordinatesArray","MultiLineString","lineStrings","appendLineString","multiLineString","getLineString","getLineStrings","getFlatMidpoints","midpoints","midpoint"],"sourceRoot":""}