{"version":3,"file":"js/4243.02ee3638.js","mappings":"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","sources":["webpack://@openeo/web-editor/./node_modules/ol/TileQueue.js","webpack://@openeo/web-editor/./node_modules/ol/PluggableMap.js","webpack://@openeo/web-editor/./node_modules/ol/Map.js","webpack://@openeo/web-editor/./node_modules/ol/Object.js","webpack://@openeo/web-editor/./node_modules/ol/ObjectEventType.js","webpack://@openeo/web-editor/./node_modules/ol/Observable.js","webpack://@openeo/web-editor/./node_modules/ol/Tile.js","webpack://@openeo/web-editor/./node_modules/ol/TileCache.js","webpack://@openeo/web-editor/./node_modules/ol/TileRange.js","webpack://@openeo/web-editor/./node_modules/ol/TileState.js","webpack://@openeo/web-editor/./node_modules/ol/ViewProperty.js","webpack://@openeo/web-editor/./node_modules/ol/View.js","webpack://@openeo/web-editor/./node_modules/ol/ViewHint.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/TileQueue\n */\nimport EventType from './events/EventType.js';\nimport PriorityQueue, { DROP } from './structs/PriorityQueue.js';\nimport TileState from './TileState.js';\n/**\n * @typedef {function(import(\"./Tile.js\").default, string, import(\"./coordinate.js\").Coordinate, number): number} PriorityFunction\n */\nvar TileQueue = /** @class */ (function (_super) {\n    __extends(TileQueue, _super);\n    /**\n     * @param {PriorityFunction} tilePriorityFunction Tile priority function.\n     * @param {function(): ?} tileChangeCallback Function called on each tile change event.\n     */\n    function TileQueue(tilePriorityFunction, tileChangeCallback) {\n        var _this = _super.call(this, \n        /**\n         * @param {Array} element Element.\n         * @return {number} Priority.\n         */\n        function (element) {\n            return tilePriorityFunction.apply(null, element);\n        }, \n        /**\n         * @param {Array} element Element.\n         * @return {string} Key.\n         */\n        function (element) {\n            return /** @type {import(\"./Tile.js\").default} */ (element[0]).getKey();\n        }) || this;\n        /** @private */\n        _this.boundHandleTileChange_ = _this.handleTileChange.bind(_this);\n        /**\n         * @private\n         * @type {function(): ?}\n         */\n        _this.tileChangeCallback_ = tileChangeCallback;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.tilesLoading_ = 0;\n        /**\n         * @private\n         * @type {!Object<string,boolean>}\n         */\n        _this.tilesLoadingKeys_ = {};\n        return _this;\n    }\n    /**\n     * @param {Array} element Element.\n     * @return {boolean} The element was added to the queue.\n     */\n    TileQueue.prototype.enqueue = function (element) {\n        var added = _super.prototype.enqueue.call(this, element);\n        if (added) {\n            var tile = element[0];\n            tile.addEventListener(EventType.CHANGE, this.boundHandleTileChange_);\n        }\n        return added;\n    };\n    /**\n     * @return {number} Number of tiles loading.\n     */\n    TileQueue.prototype.getTilesLoading = function () {\n        return this.tilesLoading_;\n    };\n    /**\n     * @param {import(\"./events/Event.js\").default} event Event.\n     * @protected\n     */\n    TileQueue.prototype.handleTileChange = function (event) {\n        var tile = /** @type {import(\"./Tile.js\").default} */ (event.target);\n        var state = tile.getState();\n        if (state === TileState.LOADED ||\n            state === TileState.ERROR ||\n            state === TileState.EMPTY) {\n            tile.removeEventListener(EventType.CHANGE, this.boundHandleTileChange_);\n            var tileKey = tile.getKey();\n            if (tileKey in this.tilesLoadingKeys_) {\n                delete this.tilesLoadingKeys_[tileKey];\n                --this.tilesLoading_;\n            }\n            this.tileChangeCallback_();\n        }\n    };\n    /**\n     * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.\n     * @param {number} maxNewLoads Maximum number of new tiles to load.\n     */\n    TileQueue.prototype.loadMoreTiles = function (maxTotalLoading, maxNewLoads) {\n        var newLoads = 0;\n        var state, tile, tileKey;\n        while (this.tilesLoading_ < maxTotalLoading &&\n            newLoads < maxNewLoads &&\n            this.getCount() > 0) {\n            tile = /** @type {import(\"./Tile.js\").default} */ (this.dequeue()[0]);\n            tileKey = tile.getKey();\n            state = tile.getState();\n            if (state === TileState.IDLE && !(tileKey in this.tilesLoadingKeys_)) {\n                this.tilesLoadingKeys_[tileKey] = true;\n                ++this.tilesLoading_;\n                ++newLoads;\n                tile.load();\n            }\n        }\n    };\n    return TileQueue;\n}(PriorityQueue));\nexport default TileQueue;\n/**\n * @param {import('./PluggableMap.js').FrameState} frameState Frame state.\n * @param {import(\"./Tile.js\").default} tile Tile.\n * @param {string} tileSourceKey Tile source key.\n * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n * @param {number} tileResolution Tile resolution.\n * @return {number} Tile priority.\n */\nexport function getTilePriority(frameState, tile, tileSourceKey, tileCenter, tileResolution) {\n    // Filter out tiles at higher zoom levels than the current zoom level, or that\n    // are outside the visible extent.\n    if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {\n        return DROP;\n    }\n    if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {\n        return DROP;\n    }\n    // Prioritize the highest zoom level tiles closest to the focus.\n    // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).\n    // Within a zoom level, tiles are prioritized by the distance in pixels between\n    // the center of the tile and the center of the viewport.  The factor of 65536\n    // means that the prioritization should behave as desired for tiles up to\n    // 65536 * Math.log(2) = 45426 pixels from the focus.\n    var center = frameState.viewState.center;\n    var deltaX = tileCenter[0] - center[0];\n    var deltaY = tileCenter[1] - center[1];\n    return (65536 * Math.log(tileResolution) +\n        Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution);\n}\n//# sourceMappingURL=TileQueue.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/PluggableMap\n */\nimport BaseObject from './Object.js';\nimport Collection from './Collection.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport EventType from './events/EventType.js';\nimport Layer from './layer/Layer.js';\nimport LayerGroup, { GroupEvent } from './layer/Group.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventHandler from './MapBrowserEventHandler.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport MapEvent from './MapEvent.js';\nimport MapEventType from './MapEventType.js';\nimport MapProperty from './MapProperty.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport PointerEventType from './pointer/EventType.js';\nimport RenderEventType from './render/EventType.js';\nimport TileQueue, { getTilePriority } from './TileQueue.js';\nimport View from './View.js';\nimport ViewHint from './ViewHint.js';\nimport { DEVICE_PIXEL_RATIO, PASSIVE_EVENT_LISTENERS } from './has.js';\nimport { TRUE } from './functions.js';\nimport { apply as applyTransform, create as createTransform, } from './transform.js';\nimport { assert } from './asserts.js';\nimport { clone, createOrUpdateEmpty, equals, getForViewAndSize, isEmpty, } from './extent.js';\nimport { fromUserCoordinate, toUserCoordinate } from './proj.js';\nimport { getUid } from './util.js';\nimport { hasArea } from './size.js';\nimport { listen, unlistenByKey } from './events.js';\nimport { removeNode } from './dom.js';\n/**\n * State of the current frame. Only `pixelRatio`, `time` and `viewState` should\n * be used in applications.\n * @typedef {Object} FrameState\n * @property {number} pixelRatio The pixel ratio of the frame.\n * @property {number} time The time when rendering of the frame was requested.\n * @property {import(\"./View.js\").State} viewState The state of the current view.\n * @property {boolean} animate Animate.\n * @property {import(\"./transform.js\").Transform} coordinateToPixelTransform CoordinateToPixelTransform.\n * @property {import(\"rbush\").default} declutterTree DeclutterTree.\n * @property {null|import(\"./extent.js\").Extent} extent Extent.\n * @property {import(\"./extent.js\").Extent} [nextExtent] Next extent during an animation series.\n * @property {number} index Index.\n * @property {Array<import(\"./layer/Layer.js\").State>} layerStatesArray LayerStatesArray.\n * @property {number} layerIndex LayerIndex.\n * @property {import(\"./transform.js\").Transform} pixelToCoordinateTransform PixelToCoordinateTransform.\n * @property {Array<PostRenderFunction>} postRenderFunctions PostRenderFunctions.\n * @property {import(\"./size.js\").Size} size Size.\n * @property {TileQueue} tileQueue TileQueue.\n * @property {!Object<string, Object<string, boolean>>} usedTiles UsedTiles.\n * @property {Array<number>} viewHints ViewHints.\n * @property {!Object<string, Object<string, boolean>>} wantedTiles WantedTiles.\n * @property {string} mapId The id of the map.\n * @property {Object<string, boolean>} renderTargets Identifiers of previously rendered elements.\n */\n/**\n * @typedef {function(PluggableMap, ?FrameState): any} PostRenderFunction\n */\n/**\n * @typedef {Object} AtPixelOptions\n * @property {undefined|function(import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>): boolean} [layerFilter] Layer filter\n * function. The filter function will receive one argument, the\n * {@link module:ol/layer/Layer~Layer layer-candidate} and it should return a boolean value.\n * Only layers which are visible and for which this function returns `true`\n * will be tested for features. By default, all visible layers will be tested.\n * @property {number} [hitTolerance=0] Hit-detection tolerance in css pixels. Pixels\n * inside the radius around the given position will be checked for features.\n * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for for wrapped geometries inside the range of\n *   +/- 1 world width. Works only if a projection is used that can be wrapped.\n */\n/**\n * @typedef {Object} MapOptionsInternal\n * @property {Collection<import(\"./control/Control.js\").default>} [controls] Controls.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>} [interactions] Interactions.\n * @property {HTMLElement|Document} keyboardEventTarget KeyboardEventTarget.\n * @property {Collection<import(\"./Overlay.js\").default>} overlays Overlays.\n * @property {Object<string, *>} values Values.\n */\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:layergroup'|'change:size'|'change:target'|'change:view'} MapObjectEventTypes\n */\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<MapObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./MapBrowserEventType\").Types, import(\"./MapBrowserEvent\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./MapEventType\").Types, import(\"./MapEvent\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./render/EventType\").MapRenderEventTypes, import(\"./render/Event\").default, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|MapObjectEventTypes|\n *      import(\"./MapBrowserEventType\").Types|import(\"./MapEventType\").Types|\n *      import(\"./render/EventType\").MapRenderEventTypes, Return>} PluggableMapOnSignature\n */\n/**\n * Object literal with config options for the map.\n * @typedef {Object} MapOptions\n * @property {Collection<import(\"./control/Control.js\").default>|Array<import(\"./control/Control.js\").default>} [controls]\n * Controls initially added to the map. If not specified,\n * {@link module:ol/control.defaults} is used.\n * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between\n * physical pixels and device-independent pixels (dips) on the device.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>|Array<import(\"./interaction/Interaction.js\").default>} [interactions]\n * Interactions that are initially added to the map. If not specified,\n * {@link module:ol/interaction.defaults} is used.\n * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to\n * listen to keyboard events on. This determines when the `KeyboardPan` and\n * `KeyboardZoom` interactions trigger. For example, if this option is set to\n * `document` the keyboard interactions will always trigger. If this option is\n * not specified, the element the library listens to keyboard events on is the\n * map target (i.e. the user-provided div for the map). If this is not\n * `document`, the target element needs to be focused for key events to be\n * emitted, requiring that the target element has a `tabindex` attribute.\n * @property {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>|LayerGroup} [layers]\n * Layers. If this is not defined, a map with no layers will be rendered. Note\n * that layers are rendered in the order supplied, so if you want, for example,\n * a vector layer to appear on top of a tile layer, it must come after the tile\n * layer.\n * @property {number} [maxTilesLoading=16] Maximum number tiles to load\n * simultaneously.\n * @property {number} [moveTolerance=1] The minimum distance in pixels the\n * cursor must move to be detected as a map move event instead of a click.\n * Increasing this value can make it easier to click on the map.\n * @property {Collection<import(\"./Overlay.js\").default>|Array<import(\"./Overlay.js\").default>} [overlays]\n * Overlays initially added to the map. By default, no overlays are added.\n * @property {HTMLElement|string} [target] The container for the map, either the\n * element itself or the `id` of the element. If not specified at construction\n * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be\n * rendered. If passed by element, the container can be in a secondary document.\n * @property {View|Promise<import(\"./View.js\").ViewOptions>} [view] The map's view.  No layer sources will be\n * fetched unless this is specified at construction time or through\n * {@link module:ol/Map~Map#setView}.\n */\n/**\n * @param {import(\"./layer/Base.js\").default} layer Layer.\n */\nfunction removeLayerMapProperty(layer) {\n    if (layer instanceof Layer) {\n        layer.setMapInternal(null);\n        return;\n    }\n    if (layer instanceof LayerGroup) {\n        layer.getLayers().forEach(removeLayerMapProperty);\n    }\n}\n/**\n * @param {import(\"./layer/Base.js\").default} layer Layer.\n * @param {PluggableMap} map Map.\n */\nfunction setLayerMapProperty(layer, map) {\n    if (layer instanceof Layer) {\n        layer.setMapInternal(map);\n        return;\n    }\n    if (layer instanceof LayerGroup) {\n        var layers = layer.getLayers().getArray();\n        for (var i = 0, ii = layers.length; i < ii; ++i) {\n            setLayerMapProperty(layers[i], map);\n        }\n    }\n}\n/**\n * @fires import(\"./MapBrowserEvent.js\").MapBrowserEvent\n * @fires import(\"./MapEvent.js\").MapEvent\n * @fires import(\"./render/Event.js\").default#precompose\n * @fires import(\"./render/Event.js\").default#postcompose\n * @fires import(\"./render/Event.js\").default#rendercomplete\n * @api\n */\nvar PluggableMap = /** @class */ (function (_super) {\n    __extends(PluggableMap, _super);\n    /**\n     * @param {MapOptions} options Map options.\n     */\n    function PluggableMap(options) {\n        var _this = _super.call(this) || this;\n        /***\n         * @type {PluggableMapOnSignature<import(\"./events\").EventsKey>}\n         */\n        _this.on;\n        /***\n         * @type {PluggableMapOnSignature<import(\"./events\").EventsKey>}\n         */\n        _this.once;\n        /***\n         * @type {PluggableMapOnSignature<void>}\n         */\n        _this.un;\n        var optionsInternal = createOptionsInternal(options);\n        /**\n         * @private\n         * @type {boolean|undefined}\n         */\n        _this.renderComplete_;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.loaded_ = true;\n        /** @private */\n        _this.boundHandleBrowserEvent_ = _this.handleBrowserEvent.bind(_this);\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.maxTilesLoading_ =\n            options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.pixelRatio_ =\n            options.pixelRatio !== undefined\n                ? options.pixelRatio\n                : DEVICE_PIXEL_RATIO;\n        /**\n         * @private\n         * @type {*}\n         */\n        _this.postRenderTimeoutHandle_;\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        _this.animationDelayKey_;\n        /**\n         * @private\n         */\n        _this.animationDelay_ = /** @this {PluggableMap} */ function () {\n            this.animationDelayKey_ = undefined;\n            this.renderFrame_(Date.now());\n        }.bind(_this);\n        /**\n         * @private\n         * @type {import(\"./transform.js\").Transform}\n         */\n        _this.coordinateToPixelTransform_ = createTransform();\n        /**\n         * @private\n         * @type {import(\"./transform.js\").Transform}\n         */\n        _this.pixelToCoordinateTransform_ = createTransform();\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.frameIndex_ = 0;\n        /**\n         * @private\n         * @type {?FrameState}\n         */\n        _this.frameState_ = null;\n        /**\n         * The extent at the previous 'moveend' event.\n         * @private\n         * @type {import(\"./extent.js\").Extent}\n         */\n        _this.previousExtent_ = null;\n        /**\n         * @private\n         * @type {?import(\"./events.js\").EventsKey}\n         */\n        _this.viewPropertyListenerKey_ = null;\n        /**\n         * @private\n         * @type {?import(\"./events.js\").EventsKey}\n         */\n        _this.viewChangeListenerKey_ = null;\n        /**\n         * @private\n         * @type {?Array<import(\"./events.js\").EventsKey>}\n         */\n        _this.layerGroupPropertyListenerKeys_ = null;\n        /**\n         * @private\n         * @type {!HTMLElement}\n         */\n        _this.viewport_ = document.createElement('div');\n        _this.viewport_.className =\n            'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');\n        _this.viewport_.style.position = 'relative';\n        _this.viewport_.style.overflow = 'hidden';\n        _this.viewport_.style.width = '100%';\n        _this.viewport_.style.height = '100%';\n        /**\n         * @private\n         * @type {!HTMLElement}\n         */\n        _this.overlayContainer_ = document.createElement('div');\n        _this.overlayContainer_.style.position = 'absolute';\n        _this.overlayContainer_.style.zIndex = '0';\n        _this.overlayContainer_.style.width = '100%';\n        _this.overlayContainer_.style.height = '100%';\n        _this.overlayContainer_.style.pointerEvents = 'none';\n        _this.overlayContainer_.className = 'ol-overlaycontainer';\n        _this.viewport_.appendChild(_this.overlayContainer_);\n        /**\n         * @private\n         * @type {!HTMLElement}\n         */\n        _this.overlayContainerStopEvent_ = document.createElement('div');\n        _this.overlayContainerStopEvent_.style.position = 'absolute';\n        _this.overlayContainerStopEvent_.style.zIndex = '0';\n        _this.overlayContainerStopEvent_.style.width = '100%';\n        _this.overlayContainerStopEvent_.style.height = '100%';\n        _this.overlayContainerStopEvent_.style.pointerEvents = 'none';\n        _this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';\n        _this.viewport_.appendChild(_this.overlayContainerStopEvent_);\n        /**\n         * @private\n         * @type {MapBrowserEventHandler}\n         */\n        _this.mapBrowserEventHandler_ = null;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.moveTolerance_ = options.moveTolerance;\n        /**\n         * @private\n         * @type {HTMLElement|Document}\n         */\n        _this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;\n        /**\n         * @private\n         * @type {?Array<import(\"./events.js\").EventsKey>}\n         */\n        _this.targetChangeHandlerKeys_ = null;\n        /**\n         * @type {Collection<import(\"./control/Control.js\").default>}\n         * @protected\n         */\n        _this.controls = optionsInternal.controls || new Collection();\n        /**\n         * @type {Collection<import(\"./interaction/Interaction.js\").default>}\n         * @protected\n         */\n        _this.interactions = optionsInternal.interactions || new Collection();\n        /**\n         * @type {Collection<import(\"./Overlay.js\").default>}\n         * @private\n         */\n        _this.overlays_ = optionsInternal.overlays;\n        /**\n         * A lookup of overlays by id.\n         * @private\n         * @type {Object<string, import(\"./Overlay.js\").default>}\n         */\n        _this.overlayIdIndex_ = {};\n        /**\n         * @type {import(\"./renderer/Map.js\").default|null}\n         * @private\n         */\n        _this.renderer_ = null;\n        /**\n         * @private\n         * @type {!Array<PostRenderFunction>}\n         */\n        _this.postRenderFunctions_ = [];\n        /**\n         * @private\n         * @type {TileQueue}\n         */\n        _this.tileQueue_ = new TileQueue(_this.getTilePriority.bind(_this), _this.handleTileChange_.bind(_this));\n        _this.addChangeListener(MapProperty.LAYERGROUP, _this.handleLayerGroupChanged_);\n        _this.addChangeListener(MapProperty.VIEW, _this.handleViewChanged_);\n        _this.addChangeListener(MapProperty.SIZE, _this.handleSizeChanged_);\n        _this.addChangeListener(MapProperty.TARGET, _this.handleTargetChanged_);\n        // setProperties will trigger the rendering of the map if the map\n        // is \"defined\" already.\n        _this.setProperties(optionsInternal.values);\n        var map = _this;\n        if (options.view && !(options.view instanceof View)) {\n            options.view.then(function (viewOptions) {\n                map.setView(new View(viewOptions));\n            });\n        }\n        _this.controls.addEventListener(CollectionEventType.ADD, \n        /**\n         * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n         */\n        function (event) {\n            event.element.setMap(this);\n        }.bind(_this));\n        _this.controls.addEventListener(CollectionEventType.REMOVE, \n        /**\n         * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n         */\n        function (event) {\n            event.element.setMap(null);\n        }.bind(_this));\n        _this.interactions.addEventListener(CollectionEventType.ADD, \n        /**\n         * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n         */\n        function (event) {\n            event.element.setMap(this);\n        }.bind(_this));\n        _this.interactions.addEventListener(CollectionEventType.REMOVE, \n        /**\n         * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n         */\n        function (event) {\n            event.element.setMap(null);\n        }.bind(_this));\n        _this.overlays_.addEventListener(CollectionEventType.ADD, \n        /**\n         * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n         */\n        function (event) {\n            this.addOverlayInternal_(\n            /** @type {import(\"./Overlay.js\").default} */ (event.element));\n        }.bind(_this));\n        _this.overlays_.addEventListener(CollectionEventType.REMOVE, \n        /**\n         * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n         */\n        function (event) {\n            var overlay = /** @type {import(\"./Overlay.js\").default} */ (event.element);\n            var id = overlay.getId();\n            if (id !== undefined) {\n                delete this.overlayIdIndex_[id.toString()];\n            }\n            event.element.setMap(null);\n        }.bind(_this));\n        _this.controls.forEach(\n        /**\n         * @param {import(\"./control/Control.js\").default} control Control.\n         * @this {PluggableMap}\n         */\n        function (control) {\n            control.setMap(this);\n        }.bind(_this));\n        _this.interactions.forEach(\n        /**\n         * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction.\n         * @this {PluggableMap}\n         */\n        function (interaction) {\n            interaction.setMap(this);\n        }.bind(_this));\n        _this.overlays_.forEach(_this.addOverlayInternal_.bind(_this));\n        return _this;\n    }\n    /**\n     * @abstract\n     * @return {import(\"./renderer/Map.js\").default} The map renderer\n     */\n    PluggableMap.prototype.createRenderer = function () {\n        throw new Error('Use a map type that has a createRenderer method');\n    };\n    /**\n     * Add the given control to the map.\n     * @param {import(\"./control/Control.js\").default} control Control.\n     * @api\n     */\n    PluggableMap.prototype.addControl = function (control) {\n        this.getControls().push(control);\n    };\n    /**\n     * Add the given interaction to the map. If you want to add an interaction\n     * at another point of the collection use `getInteractions()` and the methods\n     * available on {@link module:ol/Collection~Collection}. This can be used to\n     * stop the event propagation from the handleEvent function. The interactions\n     * get to handle the events in the reverse order of this collection.\n     * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to add.\n     * @api\n     */\n    PluggableMap.prototype.addInteraction = function (interaction) {\n        this.getInteractions().push(interaction);\n    };\n    /**\n     * Adds the given layer to the top of this map. If you want to add a layer\n     * elsewhere in the stack, use `getLayers()` and the methods available on\n     * {@link module:ol/Collection~Collection}.\n     * @param {import(\"./layer/Base.js\").default} layer Layer.\n     * @api\n     */\n    PluggableMap.prototype.addLayer = function (layer) {\n        var layers = this.getLayerGroup().getLayers();\n        layers.push(layer);\n    };\n    /**\n     * @param {import(\"./layer/Group.js\").GroupEvent} event The layer add event.\n     * @private\n     */\n    PluggableMap.prototype.handleLayerAdd_ = function (event) {\n        setLayerMapProperty(event.layer, this);\n    };\n    /**\n     * Add the given overlay to the map.\n     * @param {import(\"./Overlay.js\").default} overlay Overlay.\n     * @api\n     */\n    PluggableMap.prototype.addOverlay = function (overlay) {\n        this.getOverlays().push(overlay);\n    };\n    /**\n     * This deals with map's overlay collection changes.\n     * @param {import(\"./Overlay.js\").default} overlay Overlay.\n     * @private\n     */\n    PluggableMap.prototype.addOverlayInternal_ = function (overlay) {\n        var id = overlay.getId();\n        if (id !== undefined) {\n            this.overlayIdIndex_[id.toString()] = overlay;\n        }\n        overlay.setMap(this);\n    };\n    /**\n     *\n     * Clean up.\n     */\n    PluggableMap.prototype.disposeInternal = function () {\n        this.controls.clear();\n        this.interactions.clear();\n        this.overlays_.clear();\n        this.setTarget(null);\n        _super.prototype.disposeInternal.call(this);\n    };\n    /**\n     * Detect features that intersect a pixel on the viewport, and execute a\n     * callback with each intersecting feature. Layers included in the detection can\n     * be configured through the `layerFilter` option in `opt_options`.\n     * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n     * @param {function(import(\"./Feature.js\").FeatureLike, import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>, import(\"./geom/SimpleGeometry.js\").default): T} callback Feature callback. The callback will be\n     *     called with two arguments. The first argument is one\n     *     {@link module:ol/Feature~Feature feature} or\n     *     {@link module:ol/render/Feature~RenderFeature render feature} at the pixel, the second is\n     *     the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\n     *     unmanaged layers. To stop detection, callback functions can return a\n     *     truthy value.\n     * @param {AtPixelOptions} [opt_options] Optional options.\n     * @return {T|undefined} Callback result, i.e. the return value of last\n     * callback execution, or the first truthy callback return value.\n     * @template T\n     * @api\n     */\n    PluggableMap.prototype.forEachFeatureAtPixel = function (pixel, callback, opt_options) {\n        if (!this.frameState_ || !this.renderer_) {\n            return;\n        }\n        var coordinate = this.getCoordinateFromPixelInternal(pixel);\n        opt_options = opt_options !== undefined ? opt_options : {};\n        var hitTolerance = opt_options.hitTolerance !== undefined ? opt_options.hitTolerance : 0;\n        var layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;\n        var checkWrapped = opt_options.checkWrapped !== false;\n        return this.renderer_.forEachFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, callback, null, layerFilter, null);\n    };\n    /**\n     * Get all features that intersect a pixel on the viewport.\n     * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n     * @param {AtPixelOptions} [opt_options] Optional options.\n     * @return {Array<import(\"./Feature.js\").FeatureLike>} The detected features or\n     * an empty array if none were found.\n     * @api\n     */\n    PluggableMap.prototype.getFeaturesAtPixel = function (pixel, opt_options) {\n        var features = [];\n        this.forEachFeatureAtPixel(pixel, function (feature) {\n            features.push(feature);\n        }, opt_options);\n        return features;\n    };\n    /**\n     * Get all layers from all layer groups.\n     * @return {Array<import(\"./layer/Layer.js\").default>} Layers.\n     * @api\n     */\n    PluggableMap.prototype.getAllLayers = function () {\n        var layers = [];\n        function addLayersFrom(layerGroup) {\n            layerGroup.forEach(function (layer) {\n                if (layer instanceof LayerGroup) {\n                    addLayersFrom(layer.getLayers());\n                }\n                else {\n                    layers.push(layer);\n                }\n            });\n        }\n        addLayersFrom(this.getLayers());\n        return layers;\n    };\n    /**\n     * Please the `layer.getData()` method for {@link module:ol/layer/Tile~TileLayer#getData tile layers} or\n     * {@link module:ol/layer/Image~ImageLayer#getData image layers} instead of using this method.\n     *\n     * Detect layers that have a color value at a pixel on the viewport, and\n     * execute a callback with each matching layer. Layers included in the\n     * detection can be configured through `opt_layerFilter`.\n     *\n     * Note: In maps with more than one layer, this method will typically return pixel data\n     * representing the composed image of all layers visible at the given pixel – because layers\n     * will generally share the same rendering context.  To force layers to render separately, and\n     * to get pixel data representing only one layer at a time, you can assign each layer a unique\n     * `className` in its constructor.\n     *\n     * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n     * @param {function(this: S, import(\"./layer/Layer.js\").default, (Uint8ClampedArray|Uint8Array)): T} callback\n     *     Layer callback. This callback will receive two arguments: first is the\n     *     {@link module:ol/layer/Layer~Layer layer}, second argument is an array representing\n     *     [R, G, B, A] pixel values (0 - 255) and will be `null` for layer types\n     *     that do not currently support this argument. To stop detection, callback\n     *     functions can return a truthy value.\n     * @param {AtPixelOptions} [opt_options] Configuration options.\n     * @return {T|undefined} Callback result, i.e. the return value of last\n     * callback execution, or the first truthy callback return value.\n     * @template S,T\n     * @api\n     * @deprecated\n     */\n    PluggableMap.prototype.forEachLayerAtPixel = function (pixel, callback, opt_options) {\n        if (!this.frameState_ || !this.renderer_) {\n            return;\n        }\n        var options = opt_options || {};\n        var hitTolerance = options.hitTolerance !== undefined ? options.hitTolerance : 0;\n        var layerFilter = options.layerFilter || TRUE;\n        return this.renderer_.forEachLayerAtPixel(pixel, this.frameState_, hitTolerance, callback, layerFilter);\n    };\n    /**\n     * Detect if features intersect a pixel on the viewport. Layers included in the\n     * detection can be configured through `opt_layerFilter`.\n     * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n     * @param {AtPixelOptions} [opt_options] Optional options.\n     * @return {boolean} Is there a feature at the given pixel?\n     * @api\n     */\n    PluggableMap.prototype.hasFeatureAtPixel = function (pixel, opt_options) {\n        if (!this.frameState_ || !this.renderer_) {\n            return false;\n        }\n        var coordinate = this.getCoordinateFromPixelInternal(pixel);\n        opt_options = opt_options !== undefined ? opt_options : {};\n        var layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;\n        var hitTolerance = opt_options.hitTolerance !== undefined ? opt_options.hitTolerance : 0;\n        var checkWrapped = opt_options.checkWrapped !== false;\n        return this.renderer_.hasFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, layerFilter, null);\n    };\n    /**\n     * Returns the coordinate in user projection for a browser event.\n     * @param {MouseEvent} event Event.\n     * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n     * @api\n     */\n    PluggableMap.prototype.getEventCoordinate = function (event) {\n        return this.getCoordinateFromPixel(this.getEventPixel(event));\n    };\n    /**\n     * Returns the coordinate in view projection for a browser event.\n     * @param {MouseEvent} event Event.\n     * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n     */\n    PluggableMap.prototype.getEventCoordinateInternal = function (event) {\n        return this.getCoordinateFromPixelInternal(this.getEventPixel(event));\n    };\n    /**\n     * Returns the map pixel position for a browser event relative to the viewport.\n     * @param {UIEvent} event Event.\n     * @return {import(\"./pixel.js\").Pixel} Pixel.\n     * @api\n     */\n    PluggableMap.prototype.getEventPixel = function (event) {\n        var viewportPosition = this.viewport_.getBoundingClientRect();\n        var eventPosition = \n        //FIXME Are we really calling this with a TouchEvent anywhere?\n        'changedTouches' in event\n            ? /** @type {TouchEvent} */ (event).changedTouches[0]\n            : /** @type {MouseEvent} */ (event);\n        return [\n            eventPosition.clientX - viewportPosition.left,\n            eventPosition.clientY - viewportPosition.top,\n        ];\n    };\n    /**\n     * Get the target in which this map is rendered.\n     * Note that this returns what is entered as an option or in setTarget:\n     * if that was an element, it returns an element; if a string, it returns that.\n     * @return {HTMLElement|string|undefined} The Element or id of the Element that the\n     *     map is rendered in.\n     * @observable\n     * @api\n     */\n    PluggableMap.prototype.getTarget = function () {\n        return /** @type {HTMLElement|string|undefined} */ (this.get(MapProperty.TARGET));\n    };\n    /**\n     * Get the DOM element into which this map is rendered. In contrast to\n     * `getTarget` this method always return an `Element`, or `null` if the\n     * map has no target.\n     * @return {HTMLElement} The element that the map is rendered in.\n     * @api\n     */\n    PluggableMap.prototype.getTargetElement = function () {\n        var target = this.getTarget();\n        if (target !== undefined) {\n            return typeof target === 'string'\n                ? document.getElementById(target)\n                : target;\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * Get the coordinate for a given pixel.  This returns a coordinate in the\n     * user projection.\n     * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n     * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n     * @api\n     */\n    PluggableMap.prototype.getCoordinateFromPixel = function (pixel) {\n        return toUserCoordinate(this.getCoordinateFromPixelInternal(pixel), this.getView().getProjection());\n    };\n    /**\n     * Get the coordinate for a given pixel.  This returns a coordinate in the\n     * map view projection.\n     * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n     * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n     */\n    PluggableMap.prototype.getCoordinateFromPixelInternal = function (pixel) {\n        var frameState = this.frameState_;\n        if (!frameState) {\n            return null;\n        }\n        else {\n            return applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n        }\n    };\n    /**\n     * Get the map controls. Modifying this collection changes the controls\n     * associated with the map.\n     * @return {Collection<import(\"./control/Control.js\").default>} Controls.\n     * @api\n     */\n    PluggableMap.prototype.getControls = function () {\n        return this.controls;\n    };\n    /**\n     * Get the map overlays. Modifying this collection changes the overlays\n     * associated with the map.\n     * @return {Collection<import(\"./Overlay.js\").default>} Overlays.\n     * @api\n     */\n    PluggableMap.prototype.getOverlays = function () {\n        return this.overlays_;\n    };\n    /**\n     * Get an overlay by its identifier (the value returned by overlay.getId()).\n     * Note that the index treats string and numeric identifiers as the same. So\n     * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.\n     * @param {string|number} id Overlay identifier.\n     * @return {import(\"./Overlay.js\").default} Overlay.\n     * @api\n     */\n    PluggableMap.prototype.getOverlayById = function (id) {\n        var overlay = this.overlayIdIndex_[id.toString()];\n        return overlay !== undefined ? overlay : null;\n    };\n    /**\n     * Get the map interactions. Modifying this collection changes the interactions\n     * associated with the map.\n     *\n     * Interactions are used for e.g. pan, zoom and rotate.\n     * @return {Collection<import(\"./interaction/Interaction.js\").default>} Interactions.\n     * @api\n     */\n    PluggableMap.prototype.getInteractions = function () {\n        return this.interactions;\n    };\n    /**\n     * Get the layergroup associated with this map.\n     * @return {LayerGroup} A layer group containing the layers in this map.\n     * @observable\n     * @api\n     */\n    PluggableMap.prototype.getLayerGroup = function () {\n        return /** @type {LayerGroup} */ (this.get(MapProperty.LAYERGROUP));\n    };\n    /**\n     * Clear any existing layers and add layers to the map.\n     * @param {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>} layers The layers to be added to the map.\n     * @api\n     */\n    PluggableMap.prototype.setLayers = function (layers) {\n        var group = this.getLayerGroup();\n        if (layers instanceof Collection) {\n            group.setLayers(layers);\n            return;\n        }\n        var collection = group.getLayers();\n        collection.clear();\n        collection.extend(layers);\n    };\n    /**\n     * Get the collection of layers associated with this map.\n     * @return {!Collection<import(\"./layer/Base.js\").default>} Layers.\n     * @api\n     */\n    PluggableMap.prototype.getLayers = function () {\n        var layers = this.getLayerGroup().getLayers();\n        return layers;\n    };\n    /**\n     * @return {boolean} Layers have sources that are still loading.\n     */\n    PluggableMap.prototype.getLoadingOrNotReady = function () {\n        var layerStatesArray = this.getLayerGroup().getLayerStatesArray();\n        for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n            var state = layerStatesArray[i];\n            if (!state.visible) {\n                continue;\n            }\n            var renderer = state.layer.getRenderer();\n            if (renderer && !renderer.ready) {\n                return true;\n            }\n            var source = /** @type {import(\"./layer/Layer.js\").default} */ (state.layer).getSource();\n            if (source && source.loading) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Get the pixel for a coordinate.  This takes a coordinate in the user\n     * projection and returns the corresponding pixel.\n     * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n     * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n     * @api\n     */\n    PluggableMap.prototype.getPixelFromCoordinate = function (coordinate) {\n        var viewCoordinate = fromUserCoordinate(coordinate, this.getView().getProjection());\n        return this.getPixelFromCoordinateInternal(viewCoordinate);\n    };\n    /**\n     * Get the pixel for a coordinate.  This takes a coordinate in the map view\n     * projection and returns the corresponding pixel.\n     * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n     * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n     */\n    PluggableMap.prototype.getPixelFromCoordinateInternal = function (coordinate) {\n        var frameState = this.frameState_;\n        if (!frameState) {\n            return null;\n        }\n        else {\n            return applyTransform(frameState.coordinateToPixelTransform, coordinate.slice(0, 2));\n        }\n    };\n    /**\n     * Get the map renderer.\n     * @return {import(\"./renderer/Map.js\").default|null} Renderer\n     */\n    PluggableMap.prototype.getRenderer = function () {\n        return this.renderer_;\n    };\n    /**\n     * Get the size of this map.\n     * @return {import(\"./size.js\").Size|undefined} The size in pixels of the map in the DOM.\n     * @observable\n     * @api\n     */\n    PluggableMap.prototype.getSize = function () {\n        return /** @type {import(\"./size.js\").Size|undefined} */ (this.get(MapProperty.SIZE));\n    };\n    /**\n     * Get the view associated with this map. A view manages properties such as\n     * center and resolution.\n     * @return {View} The view that controls this map.\n     * @observable\n     * @api\n     */\n    PluggableMap.prototype.getView = function () {\n        return /** @type {View} */ (this.get(MapProperty.VIEW));\n    };\n    /**\n     * Get the element that serves as the map viewport.\n     * @return {HTMLElement} Viewport.\n     * @api\n     */\n    PluggableMap.prototype.getViewport = function () {\n        return this.viewport_;\n    };\n    /**\n     * Get the element that serves as the container for overlays.  Elements added to\n     * this container will let mousedown and touchstart events through to the map,\n     * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}\n     * events.\n     * @return {!HTMLElement} The map's overlay container.\n     */\n    PluggableMap.prototype.getOverlayContainer = function () {\n        return this.overlayContainer_;\n    };\n    /**\n     * Get the element that serves as a container for overlays that don't allow\n     * event propagation. Elements added to this container won't let mousedown and\n     * touchstart events through to the map, so clicks and gestures on an overlay\n     * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n     * @return {!HTMLElement} The map's overlay container that stops events.\n     */\n    PluggableMap.prototype.getOverlayContainerStopEvent = function () {\n        return this.overlayContainerStopEvent_;\n    };\n    /**\n     * @return {!Document} The document where the map is displayed.\n     */\n    PluggableMap.prototype.getOwnerDocument = function () {\n        var targetElement = this.getTargetElement();\n        return targetElement ? targetElement.ownerDocument : document;\n    };\n    /**\n     * @param {import(\"./Tile.js\").default} tile Tile.\n     * @param {string} tileSourceKey Tile source key.\n     * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n     * @param {number} tileResolution Tile resolution.\n     * @return {number} Tile priority.\n     */\n    PluggableMap.prototype.getTilePriority = function (tile, tileSourceKey, tileCenter, tileResolution) {\n        return getTilePriority(this.frameState_, tile, tileSourceKey, tileCenter, tileResolution);\n    };\n    /**\n     * @param {UIEvent} browserEvent Browser event.\n     * @param {string} [opt_type] Type.\n     */\n    PluggableMap.prototype.handleBrowserEvent = function (browserEvent, opt_type) {\n        var type = opt_type || browserEvent.type;\n        var mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);\n        this.handleMapBrowserEvent(mapBrowserEvent);\n    };\n    /**\n     * @param {MapBrowserEvent} mapBrowserEvent The event to handle.\n     */\n    PluggableMap.prototype.handleMapBrowserEvent = function (mapBrowserEvent) {\n        if (!this.frameState_) {\n            // With no view defined, we cannot translate pixels into geographical\n            // coordinates so interactions cannot be used.\n            return;\n        }\n        var originalEvent = /** @type {PointerEvent} */ (mapBrowserEvent.originalEvent);\n        var eventType = originalEvent.type;\n        if (eventType === PointerEventType.POINTERDOWN ||\n            eventType === EventType.WHEEL ||\n            eventType === EventType.KEYDOWN) {\n            var doc = this.getOwnerDocument();\n            var rootNode = this.viewport_.getRootNode\n                ? this.viewport_.getRootNode()\n                : doc;\n            var target = /** @type {Node} */ (originalEvent.target);\n            if (\n            // Abort if the target is a child of the container for elements whose events are not meant\n            // to be handled by map interactions.\n            this.overlayContainerStopEvent_.contains(target) ||\n                // Abort if the event target is a child of the container that is no longer in the page.\n                // It's possible for the target to no longer be in the page if it has been removed in an\n                // event listener, this might happen in a Control that recreates it's content based on\n                // user interaction either manually or via a render in something like https://reactjs.org/\n                !(rootNode === doc ? doc.documentElement : rootNode).contains(target)) {\n                return;\n            }\n        }\n        mapBrowserEvent.frameState = this.frameState_;\n        if (this.dispatchEvent(mapBrowserEvent) !== false) {\n            var interactionsArray = this.getInteractions().getArray().slice();\n            for (var i = interactionsArray.length - 1; i >= 0; i--) {\n                var interaction = interactionsArray[i];\n                if (interaction.getMap() !== this ||\n                    !interaction.getActive() ||\n                    !this.getTargetElement()) {\n                    continue;\n                }\n                var cont = interaction.handleEvent(mapBrowserEvent);\n                if (!cont || mapBrowserEvent.propagationStopped) {\n                    break;\n                }\n            }\n        }\n    };\n    /**\n     * @protected\n     */\n    PluggableMap.prototype.handlePostRender = function () {\n        var frameState = this.frameState_;\n        // Manage the tile queue\n        // Image loads are expensive and a limited resource, so try to use them\n        // efficiently:\n        // * When the view is static we allow a large number of parallel tile loads\n        //   to complete the frame as quickly as possible.\n        // * When animating or interacting, image loads can cause janks, so we reduce\n        //   the maximum number of loads per frame and limit the number of parallel\n        //   tile loads to remain reactive to view changes and to reduce the chance of\n        //   loading tiles that will quickly disappear from view.\n        var tileQueue = this.tileQueue_;\n        if (!tileQueue.isEmpty()) {\n            var maxTotalLoading = this.maxTilesLoading_;\n            var maxNewLoads = maxTotalLoading;\n            if (frameState) {\n                var hints = frameState.viewHints;\n                if (hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING]) {\n                    var lowOnFrameBudget = Date.now() - frameState.time > 8;\n                    maxTotalLoading = lowOnFrameBudget ? 0 : 8;\n                    maxNewLoads = lowOnFrameBudget ? 0 : 2;\n                }\n            }\n            if (tileQueue.getTilesLoading() < maxTotalLoading) {\n                tileQueue.reprioritize(); // FIXME only call if view has changed\n                tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);\n            }\n        }\n        if (frameState && this.renderer_ && !frameState.animate) {\n            if (this.renderComplete_ === true) {\n                if (this.hasListener(RenderEventType.RENDERCOMPLETE)) {\n                    this.renderer_.dispatchRenderEvent(RenderEventType.RENDERCOMPLETE, frameState);\n                }\n                if (this.loaded_ === false) {\n                    this.loaded_ = true;\n                    this.dispatchEvent(new MapEvent(MapEventType.LOADEND, this, frameState));\n                }\n            }\n            else if (this.loaded_ === true) {\n                this.loaded_ = false;\n                this.dispatchEvent(new MapEvent(MapEventType.LOADSTART, this, frameState));\n            }\n        }\n        var postRenderFunctions = this.postRenderFunctions_;\n        for (var i = 0, ii = postRenderFunctions.length; i < ii; ++i) {\n            postRenderFunctions[i](this, frameState);\n        }\n        postRenderFunctions.length = 0;\n    };\n    /**\n     * @private\n     */\n    PluggableMap.prototype.handleSizeChanged_ = function () {\n        if (this.getView() && !this.getView().getAnimating()) {\n            this.getView().resolveConstraints(0);\n        }\n        this.render();\n    };\n    /**\n     * @private\n     */\n    PluggableMap.prototype.handleTargetChanged_ = function () {\n        if (this.mapBrowserEventHandler_) {\n            for (var i = 0, ii = this.targetChangeHandlerKeys_.length; i < ii; ++i) {\n                unlistenByKey(this.targetChangeHandlerKeys_[i]);\n            }\n            this.targetChangeHandlerKeys_ = null;\n            this.viewport_.removeEventListener(EventType.CONTEXTMENU, this.boundHandleBrowserEvent_);\n            this.viewport_.removeEventListener(EventType.WHEEL, this.boundHandleBrowserEvent_);\n            this.mapBrowserEventHandler_.dispose();\n            this.mapBrowserEventHandler_ = null;\n            removeNode(this.viewport_);\n        }\n        // target may be undefined, null, a string or an Element.\n        // If it's a string we convert it to an Element before proceeding.\n        // If it's not now an Element we remove the viewport from the DOM.\n        // If it's an Element we append the viewport element to it.\n        var targetElement = this.getTargetElement();\n        if (!targetElement) {\n            if (this.renderer_) {\n                clearTimeout(this.postRenderTimeoutHandle_);\n                this.postRenderTimeoutHandle_ = undefined;\n                this.postRenderFunctions_.length = 0;\n                this.renderer_.dispose();\n                this.renderer_ = null;\n            }\n            if (this.animationDelayKey_) {\n                cancelAnimationFrame(this.animationDelayKey_);\n                this.animationDelayKey_ = undefined;\n            }\n        }\n        else {\n            targetElement.appendChild(this.viewport_);\n            if (!this.renderer_) {\n                this.renderer_ = this.createRenderer();\n            }\n            this.mapBrowserEventHandler_ = new MapBrowserEventHandler(this, this.moveTolerance_);\n            for (var key in MapBrowserEventType) {\n                this.mapBrowserEventHandler_.addEventListener(MapBrowserEventType[key], this.handleMapBrowserEvent.bind(this));\n            }\n            this.viewport_.addEventListener(EventType.CONTEXTMENU, this.boundHandleBrowserEvent_, false);\n            this.viewport_.addEventListener(EventType.WHEEL, this.boundHandleBrowserEvent_, PASSIVE_EVENT_LISTENERS ? { passive: false } : false);\n            var defaultView = this.getOwnerDocument().defaultView;\n            var keyboardEventTarget = !this.keyboardEventTarget_\n                ? targetElement\n                : this.keyboardEventTarget_;\n            this.targetChangeHandlerKeys_ = [\n                listen(keyboardEventTarget, EventType.KEYDOWN, this.handleBrowserEvent, this),\n                listen(keyboardEventTarget, EventType.KEYPRESS, this.handleBrowserEvent, this),\n                listen(defaultView, EventType.RESIZE, this.updateSize, this),\n            ];\n        }\n        this.updateSize();\n        // updateSize calls setSize, so no need to call this.render\n        // ourselves here.\n    };\n    /**\n     * @private\n     */\n    PluggableMap.prototype.handleTileChange_ = function () {\n        this.render();\n    };\n    /**\n     * @private\n     */\n    PluggableMap.prototype.handleViewPropertyChanged_ = function () {\n        this.render();\n    };\n    /**\n     * @private\n     */\n    PluggableMap.prototype.handleViewChanged_ = function () {\n        if (this.viewPropertyListenerKey_) {\n            unlistenByKey(this.viewPropertyListenerKey_);\n            this.viewPropertyListenerKey_ = null;\n        }\n        if (this.viewChangeListenerKey_) {\n            unlistenByKey(this.viewChangeListenerKey_);\n            this.viewChangeListenerKey_ = null;\n        }\n        var view = this.getView();\n        if (view) {\n            this.updateViewportSize_();\n            this.viewPropertyListenerKey_ = listen(view, ObjectEventType.PROPERTYCHANGE, this.handleViewPropertyChanged_, this);\n            this.viewChangeListenerKey_ = listen(view, EventType.CHANGE, this.handleViewPropertyChanged_, this);\n            view.resolveConstraints(0);\n        }\n        this.render();\n    };\n    /**\n     * @private\n     */\n    PluggableMap.prototype.handleLayerGroupChanged_ = function () {\n        if (this.layerGroupPropertyListenerKeys_) {\n            this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);\n            this.layerGroupPropertyListenerKeys_ = null;\n        }\n        var layerGroup = this.getLayerGroup();\n        if (layerGroup) {\n            this.handleLayerAdd_(new GroupEvent('addlayer', layerGroup));\n            this.layerGroupPropertyListenerKeys_ = [\n                listen(layerGroup, ObjectEventType.PROPERTYCHANGE, this.render, this),\n                listen(layerGroup, EventType.CHANGE, this.render, this),\n                listen(layerGroup, 'addlayer', this.handleLayerAdd_, this),\n                listen(layerGroup, 'removelayer', this.handleLayerRemove_, this),\n            ];\n        }\n        this.render();\n    };\n    /**\n     * @return {boolean} Is rendered.\n     */\n    PluggableMap.prototype.isRendered = function () {\n        return !!this.frameState_;\n    };\n    /**\n     * Requests an immediate render in a synchronous manner.\n     * @api\n     */\n    PluggableMap.prototype.renderSync = function () {\n        if (this.animationDelayKey_) {\n            cancelAnimationFrame(this.animationDelayKey_);\n        }\n        this.animationDelay_();\n    };\n    /**\n     * Redraws all text after new fonts have loaded\n     */\n    PluggableMap.prototype.redrawText = function () {\n        var layerStates = this.getLayerGroup().getLayerStatesArray();\n        for (var i = 0, ii = layerStates.length; i < ii; ++i) {\n            var layer = layerStates[i].layer;\n            if (layer.hasRenderer()) {\n                layer.getRenderer().handleFontsChanged();\n            }\n        }\n    };\n    /**\n     * Request a map rendering (at the next animation frame).\n     * @api\n     */\n    PluggableMap.prototype.render = function () {\n        if (this.renderer_ && this.animationDelayKey_ === undefined) {\n            this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);\n        }\n    };\n    /**\n     * Remove the given control from the map.\n     * @param {import(\"./control/Control.js\").default} control Control.\n     * @return {import(\"./control/Control.js\").default|undefined} The removed control (or undefined\n     *     if the control was not found).\n     * @api\n     */\n    PluggableMap.prototype.removeControl = function (control) {\n        return this.getControls().remove(control);\n    };\n    /**\n     * Remove the given interaction from the map.\n     * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to remove.\n     * @return {import(\"./interaction/Interaction.js\").default|undefined} The removed interaction (or\n     *     undefined if the interaction was not found).\n     * @api\n     */\n    PluggableMap.prototype.removeInteraction = function (interaction) {\n        return this.getInteractions().remove(interaction);\n    };\n    /**\n     * Removes the given layer from the map.\n     * @param {import(\"./layer/Base.js\").default} layer Layer.\n     * @return {import(\"./layer/Base.js\").default|undefined} The removed layer (or undefined if the\n     *     layer was not found).\n     * @api\n     */\n    PluggableMap.prototype.removeLayer = function (layer) {\n        var layers = this.getLayerGroup().getLayers();\n        return layers.remove(layer);\n    };\n    /**\n     * @param {import(\"./layer/Group.js\").GroupEvent} event The layer remove event.\n     * @private\n     */\n    PluggableMap.prototype.handleLayerRemove_ = function (event) {\n        removeLayerMapProperty(event.layer);\n    };\n    /**\n     * Remove the given overlay from the map.\n     * @param {import(\"./Overlay.js\").default} overlay Overlay.\n     * @return {import(\"./Overlay.js\").default|undefined} The removed overlay (or undefined\n     *     if the overlay was not found).\n     * @api\n     */\n    PluggableMap.prototype.removeOverlay = function (overlay) {\n        return this.getOverlays().remove(overlay);\n    };\n    /**\n     * @param {number} time Time.\n     * @private\n     */\n    PluggableMap.prototype.renderFrame_ = function (time) {\n        var _this = this;\n        var size = this.getSize();\n        var view = this.getView();\n        var previousFrameState = this.frameState_;\n        /** @type {?FrameState} */\n        var frameState = null;\n        if (size !== undefined && hasArea(size) && view && view.isDef()) {\n            var viewHints = view.getHints(this.frameState_ ? this.frameState_.viewHints : undefined);\n            var viewState = view.getState();\n            frameState = {\n                animate: false,\n                coordinateToPixelTransform: this.coordinateToPixelTransform_,\n                declutterTree: null,\n                extent: getForViewAndSize(viewState.center, viewState.resolution, viewState.rotation, size),\n                index: this.frameIndex_++,\n                layerIndex: 0,\n                layerStatesArray: this.getLayerGroup().getLayerStatesArray(),\n                pixelRatio: this.pixelRatio_,\n                pixelToCoordinateTransform: this.pixelToCoordinateTransform_,\n                postRenderFunctions: [],\n                size: size,\n                tileQueue: this.tileQueue_,\n                time: time,\n                usedTiles: {},\n                viewState: viewState,\n                viewHints: viewHints,\n                wantedTiles: {},\n                mapId: getUid(this),\n                renderTargets: {},\n            };\n            if (viewState.nextCenter && viewState.nextResolution) {\n                var rotation = isNaN(viewState.nextRotation)\n                    ? viewState.rotation\n                    : viewState.nextRotation;\n                frameState.nextExtent = getForViewAndSize(viewState.nextCenter, viewState.nextResolution, rotation, size);\n            }\n        }\n        this.frameState_ = frameState;\n        /** @type {import(\"./renderer/Map.js\").default} */ (this.renderer_).renderFrame(frameState);\n        if (frameState) {\n            if (frameState.animate) {\n                this.render();\n            }\n            Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions);\n            if (previousFrameState) {\n                var moveStart = !this.previousExtent_ ||\n                    (!isEmpty(this.previousExtent_) &&\n                        !equals(frameState.extent, this.previousExtent_));\n                if (moveStart) {\n                    this.dispatchEvent(new MapEvent(MapEventType.MOVESTART, this, previousFrameState));\n                    this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);\n                }\n            }\n            var idle = this.previousExtent_ &&\n                !frameState.viewHints[ViewHint.ANIMATING] &&\n                !frameState.viewHints[ViewHint.INTERACTING] &&\n                !equals(frameState.extent, this.previousExtent_);\n            if (idle) {\n                this.dispatchEvent(new MapEvent(MapEventType.MOVEEND, this, frameState));\n                clone(frameState.extent, this.previousExtent_);\n            }\n        }\n        this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));\n        this.renderComplete_ =\n            this.hasListener(MapEventType.LOADSTART) ||\n                this.hasListener(MapEventType.LOADEND) ||\n                this.hasListener(RenderEventType.RENDERCOMPLETE)\n                ? !this.tileQueue_.getTilesLoading() &&\n                    !this.tileQueue_.getCount() &&\n                    !this.getLoadingOrNotReady()\n                : undefined;\n        if (!this.postRenderTimeoutHandle_) {\n            this.postRenderTimeoutHandle_ = setTimeout(function () {\n                _this.postRenderTimeoutHandle_ = undefined;\n                _this.handlePostRender();\n            }, 0);\n        }\n    };\n    /**\n     * Sets the layergroup of this map.\n     * @param {LayerGroup} layerGroup A layer group containing the layers in this map.\n     * @observable\n     * @api\n     */\n    PluggableMap.prototype.setLayerGroup = function (layerGroup) {\n        var oldLayerGroup = this.getLayerGroup();\n        if (oldLayerGroup) {\n            this.handleLayerRemove_(new GroupEvent('removelayer', oldLayerGroup));\n        }\n        this.set(MapProperty.LAYERGROUP, layerGroup);\n    };\n    /**\n     * Set the size of this map.\n     * @param {import(\"./size.js\").Size|undefined} size The size in pixels of the map in the DOM.\n     * @observable\n     * @api\n     */\n    PluggableMap.prototype.setSize = function (size) {\n        this.set(MapProperty.SIZE, size);\n    };\n    /**\n     * Set the target element to render this map into.\n     * @param {HTMLElement|string} [target] The Element or id of the Element\n     *     that the map is rendered in.\n     * @observable\n     * @api\n     */\n    PluggableMap.prototype.setTarget = function (target) {\n        this.set(MapProperty.TARGET, target);\n    };\n    /**\n     * Set the view for this map.\n     * @param {View|Promise<import(\"./View.js\").ViewOptions>} view The view that controls this map.\n     * It is also possible to pass a promise that resolves to options for constructing a view.  This\n     * alternative allows view properties to be resolved by sources or other components that load\n     * view-related metadata.\n     * @observable\n     * @api\n     */\n    PluggableMap.prototype.setView = function (view) {\n        if (!view || view instanceof View) {\n            this.set(MapProperty.VIEW, view);\n            return;\n        }\n        this.set(MapProperty.VIEW, new View());\n        var map = this;\n        view.then(function (viewOptions) {\n            map.setView(new View(viewOptions));\n        });\n    };\n    /**\n     * Force a recalculation of the map viewport size.  This should be called when\n     * third-party code changes the size of the map viewport.\n     * @api\n     */\n    PluggableMap.prototype.updateSize = function () {\n        var targetElement = this.getTargetElement();\n        var size = undefined;\n        if (targetElement) {\n            var computedStyle = getComputedStyle(targetElement);\n            var width = targetElement.offsetWidth -\n                parseFloat(computedStyle['borderLeftWidth']) -\n                parseFloat(computedStyle['paddingLeft']) -\n                parseFloat(computedStyle['paddingRight']) -\n                parseFloat(computedStyle['borderRightWidth']);\n            var height = targetElement.offsetHeight -\n                parseFloat(computedStyle['borderTopWidth']) -\n                parseFloat(computedStyle['paddingTop']) -\n                parseFloat(computedStyle['paddingBottom']) -\n                parseFloat(computedStyle['borderBottomWidth']);\n            if (!isNaN(width) && !isNaN(height)) {\n                size = [width, height];\n                if (!hasArea(size) &&\n                    !!(targetElement.offsetWidth ||\n                        targetElement.offsetHeight ||\n                        targetElement.getClientRects().length)) {\n                    // eslint-disable-next-line\n                    console.warn(\"No map visible because the map container's width or height are 0.\");\n                }\n            }\n        }\n        this.setSize(size);\n        this.updateViewportSize_();\n    };\n    /**\n     * Recomputes the viewport size and save it on the view object (if any)\n     * @private\n     */\n    PluggableMap.prototype.updateViewportSize_ = function () {\n        var view = this.getView();\n        if (view) {\n            var size = undefined;\n            var computedStyle = getComputedStyle(this.viewport_);\n            if (computedStyle.width && computedStyle.height) {\n                size = [\n                    parseInt(computedStyle.width, 10),\n                    parseInt(computedStyle.height, 10),\n                ];\n            }\n            view.setViewportSize(size);\n        }\n    };\n    return PluggableMap;\n}(BaseObject));\n/**\n * @param {MapOptions} options Map options.\n * @return {MapOptionsInternal} Internal map options.\n */\nfunction createOptionsInternal(options) {\n    /**\n     * @type {HTMLElement|Document}\n     */\n    var keyboardEventTarget = null;\n    if (options.keyboardEventTarget !== undefined) {\n        keyboardEventTarget =\n            typeof options.keyboardEventTarget === 'string'\n                ? document.getElementById(options.keyboardEventTarget)\n                : options.keyboardEventTarget;\n    }\n    /**\n     * @type {Object<string, *>}\n     */\n    var values = {};\n    var layerGroup = options.layers &&\n        typeof ( /** @type {?} */(options.layers).getLayers) === 'function'\n        ? /** @type {LayerGroup} */ (options.layers)\n        : new LayerGroup({ layers: /** @type {Collection} */ (options.layers) });\n    values[MapProperty.LAYERGROUP] = layerGroup;\n    values[MapProperty.TARGET] = options.target;\n    values[MapProperty.VIEW] =\n        options.view instanceof View ? options.view : new View();\n    var controls;\n    if (options.controls !== undefined) {\n        if (Array.isArray(options.controls)) {\n            controls = new Collection(options.controls.slice());\n        }\n        else {\n            assert(typeof ( /** @type {?} */(options.controls).getArray) === 'function', 47); // Expected `controls` to be an array or an `import(\"./Collection.js\").Collection`\n            controls = /** @type {Collection} */ (options.controls);\n        }\n    }\n    var interactions;\n    if (options.interactions !== undefined) {\n        if (Array.isArray(options.interactions)) {\n            interactions = new Collection(options.interactions.slice());\n        }\n        else {\n            assert(typeof ( /** @type {?} */(options.interactions).getArray) ===\n                'function', 48); // Expected `interactions` to be an array or an `import(\"./Collection.js\").Collection`\n            interactions = /** @type {Collection} */ (options.interactions);\n        }\n    }\n    var overlays;\n    if (options.overlays !== undefined) {\n        if (Array.isArray(options.overlays)) {\n            overlays = new Collection(options.overlays.slice());\n        }\n        else {\n            assert(typeof ( /** @type {?} */(options.overlays).getArray) === 'function', 49); // Expected `overlays` to be an array or an `import(\"./Collection.js\").Collection`\n            overlays = options.overlays;\n        }\n    }\n    else {\n        overlays = new Collection();\n    }\n    return {\n        controls: controls,\n        interactions: interactions,\n        keyboardEventTarget: keyboardEventTarget,\n        overlays: overlays,\n        values: values,\n    };\n}\nexport default PluggableMap;\n//# sourceMappingURL=PluggableMap.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/Map\n */\nimport CompositeMapRenderer from './renderer/Composite.js';\nimport PluggableMap from './PluggableMap.js';\nimport { assign } from './obj.js';\nimport { defaults as defaultControls } from './control.js';\nimport { defaults as defaultInteractions } from './interaction.js';\n/**\n * @classdesc\n * The map is the core component of OpenLayers. For a map to render, a view,\n * one or more layers, and a target container are needed:\n *\n *     import Map from 'ol/Map';\n *     import View from 'ol/View';\n *     import TileLayer from 'ol/layer/Tile';\n *     import OSM from 'ol/source/OSM';\n *\n *     var map = new Map({\n *       view: new View({\n *         center: [0, 0],\n *         zoom: 1\n *       }),\n *       layers: [\n *         new TileLayer({\n *           source: new OSM()\n *         })\n *       ],\n *       target: 'map'\n *     });\n *\n * The above snippet creates a map using a {@link module:ol/layer/Tile~TileLayer} to\n * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM\n * element with the id `map`.\n *\n * The constructor places a viewport container (with CSS class name\n * `ol-viewport`) in the target element (see `getViewport()`), and then two\n * further elements within the viewport: one with CSS class name\n * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with\n * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`\n * option of {@link module:ol/Overlay~Overlay} for the difference). The map\n * itself is placed in a further element within the viewport.\n *\n * Layers are stored as a {@link module:ol/Collection~Collection} in\n * layerGroups. A top-level group is provided by the library. This is what is\n * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the\n * options are added to this group, and `addLayer` and `removeLayer` change the\n * layer collection in the group. `getLayers` is a convenience function for\n * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~LayerGroup}\n * is a subclass of {@link module:ol/layer/Base~BaseLayer}, so layers entered in the\n * options or added with `addLayer` can be groups, which can contain further\n * groups, and so on.\n *\n * @api\n */\nvar Map = /** @class */ (function (_super) {\n    __extends(Map, _super);\n    /**\n     * @param {import(\"./PluggableMap.js\").MapOptions} options Map options.\n     */\n    function Map(options) {\n        options = assign({}, options);\n        if (!options.controls) {\n            options.controls = defaultControls();\n        }\n        if (!options.interactions) {\n            options.interactions = defaultInteractions({\n                onFocusOnly: true,\n            });\n        }\n        return _super.call(this, options) || this;\n    }\n    Map.prototype.createRenderer = function () {\n        return new CompositeMapRenderer(this);\n    };\n    return Map;\n}(PluggableMap));\nexport default Map;\n//# sourceMappingURL=Map.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/Object\n */\nimport Event from './events/Event.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport Observable from './Observable.js';\nimport { assign, isEmpty } from './obj.js';\nimport { getUid } from './util.js';\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.\n */\nvar ObjectEvent = /** @class */ (function (_super) {\n    __extends(ObjectEvent, _super);\n    /**\n     * @param {string} type The event type.\n     * @param {string} key The property name.\n     * @param {*} oldValue The old value for `key`.\n     */\n    function ObjectEvent(type, key, oldValue) {\n        var _this = _super.call(this, type) || this;\n        /**\n         * The name of the property whose value is changing.\n         * @type {string}\n         * @api\n         */\n        _this.key = key;\n        /**\n         * The old value. To get the new value use `e.target.get(e.key)` where\n         * `e` is the event object.\n         * @type {*}\n         * @api\n         */\n        _this.oldValue = oldValue;\n        return _this;\n    }\n    return ObjectEvent;\n}(Event));\nexport { ObjectEvent };\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types, ObjectEvent, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types, Return>} ObjectOnSignature\n */\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link module:ol/Observable~Observable} with observable\n * properties, where each property is observable as well as the object as a\n * whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link module:ol/Map~Map} has a `target` property, accessed with\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\n * settable. There are also general-purpose accessors `get()` and `set()`. For\n * example, `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link module:ol/View~View} has a\n * `center` property, so `view.on('change:center', function(evt) {...});` would\n * call the function whenever the value of the center property changes. Within\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\n * would return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @fires ObjectEvent\n * @api\n */\nvar BaseObject = /** @class */ (function (_super) {\n    __extends(BaseObject, _super);\n    /**\n     * @param {Object<string, *>} [opt_values] An object with key-value pairs.\n     */\n    function BaseObject(opt_values) {\n        var _this = _super.call(this) || this;\n        /***\n         * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n         */\n        _this.on;\n        /***\n         * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n         */\n        _this.once;\n        /***\n         * @type {ObjectOnSignature<void>}\n         */\n        _this.un;\n        // Call {@link module:ol/util.getUid} to ensure that the order of objects' ids is\n        // the same as the order in which they were created.  This also helps to\n        // ensure that object properties are always added in the same order, which\n        // helps many JavaScript engines generate faster code.\n        getUid(_this);\n        /**\n         * @private\n         * @type {Object<string, *>}\n         */\n        _this.values_ = null;\n        if (opt_values !== undefined) {\n            _this.setProperties(opt_values);\n        }\n        return _this;\n    }\n    /**\n     * Gets a value.\n     * @param {string} key Key name.\n     * @return {*} Value.\n     * @api\n     */\n    BaseObject.prototype.get = function (key) {\n        var value;\n        if (this.values_ && this.values_.hasOwnProperty(key)) {\n            value = this.values_[key];\n        }\n        return value;\n    };\n    /**\n     * Get a list of object property names.\n     * @return {Array<string>} List of property names.\n     * @api\n     */\n    BaseObject.prototype.getKeys = function () {\n        return (this.values_ && Object.keys(this.values_)) || [];\n    };\n    /**\n     * Get an object of all property names and values.\n     * @return {Object<string, *>} Object.\n     * @api\n     */\n    BaseObject.prototype.getProperties = function () {\n        return (this.values_ && assign({}, this.values_)) || {};\n    };\n    /**\n     * @return {boolean} The object has properties.\n     */\n    BaseObject.prototype.hasProperties = function () {\n        return !!this.values_;\n    };\n    /**\n     * @param {string} key Key name.\n     * @param {*} oldValue Old value.\n     */\n    BaseObject.prototype.notify = function (key, oldValue) {\n        var eventType;\n        eventType = \"change:\".concat(key);\n        if (this.hasListener(eventType)) {\n            this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n        }\n        eventType = ObjectEventType.PROPERTYCHANGE;\n        if (this.hasListener(eventType)) {\n            this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n        }\n    };\n    /**\n     * @param {string} key Key name.\n     * @param {import(\"./events.js\").Listener} listener Listener.\n     */\n    BaseObject.prototype.addChangeListener = function (key, listener) {\n        this.addEventListener(\"change:\".concat(key), listener);\n    };\n    /**\n     * @param {string} key Key name.\n     * @param {import(\"./events.js\").Listener} listener Listener.\n     */\n    BaseObject.prototype.removeChangeListener = function (key, listener) {\n        this.removeEventListener(\"change:\".concat(key), listener);\n    };\n    /**\n     * Sets a value.\n     * @param {string} key Key name.\n     * @param {*} value Value.\n     * @param {boolean} [opt_silent] Update without triggering an event.\n     * @api\n     */\n    BaseObject.prototype.set = function (key, value, opt_silent) {\n        var values = this.values_ || (this.values_ = {});\n        if (opt_silent) {\n            values[key] = value;\n        }\n        else {\n            var oldValue = values[key];\n            values[key] = value;\n            if (oldValue !== value) {\n                this.notify(key, oldValue);\n            }\n        }\n    };\n    /**\n     * Sets a collection of key-value pairs.  Note that this changes any existing\n     * properties and adds new ones (it does not remove any existing properties).\n     * @param {Object<string, *>} values Values.\n     * @param {boolean} [opt_silent] Update without triggering an event.\n     * @api\n     */\n    BaseObject.prototype.setProperties = function (values, opt_silent) {\n        for (var key in values) {\n            this.set(key, values[key], opt_silent);\n        }\n    };\n    /**\n     * Apply any properties from another object without triggering events.\n     * @param {BaseObject} source The source object.\n     * @protected\n     */\n    BaseObject.prototype.applyProperties = function (source) {\n        if (!source.values_) {\n            return;\n        }\n        assign(this.values_ || (this.values_ = {}), source.values_);\n    };\n    /**\n     * Unsets a property.\n     * @param {string} key Key name.\n     * @param {boolean} [opt_silent] Unset without triggering an event.\n     * @api\n     */\n    BaseObject.prototype.unset = function (key, opt_silent) {\n        if (this.values_ && key in this.values_) {\n            var oldValue = this.values_[key];\n            delete this.values_[key];\n            if (isEmpty(this.values_)) {\n                this.values_ = null;\n            }\n            if (!opt_silent) {\n                this.notify(key, oldValue);\n            }\n        }\n    };\n    return BaseObject;\n}(Observable));\nexport default BaseObject;\n//# sourceMappingURL=Object.js.map","/**\n * @module ol/ObjectEventType\n */\n/**\n * @enum {string}\n */\nexport default {\n    /**\n     * Triggered when a property is changed.\n     * @event module:ol/Object.ObjectEvent#propertychange\n     * @api\n     */\n    PROPERTYCHANGE: 'propertychange',\n};\n/**\n * @typedef {'propertychange'} Types\n */\n//# sourceMappingURL=ObjectEventType.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/Observable\n */\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\nimport { listen, listenOnce, unlistenByKey } from './events.js';\n/***\n * @template {string} Type\n * @template {Event|import(\"./events/Event.js\").default} EventClass\n * @template Return\n * @typedef {(type: Type, listener: (event: EventClass) => ?) => Return} OnSignature\n */\n/***\n * @template {string} Type\n * @template Return\n * @typedef {(type: Type[], listener: (event: Event|import(\"./events/Event\").default) => ?) => Return extends void ? void : Return[]} CombinedOnSignature\n */\n/**\n * @typedef {'change'|'error'} EventTypes\n */\n/***\n * @template Return\n * @typedef {OnSignature<EventTypes, import(\"./events/Event.js\").default, Return> & CombinedOnSignature<EventTypes, Return>} ObservableOnSignature\n */\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * An event target providing convenient methods for listener registration\n * and unregistration. A generic `change` event is always available through\n * {@link module:ol/Observable~Observable#changed}.\n *\n * @fires import(\"./events/Event.js\").default\n * @api\n */\nvar Observable = /** @class */ (function (_super) {\n    __extends(Observable, _super);\n    function Observable() {\n        var _this = _super.call(this) || this;\n        _this.on =\n            /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */ (_this.onInternal);\n        _this.once =\n            /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */ (_this.onceInternal);\n        _this.un = /** @type {ObservableOnSignature<void>} */ (_this.unInternal);\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.revision_ = 0;\n        return _this;\n    }\n    /**\n     * Increases the revision counter and dispatches a 'change' event.\n     * @api\n     */\n    Observable.prototype.changed = function () {\n        ++this.revision_;\n        this.dispatchEvent(EventType.CHANGE);\n    };\n    /**\n     * Get the version number for this object.  Each time the object is modified,\n     * its version number will be incremented.\n     * @return {number} Revision.\n     * @api\n     */\n    Observable.prototype.getRevision = function () {\n        return this.revision_;\n    };\n    /**\n     * @param {string|Array<string>} type Type.\n     * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n     * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n     * @protected\n     */\n    Observable.prototype.onInternal = function (type, listener) {\n        if (Array.isArray(type)) {\n            var len = type.length;\n            var keys = new Array(len);\n            for (var i = 0; i < len; ++i) {\n                keys[i] = listen(this, type[i], listener);\n            }\n            return keys;\n        }\n        else {\n            return listen(this, /** @type {string} */ (type), listener);\n        }\n    };\n    /**\n     * @param {string|Array<string>} type Type.\n     * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n     * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n     * @protected\n     */\n    Observable.prototype.onceInternal = function (type, listener) {\n        var key;\n        if (Array.isArray(type)) {\n            var len = type.length;\n            key = new Array(len);\n            for (var i = 0; i < len; ++i) {\n                key[i] = listenOnce(this, type[i], listener);\n            }\n        }\n        else {\n            key = listenOnce(this, /** @type {string} */ (type), listener);\n        }\n        /** @type {Object} */ (listener).ol_key = key;\n        return key;\n    };\n    /**\n     * Unlisten for a certain type of event.\n     * @param {string|Array<string>} type Type.\n     * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n     * @protected\n     */\n    Observable.prototype.unInternal = function (type, listener) {\n        var key = /** @type {Object} */ (listener).ol_key;\n        if (key) {\n            unByKey(key);\n        }\n        else if (Array.isArray(type)) {\n            for (var i = 0, ii = type.length; i < ii; ++i) {\n                this.removeEventListener(type[i], listener);\n            }\n        }\n        else {\n            this.removeEventListener(type, listener);\n        }\n    };\n    return Observable;\n}(EventTarget));\n/**\n * Listen for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\nObservable.prototype.on;\n/**\n * Listen once for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\nObservable.prototype.once;\n/**\n * Unlisten for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @api\n */\nObservable.prototype.un;\n/**\n * Removes an event listener using the key returned by `on()` or `once()`.\n * @param {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} key The key returned by `on()`\n *     or `once()` (or an array of keys).\n * @api\n */\nexport function unByKey(key) {\n    if (Array.isArray(key)) {\n        for (var i = 0, ii = key.length; i < ii; ++i) {\n            unlistenByKey(key[i]);\n        }\n    }\n    else {\n        unlistenByKey(/** @type {import(\"./events.js\").EventsKey} */ (key));\n    }\n}\nexport default Observable;\n//# sourceMappingURL=Observable.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/Tile\n */\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\nimport TileState from './TileState.js';\nimport { abstract } from './util.js';\nimport { easeIn } from './easing.js';\n/**\n * A function that takes an {@link module:ol/Tile~Tile} for the tile and a\n * `{string}` for the url as arguments. The default is\n * ```js\n * source.setTileLoadFunction(function(tile, src) {\n *   tile.getImage().src = src;\n * });\n * ```\n * For more fine grained control, the load function can use fetch or XMLHttpRequest and involve\n * error handling:\n *\n * ```js\n * import TileState from 'ol/TileState';\n *\n * source.setTileLoadFunction(function(tile, src) {\n *   var xhr = new XMLHttpRequest();\n *   xhr.responseType = 'blob';\n *   xhr.addEventListener('loadend', function (evt) {\n *     var data = this.response;\n *     if (data !== undefined) {\n *       tile.getImage().src = URL.createObjectURL(data);\n *     } else {\n *       tile.setState(TileState.ERROR);\n *     }\n *   });\n *   xhr.addEventListener('error', function () {\n *     tile.setState(TileState.ERROR);\n *   });\n *   xhr.open('GET', src);\n *   xhr.send();\n * });\n * ```\n *\n * @typedef {function(Tile, string): void} LoadFunction\n * @api\n */\n/**\n * {@link module:ol/source/Tile~TileSource} sources use a function of this type to get\n * the url that provides a tile for a given tile coordinate.\n *\n * This function takes an {@link module:ol/tilecoord~TileCoord} for the tile\n * coordinate, a `{number}` representing the pixel ratio and a\n * {@link module:ol/proj/Projection~Projection} for the projection  as arguments\n * and returns a `{string}` representing the tile URL, or undefined if no tile\n * should be requested for the passed tile coordinate.\n *\n * @typedef {function(import(\"./tilecoord.js\").TileCoord, number,\n *           import(\"./proj/Projection.js\").default): (string|undefined)} UrlFunction\n * @api\n */\n/**\n * @typedef {Object} Options\n * @property {number} [transition=250] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n * @api\n */\n/**\n * @classdesc\n * Base class for tiles.\n *\n * @abstract\n */\nvar Tile = /** @class */ (function (_super) {\n    __extends(Tile, _super);\n    /**\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @param {import(\"./TileState.js\").default} state State.\n     * @param {Options} [opt_options] Tile options.\n     */\n    function Tile(tileCoord, state, opt_options) {\n        var _this = _super.call(this) || this;\n        var options = opt_options ? opt_options : {};\n        /**\n         * @type {import(\"./tilecoord.js\").TileCoord}\n         */\n        _this.tileCoord = tileCoord;\n        /**\n         * @protected\n         * @type {import(\"./TileState.js\").default}\n         */\n        _this.state = state;\n        /**\n         * An \"interim\" tile for this tile. The interim tile may be used while this\n         * one is loading, for \"smooth\" transitions when changing params/dimensions\n         * on the source.\n         * @type {Tile}\n         */\n        _this.interimTile = null;\n        /**\n         * A key assigned to the tile. This is used by the tile source to determine\n         * if this tile can effectively be used, or if a new tile should be created\n         * and this one be used as an interim tile for this new tile.\n         * @type {string}\n         */\n        _this.key = '';\n        /**\n         * The duration for the opacity transition.\n         * @type {number}\n         */\n        _this.transition_ =\n            options.transition === undefined ? 250 : options.transition;\n        /**\n         * Lookup of start times for rendering transitions.  If the start time is\n         * equal to -1, the transition is complete.\n         * @type {Object<string, number>}\n         */\n        _this.transitionStarts_ = {};\n        /**\n         * @type {boolean}\n         */\n        _this.interpolate = !!options.interpolate;\n        return _this;\n    }\n    /**\n     * @protected\n     */\n    Tile.prototype.changed = function () {\n        this.dispatchEvent(EventType.CHANGE);\n    };\n    /**\n     * Called by the tile cache when the tile is removed from the cache due to expiry\n     */\n    Tile.prototype.release = function () { };\n    /**\n     * @return {string} Key.\n     */\n    Tile.prototype.getKey = function () {\n        return this.key + '/' + this.tileCoord;\n    };\n    /**\n     * Get the interim tile most suitable for rendering using the chain of interim\n     * tiles. This corresponds to the  most recent tile that has been loaded, if no\n     * such tile exists, the original tile is returned.\n     * @return {!Tile} Best tile for rendering.\n     */\n    Tile.prototype.getInterimTile = function () {\n        if (!this.interimTile) {\n            //empty chain\n            return this;\n        }\n        var tile = this.interimTile;\n        // find the first loaded tile and return it. Since the chain is sorted in\n        // decreasing order of creation time, there is no need to search the remainder\n        // of the list (all those tiles correspond to older requests and will be\n        // cleaned up by refreshInterimChain)\n        do {\n            if (tile.getState() == TileState.LOADED) {\n                // Show tile immediately instead of fading it in after loading, because\n                // the interim tile is in place already\n                this.transition_ = 0;\n                return tile;\n            }\n            tile = tile.interimTile;\n        } while (tile);\n        // we can not find a better tile\n        return this;\n    };\n    /**\n     * Goes through the chain of interim tiles and discards sections of the chain\n     * that are no longer relevant.\n     */\n    Tile.prototype.refreshInterimChain = function () {\n        if (!this.interimTile) {\n            return;\n        }\n        var tile = this.interimTile;\n        /**\n         * @type {Tile}\n         */\n        var prev = this;\n        do {\n            if (tile.getState() == TileState.LOADED) {\n                //we have a loaded tile, we can discard the rest of the list\n                //we would could abort any LOADING tile request\n                //older than this tile (i.e. any LOADING tile following this entry in the chain)\n                tile.interimTile = null;\n                break;\n            }\n            else if (tile.getState() == TileState.LOADING) {\n                //keep this LOADING tile any loaded tiles later in the chain are\n                //older than this tile, so we're still interested in the request\n                prev = tile;\n            }\n            else if (tile.getState() == TileState.IDLE) {\n                //the head of the list is the most current tile, we don't need\n                //to start any other requests for this chain\n                prev.interimTile = tile.interimTile;\n            }\n            else {\n                prev = tile;\n            }\n            tile = prev.interimTile;\n        } while (tile);\n    };\n    /**\n     * Get the tile coordinate for this tile.\n     * @return {import(\"./tilecoord.js\").TileCoord} The tile coordinate.\n     * @api\n     */\n    Tile.prototype.getTileCoord = function () {\n        return this.tileCoord;\n    };\n    /**\n     * @return {import(\"./TileState.js\").default} State.\n     */\n    Tile.prototype.getState = function () {\n        return this.state;\n    };\n    /**\n     * Sets the state of this tile. If you write your own {@link module:ol/Tile~LoadFunction tileLoadFunction} ,\n     * it is important to set the state correctly to {@link module:ol/TileState~ERROR}\n     * when the tile cannot be loaded. Otherwise the tile cannot be removed from\n     * the tile queue and will block other requests.\n     * @param {import(\"./TileState.js\").default} state State.\n     * @api\n     */\n    Tile.prototype.setState = function (state) {\n        if (this.state !== TileState.ERROR && this.state > state) {\n            throw new Error('Tile load sequence violation');\n        }\n        this.state = state;\n        this.changed();\n    };\n    /**\n     * Load the image or retry if loading previously failed.\n     * Loading is taken care of by the tile queue, and calling this method is\n     * only needed for preloading or for reloading in case of an error.\n     * @abstract\n     * @api\n     */\n    Tile.prototype.load = function () {\n        abstract();\n    };\n    /**\n     * Get the alpha value for rendering.\n     * @param {string} id An id for the renderer.\n     * @param {number} time The render frame time.\n     * @return {number} A number between 0 and 1.\n     */\n    Tile.prototype.getAlpha = function (id, time) {\n        if (!this.transition_) {\n            return 1;\n        }\n        var start = this.transitionStarts_[id];\n        if (!start) {\n            start = time;\n            this.transitionStarts_[id] = start;\n        }\n        else if (start === -1) {\n            return 1;\n        }\n        var delta = time - start + 1000 / 60; // avoid rendering at 0\n        if (delta >= this.transition_) {\n            return 1;\n        }\n        return easeIn(delta / this.transition_);\n    };\n    /**\n     * Determine if a tile is in an alpha transition.  A tile is considered in\n     * transition if tile.getAlpha() has not yet been called or has been called\n     * and returned 1.\n     * @param {string} id An id for the renderer.\n     * @return {boolean} The tile is in transition.\n     */\n    Tile.prototype.inTransition = function (id) {\n        if (!this.transition_) {\n            return false;\n        }\n        return this.transitionStarts_[id] !== -1;\n    };\n    /**\n     * Mark a transition as complete.\n     * @param {string} id An id for the renderer.\n     */\n    Tile.prototype.endTransition = function (id) {\n        if (this.transition_) {\n            this.transitionStarts_[id] = -1;\n        }\n    };\n    return Tile;\n}(EventTarget));\nexport default Tile;\n//# sourceMappingURL=Tile.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/TileCache\n */\nimport LRUCache from './structs/LRUCache.js';\nimport { fromKey, getKey } from './tilecoord.js';\nvar TileCache = /** @class */ (function (_super) {\n    __extends(TileCache, _super);\n    function TileCache() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {!Object<string, boolean>} usedTiles Used tiles.\n     */\n    TileCache.prototype.expireCache = function (usedTiles) {\n        while (this.canExpireCache()) {\n            var tile = this.peekLast();\n            if (tile.getKey() in usedTiles) {\n                break;\n            }\n            else {\n                this.pop().release();\n            }\n        }\n    };\n    /**\n     * Prune all tiles from the cache that don't have the same z as the newest tile.\n     */\n    TileCache.prototype.pruneExceptNewestZ = function () {\n        if (this.getCount() === 0) {\n            return;\n        }\n        var key = this.peekFirstKey();\n        var tileCoord = fromKey(key);\n        var z = tileCoord[0];\n        this.forEach(function (tile) {\n            if (tile.tileCoord[0] !== z) {\n                this.remove(getKey(tile.tileCoord));\n                tile.release();\n            }\n        }.bind(this));\n    };\n    return TileCache;\n}(LRUCache));\nexport default TileCache;\n//# sourceMappingURL=TileCache.js.map","/**\n * @module ol/TileRange\n */\n/**\n * A representation of a contiguous block of tiles.  A tile range is specified\n * by its min/max tile coordinates and is inclusive of coordinates.\n */\nvar TileRange = /** @class */ (function () {\n    /**\n     * @param {number} minX Minimum X.\n     * @param {number} maxX Maximum X.\n     * @param {number} minY Minimum Y.\n     * @param {number} maxY Maximum Y.\n     */\n    function TileRange(minX, maxX, minY, maxY) {\n        /**\n         * @type {number}\n         */\n        this.minX = minX;\n        /**\n         * @type {number}\n         */\n        this.maxX = maxX;\n        /**\n         * @type {number}\n         */\n        this.minY = minY;\n        /**\n         * @type {number}\n         */\n        this.maxY = maxY;\n    }\n    /**\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @return {boolean} Contains tile coordinate.\n     */\n    TileRange.prototype.contains = function (tileCoord) {\n        return this.containsXY(tileCoord[1], tileCoord[2]);\n    };\n    /**\n     * @param {TileRange} tileRange Tile range.\n     * @return {boolean} Contains.\n     */\n    TileRange.prototype.containsTileRange = function (tileRange) {\n        return (this.minX <= tileRange.minX &&\n            tileRange.maxX <= this.maxX &&\n            this.minY <= tileRange.minY &&\n            tileRange.maxY <= this.maxY);\n    };\n    /**\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @return {boolean} Contains coordinate.\n     */\n    TileRange.prototype.containsXY = function (x, y) {\n        return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n    };\n    /**\n     * @param {TileRange} tileRange Tile range.\n     * @return {boolean} Equals.\n     */\n    TileRange.prototype.equals = function (tileRange) {\n        return (this.minX == tileRange.minX &&\n            this.minY == tileRange.minY &&\n            this.maxX == tileRange.maxX &&\n            this.maxY == tileRange.maxY);\n    };\n    /**\n     * @param {TileRange} tileRange Tile range.\n     */\n    TileRange.prototype.extend = function (tileRange) {\n        if (tileRange.minX < this.minX) {\n            this.minX = tileRange.minX;\n        }\n        if (tileRange.maxX > this.maxX) {\n            this.maxX = tileRange.maxX;\n        }\n        if (tileRange.minY < this.minY) {\n            this.minY = tileRange.minY;\n        }\n        if (tileRange.maxY > this.maxY) {\n            this.maxY = tileRange.maxY;\n        }\n    };\n    /**\n     * @return {number} Height.\n     */\n    TileRange.prototype.getHeight = function () {\n        return this.maxY - this.minY + 1;\n    };\n    /**\n     * @return {import(\"./size.js\").Size} Size.\n     */\n    TileRange.prototype.getSize = function () {\n        return [this.getWidth(), this.getHeight()];\n    };\n    /**\n     * @return {number} Width.\n     */\n    TileRange.prototype.getWidth = function () {\n        return this.maxX - this.minX + 1;\n    };\n    /**\n     * @param {TileRange} tileRange Tile range.\n     * @return {boolean} Intersects.\n     */\n    TileRange.prototype.intersects = function (tileRange) {\n        return (this.minX <= tileRange.maxX &&\n            this.maxX >= tileRange.minX &&\n            this.minY <= tileRange.maxY &&\n            this.maxY >= tileRange.minY);\n    };\n    return TileRange;\n}());\n/**\n * @param {number} minX Minimum X.\n * @param {number} maxX Maximum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxY Maximum Y.\n * @param {TileRange} [tileRange] TileRange.\n * @return {TileRange} Tile range.\n */\nexport function createOrUpdate(minX, maxX, minY, maxY, tileRange) {\n    if (tileRange !== undefined) {\n        tileRange.minX = minX;\n        tileRange.maxX = maxX;\n        tileRange.minY = minY;\n        tileRange.maxY = maxY;\n        return tileRange;\n    }\n    else {\n        return new TileRange(minX, maxX, minY, maxY);\n    }\n}\nexport default TileRange;\n//# sourceMappingURL=TileRange.js.map","/**\n * @module ol/TileState\n */\n/**\n * @enum {number}\n */\nexport default {\n    IDLE: 0,\n    LOADING: 1,\n    LOADED: 2,\n    /**\n     * Indicates that tile loading failed\n     * @type {number}\n     */\n    ERROR: 3,\n    EMPTY: 4,\n};\n//# sourceMappingURL=TileState.js.map","/**\n * @module ol/ViewProperty\n */\n/**\n * @enum {string}\n */\nexport default {\n    CENTER: 'center',\n    RESOLUTION: 'resolution',\n    ROTATION: 'rotation',\n};\n//# sourceMappingURL=ViewProperty.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/View\n */\nimport BaseObject from './Object.js';\nimport Units from './proj/Units.js';\nimport ViewHint from './ViewHint.js';\nimport ViewProperty from './ViewProperty.js';\nimport { DEFAULT_TILE_SIZE } from './tilegrid/common.js';\nimport { METERS_PER_UNIT, createProjection, disableCoordinateWarning, fromUserCoordinate, fromUserExtent, getUserProjection, toUserCoordinate, toUserExtent, } from './proj.js';\nimport { VOID } from './functions.js';\nimport { add as addCoordinate, equals as coordinatesEqual, equals, rotate as rotateCoordinate, } from './coordinate.js';\nimport { assert } from './asserts.js';\nimport { assign } from './obj.js';\nimport { none as centerNone, createExtent } from './centerconstraint.js';\nimport { clamp, modulo } from './math.js';\nimport { createMinMaxResolution, createSnapToPower, createSnapToResolutions, } from './resolutionconstraint.js';\nimport { createSnapToN, createSnapToZero, disable, none as rotationNone, } from './rotationconstraint.js';\nimport { easeOut, inAndOut } from './easing.js';\nimport { getCenter, getForViewAndSize, getHeight, getWidth, isEmpty, } from './extent.js';\nimport { linearFindNearest } from './array.js';\nimport { fromExtent as polygonFromExtent } from './geom/Polygon.js';\n/**\n * An animation configuration\n *\n * @typedef {Object} Animation\n * @property {import(\"./coordinate.js\").Coordinate} [sourceCenter] Source center.\n * @property {import(\"./coordinate.js\").Coordinate} [targetCenter] Target center.\n * @property {number} [sourceResolution] Source resolution.\n * @property {number} [targetResolution] Target resolution.\n * @property {number} [sourceRotation] Source rotation.\n * @property {number} [targetRotation] Target rotation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Anchor.\n * @property {number} start Start.\n * @property {number} duration Duration.\n * @property {boolean} complete Complete.\n * @property {function(number):number} easing Easing.\n * @property {function(boolean):void} callback Callback.\n */\n/**\n * @typedef {Object} Constraints\n * @property {import(\"./centerconstraint.js\").Type} center Center.\n * @property {import(\"./resolutionconstraint.js\").Type} resolution Resolution.\n * @property {import(\"./rotationconstraint.js\").Type} rotation Rotation.\n */\n/**\n * @typedef {Object} FitOptions\n * @property {import(\"./size.js\").Size} [size] The size in pixels of the box to fit\n * the extent into. Default is the current size of the first map in the DOM that\n * uses this view, or `[100, 100]` if no such map is found.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be\n * cleared inside the view. Values in the array are top, right, bottom and left\n * padding.\n * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,\n * get the nearest extent instead of the closest that actually fits the view.\n * @property {number} [minResolution=0] Minimum resolution that we zoom to.\n * @property {number} [maxZoom] Maximum zoom level that we zoom to. If\n * `minResolution` is given, this property is ignored.\n * @property {number} [duration] The duration of the animation in milliseconds.\n * By default, there is no animation to the target extent.\n * @property {function(number):number} [easing] The easing function used during\n * the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n * @property {function(boolean):void} [callback] Function called when the view is in\n * its final position. The callback will be called with `true` if the animation\n * series completed on its own or `false` if it was cancelled.\n */\n/**\n * @typedef {Object} ViewOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The initial center for\n * the view. If a user projection is not set, the coordinate system for the center is\n * specified with the `projection` option. Layer sources will not be fetched if this\n * is not set, but the center can be set later with {@link #setCenter}.\n * @property {boolean|number} [constrainRotation=true] Rotation constraint.\n * `false` means no constraint. `true` means no constraint, but snap to zero\n * near zero. A number constrains the rotation to that number of values. For\n * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.\n * @property {boolean} [enableRotation=true] Enable rotation.\n * If `false`, a rotation constraint that always sets the rotation to zero is\n * used. The `constrainRotation` option has no effect if `enableRotation` is\n * `false`.\n * @property {import(\"./extent.js\").Extent} [extent] The extent that constrains the\n * view, in other words, nothing outside of this extent can be visible on the map.\n * @property {boolean} [constrainOnlyCenter=false] If true, the extent\n * constraint will only apply to the view center and not the whole extent.\n * @property {boolean} [smoothExtentConstraint=true] If true, the extent\n * constraint will be applied smoothly, i.e. allow the view to go slightly outside\n * of the given `extent`.\n * @property {number} [maxResolution] The maximum resolution used to determine\n * the resolution constraint. It is used together with `minResolution` (or\n * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way\n * that the projection's validity extent fits in a 256x256 px tile. If the\n * projection is Spherical Mercator (the default) then `maxResolution` defaults\n * to `40075016.68557849 / 256 = 156543.03392804097`.\n * @property {number} [minResolution] The minimum resolution used to determine\n * the resolution constraint.  It is used together with `maxResolution` (or\n * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29\n * zoom levels (with a factor of 2). If the projection is Spherical Mercator\n * (the default) then `minResolution` defaults to\n * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.\n * @property {number} [maxZoom=28] The maximum zoom level used to determine the\n * resolution constraint. It is used together with `minZoom` (or\n * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also\n * provided, it is given precedence over `maxZoom`.\n * @property {number} [minZoom=0] The minimum zoom level used to determine the\n * resolution constraint. It is used together with `maxZoom` (or\n * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also\n * provided, it is given precedence over `minZoom`.\n * @property {boolean} [multiWorld=false] If `false` the view is constrained so\n * only one world is visible, and you cannot pan off the edge.  If `true` the map\n * may show multiple worlds at low zoom levels.  Only used if the `projection` is\n * global.  Note that if `extent` is also provided it is given precedence.\n * @property {boolean} [constrainResolution=false] If true, the view will always\n * animate to the closest zoom level after an interaction; false means\n * intermediary zoom levels are allowed.\n * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution\n * min/max values will be applied smoothly, i. e. allow the view to exceed slightly\n * the given resolution or zoom bounds.\n * @property {boolean} [showFullExtent=false] Allow the view to be zoomed out to\n * show the full configured extent. By default, when a view is configured with an\n * extent, users will not be able to zoom out so the viewport exceeds the extent in\n * either dimension. This means the full extent may not be visible if the viewport\n * is taller or wider than the aspect ratio of the configured extent. If\n * showFullExtent is true, the user will be able to zoom out so that the viewport\n * exceeds the height or width of the configured extent, but not both, allowing the\n * full extent to be shown.\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857'] The\n * projection. The default is Spherical Mercator.\n * @property {number} [resolution] The initial resolution for the view. The\n * units are `projection` units per pixel (e.g. meters per pixel). An\n * alternative to setting this is to set `zoom`. Layer sources will not be\n * fetched if neither this nor `zoom` are defined, but they can be set later\n * with {@link #setZoom} or {@link #setResolution}.\n * @property {Array<number>} [resolutions] Resolutions that determine the\n * zoom levels if specified. The index in the array corresponds to the zoom level,\n * therefore the resolution values have to be in descending order. It also constrains\n * the resolution by the minimum and maximum value. If set the `maxResolution`,\n * `minResolution`, `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.\n * @property {number} [rotation=0] The initial rotation for the view in radians\n * (positive rotation clockwise, 0 means North).\n * @property {number} [zoom] Only used if `resolution` is not defined. Zoom\n * level used to calculate the initial resolution for the view.\n * @property {number} [zoomFactor=2] The zoom factor used to compute the\n * corresponding resolution.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in css pixels).\n * If the map viewport is partially covered with other content (overlays) along\n * its edges, this setting allows to shift the center of the viewport away from\n * that content. The order of the values is top, right, bottom, left.\n */\n/**\n * @typedef {Object} AnimationOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The center of the view at the end of\n * the animation.\n * @property {number} [zoom] The zoom level of the view at the end of the\n * animation. This takes precedence over `resolution`.\n * @property {number} [resolution] The resolution of the view at the end\n * of the animation.  If `zoom` is also provided, this option will be ignored.\n * @property {number} [rotation] The rotation of the view at the end of\n * the animation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Optional anchor to remain fixed\n * during a rotation or resolution animation.\n * @property {number} [duration=1000] The duration of the animation in milliseconds.\n * @property {function(number):number} [easing] The easing function used\n * during the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n */\n/**\n * @typedef {Object} State\n * @property {import(\"./coordinate.js\").Coordinate} center Center.\n * @property {import(\"./proj/Projection.js\").default} projection Projection.\n * @property {number} resolution Resolution.\n * @property {import(\"./coordinate.js\").Coordinate} [nextCenter] The next center during an animation series.\n * @property {number} [nextResolution] The next resolution during an animation series.\n * @property {number} [nextRotation] The next rotation during an animation series.\n * @property {number} rotation Rotation.\n * @property {number} zoom Zoom.\n */\n/**\n * Default min zoom level for the map view.\n * @type {number}\n */\nvar DEFAULT_MIN_ZOOM = 0;\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:center'|'change:resolution'|'change:rotation'} ViewObjectEventTypes\n */\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<ViewObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|ViewObjectEventTypes, Return>} ViewOnSignature\n */\n/**\n * @classdesc\n * A View object represents a simple 2D view of the map.\n *\n * This is the object to act upon to change the center, resolution,\n * and rotation of the map.\n *\n * A View has a `projection`. The projection determines the\n * coordinate system of the center, and its units determine the units of the\n * resolution (projection units per pixel). The default projection is\n * Web Mercator (EPSG:3857).\n *\n * ### The view states\n *\n * A View is determined by three states: `center`, `resolution`,\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\n * `getCenter` and `setCenter` for the `center` state.\n *\n * The `zoom` state is actually not saved on the view: all computations\n * internally use the `resolution` state. Still, the `setZoom` and `getZoom`\n * methods are available, as well as `getResolutionForZoom` and\n * `getZoomForResolution` to switch from one system to the other.\n *\n * ### The constraints\n *\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\n * states of the view, but any constraint defined in the constructor will\n * be applied along the way.\n *\n * A View object can have a *resolution constraint*, a *rotation constraint*\n * and a *center constraint*.\n *\n * The *resolution constraint* typically restricts min/max values and\n * snaps to specific resolutions. It is determined by the following\n * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.\n * If `resolutions` is set, the other three options are ignored. See\n * documentation for each option for more information. By default, the view\n * only has a min/max restriction and allow intermediary zoom levels when\n * pinch-zooming for example.\n *\n * The *rotation constraint* snaps to specific angles. It is determined\n * by the following options: `enableRotation` and `constrainRotation`.\n * By default rotation is allowed and its value is snapped to zero when approaching the\n * horizontal.\n *\n * The *center constraint* is determined by the `extent` option. By\n * default the view center is not constrained at all.\n *\n * ### Changing the view state\n *\n * It is important to note that `setZoom`, `setResolution`, `setCenter` and\n * `setRotation` are subject to the above mentioned constraints. As such, it\n * may sometimes not be possible to know in advance the resulting state of the\n * View. For example, calling `setResolution(10)` does not guarantee that\n * `getResolution()` will return `10`.\n *\n * A consequence of this is that, when applying a delta on the view state, one\n * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`\n * rather than the corresponding setters. This will let view do its internal\n * computations. Besides, the `adjust*` methods also take an `opt_anchor`\n * argument which allows specifying an origin for the transformation.\n *\n * ### Interacting with the view\n *\n * View constraints are usually only applied when the view is *at rest*, meaning that\n * no interaction or animation is ongoing. As such, if the user puts the view in a\n * state that is not equivalent to a constrained one (e.g. rotating the view when\n * the snap angle is 0), an animation will be triggered at the interaction end to\n * put back the view to a stable state;\n *\n * @api\n */\nvar View = /** @class */ (function (_super) {\n    __extends(View, _super);\n    /**\n     * @param {ViewOptions} [opt_options] View options.\n     */\n    function View(opt_options) {\n        var _this = _super.call(this) || this;\n        /***\n         * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n         */\n        _this.on;\n        /***\n         * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n         */\n        _this.once;\n        /***\n         * @type {ViewOnSignature<void>}\n         */\n        _this.un;\n        var options = assign({}, opt_options);\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        _this.hints_ = [0, 0];\n        /**\n         * @private\n         * @type {Array<Array<Animation>>}\n         */\n        _this.animations_ = [];\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        _this.updateAnimationKey_;\n        /**\n         * @private\n         * @const\n         * @type {import(\"./proj/Projection.js\").default}\n         */\n        _this.projection_ = createProjection(options.projection, 'EPSG:3857');\n        /**\n         * @private\n         * @type {import(\"./size.js\").Size}\n         */\n        _this.viewportSize_ = [100, 100];\n        /**\n         * @private\n         * @type {import(\"./coordinate.js\").Coordinate|undefined}\n         */\n        _this.targetCenter_ = null;\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        _this.targetResolution_;\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        _this.targetRotation_;\n        /**\n         * @private\n         * @type {import(\"./coordinate.js\").Coordinate}\n         */\n        _this.nextCenter_ = null;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.nextResolution_;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.nextRotation_;\n        /**\n         * @private\n         * @type {import(\"./coordinate.js\").Coordinate|undefined}\n         */\n        _this.cancelAnchor_ = undefined;\n        if (options.projection) {\n            disableCoordinateWarning();\n        }\n        if (options.center) {\n            options.center = fromUserCoordinate(options.center, _this.projection_);\n        }\n        if (options.extent) {\n            options.extent = fromUserExtent(options.extent, _this.projection_);\n        }\n        _this.applyOptions_(options);\n        return _this;\n    }\n    /**\n     * Set up the view with the given options.\n     * @param {ViewOptions} options View options.\n     */\n    View.prototype.applyOptions_ = function (options) {\n        var properties = assign({}, options);\n        for (var key in ViewProperty) {\n            delete properties[key];\n        }\n        this.setProperties(properties, true);\n        var resolutionConstraintInfo = createResolutionConstraint(options);\n        /**\n         * @private\n         * @type {number}\n         */\n        this.maxResolution_ = resolutionConstraintInfo.maxResolution;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.minResolution_ = resolutionConstraintInfo.minResolution;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\n        /**\n         * @private\n         * @type {Array<number>|undefined}\n         */\n        this.resolutions_ = options.resolutions;\n        /**\n         * @type {Array<number>|undefined}\n         * @private\n         */\n        this.padding_ = options.padding;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.minZoom_ = resolutionConstraintInfo.minZoom;\n        var centerConstraint = createCenterConstraint(options);\n        var resolutionConstraint = resolutionConstraintInfo.constraint;\n        var rotationConstraint = createRotationConstraint(options);\n        /**\n         * @private\n         * @type {Constraints}\n         */\n        this.constraints_ = {\n            center: centerConstraint,\n            resolution: resolutionConstraint,\n            rotation: rotationConstraint,\n        };\n        this.setRotation(options.rotation !== undefined ? options.rotation : 0);\n        this.setCenterInternal(options.center !== undefined ? options.center : null);\n        if (options.resolution !== undefined) {\n            this.setResolution(options.resolution);\n        }\n        else if (options.zoom !== undefined) {\n            this.setZoom(options.zoom);\n        }\n    };\n    Object.defineProperty(View.prototype, \"padding\", {\n        /**\n         * Padding (in css pixels).\n         * If the map viewport is partially covered with other content (overlays) along\n         * its edges, this setting allows to shift the center of the viewport away from that\n         * content. The order of the values in the array is top, right, bottom, left.\n         * The default is no padding, which is equivalent to `[0, 0, 0, 0]`.\n         * @type {Array<number>|undefined}\n         * @api\n         */\n        get: function () {\n            return this.padding_;\n        },\n        set: function (padding) {\n            var oldPadding = this.padding_;\n            this.padding_ = padding;\n            var center = this.getCenter();\n            if (center) {\n                var newPadding = padding || [0, 0, 0, 0];\n                oldPadding = oldPadding || [0, 0, 0, 0];\n                var resolution = this.getResolution();\n                var offsetX = (resolution / 2) *\n                    (newPadding[3] - oldPadding[3] + oldPadding[1] - newPadding[1]);\n                var offsetY = (resolution / 2) *\n                    (newPadding[0] - oldPadding[0] + oldPadding[2] - newPadding[2]);\n                this.setCenterInternal([center[0] + offsetX, center[1] - offsetY]);\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Get an updated version of the view options used to construct the view.  The\n     * current resolution (or zoom), center, and rotation are applied to any stored\n     * options.  The provided options can be used to apply new min/max zoom or\n     * resolution limits.\n     * @param {ViewOptions} newOptions New options to be applied.\n     * @return {ViewOptions} New options updated with the current view state.\n     */\n    View.prototype.getUpdatedOptions_ = function (newOptions) {\n        var options = this.getProperties();\n        // preserve resolution (or zoom)\n        if (options.resolution !== undefined) {\n            options.resolution = this.getResolution();\n        }\n        else {\n            options.zoom = this.getZoom();\n        }\n        // preserve center\n        options.center = this.getCenterInternal();\n        // preserve rotation\n        options.rotation = this.getRotation();\n        return assign({}, options, newOptions);\n    };\n    /**\n     * Animate the view.  The view's center, zoom (or resolution), and rotation\n     * can be animated for smooth transitions between view states.  For example,\n     * to animate the view to a new zoom level:\n     *\n     *     view.animate({zoom: view.getZoom() + 1});\n     *\n     * By default, the animation lasts one second and uses in-and-out easing.  You\n     * can customize this behavior by including `duration` (in milliseconds) and\n     * `easing` options (see {@link module:ol/easing}).\n     *\n     * To chain together multiple animations, call the method with multiple\n     * animation objects.  For example, to first zoom and then pan:\n     *\n     *     view.animate({zoom: 10}, {center: [0, 0]});\n     *\n     * If you provide a function as the last argument to the animate method, it\n     * will get called at the end of an animation series.  The callback will be\n     * called with `true` if the animation series completed on its own or `false`\n     * if it was cancelled.\n     *\n     * Animations are cancelled by user interactions (e.g. dragging the map) or by\n     * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\n     * (or another method that calls one of these).\n     *\n     * @param {...(AnimationOptions|function(boolean): void)} var_args Animation\n     *     options.  Multiple animations can be run in series by passing multiple\n     *     options objects.  To run multiple animations in parallel, call the method\n     *     multiple times.  An optional callback can be provided as a final\n     *     argument.  The callback will be called with a boolean indicating whether\n     *     the animation completed without being cancelled.\n     * @api\n     */\n    View.prototype.animate = function (var_args) {\n        if (this.isDef() && !this.getAnimating()) {\n            this.resolveConstraints(0);\n        }\n        var args = new Array(arguments.length);\n        for (var i = 0; i < args.length; ++i) {\n            var options = arguments[i];\n            if (options.center) {\n                options = assign({}, options);\n                options.center = fromUserCoordinate(options.center, this.getProjection());\n            }\n            if (options.anchor) {\n                options = assign({}, options);\n                options.anchor = fromUserCoordinate(options.anchor, this.getProjection());\n            }\n            args[i] = options;\n        }\n        this.animateInternal.apply(this, args);\n    };\n    /**\n     * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.\n     */\n    View.prototype.animateInternal = function (var_args) {\n        var animationCount = arguments.length;\n        var callback;\n        if (animationCount > 1 &&\n            typeof arguments[animationCount - 1] === 'function') {\n            callback = arguments[animationCount - 1];\n            --animationCount;\n        }\n        var i = 0;\n        for (; i < animationCount && !this.isDef(); ++i) {\n            // if view properties are not yet set, shortcut to the final state\n            var state = arguments[i];\n            if (state.center) {\n                this.setCenterInternal(state.center);\n            }\n            if (state.zoom !== undefined) {\n                this.setZoom(state.zoom);\n            }\n            else if (state.resolution) {\n                this.setResolution(state.resolution);\n            }\n            if (state.rotation !== undefined) {\n                this.setRotation(state.rotation);\n            }\n        }\n        if (i === animationCount) {\n            if (callback) {\n                animationCallback(callback, true);\n            }\n            return;\n        }\n        var start = Date.now();\n        var center = this.targetCenter_.slice();\n        var resolution = this.targetResolution_;\n        var rotation = this.targetRotation_;\n        var series = [];\n        for (; i < animationCount; ++i) {\n            var options = /** @type {AnimationOptions} */ (arguments[i]);\n            var animation = {\n                start: start,\n                complete: false,\n                anchor: options.anchor,\n                duration: options.duration !== undefined ? options.duration : 1000,\n                easing: options.easing || inAndOut,\n                callback: callback,\n            };\n            if (options.center) {\n                animation.sourceCenter = center;\n                animation.targetCenter = options.center.slice();\n                center = animation.targetCenter;\n            }\n            if (options.zoom !== undefined) {\n                animation.sourceResolution = resolution;\n                animation.targetResolution = this.getResolutionForZoom(options.zoom);\n                resolution = animation.targetResolution;\n            }\n            else if (options.resolution) {\n                animation.sourceResolution = resolution;\n                animation.targetResolution = options.resolution;\n                resolution = animation.targetResolution;\n            }\n            if (options.rotation !== undefined) {\n                animation.sourceRotation = rotation;\n                var delta = modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\n                animation.targetRotation = rotation + delta;\n                rotation = animation.targetRotation;\n            }\n            // check if animation is a no-op\n            if (isNoopAnimation(animation)) {\n                animation.complete = true;\n                // we still push it onto the series for callback handling\n            }\n            else {\n                start += animation.duration;\n            }\n            series.push(animation);\n        }\n        this.animations_.push(series);\n        this.setHint(ViewHint.ANIMATING, 1);\n        this.updateAnimations_();\n    };\n    /**\n     * Determine if the view is being animated.\n     * @return {boolean} The view is being animated.\n     * @api\n     */\n    View.prototype.getAnimating = function () {\n        return this.hints_[ViewHint.ANIMATING] > 0;\n    };\n    /**\n     * Determine if the user is interacting with the view, such as panning or zooming.\n     * @return {boolean} The view is being interacted with.\n     * @api\n     */\n    View.prototype.getInteracting = function () {\n        return this.hints_[ViewHint.INTERACTING] > 0;\n    };\n    /**\n     * Cancel any ongoing animations.\n     * @api\n     */\n    View.prototype.cancelAnimations = function () {\n        this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);\n        var anchor;\n        for (var i = 0, ii = this.animations_.length; i < ii; ++i) {\n            var series = this.animations_[i];\n            if (series[0].callback) {\n                animationCallback(series[0].callback, false);\n            }\n            if (!anchor) {\n                for (var j = 0, jj = series.length; j < jj; ++j) {\n                    var animation = series[j];\n                    if (!animation.complete) {\n                        anchor = animation.anchor;\n                        break;\n                    }\n                }\n            }\n        }\n        this.animations_.length = 0;\n        this.cancelAnchor_ = anchor;\n        this.nextCenter_ = null;\n        this.nextResolution_ = NaN;\n        this.nextRotation_ = NaN;\n    };\n    /**\n     * Update all animations.\n     */\n    View.prototype.updateAnimations_ = function () {\n        if (this.updateAnimationKey_ !== undefined) {\n            cancelAnimationFrame(this.updateAnimationKey_);\n            this.updateAnimationKey_ = undefined;\n        }\n        if (!this.getAnimating()) {\n            return;\n        }\n        var now = Date.now();\n        var more = false;\n        for (var i = this.animations_.length - 1; i >= 0; --i) {\n            var series = this.animations_[i];\n            var seriesComplete = true;\n            for (var j = 0, jj = series.length; j < jj; ++j) {\n                var animation = series[j];\n                if (animation.complete) {\n                    continue;\n                }\n                var elapsed = now - animation.start;\n                var fraction = animation.duration > 0 ? elapsed / animation.duration : 1;\n                if (fraction >= 1) {\n                    animation.complete = true;\n                    fraction = 1;\n                }\n                else {\n                    seriesComplete = false;\n                }\n                var progress = animation.easing(fraction);\n                if (animation.sourceCenter) {\n                    var x0 = animation.sourceCenter[0];\n                    var y0 = animation.sourceCenter[1];\n                    var x1 = animation.targetCenter[0];\n                    var y1 = animation.targetCenter[1];\n                    this.nextCenter_ = animation.targetCenter;\n                    var x = x0 + progress * (x1 - x0);\n                    var y = y0 + progress * (y1 - y0);\n                    this.targetCenter_ = [x, y];\n                }\n                if (animation.sourceResolution && animation.targetResolution) {\n                    var resolution = progress === 1\n                        ? animation.targetResolution\n                        : animation.sourceResolution +\n                            progress *\n                                (animation.targetResolution - animation.sourceResolution);\n                    if (animation.anchor) {\n                        var size = this.getViewportSize_(this.getRotation());\n                        var constrainedResolution = this.constraints_.resolution(resolution, 0, size, true);\n                        this.targetCenter_ = this.calculateCenterZoom(constrainedResolution, animation.anchor);\n                    }\n                    this.nextResolution_ = animation.targetResolution;\n                    this.targetResolution_ = resolution;\n                    this.applyTargetState_(true);\n                }\n                if (animation.sourceRotation !== undefined &&\n                    animation.targetRotation !== undefined) {\n                    var rotation = progress === 1\n                        ? modulo(animation.targetRotation + Math.PI, 2 * Math.PI) -\n                            Math.PI\n                        : animation.sourceRotation +\n                            progress *\n                                (animation.targetRotation - animation.sourceRotation);\n                    if (animation.anchor) {\n                        var constrainedRotation = this.constraints_.rotation(rotation, true);\n                        this.targetCenter_ = this.calculateCenterRotate(constrainedRotation, animation.anchor);\n                    }\n                    this.nextRotation_ = animation.targetRotation;\n                    this.targetRotation_ = rotation;\n                }\n                this.applyTargetState_(true);\n                more = true;\n                if (!animation.complete) {\n                    break;\n                }\n            }\n            if (seriesComplete) {\n                this.animations_[i] = null;\n                this.setHint(ViewHint.ANIMATING, -1);\n                this.nextCenter_ = null;\n                this.nextResolution_ = NaN;\n                this.nextRotation_ = NaN;\n                var callback = series[0].callback;\n                if (callback) {\n                    animationCallback(callback, true);\n                }\n            }\n        }\n        // prune completed series\n        this.animations_ = this.animations_.filter(Boolean);\n        if (more && this.updateAnimationKey_ === undefined) {\n            this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_.bind(this));\n        }\n    };\n    /**\n     * @param {number} rotation Target rotation.\n     * @param {import(\"./coordinate.js\").Coordinate} anchor Rotation anchor.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for rotation and anchor.\n     */\n    View.prototype.calculateCenterRotate = function (rotation, anchor) {\n        var center;\n        var currentCenter = this.getCenterInternal();\n        if (currentCenter !== undefined) {\n            center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];\n            rotateCoordinate(center, rotation - this.getRotation());\n            addCoordinate(center, anchor);\n        }\n        return center;\n    };\n    /**\n     * @param {number} resolution Target resolution.\n     * @param {import(\"./coordinate.js\").Coordinate} anchor Zoom anchor.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for resolution and anchor.\n     */\n    View.prototype.calculateCenterZoom = function (resolution, anchor) {\n        var center;\n        var currentCenter = this.getCenterInternal();\n        var currentResolution = this.getResolution();\n        if (currentCenter !== undefined && currentResolution !== undefined) {\n            var x = anchor[0] -\n                (resolution * (anchor[0] - currentCenter[0])) / currentResolution;\n            var y = anchor[1] -\n                (resolution * (anchor[1] - currentCenter[1])) / currentResolution;\n            center = [x, y];\n        }\n        return center;\n    };\n    /**\n     * Returns the current viewport size.\n     * @private\n     * @param {number} [opt_rotation] Take into account the rotation of the viewport when giving the size\n     * @return {import(\"./size.js\").Size} Viewport size or `[100, 100]` when no viewport is found.\n     */\n    View.prototype.getViewportSize_ = function (opt_rotation) {\n        var size = this.viewportSize_;\n        if (opt_rotation) {\n            var w = size[0];\n            var h = size[1];\n            return [\n                Math.abs(w * Math.cos(opt_rotation)) +\n                    Math.abs(h * Math.sin(opt_rotation)),\n                Math.abs(w * Math.sin(opt_rotation)) +\n                    Math.abs(h * Math.cos(opt_rotation)),\n            ];\n        }\n        else {\n            return size;\n        }\n    };\n    /**\n     * Stores the viewport size on the view. The viewport size is not read every time from the DOM\n     * to avoid performance hit and layout reflow.\n     * This should be done on map size change.\n     * Note: the constraints are not resolved during an animation to avoid stopping it\n     * @param {import(\"./size.js\").Size} [opt_size] Viewport size; if undefined, [100, 100] is assumed\n     */\n    View.prototype.setViewportSize = function (opt_size) {\n        this.viewportSize_ = Array.isArray(opt_size)\n            ? opt_size.slice()\n            : [100, 100];\n        if (!this.getAnimating()) {\n            this.resolveConstraints(0);\n        }\n    };\n    /**\n     * Get the view center.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n     * @observable\n     * @api\n     */\n    View.prototype.getCenter = function () {\n        var center = this.getCenterInternal();\n        if (!center) {\n            return center;\n        }\n        return toUserCoordinate(center, this.getProjection());\n    };\n    /**\n     * Get the view center without transforming to user projection.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n     */\n    View.prototype.getCenterInternal = function () {\n        return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (this.get(ViewProperty.CENTER));\n    };\n    /**\n     * @return {Constraints} Constraints.\n     */\n    View.prototype.getConstraints = function () {\n        return this.constraints_;\n    };\n    /**\n     * @return {boolean} Resolution constraint is set\n     */\n    View.prototype.getConstrainResolution = function () {\n        return this.get('constrainResolution');\n    };\n    /**\n     * @param {Array<number>} [opt_hints] Destination array.\n     * @return {Array<number>} Hint.\n     */\n    View.prototype.getHints = function (opt_hints) {\n        if (opt_hints !== undefined) {\n            opt_hints[0] = this.hints_[0];\n            opt_hints[1] = this.hints_[1];\n            return opt_hints;\n        }\n        else {\n            return this.hints_.slice();\n        }\n    };\n    /**\n     * Calculate the extent for the current view state and the passed size.\n     * The size is the pixel dimensions of the box into which the calculated extent\n     * should fit. In most cases you want to get the extent of the entire map,\n     * that is `map.getSize()`.\n     * @param {import(\"./size.js\").Size} [opt_size] Box pixel size. If not provided, the size\n     * of the map that uses this view will be used.\n     * @return {import(\"./extent.js\").Extent} Extent.\n     * @api\n     */\n    View.prototype.calculateExtent = function (opt_size) {\n        var extent = this.calculateExtentInternal(opt_size);\n        return toUserExtent(extent, this.getProjection());\n    };\n    /**\n     * @param {import(\"./size.js\").Size} [opt_size] Box pixel size. If not provided,\n     * the map's last known viewport size will be used.\n     * @return {import(\"./extent.js\").Extent} Extent.\n     */\n    View.prototype.calculateExtentInternal = function (opt_size) {\n        var size = opt_size || this.getViewportSizeMinusPadding_();\n        var center = /** @type {!import(\"./coordinate.js\").Coordinate} */ (this.getCenterInternal());\n        assert(center, 1); // The view center is not defined\n        var resolution = /** @type {!number} */ (this.getResolution());\n        assert(resolution !== undefined, 2); // The view resolution is not defined\n        var rotation = /** @type {!number} */ (this.getRotation());\n        assert(rotation !== undefined, 3); // The view rotation is not defined\n        return getForViewAndSize(center, resolution, rotation, size);\n    };\n    /**\n     * Get the maximum resolution of the view.\n     * @return {number} The maximum resolution of the view.\n     * @api\n     */\n    View.prototype.getMaxResolution = function () {\n        return this.maxResolution_;\n    };\n    /**\n     * Get the minimum resolution of the view.\n     * @return {number} The minimum resolution of the view.\n     * @api\n     */\n    View.prototype.getMinResolution = function () {\n        return this.minResolution_;\n    };\n    /**\n     * Get the maximum zoom level for the view.\n     * @return {number} The maximum zoom level.\n     * @api\n     */\n    View.prototype.getMaxZoom = function () {\n        return /** @type {number} */ (this.getZoomForResolution(this.minResolution_));\n    };\n    /**\n     * Set a new maximum zoom level for the view.\n     * @param {number} zoom The maximum zoom level.\n     * @api\n     */\n    View.prototype.setMaxZoom = function (zoom) {\n        this.applyOptions_(this.getUpdatedOptions_({ maxZoom: zoom }));\n    };\n    /**\n     * Get the minimum zoom level for the view.\n     * @return {number} The minimum zoom level.\n     * @api\n     */\n    View.prototype.getMinZoom = function () {\n        return /** @type {number} */ (this.getZoomForResolution(this.maxResolution_));\n    };\n    /**\n     * Set a new minimum zoom level for the view.\n     * @param {number} zoom The minimum zoom level.\n     * @api\n     */\n    View.prototype.setMinZoom = function (zoom) {\n        this.applyOptions_(this.getUpdatedOptions_({ minZoom: zoom }));\n    };\n    /**\n     * Set whether the view should allow intermediary zoom levels.\n     * @param {boolean} enabled Whether the resolution is constrained.\n     * @api\n     */\n    View.prototype.setConstrainResolution = function (enabled) {\n        this.applyOptions_(this.getUpdatedOptions_({ constrainResolution: enabled }));\n    };\n    /**\n     * Get the view projection.\n     * @return {import(\"./proj/Projection.js\").default} The projection of the view.\n     * @api\n     */\n    View.prototype.getProjection = function () {\n        return this.projection_;\n    };\n    /**\n     * Get the view resolution.\n     * @return {number|undefined} The resolution of the view.\n     * @observable\n     * @api\n     */\n    View.prototype.getResolution = function () {\n        return /** @type {number|undefined} */ (this.get(ViewProperty.RESOLUTION));\n    };\n    /**\n     * Get the resolutions for the view. This returns the array of resolutions\n     * passed to the constructor of the View, or undefined if none were given.\n     * @return {Array<number>|undefined} The resolutions of the view.\n     * @api\n     */\n    View.prototype.getResolutions = function () {\n        return this.resolutions_;\n    };\n    /**\n     * Get the resolution for a provided extent (in map units) and size (in pixels).\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {import(\"./size.js\").Size} [opt_size] Box pixel size.\n     * @return {number} The resolution at which the provided extent will render at\n     *     the given size.\n     * @api\n     */\n    View.prototype.getResolutionForExtent = function (extent, opt_size) {\n        return this.getResolutionForExtentInternal(fromUserExtent(extent, this.getProjection()), opt_size);\n    };\n    /**\n     * Get the resolution for a provided extent (in map units) and size (in pixels).\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {import(\"./size.js\").Size} [opt_size] Box pixel size.\n     * @return {number} The resolution at which the provided extent will render at\n     *     the given size.\n     */\n    View.prototype.getResolutionForExtentInternal = function (extent, opt_size) {\n        var size = opt_size || this.getViewportSizeMinusPadding_();\n        var xResolution = getWidth(extent) / size[0];\n        var yResolution = getHeight(extent) / size[1];\n        return Math.max(xResolution, yResolution);\n    };\n    /**\n     * Return a function that returns a value between 0 and 1 for a\n     * resolution. Exponential scaling is assumed.\n     * @param {number} [opt_power] Power.\n     * @return {function(number): number} Resolution for value function.\n     */\n    View.prototype.getResolutionForValueFunction = function (opt_power) {\n        var power = opt_power || 2;\n        var maxResolution = this.getConstrainedResolution(this.maxResolution_);\n        var minResolution = this.minResolution_;\n        var max = Math.log(maxResolution / minResolution) / Math.log(power);\n        return (\n        /**\n         * @param {number} value Value.\n         * @return {number} Resolution.\n         */\n        function (value) {\n            var resolution = maxResolution / Math.pow(power, value * max);\n            return resolution;\n        });\n    };\n    /**\n     * Get the view rotation.\n     * @return {number} The rotation of the view in radians.\n     * @observable\n     * @api\n     */\n    View.prototype.getRotation = function () {\n        return /** @type {number} */ (this.get(ViewProperty.ROTATION));\n    };\n    /**\n     * Return a function that returns a resolution for a value between\n     * 0 and 1. Exponential scaling is assumed.\n     * @param {number} [opt_power] Power.\n     * @return {function(number): number} Value for resolution function.\n     */\n    View.prototype.getValueForResolutionFunction = function (opt_power) {\n        var logPower = Math.log(opt_power || 2);\n        var maxResolution = this.getConstrainedResolution(this.maxResolution_);\n        var minResolution = this.minResolution_;\n        var max = Math.log(maxResolution / minResolution) / logPower;\n        return (\n        /**\n         * @param {number} resolution Resolution.\n         * @return {number} Value.\n         */\n        function (resolution) {\n            var value = Math.log(maxResolution / resolution) / logPower / max;\n            return value;\n        });\n    };\n    /**\n     * Returns the size of the viewport minus padding.\n     * @private\n     * @param {number} [opt_rotation] Take into account the rotation of the viewport when giving the size\n     * @return {import(\"./size.js\").Size} Viewport size reduced by the padding.\n     */\n    View.prototype.getViewportSizeMinusPadding_ = function (opt_rotation) {\n        var size = this.getViewportSize_(opt_rotation);\n        var padding = this.padding_;\n        if (padding) {\n            size = [\n                size[0] - padding[1] - padding[3],\n                size[1] - padding[0] - padding[2],\n            ];\n        }\n        return size;\n    };\n    /**\n     * @return {State} View state.\n     */\n    View.prototype.getState = function () {\n        var projection = this.getProjection();\n        var resolution = this.getResolution();\n        var rotation = this.getRotation();\n        var center = /** @type {import(\"./coordinate.js\").Coordinate} */ (this.getCenterInternal());\n        var padding = this.padding_;\n        if (padding) {\n            var reducedSize = this.getViewportSizeMinusPadding_();\n            center = calculateCenterOn(center, this.getViewportSize_(), [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]], resolution, rotation);\n        }\n        return {\n            center: center.slice(0),\n            projection: projection !== undefined ? projection : null,\n            resolution: resolution,\n            nextCenter: this.nextCenter_,\n            nextResolution: this.nextResolution_,\n            nextRotation: this.nextRotation_,\n            rotation: rotation,\n            zoom: this.getZoom(),\n        };\n    };\n    /**\n     * Get the current zoom level. This method may return non-integer zoom levels\n     * if the view does not constrain the resolution, or if an interaction or\n     * animation is underway.\n     * @return {number|undefined} Zoom.\n     * @api\n     */\n    View.prototype.getZoom = function () {\n        var zoom;\n        var resolution = this.getResolution();\n        if (resolution !== undefined) {\n            zoom = this.getZoomForResolution(resolution);\n        }\n        return zoom;\n    };\n    /**\n     * Get the zoom level for a resolution.\n     * @param {number} resolution The resolution.\n     * @return {number|undefined} The zoom level for the provided resolution.\n     * @api\n     */\n    View.prototype.getZoomForResolution = function (resolution) {\n        var offset = this.minZoom_ || 0;\n        var max, zoomFactor;\n        if (this.resolutions_) {\n            var nearest = linearFindNearest(this.resolutions_, resolution, 1);\n            offset = nearest;\n            max = this.resolutions_[nearest];\n            if (nearest == this.resolutions_.length - 1) {\n                zoomFactor = 2;\n            }\n            else {\n                zoomFactor = max / this.resolutions_[nearest + 1];\n            }\n        }\n        else {\n            max = this.maxResolution_;\n            zoomFactor = this.zoomFactor_;\n        }\n        return offset + Math.log(max / resolution) / Math.log(zoomFactor);\n    };\n    /**\n     * Get the resolution for a zoom level.\n     * @param {number} zoom Zoom level.\n     * @return {number} The view resolution for the provided zoom level.\n     * @api\n     */\n    View.prototype.getResolutionForZoom = function (zoom) {\n        if (this.resolutions_) {\n            if (this.resolutions_.length <= 1) {\n                return 0;\n            }\n            var baseLevel = clamp(Math.floor(zoom), 0, this.resolutions_.length - 2);\n            var zoomFactor = this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];\n            return (this.resolutions_[baseLevel] /\n                Math.pow(zoomFactor, clamp(zoom - baseLevel, 0, 1)));\n        }\n        else {\n            return (this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_));\n        }\n    };\n    /**\n     * Fit the given geometry or extent based on the given map size and border.\n     * The size is pixel dimensions of the box to fit the extent into.\n     * In most cases you will want to use the map size, that is `map.getSize()`.\n     * Takes care of the map angle.\n     * @param {import(\"./geom/SimpleGeometry.js\").default|import(\"./extent.js\").Extent} geometryOrExtent The geometry or\n     *     extent to fit the view to.\n     * @param {FitOptions} [opt_options] Options.\n     * @api\n     */\n    View.prototype.fit = function (geometryOrExtent, opt_options) {\n        /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n        var geometry;\n        assert(Array.isArray(geometryOrExtent) ||\n            typeof ( /** @type {?} */(geometryOrExtent).getSimplifiedGeometry) ===\n                'function', 24); // Invalid extent or geometry provided as `geometry`\n        if (Array.isArray(geometryOrExtent)) {\n            assert(!isEmpty(geometryOrExtent), 25); // Cannot fit empty extent provided as `geometry`\n            var extent = fromUserExtent(geometryOrExtent, this.getProjection());\n            geometry = polygonFromExtent(extent);\n        }\n        else if (geometryOrExtent.getType() === 'Circle') {\n            var extent = fromUserExtent(geometryOrExtent.getExtent(), this.getProjection());\n            geometry = polygonFromExtent(extent);\n            geometry.rotate(this.getRotation(), getCenter(extent));\n        }\n        else {\n            var userProjection = getUserProjection();\n            if (userProjection) {\n                geometry = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (geometryOrExtent\n                    .clone()\n                    .transform(userProjection, this.getProjection()));\n            }\n            else {\n                geometry = geometryOrExtent;\n            }\n        }\n        this.fitInternal(geometry, opt_options);\n    };\n    /**\n     * Calculate rotated extent\n     * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n     * @return {import(\"./extent\").Extent} The rotated extent for the geometry.\n     */\n    View.prototype.rotatedExtentForGeometry = function (geometry) {\n        var rotation = this.getRotation();\n        var cosAngle = Math.cos(rotation);\n        var sinAngle = Math.sin(-rotation);\n        var coords = geometry.getFlatCoordinates();\n        var stride = geometry.getStride();\n        var minRotX = +Infinity;\n        var minRotY = +Infinity;\n        var maxRotX = -Infinity;\n        var maxRotY = -Infinity;\n        for (var i = 0, ii = coords.length; i < ii; i += stride) {\n            var rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\n            var rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\n            minRotX = Math.min(minRotX, rotX);\n            minRotY = Math.min(minRotY, rotY);\n            maxRotX = Math.max(maxRotX, rotX);\n            maxRotY = Math.max(maxRotY, rotY);\n        }\n        return [minRotX, minRotY, maxRotX, maxRotY];\n    };\n    /**\n     * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n     * @param {FitOptions} [opt_options] Options.\n     */\n    View.prototype.fitInternal = function (geometry, opt_options) {\n        var options = opt_options || {};\n        var size = options.size;\n        if (!size) {\n            size = this.getViewportSizeMinusPadding_();\n        }\n        var padding = options.padding !== undefined ? options.padding : [0, 0, 0, 0];\n        var nearest = options.nearest !== undefined ? options.nearest : false;\n        var minResolution;\n        if (options.minResolution !== undefined) {\n            minResolution = options.minResolution;\n        }\n        else if (options.maxZoom !== undefined) {\n            minResolution = this.getResolutionForZoom(options.maxZoom);\n        }\n        else {\n            minResolution = 0;\n        }\n        var rotatedExtent = this.rotatedExtentForGeometry(geometry);\n        // calculate resolution\n        var resolution = this.getResolutionForExtentInternal(rotatedExtent, [\n            size[0] - padding[1] - padding[3],\n            size[1] - padding[0] - padding[2],\n        ]);\n        resolution = isNaN(resolution)\n            ? minResolution\n            : Math.max(resolution, minResolution);\n        resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1);\n        // calculate center\n        var rotation = this.getRotation();\n        var sinAngle = Math.sin(rotation);\n        var cosAngle = Math.cos(rotation);\n        var centerRot = getCenter(rotatedExtent);\n        centerRot[0] += ((padding[1] - padding[3]) / 2) * resolution;\n        centerRot[1] += ((padding[0] - padding[2]) / 2) * resolution;\n        var centerX = centerRot[0] * cosAngle - centerRot[1] * sinAngle;\n        var centerY = centerRot[1] * cosAngle + centerRot[0] * sinAngle;\n        var center = this.getConstrainedCenter([centerX, centerY], resolution);\n        var callback = options.callback ? options.callback : VOID;\n        if (options.duration !== undefined) {\n            this.animateInternal({\n                resolution: resolution,\n                center: center,\n                duration: options.duration,\n                easing: options.easing,\n            }, callback);\n        }\n        else {\n            this.targetResolution_ = resolution;\n            this.targetCenter_ = center;\n            this.applyTargetState_(false, true);\n            animationCallback(callback, true);\n        }\n    };\n    /**\n     * Center on coordinate and view position.\n     * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {import(\"./size.js\").Size} size Box pixel size.\n     * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n     * @api\n     */\n    View.prototype.centerOn = function (coordinate, size, position) {\n        this.centerOnInternal(fromUserCoordinate(coordinate, this.getProjection()), size, position);\n    };\n    /**\n     * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {import(\"./size.js\").Size} size Box pixel size.\n     * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n     */\n    View.prototype.centerOnInternal = function (coordinate, size, position) {\n        this.setCenterInternal(calculateCenterOn(coordinate, size, position, this.getResolution(), this.getRotation()));\n    };\n    /**\n     * Calculates the shift between map and viewport center.\n     * @param {import(\"./coordinate.js\").Coordinate} center Center.\n     * @param {number} resolution Resolution.\n     * @param {number} rotation Rotation.\n     * @param {import(\"./size.js\").Size} size Size.\n     * @return {Array<number>|undefined} Center shift.\n     */\n    View.prototype.calculateCenterShift = function (center, resolution, rotation, size) {\n        var centerShift;\n        var padding = this.padding_;\n        if (padding && center) {\n            var reducedSize = this.getViewportSizeMinusPadding_(-rotation);\n            var shiftedCenter = calculateCenterOn(center, size, [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]], resolution, rotation);\n            centerShift = [\n                center[0] - shiftedCenter[0],\n                center[1] - shiftedCenter[1],\n            ];\n        }\n        return centerShift;\n    };\n    /**\n     * @return {boolean} Is defined.\n     */\n    View.prototype.isDef = function () {\n        return !!this.getCenterInternal() && this.getResolution() !== undefined;\n    };\n    /**\n     * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n     * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n     * @api\n     */\n    View.prototype.adjustCenter = function (deltaCoordinates) {\n        var center = toUserCoordinate(this.targetCenter_, this.getProjection());\n        this.setCenter([\n            center[0] + deltaCoordinates[0],\n            center[1] + deltaCoordinates[1],\n        ]);\n    };\n    /**\n     * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n     * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n     */\n    View.prototype.adjustCenterInternal = function (deltaCoordinates) {\n        var center = this.targetCenter_;\n        this.setCenterInternal([\n            center[0] + deltaCoordinates[0],\n            center[1] + deltaCoordinates[1],\n        ]);\n    };\n    /**\n     * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n     * constraint will apply.\n     * @param {number} ratio The ratio to apply on the view resolution.\n     * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n     * @api\n     */\n    View.prototype.adjustResolution = function (ratio, opt_anchor) {\n        var anchor = opt_anchor && fromUserCoordinate(opt_anchor, this.getProjection());\n        this.adjustResolutionInternal(ratio, anchor);\n    };\n    /**\n     * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n     * constraint will apply.\n     * @param {number} ratio The ratio to apply on the view resolution.\n     * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n     */\n    View.prototype.adjustResolutionInternal = function (ratio, opt_anchor) {\n        var isMoving = this.getAnimating() || this.getInteracting();\n        var size = this.getViewportSize_(this.getRotation());\n        var newResolution = this.constraints_.resolution(this.targetResolution_ * ratio, 0, size, isMoving);\n        if (opt_anchor) {\n            this.targetCenter_ = this.calculateCenterZoom(newResolution, opt_anchor);\n        }\n        this.targetResolution_ *= ratio;\n        this.applyTargetState_();\n    };\n    /**\n     * Adds a value to the view zoom level, optionally using an anchor. Any resolution\n     * constraint will apply.\n     * @param {number} delta Relative value to add to the zoom level.\n     * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n     * @api\n     */\n    View.prototype.adjustZoom = function (delta, opt_anchor) {\n        this.adjustResolution(Math.pow(this.zoomFactor_, -delta), opt_anchor);\n    };\n    /**\n     * Adds a value to the view rotation, optionally using an anchor. Any rotation\n     * constraint will apply.\n     * @param {number} delta Relative value to add to the zoom rotation, in radians.\n     * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The rotation center.\n     * @api\n     */\n    View.prototype.adjustRotation = function (delta, opt_anchor) {\n        if (opt_anchor) {\n            opt_anchor = fromUserCoordinate(opt_anchor, this.getProjection());\n        }\n        this.adjustRotationInternal(delta, opt_anchor);\n    };\n    /**\n     * @param {number} delta Relative value to add to the zoom rotation, in radians.\n     * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The rotation center.\n     */\n    View.prototype.adjustRotationInternal = function (delta, opt_anchor) {\n        var isMoving = this.getAnimating() || this.getInteracting();\n        var newRotation = this.constraints_.rotation(this.targetRotation_ + delta, isMoving);\n        if (opt_anchor) {\n            this.targetCenter_ = this.calculateCenterRotate(newRotation, opt_anchor);\n        }\n        this.targetRotation_ += delta;\n        this.applyTargetState_();\n    };\n    /**\n     * Set the center of the current view. Any extent constraint will apply.\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n     * @observable\n     * @api\n     */\n    View.prototype.setCenter = function (center) {\n        this.setCenterInternal(center ? fromUserCoordinate(center, this.getProjection()) : center);\n    };\n    /**\n     * Set the center using the view projection (not the user projection).\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n     */\n    View.prototype.setCenterInternal = function (center) {\n        this.targetCenter_ = center;\n        this.applyTargetState_();\n    };\n    /**\n     * @param {import(\"./ViewHint.js\").default} hint Hint.\n     * @param {number} delta Delta.\n     * @return {number} New value.\n     */\n    View.prototype.setHint = function (hint, delta) {\n        this.hints_[hint] += delta;\n        this.changed();\n        return this.hints_[hint];\n    };\n    /**\n     * Set the resolution for this view. Any resolution constraint will apply.\n     * @param {number|undefined} resolution The resolution of the view.\n     * @observable\n     * @api\n     */\n    View.prototype.setResolution = function (resolution) {\n        this.targetResolution_ = resolution;\n        this.applyTargetState_();\n    };\n    /**\n     * Set the rotation for this view. Any rotation constraint will apply.\n     * @param {number} rotation The rotation of the view in radians.\n     * @observable\n     * @api\n     */\n    View.prototype.setRotation = function (rotation) {\n        this.targetRotation_ = rotation;\n        this.applyTargetState_();\n    };\n    /**\n     * Zoom to a specific zoom level. Any resolution constrain will apply.\n     * @param {number} zoom Zoom level.\n     * @api\n     */\n    View.prototype.setZoom = function (zoom) {\n        this.setResolution(this.getResolutionForZoom(zoom));\n    };\n    /**\n     * Recompute rotation/resolution/center based on target values.\n     * Note: we have to compute rotation first, then resolution and center considering that\n     * parameters can influence one another in case a view extent constraint is present.\n     * @param {boolean} [opt_doNotCancelAnims] Do not cancel animations.\n     * @param {boolean} [opt_forceMoving] Apply constraints as if the view is moving.\n     * @private\n     */\n    View.prototype.applyTargetState_ = function (opt_doNotCancelAnims, opt_forceMoving) {\n        var isMoving = this.getAnimating() || this.getInteracting() || opt_forceMoving;\n        // compute rotation\n        var newRotation = this.constraints_.rotation(this.targetRotation_, isMoving);\n        var size = this.getViewportSize_(newRotation);\n        var newResolution = this.constraints_.resolution(this.targetResolution_, 0, size, isMoving);\n        var newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, isMoving, this.calculateCenterShift(this.targetCenter_, newResolution, newRotation, size));\n        if (this.get(ViewProperty.ROTATION) !== newRotation) {\n            this.set(ViewProperty.ROTATION, newRotation);\n        }\n        if (this.get(ViewProperty.RESOLUTION) !== newResolution) {\n            this.set(ViewProperty.RESOLUTION, newResolution);\n            this.set('zoom', this.getZoom(), true);\n        }\n        if (!newCenter ||\n            !this.get(ViewProperty.CENTER) ||\n            !equals(this.get(ViewProperty.CENTER), newCenter)) {\n            this.set(ViewProperty.CENTER, newCenter);\n        }\n        if (this.getAnimating() && !opt_doNotCancelAnims) {\n            this.cancelAnimations();\n        }\n        this.cancelAnchor_ = undefined;\n    };\n    /**\n     * If any constraints need to be applied, an animation will be triggered.\n     * This is typically done on interaction end.\n     * Note: calling this with a duration of 0 will apply the constrained values straight away,\n     * without animation.\n     * @param {number} [opt_duration] The animation duration in ms.\n     * @param {number} [opt_resolutionDirection] Which direction to zoom.\n     * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n     */\n    View.prototype.resolveConstraints = function (opt_duration, opt_resolutionDirection, opt_anchor) {\n        var duration = opt_duration !== undefined ? opt_duration : 200;\n        var direction = opt_resolutionDirection || 0;\n        var newRotation = this.constraints_.rotation(this.targetRotation_);\n        var size = this.getViewportSize_(newRotation);\n        var newResolution = this.constraints_.resolution(this.targetResolution_, direction, size);\n        var newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, false, this.calculateCenterShift(this.targetCenter_, newResolution, newRotation, size));\n        if (duration === 0 && !this.cancelAnchor_) {\n            this.targetResolution_ = newResolution;\n            this.targetRotation_ = newRotation;\n            this.targetCenter_ = newCenter;\n            this.applyTargetState_();\n            return;\n        }\n        var anchor = opt_anchor || (duration === 0 ? this.cancelAnchor_ : undefined);\n        this.cancelAnchor_ = undefined;\n        if (this.getResolution() !== newResolution ||\n            this.getRotation() !== newRotation ||\n            !this.getCenterInternal() ||\n            !equals(this.getCenterInternal(), newCenter)) {\n            if (this.getAnimating()) {\n                this.cancelAnimations();\n            }\n            this.animateInternal({\n                rotation: newRotation,\n                center: newCenter,\n                resolution: newResolution,\n                duration: duration,\n                easing: easeOut,\n                anchor: anchor,\n            });\n        }\n    };\n    /**\n     * Notify the View that an interaction has started.\n     * The view state will be resolved to a stable one if needed\n     * (depending on its constraints).\n     * @api\n     */\n    View.prototype.beginInteraction = function () {\n        this.resolveConstraints(0);\n        this.setHint(ViewHint.INTERACTING, 1);\n    };\n    /**\n     * Notify the View that an interaction has ended. The view state will be resolved\n     * to a stable one if needed (depending on its constraints).\n     * @param {number} [opt_duration] Animation duration in ms.\n     * @param {number} [opt_resolutionDirection] Which direction to zoom.\n     * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n     * @api\n     */\n    View.prototype.endInteraction = function (opt_duration, opt_resolutionDirection, opt_anchor) {\n        var anchor = opt_anchor && fromUserCoordinate(opt_anchor, this.getProjection());\n        this.endInteractionInternal(opt_duration, opt_resolutionDirection, anchor);\n    };\n    /**\n     * Notify the View that an interaction has ended. The view state will be resolved\n     * to a stable one if needed (depending on its constraints).\n     * @param {number} [opt_duration] Animation duration in ms.\n     * @param {number} [opt_resolutionDirection] Which direction to zoom.\n     * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n     */\n    View.prototype.endInteractionInternal = function (opt_duration, opt_resolutionDirection, opt_anchor) {\n        this.setHint(ViewHint.INTERACTING, -1);\n        this.resolveConstraints(opt_duration, opt_resolutionDirection, opt_anchor);\n    };\n    /**\n     * Get a valid position for the view center according to the current constraints.\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} targetCenter Target center position.\n     * @param {number} [opt_targetResolution] Target resolution. If not supplied, the current one will be used.\n     * This is useful to guess a valid center position at a different zoom level.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Valid center position.\n     */\n    View.prototype.getConstrainedCenter = function (targetCenter, opt_targetResolution) {\n        var size = this.getViewportSize_(this.getRotation());\n        return this.constraints_.center(targetCenter, opt_targetResolution || this.getResolution(), size);\n    };\n    /**\n     * Get a valid zoom level according to the current view constraints.\n     * @param {number|undefined} targetZoom Target zoom.\n     * @param {number} [opt_direction=0] Indicate which resolution should be used\n     * by a renderer if the view resolution does not match any resolution of the tile source.\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n     * will be used. If -1, the nearest higher resolution will be used.\n     * @return {number|undefined} Valid zoom level.\n     */\n    View.prototype.getConstrainedZoom = function (targetZoom, opt_direction) {\n        var targetRes = this.getResolutionForZoom(targetZoom);\n        return this.getZoomForResolution(this.getConstrainedResolution(targetRes, opt_direction));\n    };\n    /**\n     * Get a valid resolution according to the current view constraints.\n     * @param {number|undefined} targetResolution Target resolution.\n     * @param {number} [opt_direction=0] Indicate which resolution should be used\n     * by a renderer if the view resolution does not match any resolution of the tile source.\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n     * will be used. If -1, the nearest higher resolution will be used.\n     * @return {number|undefined} Valid resolution.\n     */\n    View.prototype.getConstrainedResolution = function (targetResolution, opt_direction) {\n        var direction = opt_direction || 0;\n        var size = this.getViewportSize_(this.getRotation());\n        return this.constraints_.resolution(targetResolution, direction, size);\n    };\n    return View;\n}(BaseObject));\n/**\n * @param {Function} callback Callback.\n * @param {*} returnValue Return value.\n */\nfunction animationCallback(callback, returnValue) {\n    setTimeout(function () {\n        callback(returnValue);\n    }, 0);\n}\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./centerconstraint.js\").Type} The constraint.\n */\nexport function createCenterConstraint(options) {\n    if (options.extent !== undefined) {\n        var smooth = options.smoothExtentConstraint !== undefined\n            ? options.smoothExtentConstraint\n            : true;\n        return createExtent(options.extent, options.constrainOnlyCenter, smooth);\n    }\n    var projection = createProjection(options.projection, 'EPSG:3857');\n    if (options.multiWorld !== true && projection.isGlobal()) {\n        var extent = projection.getExtent().slice();\n        extent[0] = -Infinity;\n        extent[2] = Infinity;\n        return createExtent(extent, false, false);\n    }\n    return centerNone;\n}\n/**\n * @param {ViewOptions} options View options.\n * @return {{constraint: import(\"./resolutionconstraint.js\").Type, maxResolution: number,\n *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.\n */\nexport function createResolutionConstraint(options) {\n    var resolutionConstraint;\n    var maxResolution;\n    var minResolution;\n    // TODO: move these to be ol constants\n    // see https://github.com/openlayers/openlayers/issues/2076\n    var defaultMaxZoom = 28;\n    var defaultZoomFactor = 2;\n    var minZoom = options.minZoom !== undefined ? options.minZoom : DEFAULT_MIN_ZOOM;\n    var maxZoom = options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;\n    var zoomFactor = options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;\n    var multiWorld = options.multiWorld !== undefined ? options.multiWorld : false;\n    var smooth = options.smoothResolutionConstraint !== undefined\n        ? options.smoothResolutionConstraint\n        : true;\n    var showFullExtent = options.showFullExtent !== undefined ? options.showFullExtent : false;\n    var projection = createProjection(options.projection, 'EPSG:3857');\n    var projExtent = projection.getExtent();\n    var constrainOnlyCenter = options.constrainOnlyCenter;\n    var extent = options.extent;\n    if (!multiWorld && !extent && projection.isGlobal()) {\n        constrainOnlyCenter = false;\n        extent = projExtent;\n    }\n    if (options.resolutions !== undefined) {\n        var resolutions = options.resolutions;\n        maxResolution = resolutions[minZoom];\n        minResolution =\n            resolutions[maxZoom] !== undefined\n                ? resolutions[maxZoom]\n                : resolutions[resolutions.length - 1];\n        if (options.constrainResolution) {\n            resolutionConstraint = createSnapToResolutions(resolutions, smooth, !constrainOnlyCenter && extent, showFullExtent);\n        }\n        else {\n            resolutionConstraint = createMinMaxResolution(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n        }\n    }\n    else {\n        // calculate the default min and max resolution\n        var size = !projExtent\n            ? // use an extent that can fit the whole world if need be\n                (360 * METERS_PER_UNIT[Units.DEGREES]) / projection.getMetersPerUnit()\n            : Math.max(getWidth(projExtent), getHeight(projExtent));\n        var defaultMaxResolution = size / DEFAULT_TILE_SIZE / Math.pow(defaultZoomFactor, DEFAULT_MIN_ZOOM);\n        var defaultMinResolution = defaultMaxResolution /\n            Math.pow(defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);\n        // user provided maxResolution takes precedence\n        maxResolution = options.maxResolution;\n        if (maxResolution !== undefined) {\n            minZoom = 0;\n        }\n        else {\n            maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\n        }\n        // user provided minResolution takes precedence\n        minResolution = options.minResolution;\n        if (minResolution === undefined) {\n            if (options.maxZoom !== undefined) {\n                if (options.maxResolution !== undefined) {\n                    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\n                }\n                else {\n                    minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\n                }\n            }\n            else {\n                minResolution = defaultMinResolution;\n            }\n        }\n        // given discrete zoom levels, minResolution may be different than provided\n        maxZoom =\n            minZoom +\n                Math.floor(Math.log(maxResolution / minResolution) / Math.log(zoomFactor));\n        minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\n        if (options.constrainResolution) {\n            resolutionConstraint = createSnapToPower(zoomFactor, maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n        }\n        else {\n            resolutionConstraint = createMinMaxResolution(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n        }\n    }\n    return {\n        constraint: resolutionConstraint,\n        maxResolution: maxResolution,\n        minResolution: minResolution,\n        minZoom: minZoom,\n        zoomFactor: zoomFactor,\n    };\n}\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./rotationconstraint.js\").Type} Rotation constraint.\n */\nexport function createRotationConstraint(options) {\n    var enableRotation = options.enableRotation !== undefined ? options.enableRotation : true;\n    if (enableRotation) {\n        var constrainRotation = options.constrainRotation;\n        if (constrainRotation === undefined || constrainRotation === true) {\n            return createSnapToZero();\n        }\n        else if (constrainRotation === false) {\n            return rotationNone;\n        }\n        else if (typeof constrainRotation === 'number') {\n            return createSnapToN(constrainRotation);\n        }\n        else {\n            return rotationNone;\n        }\n    }\n    else {\n        return disable;\n    }\n}\n/**\n * Determine if an animation involves no view change.\n * @param {Animation} animation The animation.\n * @return {boolean} The animation involves no view change.\n */\nexport function isNoopAnimation(animation) {\n    if (animation.sourceCenter && animation.targetCenter) {\n        if (!coordinatesEqual(animation.sourceCenter, animation.targetCenter)) {\n            return false;\n        }\n    }\n    if (animation.sourceResolution !== animation.targetResolution) {\n        return false;\n    }\n    if (animation.sourceRotation !== animation.targetRotation) {\n        return false;\n    }\n    return true;\n}\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {import(\"./size.js\").Size} size Box pixel size.\n * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {import(\"./coordinate.js\").Coordinate} Shifted center.\n */\nfunction calculateCenterOn(coordinate, size, position, resolution, rotation) {\n    // calculate rotated position\n    var cosAngle = Math.cos(-rotation);\n    var sinAngle = Math.sin(-rotation);\n    var rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n    var rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n    rotX += (size[0] / 2 - position[0]) * resolution;\n    rotY += (position[1] - size[1] / 2) * resolution;\n    // go back to original angle\n    sinAngle = -sinAngle; // go back to original rotation\n    var centerX = rotX * cosAngle - rotY * sinAngle;\n    var centerY = rotY * cosAngle + rotX * sinAngle;\n    return [centerX, centerY];\n}\nexport default View;\n//# sourceMappingURL=View.js.map","/**\n * @module ol/ViewHint\n */\n/**\n * @enum {number}\n */\nexport default {\n    ANIMATING: 0,\n    INTERACTING: 1,\n};\n//# sourceMappingURL=ViewHint.js.map"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","this","constructor","create","TileQueue","_super","tilePriorityFunction","tileChangeCallback","_this","element","apply","getKey","boundHandleTileChange_","handleTileChange","bind","tileChangeCallback_","tilesLoading_","tilesLoadingKeys_","enqueue","added","tile","addEventListener","EventType","getTilesLoading","event","state","getState","TileState","removeEventListener","tileKey","loadMoreTiles","maxTotalLoading","maxNewLoads","newLoads","getCount","dequeue","load","PriorityQueue","getTilePriority","frameState","tileSourceKey","tileCenter","tileResolution","wantedTiles","center","viewState","deltaX","deltaY","Math","log","sqrt","removeLayerMapProperty","layer","Layer","setMapInternal","getLayers","forEach","setLayerMapProperty","map","layers","getArray","i","ii","length","PluggableMap","options","on","once","un","optionsInternal","createOptionsInternal","renderComplete_","loaded_","boundHandleBrowserEvent_","handleBrowserEvent","maxTilesLoading_","undefined","maxTilesLoading","pixelRatio_","pixelRatio","postRenderTimeoutHandle_","animationDelayKey_","animationDelay_","renderFrame_","Date","now","coordinateToPixelTransform_","pixelToCoordinateTransform_","frameIndex_","frameState_","previousExtent_","viewPropertyListenerKey_","viewChangeListenerKey_","layerGroupPropertyListenerKeys_","viewport_","document","createElement","className","window","style","position","overflow","width","height","overlayContainer_","zIndex","pointerEvents","appendChild","overlayContainerStopEvent_","mapBrowserEventHandler_","moveTolerance_","moveTolerance","keyboardEventTarget_","keyboardEventTarget","targetChangeHandlerKeys_","controls","Collection","interactions","overlays_","overlays","overlayIdIndex_","renderer_","postRenderFunctions_","tileQueue_","handleTileChange_","addChangeListener","MapProperty","handleLayerGroupChanged_","handleViewChanged_","handleSizeChanged_","handleTargetChanged_","setProperties","values","view","View","then","viewOptions","setView","CollectionEventType","setMap","addOverlayInternal_","overlay","id","getId","toString","control","interaction","createRenderer","Error","addControl","getControls","push","addInteraction","getInteractions","addLayer","getLayerGroup","handleLayerAdd_","addOverlay","getOverlays","disposeInternal","clear","setTarget","forEachFeatureAtPixel","pixel","callback","opt_options","coordinate","getCoordinateFromPixelInternal","hitTolerance","layerFilter","checkWrapped","forEachFeatureAtCoordinate","getFeaturesAtPixel","features","feature","getAllLayers","addLayersFrom","layerGroup","forEachLayerAtPixel","hasFeatureAtPixel","hasFeatureAtCoordinate","getEventCoordinate","getCoordinateFromPixel","getEventPixel","getEventCoordinateInternal","viewportPosition","getBoundingClientRect","eventPosition","changedTouches","clientX","left","clientY","top","getTarget","get","getTargetElement","target","getElementById","getView","getProjection","pixelToCoordinateTransform","slice","getOverlayById","setLayers","group","collection","extend","getLoadingOrNotReady","layerStatesArray","getLayerStatesArray","visible","renderer","getRenderer","ready","source","getSource","loading","getPixelFromCoordinate","viewCoordinate","getPixelFromCoordinateInternal","coordinateToPixelTransform","getSize","getViewport","getOverlayContainer","getOverlayContainerStopEvent","getOwnerDocument","targetElement","ownerDocument","browserEvent","opt_type","type","mapBrowserEvent","MapBrowserEvent","handleMapBrowserEvent","originalEvent","eventType","doc","rootNode","getRootNode","contains","documentElement","dispatchEvent","interactionsArray","getMap","getActive","cont","handleEvent","propagationStopped","handlePostRender","tileQueue","isEmpty","hints","viewHints","ViewHint","lowOnFrameBudget","time","reprioritize","animate","hasListener","dispatchRenderEvent","MapEvent","MapEventType","postRenderFunctions","getAnimating","resolveConstraints","render","dispose","key","MapBrowserEventHandler","MapBrowserEventType","passive","defaultView","updateSize","clearTimeout","cancelAnimationFrame","handleViewPropertyChanged_","updateViewportSize_","ObjectEventType","Group","handleLayerRemove_","isRendered","renderSync","redrawText","layerStates","hasRenderer","handleFontsChanged","requestAnimationFrame","removeControl","remove","removeInteraction","removeLayer","removeOverlay","size","previousFrameState","isDef","getHints","declutterTree","extent","resolution","rotation","index","layerIndex","usedTiles","mapId","renderTargets","nextCenter","nextResolution","isNaN","nextRotation","nextExtent","renderFrame","moveStart","idle","setTimeout","setLayerGroup","oldLayerGroup","set","setSize","computedStyle","getComputedStyle","offsetWidth","parseFloat","offsetHeight","getClientRects","console","warn","parseInt","setViewportSize","isArray","Map","onFocusOnly","Composite","ObjectEvent","oldValue","BaseObject","opt_values","values_","value","getKeys","keys","getProperties","hasProperties","notify","concat","listener","removeChangeListener","opt_silent","applyProperties","unset","PROPERTYCHANGE","Observable","revision_","changed","getRevision","onInternal","len","onceInternal","ol_key","unInternal","unByKey","Tile","tileCoord","interimTile","transition_","transition","transitionStarts_","interpolate","release","getInterimTile","refreshInterimChain","prev","getTileCoord","setState","getAlpha","start","delta","inTransition","endTransition","TileCache","arguments","expireCache","canExpireCache","peekLast","pop","pruneExceptNewestZ","peekFirstKey","z","TileRange","minX","maxX","minY","maxY","containsXY","containsTileRange","tileRange","x","y","equals","getHeight","getWidth","intersects","createOrUpdate","IDLE","LOADING","LOADED","ERROR","EMPTY","CENTER","RESOLUTION","ROTATION","DEFAULT_MIN_ZOOM","hints_","animations_","updateAnimationKey_","projection_","projection","viewportSize_","targetCenter_","targetResolution_","targetRotation_","nextCenter_","nextResolution_","nextRotation_","cancelAnchor_","applyOptions_","properties","ViewProperty","resolutionConstraintInfo","createResolutionConstraint","maxResolution_","maxResolution","minResolution_","minResolution","zoomFactor_","zoomFactor","resolutions_","resolutions","padding_","padding","minZoom_","minZoom","centerConstraint","createCenterConstraint","resolutionConstraint","constraint","rotationConstraint","createRotationConstraint","constraints_","setRotation","setCenterInternal","setResolution","zoom","setZoom","defineProperty","oldPadding","getCenter","newPadding","getResolution","offsetX","offsetY","enumerable","configurable","getUpdatedOptions_","newOptions","getZoom","getCenterInternal","getRotation","var_args","args","anchor","animateInternal","animationCount","series","animation","complete","duration","easing","sourceCenter","targetCenter","sourceResolution","targetResolution","getResolutionForZoom","sourceRotation","PI","targetRotation","isNoopAnimation","setHint","updateAnimations_","animationCallback","getInteracting","cancelAnimations","j","jj","NaN","more","seriesComplete","elapsed","fraction","progress","x0","y0","x1","y1","getViewportSize_","constrainedResolution","calculateCenterZoom","applyTargetState_","constrainedRotation","calculateCenterRotate","filter","Boolean","currentCenter","currentResolution","opt_rotation","w","h","abs","cos","sin","opt_size","getConstraints","getConstrainResolution","opt_hints","calculateExtent","calculateExtentInternal","getViewportSizeMinusPadding_","getMaxResolution","getMinResolution","getMaxZoom","getZoomForResolution","setMaxZoom","maxZoom","getMinZoom","setMinZoom","setConstrainResolution","enabled","constrainResolution","getResolutions","getResolutionForExtent","getResolutionForExtentInternal","xResolution","yResolution","max","getResolutionForValueFunction","opt_power","power","getConstrainedResolution","pow","getValueForResolutionFunction","logPower","reducedSize","calculateCenterOn","offset","nearest","baseLevel","floor","fit","geometryOrExtent","geometry","getType","getExtent","rotate","userProjection","clone","transform","fitInternal","rotatedExtentForGeometry","cosAngle","sinAngle","coords","getFlatCoordinates","stride","getStride","minRotX","Infinity","minRotY","maxRotX","maxRotY","rotX","rotY","min","rotatedExtent","centerRot","centerX","centerY","getConstrainedCenter","centerOn","centerOnInternal","calculateCenterShift","centerShift","shiftedCenter","adjustCenter","deltaCoordinates","setCenter","adjustCenterInternal","adjustResolution","ratio","opt_anchor","adjustResolutionInternal","isMoving","newResolution","adjustZoom","adjustRotation","adjustRotationInternal","newRotation","hint","opt_doNotCancelAnims","opt_forceMoving","newCenter","opt_duration","opt_resolutionDirection","direction","beginInteraction","endInteraction","endInteractionInternal","opt_targetResolution","getConstrainedZoom","targetZoom","opt_direction","targetRes","returnValue","smooth","smoothExtentConstraint","constrainOnlyCenter","multiWorld","isGlobal","defaultMaxZoom","defaultZoomFactor","smoothResolutionConstraint","showFullExtent","projExtent","Units","getMetersPerUnit","defaultMaxResolution","defaultMinResolution","enableRotation","constrainRotation","ANIMATING","INTERACTING"],"sourceRoot":""}