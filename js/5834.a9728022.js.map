{"version":3,"file":"js/5834.a9728022.js","mappings":"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","sources":["webpack://@openeo/web-editor/./node_modules/@radiantearth/stac-fields/formatters.js"],"sourcesContent":["var Registry = {\n\n\texternalRenderer: false,\n\n\taddExtension(prefix, spec) {\n\t\tFields.extensions[prefix] = _.normalizeField(spec, Fields.extensions);\n\t},\n\n\taddMetadataField(field, spec) {\n\t\tFields.metadata[field] = _.normalizeField(spec, Fields.metadata);\n\t},\n\n\taddLinkField(field, spec) {\n\t\tFields.links[field] = _.normalizeField(spec, Fields.links);\n\t},\n\n\taddAssetField(field, spec) {\n\t\tFields.assets[field] = _.normalizeField(spec, Fields.assets);\n\t},\n\n\taddMetadataFields(specs) {\n\t\tfor(var key in specs) {\n\t\t\tRegistry.addMetadataField(key, specs[key]);\n\t\t}\n\t},\n\n\tgetSpecification(field, type = null) {\n\t\tlet spec = {};\n\t\tif (type === 'assets' && Fields.assets[field]) {\n\t\t\tspec = Fields.assets[field];\n\t\t}\n\t\telse if (type === 'links' && Fields.links[field]) {\n\t\t\tspec = Fields.links[field];\n\t\t}\n\t\telse if (Fields.metadata[field]) {\n\t\t\tspec = Fields.metadata[field];\n\t\t}\n\t\treturn spec;\n\t}\n\n};\n\nvar _ = {\n\n\te(str) {\n\t\tif (typeof str !== 'string') {\n\t\t\tstr = String(str);\n\t\t}\n\t\treturn str.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, '&apos;');\n\t},\n\n\ttoList(arr, sort = false, formatter = null) {\n\t\tlet list = arr;\n\t\tlet tag = 'ul';\n\t\tif (!Array.isArray(arr)) {\n\t\t\tarr = [arr];\n\t\t}\n\t\tif (sort) {\n\t\t\tlist = list.slice(0);\n\t\t\tif (typeof sort === 'function') {\n\t\t\t\tlist.sort(sort);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlist.sort();\n\t\t\t}\n\t\t\ttag = 'ol';\n\t\t}\n\t\tif (typeof formatter === 'function') {\n\t\t\tlist = list.map(formatter);\n\t\t}\n\t\tif (list.length === 0) {\n\t\t\treturn DataTypes.null();\n\t\t}\n\t\telse if (list.length === 1) {\n\t\t\treturn list[0];\n\t\t}\n\t\telse {\n\t\t\treturn `<${tag}><li>${list.join(\"</li><li>\")}</li></${tag}>`;\n\t\t}\n\t},\n\n\ttoLink(url, title = \"\", rel = \"\", target = \"_blank\") {\n\t\tif (!title) {\n\t\t\tif (url.length > 50) {\n\t\t\t\ttitle = url.replace(/^\\w+:\\/\\/([^\\/]+)((\\/[^\\/\\?]+)*\\/([^\\/\\?]+)(\\?.*)?)?$/i, function(...x) {\n\t\t\t\t\tif (x[4]) {\n\t\t\t\t\t\treturn x[1] + '​/[…]/​' + x[4]; // There are invisible zero-width whitespaces after and before the slashes. It allows breaking the link in the browser. Be careful when editing.\n\t\t\t\t\t}\n\t\t\t\t\treturn x[1];\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttitle = url.replace(/^\\w+:\\/\\//i, '');\n\t\t\t}\n\t\t}\n\t\treturn `<a href=\"${_.e(url)}\" rel=\"${_.e(rel)}\" target=\"${_.e(target)}\">${_.e(title)}</a>`;\n\t},\n\n\ttoObject(obj, formatter = null) {\n\t\tlet html = '<dl>';\n\t\tfor(let key in obj) {\n\t\t\t// ToDo: also convert CamelCase? but not abbreviations like \"USA\".\n\t\t\tlet label = _.formatKey(key, true);\n\t\t\tlet value = obj[key];\n\t\t\tif (typeof formatter === 'function') {\n\t\t\t\tvalue = formatter(value, key, obj);\n\t\t\t}\n\t\t\t// TODO: Format label (also in arrays)\n\t\t\thtml += `<dt>${label}</dt><dd>${value}</dd>`;\n\t\t}\n\t\thtml += `</dl>`;\n\t\treturn html;\n\t},\n\n\tabbrev(short, long) {\n\t\treturn `<abbr title=\"${_.e(long)}\">${_.e(short)}</abbr>`;\n\t},\n\n\tisObject(obj) {\n\t\treturn (typeof obj === 'object' && obj === Object(obj) && !Array.isArray(obj));\n\t},\n\n\tformatKey(key, prefix = false) {\n\t\tif (prefix === false) {\n\t\t\tkey = key.replace(/^\\w+:/i, '');\n\t\t}\n\t\treturn _.e(key).split(/[:_\\-\\s]/g).map(part => part.substr(0, 1).toUpperCase() + part.substr(1)).join(' ');\n\t},\n\n\tnormalizeFields(fields) {\n\t\tlet parts = ['extensions', 'metadata', 'links', 'assets'];\n\t\tfor (let part of parts) {\n\t\t\tfor(let key in fields[part]) {\n\t\t\t\tfields[part][key] = _.normalizeField(fields[part][key], fields[part]);\n\t\t\t}\n\t\t}\n\t\treturn fields;\n\t},\n\n\tnormalizeField(spec, fields = {}) {\n\t\t// If just a string label is given, make a normal object with a label from it\n\t\tif (typeof spec === 'string') {\n\t\t\treturn {\n\t\t\t\tlabel: spec\n\t\t\t};\n\t\t}\n\t\t// Resolve alias\n\t\tif (typeof spec.alias === 'string') {\n\t\t\t// As we don't know whether the alias has been resolved so far, resolve it here, too.\n\t\t\treturn Object.assign(spec, _.normalizeField(fields[spec.alias], fields));\n\t\t}\n\n\t\t// Add formatting callback as `formatter`\n\t\tif (typeof spec.format === 'string') {\n\t\t\tspec.formatter = Formatters[`format${spec.format}`];\n\t\t}\n\n\t\t// Normalize items\n\t\tif (_.isObject(spec.items)) {\n\t\tlet itemOrder = [];\n\t\t\tfor(let key in spec.items) {\n\t\t\t\tspec.items[key] = _.normalizeField(spec.items[key], fields);\n\t\t\t\titemOrder.push(Object.assign({key}, spec.items[key]));\n\t\t\t}\n\n\t\t\tspec.itemOrder = itemOrder\n\t\t\t\t.sort((i1, i2) => {\n\t\t\t\t\tif (i1.id === true) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\telse if (i2.id === true) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\telse if (typeof i1.order === 'number' && typeof i2.order === 'number') {\n\t\t\t\t\t\treturn i1.order - i2.order;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn i1.label.localeCompare(i2.label);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.map(item => item.key);\n\t\t}\n\n\t\treturn spec;\n\t},\n\n\thexToUint8(hexString) {\n\t\tif(hexString.length === 0 || hexString.length % 2 !== 0){\n\t\t\tthrow new Error(`The string \"${hexString}\" is not valid hex.`)\n\t\t}\n  \t\treturn new Uint8Array(hexString.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));\n\t},\n\n\tuint8ToHex(bytes) {\n\t\treturn bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\n\t},\n\n\tkeysFromListOfObjects(objectList) {\n\t\treturn objectList.reduce(\n\t\t\t(arr, o) => Object.keys(o).reduce(\n\t\t\t\t(a, k) => {\n\t\t\t\t\tif (a.indexOf(k) == -1) {\n\t\t\t\t\t\ta.push(k);\n\t\t\t\t\t}\n\t\t\t\t\treturn a;\n\t\t\t\t},\n\t\t\t\tarr\n\t\t\t),\n\t\t\t[]\n\t\t);\n\t},\n\n\tunit(value, unit = '') {\n\t\tif (typeof unit === 'string' && unit.length > 0) {\n\t\t\treturn `${value}&nbsp;<span class=\"unit\">${unit}</unit>`;\n\t\t}\n\t\treturn value;\n\t}\n\n};\n\nvar DataTypes = {\n\n\tarray(arr, sort = false, unit = '') {\n\t\treturn _.toList(arr, sort, v => DataTypes.format(v, unit));\n\t},\n\t\n\tobject(obj) {\n\t\treturn _.toObject(obj, v => DataTypes.format(v));\n\t},\n\t\n\tnull(label = 'n/a') {\n\t\treturn `<i class=\"null\">${label}</i>`;\n\t},\n\t\n\tnumber(num, unit = '') {\n\t\tif (typeof num !== 'number') {\n\t\t\tnum = parseFloat(num);\n\t\t}\n\t\treturn _.unit(num.toLocaleString(undefined, {maximumFractionDigits: 10}), unit);\n\t},\n\n\tstring(str, unit = '') {\n\t\treturn _.unit(_.e(str).replace(/(\\r\\n|\\r|\\n){2,}/g, '<br />'), unit);\n\t},\n\t\n\tboolean(bool) {\n\t\treturn bool ? '✔️' : '❌';\n\t},\n\t\n\tformat(value, unit = '') {\n\t\tif (typeof value === 'boolean') {\n\t\t\treturn DataTypes.boolean(value);\n\t\t}\n\t\telse if (typeof value === 'number') {\n\t\t\treturn DataTypes.number(value, unit);\n\t\t}\n\t\telse if (typeof value === 'string') {\n\t\t\treturn DataTypes.string(value, unit);\n\t\t}\n\t\telse if (Array.isArray(value)) {\n\t\t\treturn DataTypes.array(value, unit);\n\t\t}\n\t\telse if (_.isObject(value)) {\n\t\t\treturn DataTypes.object(value);\n\t\t}\n\t\telse {\n\t\t\treturn DataTypes.null();\n\t\t}\n\t}\n\n};\n\nvar Formatters = {\n\n\tformatUrl(value, field, spec = {}, context = null, parent = null) {\n\t\tlet title = _.isObject(parent) && typeof parent === 'string' ? parent.title : value;\n\t\treturn _.toLink(value, title, parent.rel || \"\");\n\t},\n\n\tformatMediaType(value, field, spec = {}) {\n\t\tlet short = Boolean(spec.shorten);\n\n\t\tlet media;\n\t\ttry {\n\t\t\tconst mediaType = require('content-type');\n\t\t\tmedia = mediaType.parse(value);\n\t\t} catch (error) {\n\t\t\treturn short ? \"\" : DataTypes.null('Unknown');\n\t\t}\n\n\t\tswitch(media.type) {\n\t\t\tcase 'image/tiff':\n\t\t\t\tif (media.parameters.application === \"geotiff\") {\n\t\t\t\t\tif (media.parameters.profile === \"cloud-optimized\") {\n\t\t\t\t\t\treturn short ? 'COG' : 'Cloud-optimized GeoTIFF image';\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn short ? 'GeoTiff' : 'GeoTIFF image';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn short ? 'TIFF' : 'TIFF image';\n\t\t\t\t}\n\t\t\tcase 'image/jp2':\n\t\t\t\treturn short ? 'JPEG 2000' : 'JPEG 2000 image';\n\t\t\tcase 'image/png':\n\t\t\tcase 'image/apng':\n\t\t\tcase 'image/vnd.mozilla.apng':\n\t\t\t\treturn short ? 'PNG' : 'PNG image';\n\t\t\tcase 'image/gif':\n\t\t\t\treturn short ? 'GIF' : 'GIF image';\n\t\t\tcase 'image/jpeg':\n\t\t\tcase 'image/jpg':\n\t\t\t\treturn short ? 'JPEG' : 'JPEG image';\n\t\t\tcase 'image/webp':\n\t\t\t\treturn short ? 'WebP' : 'WebP image';\n\t\t\tcase 'image/bmp':\n\t\t\tcase 'image/x-bmp':\n\t\t\tcase 'image/x-ms-bmp':\n\t\t\tcase 'image/wbmp':\n\t\t\t\treturn short ? 'Bitmap' : 'Bitmap image';\n\t\t\tcase 'image/svg+xml':\n\t\t\t\treturn short ? 'SVG' : 'SVG vector image';\n\t\t\tcase 'text/csv':\n\t\t\t\treturn short ? 'CSV' : 'Comma-separated values (CSV)';\n\t\t\tcase 'text/xml':\n\t\t\tcase 'application/xml':\n\t\t\t\treturn 'XML';\n\t\t\tcase 'text/json':\n\t\t\tcase 'application/json':\n\t\t\t\treturn 'JSON';\n\t\t\tcase 'text/yaml':\n\t\t\tcase 'text/vnd.yaml':\n\t\t\tcase 'text/x-yaml':\n\t\t\tcase 'application/x-yaml':\n\t\t\t\treturn 'YAML';\n\t\t\tcase 'application/geo+json':\n\t\t\t\treturn 'GeoJSON';\n\t\t\tcase 'application/geopackage+vnd.sqlite3':\n\t\t\tcase 'application/geopackage+sqlite3':\n\t\t\t\treturn 'GeoPackage';\n\t\t\tcase 'text/html':\n\t\t\tcase 'application/xhtml+xml':\n\t\t\t\treturn short ? 'HTML' : 'HTML (Website)';\n\t\t\tcase 'text/plain':\n\t\t\t\treturn short ? 'Text' : 'Text document';\n\t\t\tcase 'text/markdown':\n\t\t\t\treturn short ? 'Markdown' : 'Markdown document';\n\t\t\tcase 'application/pdf':\n\t\t\t\treturn short ? 'PDF' : 'PDF document';\n\t\t\tcase 'application/zip':\n\t\t\t\treturn short ? 'ZIP' : 'ZIP archive';\n\t\t\tcase 'application/gzip':\n\t\t\t\treturn short ? 'GZIP' : 'GZIP archive';\n\t\t\tcase 'application/x-hdf':\n\t\t\t\treturn 'HDF';\n\t\t\tcase 'application/x-netcdf':\n\t\t\t\treturn 'NetCDF';\n\t\t\tcase 'application/wmo-GRIB2':\n\t\t\t\treturn 'GRIB2';\n\t\t\tcase 'application/octet-stream':\n\t\t\t\treturn short ? 'Binary' : 'Binary file';\n\t\t\tcase 'application/vnd.laszip':\n\t\t\t\treturn 'LASzip';\n\t\t\tcase 'application/vnd.laszip+copc': // https://github.com/copcio/copcio.github.io/issues/53\n\t\t\t\treturn short ? 'COPC' : 'Cloud-optimized Point Cloud (LASzip)';\n\t\t\tcase 'application/vnd+zarr': // https://github.com/zarr-developers/zarr-specs/issues/123\n\t\t\t\treturn short ? 'zarr' : 'Cloud-optimized Point Cloud (LASzip)';\n\t\t\t// ToDo: Add media types for:\n\t\t\t// - flatgeobuf: https://github.com/flatgeobuf/flatgeobuf/discussions/112\n\t\t\t// - geoparquet: https://github.com/opengeospatial/geoparquet/issues/115\n\t\t\tdefault:\n\t\t\t\tlet [group, format] = media.type.split('/');\n\t\t\t\tformat = _.formatKey(format.replace(/^(vnd|x)[\\.\\+]/, ''));\n\t\t\t\tif (short) {\n\t\t\t\t\treturn format;\n\t\t\t\t}\n\t\t\t\tswitch(group) {\n\t\t\t\t\tcase 'audio':\n\t\t\t\t\t\treturn `${format} audio`;\n\t\t\t\t\tcase 'image':\n\t\t\t\t\t\treturn `${format} image`;\n\t\t\t\t\tcase 'font':\n\t\t\t\t\t\treturn `Font`;\n\t\t\t\t\tcase 'model':\n\t\t\t\t\t\treturn `${format} 3D model`;\n\t\t\t\t\tcase 'video':\n\t\t\t\t\t\treturn `${format} video`;\n\t\t\t\t\tcase 'text':\n\t\t\t\t\tcase 'application':\n\t\t\t\t\t\treturn format;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn _.e(value);\n\t\t\t\t}\n\t\t}\n\t},\n\n\tformatTimestamp(value) {\n\t\tif (typeof value === 'string') {\n\t\t\ttry {\n\t\t\t\treturn new Date(value).toLocaleString([], {\n\t\t\t\t\ttimeZone: \"UTC\",\n\t\t\t\t\ttimeZoneName: \"short\"\n\t\t\t\t});\n\t\t\t} catch (error) {}\n\t\t}\n\t\treturn DataTypes.null();\n\t},\n\n\tformatDate(value) {\n\t\tif (typeof value === 'string') {\n\t\t\ttry {\n\t\t\t\treturn new Date(value).toLocaleString([], {\n\t\t\t\t\tday: 'numeric',\n\t\t\t\t\tmonth: 'numeric',\n\t\t\t\t\tyear: 'numeric'\n\t\t\t\t});\n\t\t\t} catch (error) {}\n\t\t}\n\t\treturn DataTypes.null();\n\t},\n\n\tformatLicense(value, field, spec = {}, context = null) {\n\t\tif (typeof value !== 'string' || value.length === 0) {\n\t\t\treturn DataTypes.null();\n\t\t}\n\n\t\t// We could use the spdx-license-ids and/or spdx-to-html packages previously used in STAC Browser,\n\t\t// but let's try it without additional dependency for now.\n\t\tif (value !== 'proprietary' && value !== 'various' && value.match(/^[\\w\\.\\-]+$/i)) { // SPDX\n\t\t\treturn _.toLink(`https://spdx.org/licenses/${value}.html`, value, \"license\");\n\t\t}\n\t\t\n\t\tlet licenses = Array.isArray(context.links) ? context.links.filter(link => (_.isObject(link) && typeof link.href === 'string' && link.rel === 'license')) : [];\n\t\tif (licenses.length > 0) {\n\t\t\treturn _.toList(licenses, false, link => _.toLink(link.href, link.title || value, \"license\"));\n\t\t}\n\t\telse {\n\t\t\treturn DataTypes.string(value);\n\t\t}\n\t},\n\n\tformatProviders(value) {\n\t\treturn _.toList(value, false, provider => {\n\t\t\tlet name = provider.name;\n\t\t\tlet roles = '';\n\t\t\tlet description = '';\n\t\t\tif (typeof provider.url === 'string' && provider.url.length > 0) {\n\t\t\t\tname = _.toLink(provider.url, name);\n\t\t\t}\n\t\t\tif (Array.isArray(provider.roles) && provider.roles.length > 0) {\n\t\t\t\troles = provider.roles.map(r => DataTypes.format(r)).join(', ');\n\t\t\t\troles = ` (<em>${roles}</em>)`;\n\t\t\t}\n\t\t\tif (typeof provider.description === 'string' && provider.description.length > 0) {\n\t\t\t\tdescription = Formatters.formatCommonMark(provider.description);\n\t\t\t}\n\t\t\treturn `${name}${roles}${description}`;\n\t\t});\n\t},\n\n\tformatCommonMark(value) {\n\t\tif (typeof value !== 'string' || value.length === 0) {\n\t\t\treturn DataTypes.null();\n\t\t}\n\t\tconst commonmark = require('commonmark');\n\t\tlet reader = new commonmark.Parser();\n\t\tlet writer = new commonmark.HtmlRenderer({safe: true, smart: true});\n\t\tlet html = writer.render(reader.parse(value));\n\t\treturn `<div class=\"description\">${html}</div>`;\n\t},\n\n\tformatSoftware(value) {\n\t\tif (!_.isObject(value)) {\n\t\t\treturn DataTypes.null();\n\t\t}\n\n\t\tlet list = [];\n\t\tfor(let software in value) {\n\t\t\tlet version = value[software];\n\t\t\tif ((typeof version === 'string' && version.length > 0) || typeof version === 'number') {\n\t\t\t\tlist.push(`${software} (${version})`);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlist.push(software);\n\t\t\t}\n\t\t}\n\t\treturn _.toList(list, true);\n\t},\n\n\tformatDOI(value) {\n\t\tvalue = DataTypes.format(value);\n\t\treturn _.toLink(`http://doi.org/${value}`, value);\n\t},\n\n\tformatCRS(value) {\n\t\treturn _.toList(value, false, value => {\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tlet title = value\n\t\t\t\t\t.replace(/^https?:\\/\\/www\\.opengis\\.net\\/def\\/crs\\//i, '') // HTTP(s) URI\n\t\t\t\t\t.replace(/^urn:ogc:def:crs:/i, ''); // OGC URN\n\t\t\t\treturn _.toLink(value, title);\n\t\t\t}\n\t\t\treturn DataTypes.format(value);\n\t\t});\n\t},\n\n\tformatEPSG(value) {\n\t\t// Remove leading 'epsg:' which people sometimes prepend\n\t\tif (typeof value === 'string') {\n\t\t\tvalue = value.replace(/^epsg:/i, '');\n\t\t}\n\t\tvalue = parseInt(value, 10);\n\t\tif (value > 0) {\n\t\t\treturn _.toLink(`http://epsg.io/${value}`, value);\n\t\t}\n\t\telse {\n\t\t\treturn DataTypes.null();\n\t\t}\n\t},\n\n\tformatExtent(value, field, spec = {}) {\n\t\tif (!Array.isArray(value) || value.length < 2 || (value[0] === null && value[1] === null)) {\n\t\t\treturn DataTypes.null();\n\t\t}\n\t\telse if (value[0] === null) {\n\t\t\treturn `Until ${DataTypes.format(value[1], spec.unit)}`;\n\t\t}\n\t\telse if (value[1] === null) {\n\t\t\treturn `From ${DataTypes.format(value[0], spec.unit)}`;\n\t\t}\n\t\telse if (value[0] === value[1]) {\n\t\t\treturn DataTypes.format(value[0], spec.unit);\n\t\t}\n\t\telse {\n\t\t\treturn value.map(v => DataTypes.format(v, spec.unit)).join(' – ');\n\t\t}\n\t},\n\n\tformatHexColor(value) {\n\t\tif (typeof value !== 'string' || !value.match(/^#?[\\dA-F]{3,8}$/i)) {\n\t\t\treturn _.null();\n\t\t}\n\t\tif (value.startsWith('#')) {\n\t\t\tvalue = value.substring(1);\n\t\t}\n\t\treturn `<div class=\"color\" style=\"background-color: #${value}\"><code class=\"color-code\">#${value}</code></div>`;\n\t},\n\n\tformatPROJJSON(value) {\n\t\tif (!_.isObject(value)) {\n\t\t\treturn DataTypes.null();\n\t\t}\n\t\tif (_.isObject(value.id) && value.id.authority === 'EPSG' && typeof value.code === 'number' && value.code > 0) {\n\t\t\treturn 'EPSG ' + Formatters.formatEPSG(value);\n\t\t}\n\t\telse if (typeof value.name === 'string') {\n\t\t\treturn DataTypes.string(value.name);\n\t\t}\n\t\telse {\n\t\t\treturn DataTypes.object(value);\n\t\t}\n\t},\n\n\tformatTemporalExtent(value, field, spec = {}) {\n\t\tlet formatter = spec.shorten ? Formatters.formatDate : Formatters.formatTimestamp;\n\t\tif (!Array.isArray(value) || value.length < 2 || (typeof value[0] !== 'string' && typeof value[1] !== 'string')) {\n\t\t\treturn DataTypes.null();\n\t\t}\n\t\telse if (typeof value[0] !== 'string') {\n\t\t\treturn `Until ${formatter(value[1])}`;\n\t\t}\n\t\telse if (typeof value[1] !== 'string') {\n\t\t\treturn `${formatter(value[0])} until present`;\n\t\t}\n\t\telse if (value[0] === value[1]) {\n\t\t\treturn Formatters.formatTimestamp(value[0]);\n\t\t}\n\t\telse {\n\t\t\treturn value.map(date => formatter(date)).join(' - ');\n\t\t}\n\t},\n\n\tformatTemporalExtents(value, field, spec = {}) {\n\t\tlet sortExtents = (a,b) => {\n\t\t\tif (a[0] === null) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn a[0].localeCompare(b[0]);\n\t\t\t}\n\t\t};\n\t\treturn _.toList(value, sortExtents, v => Formatters.formatTemporalExtent(v, field, spec));\n\t},\n\n\tformatWKT2(value) {\n\t\tif (typeof value !== 'string') {\n\t\t\treturn DataTypes.null();\n\t\t}\n\t\t\n\t\t// This is a VERY simplistic WKT2 formatter, which may fail to render properly in some cases.\n\t\tlet indent = -1;\n\t\tlet formatted;\n\t\ttry {\n\t\t\tformatted = value.replace(/([A-Z]+)\\[|\\]/ig, (match, keyword) => {\n\t\t\t\tif (match === ']') {\n\t\t\t\t\tindent--;\n\t\t\t\t\treturn match;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tindent++;\n\t\t\t\t\tlet tabs = \"  \".repeat(indent);\n\t\t\t\t\treturn `\\n${tabs}${keyword}[`;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (e) {\n\t\t\t// In case the formatting did not work properly\n\t\t\t// (usually the number of [ and ] doesn't match)\n\t\t\t// just return the unformatted value\n\t\t\tformatted = value;\n\t\t\t\n\t\t}\n\n\t\treturn `<pre>${formatted}</pre>`;\n\t},\n\n\tfileSizeUnits: ['B', 'kB', 'MB', 'GB', 'TB'],\n\n\tformatFileSize(value) {\n\t\tif (typeof value !== 'number') {\n\t\t\treturn DataTypes.format(value);\n\t\t}\n\t\tvar i = value == 0 ? 0 : Math.floor( Math.log(value) / Math.log(1024) );\n\t\treturn _.unit(( value / Math.pow(1024, i) ).toFixed(2) * 1, Formatters.fileSizeUnits[i]);\n\t},\n\n\tformatChecksum(value) {\n\t\tif (typeof value !== 'string') {\n\t\t\treturn DataTypes.null();\n\t\t}\n\n\t\ttry {\n\t\t\tconst multihash = require('multihashes');\n\t\t\tconst meta = multihash.decode(_.hexToUint8(value));\n\t\t\tconst name = _.e(meta.name);\n\t\t\tconst hex = _.e(_.uint8ToHex(meta.digest));\n\t\t\treturn `<div class=\"checksum\"><input class=\"checksum-input\" size=\"32\" value=\"${hex}\" readonly /><br /><span class=\"checksum-algo\">Hashing algorithm: <strong>${name}</strong></span></div>`;\n\t\t} catch (error) {\n\t\t\treturn DataTypes.null();\n\t\t}\n\t},\n\n\tfileDataTypes: {\n\t\t\"int8\": \"8-bit integer\",\n\t\t\"int16\": \"16-bit integer\",\n\t\t\"int32\": \"32-bit integer\",\n\t\t\"int64\": \"64-bit integer\",\n\t\t\"uint8\": \"unsigned 8-bit integer\",\n\t\t\"uint16\": \"unsigned 16-bit integer\",\n\t\t\"uint32\": \"unsigned 32-bit integer\",\n\t\t\"uint64\": \"unsigned 64-bit integer\",\n\t\t\"float16\": \"16-bit float\",\n\t\t\"float32\": \"32-bit float\",\n\t\t\"float64\": \"64-big float\",\n\t\t\"cint16\": \"16-bit complex integer\",\n\t\t\"cint32\": \"32-bit complex integer\",\n\t\t\"cfloat32\": \"32-bit complex float\",\n\t\t\"cfloat64\": \"64-bit complex float\",\n\t\t\"other\": \"Other\"\n\t},\n\n\tformatFileDataType(value) {\n\t\tif (typeof value === 'string' && value in Formatters.fileDataTypes) {\n\t\t\treturn _.abbrev(value, Formatters.fileDataTypes[value]);\n\t\t}\n\n\t\treturn DataTypes.null();\n\t},\n\n\tformatTransform(value) {\n\t\tif (Array.isArray(value) && value.length % 3 === 0) {\n\t\t\tlet rows = [];\n\t\t\tfor (let i = 0; i < value.length; i = i+3) {\n\t\t\t\tlet chunk = value.slice(i, i + 3);\n\t\t\t\trows.push(`[${Formatters.formatCSV(chunk)}]`);\n\t\t\t}\n\t\t\treturn rows.join('<br />');\n\t\t}\n\t\telse {\n\t\t\treturn Formatters.formatCSV(value);\n\t\t}\n\t},\n\n\tformatShape(value, field, spec = {}) {\n\t\tif (Array.isArray(value)) {\n\t\t\treturn value.map(x => DataTypes.format(x, spec.unit)).join(' × ');\n\t\t}\n\t\telse {\n\t\t\treturn DataTypes.format(value, spec.unit);\n\t\t}\n\t},\n\n\tformatCSV(value) {\n\t\tif (Array.isArray(value)) {\n\t\t\tlet numeric = value.find(v => typeof v === 'number') !== undefined;\n\t\t\t// If there's potentially a comma in the values (decimal or thousand separators in numbers), use semicolon instead of comma.\n\t\t\treturn value.map(DataTypes.format).join(numeric ? '; ' : ', ');\n\t\t}\n\t\telse {\n\t\t\treturn DataTypes.format(value);\n\t\t}\n\t},\n\n\tformatGridCode(value) {\n\t\tif (typeof value !== 'string') {\n\t\t\treturn DataTypes.format(value);\n\t\t}\n\n\t\tlet splitHalf = function(parts, value, labelA, labelB) {\n\t\t\tlet len = value.length;\n\t\t\tif ((len % 2) === 1) {\n\t\t\t\tparts.push(`Code: ${value}`);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlet mid = len/2;\n\t\t\t\tlet a = value.substring(0, mid);\n\t\t\t\tparts.push(`${labelA}: ${a}`);\n\t\t\t\tlet b = value.substring(mid, len);\n\t\t\t\tparts.push(`${labelB}: ${b}`);\n\t\t\t}\n\t\t};\n\n\t\tlet [designator, code] = value.split(/-(.*)/);\n\t\tlet parts = [];\n\t\tswitch(designator) {\n\t\t\tcase 'MGRS': \n\t\t\t\tparts.push(_.abbrev(designator, 'Military Grid Reference System'));\n\t\t\t\tlet [, utm, band, sq, coord] = code.match(/^(\\d{2})([C-X])([A-Z]{2})(\\d+)$/);\n\t\t\t\tparts.push(`UTM Zone: ${utm}`);\n\t\t\t\tparts.push(`Latitude Band: ${band}`);\n\t\t\t\tparts.push(`Square Identifier: ${sq}`);\n\t\t\t\tsplitHalf(parts, coord, \"Easting\", \"Northing\");\n\t\t\t\tbreak;\n\t\t\tcase 'MSIN':\n\t\t\t\tparts.push('MODIS Sinusoidal Tile Grid');\n\t\t\t\tsplitHalf(parts, code, 'Horizontal', 'Vertical');\n\t\t\t\tbreak;\n\t\t\tcase 'WRS1':\n\t\t\tcase 'WRS2':\n\t\t\t\tlet version = designator.substring(3,4);\n\t\t\t\tparts.push(_.abbrev('WRS-' + version, 'Worldwide Reference System ' + version));\n\t\t\t\tsplitHalf(parts, code, 'Path', 'Row');\n\t\t\t\tbreak;\n\t\t\tcase 'DOQ':\n\t\t\t\tparts.push('Digital Orthophoto Quadrangle');\n\t\t\t\tparts.push(`Quadrangle: ${code}`);\n\t\t\t\tbreak;\n\t\t\tcase 'DOQQ':\n\t\t\t\tparts.push('Digital Orthophoto Quarter Quadrangle');\n\t\t\t\tlet quad = code.substr(0, code.length - 2);\n\t\t\t\tparts.push(`Quadrangle: ${quad}`);\n\t\t\t\tlet quarter = code.substr(-2);\n\t\t\t\tlet a = quarter[0] === 'N' ? 'North' : 'South';\n\t\t\t\tlet b = quarter[1] === 'E' ? 'East' : 'West';\n\t\t\t\tparts.push(`Quarter: ${a} ${b}`);\n\t\t\t\tbreak;\n\t\t\tcase 'MXRA':\n\t\t\t\tparts.push('Maxar ARD Tile Grid');\n\t\t\t\tlet [zone, quadkey] = code.split(/-(.*)/);\n\t\t\t\tif (zone.startsWith('Z')) {\n\t\t\t\t\tzone = zone.substring(1);\n\t\t\t\t}\n\t\t\t\tparts.push(`UTM Zone: ${zone}`);\n\t\t\t\tparts.push(`Quadkey: ${quadkey}`);\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn parts.join('<br />');\n\t}\n\n};\n\nfunction formatGrouped(context, data, type, filter, coreKey) {\n\t// Group fields into extensions\n\tlet groups = {};\n\tfor(let field in data) {\n\t\tlet value;\n\t\ttry {\n\t\t\tlet parts = field.split(/:(.*)/);\n\t\t\tif (parts.length === 1) {\n\t\t\t\tparts.unshift(coreKey);\n\t\t\t}\n\t\t\tlet ext = parts[0];\n\t\t\tif (typeof filter === 'function' && !filter(field)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvalue = data[field];\n\t\t\tlet spec = Registry.getSpecification(field, type);\n\n\t\t\t// Move to another extension (e.g. if no prefix is provided)\n\t\t\tif (spec.ext) {\n\t\t\t\text = spec.ext;\n\t\t\t}\n\n\t\t\t// Special handling for summaries that contain a list with keys (e.g. cube:dimensions, gee:schema)\n\t\t\t// There's usually just a single object included, so get that as value\n\t\t\tlet isSummarizedListWithKeys = false;\n\t\t\tif (type === 'summaries' && spec.listWithKeys && Array.isArray(value) && value.length > 0) {\n\t\t\t\tvalue = value[0];\n\t\t\t\tisSummarizedListWithKeys = true;\n\t\t\t}\n\n\t\t\t// Fill items with missing properties\n\t\t\tlet items = null;\n\t\t\tlet itemOrder = [];\n\t\t\tif (_.isObject(spec.items)) {\n\t\t\t\tlet temp = value;\n\t\t\t\t// Ignore keys for lists that are stored as object (e.g. cube:dimensions)\n\t\t\t\tif (spec.listWithKeys) {\n\t\t\t\t\ttemp = Object.values(temp);\n\t\t\t\t}\n\n\t\t\t\tlet itemFieldNames = [];\n\t\t\t\tif (Array.isArray(temp)) {\n\t\t\t\t\titemFieldNames = _.keysFromListOfObjects(temp);\n\t\t\t\t}\n\t\t\t\telse if (_.isObject(temp)) {\n\t\t\t\t\titemFieldNames = Object.keys(temp);\n\t\t\t\t}\n\n\t\t\t\titems = {};\n\t\t\t\t// Remove fields from list that are not available in the data\n\t\t\t\titemOrder = spec.itemOrder.filter(fieldName => itemFieldNames.includes(fieldName));\n\n\t\t\t\titemFieldNames.forEach(key => {\n\t\t\t\t\tif (typeof spec.items[key] === 'undefined') {\n\t\t\t\t\t\t// Add fields that are not specified in fields.json\n\t\t\t\t\t\titems[key] = {\n\t\t\t\t\t\t\tlabel: _.formatKey(key),\n\t\t\t\t\t\t\texplain: key\n\t\t\t\t\t\t};\n\t\t\t\t\t\t// Place non-specified fields at the end\n\t\t\t\t\t\titemOrder.push(key);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// Clone field spec from fields.json\n\t\t\t\t\t\titems[key] = Object.assign({}, spec.items[key]);\n\t\t\t\t\t\titems[key].label = label(key, spec.items[key]);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Format values\n\t\t\tlet formatted;\n\n\t\t\t// Handle summaries\n\t\t\tif (type === 'summaries') {\n\t\t\t\tif (!isSummarizedListWithKeys && _.isObject(value)) {\n\t\t\t\t\tif (typeof value.minimum !== 'undefined' && typeof value.minimum !== 'undefined') {\n\t\t\t\t\t\tformatted = Formatters.formatExtent([value.minimum, value.maximum], field, spec);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tformatted = DataTypes.object(value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (Registry.externalRenderer && items) {\n\t\t\t\t\tlet formatted = isSummarizedListWithKeys ? Object.assign({}, value) : value.slice(0);\n\t\t\t\t\t// Go through each field's summary\n\t\t\t\t\tfor(let i in formatted) {\n\t\t\t\t\t\tlet result = _.isObject(formatted[i]) ? {} : [];\n\t\t\t\t\t\t// Go through each entry in a field's summary (this is besically a single value as defined in the Item spec)\n\t\t\t\t\t\tfor(let key in items) {\n\t\t\t\t\t\t\tresult[key] = format(formatted[i][key], key, context, data, items[key]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tformatted[i] = result;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (Array.isArray(value)) {\n\t\t\t\t\tformatted = _.toList(value, !spec.custom && !spec.items, v => format(v, field, context, data, spec));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconsole.warn(`Invalid summary value: ${value}`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Fallback to \"normal\" rendering if not handled by summaries yet\n\t\t\tif (typeof formatted === 'undefined') {\n\t\t\t\tformatted = format(value, field, context, data, spec);\n\t\t\t}\n\n\t\t\t// Add group if missing\n\t\t\tif (!_.isObject(groups[ext])) {\n\t\t\t\tgroups[ext] = {\n\t\t\t\t\textension: ext,\n\t\t\t\t\tlabel: extension(ext),\n\t\t\t\t\tproperties: {}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tgroups[ext].properties[field] = {\n\t\t\t\tlabel: label(field, spec),\n\t\t\t\tvalue,\n\t\t\t\tformatted,\n\t\t\t\titems,\n\t\t\t\titemOrder,\n\t\t\t\tspec\n\t\t\t};\n\t\t} catch(error) {\n\t\t\tconsole.error(`Field '${field}' with value '${value}' resulted in an error`, error);\n\t\t}\n\t}\n\treturn Object.values(groups).sort((a,b) => a.extension.localeCompare(b.extension));\n\n}\n\n// For assets (item and collection) and item-assets (extension)\nfunction formatAsset(asset, context, filter = null, coreKey = '') {\n\treturn formatGrouped(context, asset, 'assets', filter, coreKey);\n}\n\n// For links\nfunction formatLink(link, context, filter = null, coreKey = '') {\n\treturn formatGrouped(context, link, 'links', filter, coreKey);\n}\n\n// For Collection summaries\nfunction formatSummaries(collection, filter = null, coreKey = '') {\n\treturn formatGrouped(collection, collection.summaries, 'summaries', filter, coreKey);\n}\n\n// For Collections\nfunction formatCollection(collection, filter = null, coreKey = '') {\n\treturn formatGrouped(collection, collection, 'collection', filter, coreKey);\n}\n\n// For item properties\nfunction formatItemProperties(item, filter = null, coreKey = '') {\n\treturn formatGrouped(item, item.properties, 'metadata', filter, coreKey);\n}\n\nfunction format(value, field, context = null, parent = null, spec = null) {\n\tif (!_.isObject(spec)) {\n\t\tspec = Fields.metadata[field] || {};\n\t}\n\n\tif (typeof spec.formatter === 'function') {\n\t\treturn spec.formatter(value, field, spec, context, parent);\n\t}\n\telse if (_.isObject(spec.mapping)) {\n\t\tlet key = String(value).toLowerCase();\n\t\tif (typeof spec.mapping[key] !== 'undefined') {\n\t\t\tvalue = spec.mapping[key];\n\t\t}\n\t\treturn DataTypes.format(value, spec.unit);\n\t}\n\telse if (value === null && spec.null) {\n\t\treturn DataTypes.null(spec.null);\n\t}\n\telse if (Array.isArray(value)) {\n\t\tlet callback = v => format(v, field, context, parent, spec);\n\t\tif (Registry.externalRenderer && (spec.custom || spec.items)) {\n\t\t\treturn value.map(callback);\n\t\t}\n\t\telse {\n\t\t\treturn _.toList(value, false, callback);\n\t\t}\n\t}\n\telse if (_.isObject(value) && _.isObject(spec.items)) {\n\t\tlet callback = (v, k, p) => format(v, k, context, p, spec.listWithKeys ? Object.assign({}, spec, {listWithKeys: false}) : spec.items[k]);\n\t\tif (Registry.externalRenderer && (spec.custom || spec.items)) {\n\t\t\tlet formattedValues = {};\n\t\t\tfor(let key in value) {\n\t\t\t\tformattedValues[key] = callback(value[key], key, value);\n\t\t\t}\n\t\t\treturn formattedValues;\n\t\t}\n\t\telse {\n\t\t\treturn _.toObject(value, callback);\n\t\t}\n\t}\n\telse {\n\t\treturn DataTypes.format(value, spec.unit);\n\t}\n}\n\nfunction label(key, spec = null) {\n\tif (!_.isObject(spec)) {\n\t\tspec = Fields.metadata[key] || {};\n\t}\n\tif (_.isObject(spec) && typeof spec.label === 'string') {\n\t\tif (typeof spec.explain === 'string') {\n\t\t\tif (spec.explain.match(/^https?:\\/\\//i)) {\n\t\t\t\treturn _.toLink(spec.explain, spec.label, \"about\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn _.abbrev(spec.label, spec.explain);\n\t\t\t}\n\t\t}\n\t\telse if (typeof spec.label === 'string') {\n\t\t\treturn spec.label;\n\t\t}\n\t}\n\treturn _.formatKey(key);\n}\n\nfunction extension(key) {\n\treturn label(key, Fields.extensions[key]);\n}\n\nvar Fields = _.normalizeFields(require('./fields.json'));\n\nmodule.exports = {\n\tformat,\n\tlabel,\n\textension,\n\tformatCollection,\n\tformatSummaries,\n\tformatItemProperties,\n\tformatAsset,\n\tformatLink,\n\tFields,\n\tRegistry,\n\tHelper: _,\n\tDataTypes,\n\tFormatters\n};"],"names":["Registry","externalRenderer","addExtension","prefix","spec","Fields","extensions","_","normalizeField","addMetadataField","field","metadata","addLinkField","links","addAssetField","assets","addMetadataFields","specs","key","getSpecification","type","e","str","String","replace","toList","arr","sort","formatter","list","tag","Array","isArray","slice","map","length","DataTypes","null","join","toLink","url","title","rel","target","x","toObject","obj","html","label","formatKey","value","abbrev","short","long","isObject","Object","split","part","substr","toUpperCase","normalizeFields","fields","parts","alias","assign","format","Formatters","items","itemOrder","push","i1","i2","id","order","localeCompare","item","hexToUint8","hexString","Error","Uint8Array","match","byte","parseInt","uint8ToHex","bytes","reduce","toString","padStart","keysFromListOfObjects","objectList","o","keys","a","k","indexOf","unit","array","v","object","number","num","parseFloat","toLocaleString","undefined","maximumFractionDigits","string","boolean","bool","formatUrl","context","parent","formatMediaType","media","Boolean","shorten","mediaType","parse","error","parameters","application","profile","group","formatTimestamp","Date","timeZone","timeZoneName","formatDate","day","month","year","formatLicense","licenses","filter","link","href","formatProviders","provider","name","roles","description","r","formatCommonMark","commonmark","reader","Parser","writer","HtmlRenderer","safe","smart","render","formatSoftware","software","version","formatDOI","formatCRS","formatEPSG","formatExtent","formatHexColor","startsWith","substring","formatPROJJSON","authority","code","formatTemporalExtent","date","formatTemporalExtents","sortExtents","b","formatWKT2","formatted","indent","keyword","tabs","repeat","fileSizeUnits","formatFileSize","i","Math","floor","log","pow","toFixed","formatChecksum","multihash","meta","decode","hex","digest","fileDataTypes","formatFileDataType","formatTransform","rows","chunk","formatCSV","formatShape","numeric","find","formatGridCode","splitHalf","labelA","labelB","len","mid","designator","utm","band","sq","coord","quad","quarter","zone","quadkey","formatGrouped","data","coreKey","groups","unshift","ext","isSummarizedListWithKeys","listWithKeys","temp","values","itemFieldNames","fieldName","includes","forEach","explain","minimum","maximum","result","custom","console","warn","extension","properties","formatAsset","asset","formatLink","formatSummaries","collection","summaries","formatCollection","formatItemProperties","mapping","toLowerCase","callback","p","formattedValues","module","exports","Helper"],"sourceRoot":""}