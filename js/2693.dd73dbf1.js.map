{"version":3,"file":"js/2693.dd73dbf1.js","mappings":"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","sources":["webpack://@openeo/web-editor/./src/components/modals/ExpressionModal.vue","webpack://@openeo/web-editor/src/components/modals/ExpressionModal.vue","webpack://@openeo/web-editor/./src/components/modals/ExpressionModal.vue?61f3","webpack://@openeo/web-editor/./src/components/modals/ExpressionModal.vue?b6ae"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('Modal',{attrs:{\"show\":_vm.show,\"width\":\"80%\",\"title\":\"Formula Editor\"},on:{\"closed\":function($event){return _vm.$emit('closed')}},scopedSlots:_vm._u([{key:\"default\",fn:function(){return [_c('div',{staticClass:\"content\"},[_c('TextEditor',{ref:\"editor\",staticClass:\"editor\",attrs:{\"id\":\"input\",\"language\":\"math\",\"placeholder\":\"e.g. x * 2.5 / (x - y)\"},on:{\"drop\":_vm.onDrop,\"dragover\":_vm.allowDrop},model:{value:(_vm.input),callback:function ($$v) {_vm.input=$$v},expression:\"input\"}}),_c('div',{staticClass:\"description\"},[_c('p',[_c('i',{staticClass:\"fas fa-info-circle\"}),_vm._v(\" Above you can insert a mathematical formula and it will be converted to openEO code for you.\")]),_c('p',[_c('strong',[_vm._v(\"Operators\")]),_vm._v(\":\"),_c('br'),_vm._l((_vm.operators),function(op){return _c('kbd',{key:op.op,staticClass:\"click\",attrs:{\"title\":op.title,\"draggable\":\"true\"},on:{\"click\":function($event){return _vm.broadcast('showProcess', {id: op.processId})},\"dragstart\":function($event){return _vm.onDrag($event, 'operators', op.op)}}},[_vm._v(_vm._s(op.op))])})],2),_c('p',[_vm._v(\"Supported \"),_c('strong',[_vm._v(\"mathematical functions\")]),_vm._v(\": \"),(_vm.mathProcesses.length)?[_c('br'),_vm._l((_vm.mathProcesses),function(func){return _c('kbd',{key:func.id,staticClass:\"click\",attrs:{\"title\":func.summary,\"draggable\":\"true\"},on:{\"click\":function($event){return _vm.broadcast('showProcess', func)},\"dragstart\":function($event){return _vm.onDrag($event, 'functions', func)}}},[_vm._v(_vm._s(func.id))])})]:[_vm._v(\"None\")]],2),_c('p',[_vm._v(\"Available \"),_c('strong',[_vm._v(\"output from processes\")]),_vm._v(\": \"),(_vm.results.length)?[_c('br'),_vm._l((_vm.results),function(id){return _c('kbd',{key:id,attrs:{\"draggable\":\"true\"},on:{\"dragstart\":function($event){return _vm.onDrag($event, 'results', id)}}},[_vm._v(\"#\"+_vm._s(id))])})]:[_vm._v(\"None\")]],2),_c('p',[_c('strong',[_vm._v(\"Parameters\")]),_vm._v(\": If a variable is found in the formula which can't be resolved to a pre-defined parameter, a new parameter will be created for it. Available pre-defined parameters: \"),(_vm.pgParameters.length)?[_c('br'),_vm._l((_vm.pgParameters),function(param){return _c('kbd',{key:param.id,staticClass:\"click\",attrs:{\"draggable\":\"true\"},on:{\"click\":function($event){return _vm.broadcast('showProcessParameter', param)},\"dragstart\":function($event){return _vm.onDrag($event, 'pgParameters', param.name)}}},[_vm._v(_vm._s(param.name))])})]:[_vm._v(\"None\")]],2),(_vm.supportsArrayElement)?_c('p',[_vm._v(\"If the first pre-defined parameter is a (labeled) \"),_c('strong',[_vm._v(\"array\")]),_vm._v(\", the value for a specific index or label can be accessed by typing the numeric index or textual label with a \"),_c('kbd',[_vm._v(\"$\")]),_vm._v(\" in front, for example \"),_c('kbd',[_vm._v(\"$B1\")]),_vm._v(\" for the label B1 or \"),_c('kbd',[_vm._v(\"$0\")]),_vm._v(\" for the first element in the array. You can access subsequent parameters by adding additional $ characters at the beginning, e.g. \"),_c('kbd',[_vm._v(\"$$0\")]),_vm._v(\" for the first element of an array in the second parameter, \"),_c('kbd',[_vm._v(\"$$$0\")]),_vm._v(\" for the same behavior in the third parameter etc. Numeric labels are not supported.\")]):_vm._e()])],1)]},proxy:true},{key:\"footer\",fn:function(){return [_c('div',{staticClass:\"footer\"},[_c('button',{attrs:{\"type\":\"button\"},on:{\"click\":_vm.createResult}},[_vm._v(\"Insert\")])])]},proxy:true}])})\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n\t<Modal :show=\"show\" width=\"80%\" title=\"Formula Editor\" @closed=\"$emit('closed')\">\n\t\t<template #default>\n\t\t\t<div class=\"content\">\n\t\t\t\t<TextEditor ref=\"editor\" id=\"input\" class=\"editor\" v-model=\"input\" language=\"math\" placeholder=\"e.g. x * 2.5 / (x - y)\" @drop=\"onDrop\" @dragover=\"allowDrop\" />\n\t\t\t\t<div class=\"description\">\n\t\t\t\t\t<p><i  class=\"fas fa-info-circle\"></i> Above you can insert a mathematical formula and it will be converted to openEO code for you.</p>\n\t\t\t\t\t<p><strong>Operators</strong>:<br />\n\t\t\t\t\t\t<kbd v-for=\"op in operators\" :key=\"op.op\" :title=\"op.title\" @click=\"broadcast('showProcess', {id: op.processId})\" class=\"click\" draggable=\"true\" @dragstart=\"onDrag($event, 'operators', op.op)\">{{ op.op }}</kbd>\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>Supported <strong>mathematical functions</strong>:\n\t\t\t\t\t\t<template v-if=\"mathProcesses.length\">\n\t\t\t\t\t\t\t<br /><kbd v-for=\"func in mathProcesses\" :key=\"func.id\" :title=\"func.summary\" @click=\"broadcast('showProcess', func)\" class=\"click\" draggable=\"true\" @dragstart=\"onDrag($event, 'functions', func)\">{{ func.id }}</kbd>\n\t\t\t\t\t\t</template>\n\t\t\t\t\t\t<template v-else>None</template>\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>Available <strong>output from processes</strong>:\n\t\t\t\t\t\t<template v-if=\"results.length\">\n\t\t\t\t\t\t\t<br /><kbd v-for=\"id in results\" :key=\"id\" draggable=\"true\" @dragstart=\"onDrag($event, 'results', id)\">#{{ id }}</kbd> <!-- ToDo: Open non-editable parameter editor or process schema -->\n\t\t\t\t\t\t</template>\n\t\t\t\t\t\t<template v-else>None</template>\n\t\t\t\t\t</p>\n\t\t\t\t\t<p><strong>Parameters</strong>: If a variable is found in the formula which can't be resolved to a pre-defined parameter, a new parameter will be created for it. Available pre-defined parameters:\n\t\t\t\t\t\t<template v-if=\"pgParameters.length\">\n\t\t\t\t\t\t\t<br /><kbd v-for=\"param in pgParameters\" :key=\"param.id\" @click=\"broadcast('showProcessParameter', param)\" class=\"click\" draggable=\"true\" @dragstart=\"onDrag($event, 'pgParameters', param.name)\">{{ param.name }}</kbd>\n\t\t\t\t\t\t</template>\n\t\t\t\t\t\t<template v-else>None</template>\n\t\t\t\t\t</p>\n\t\t\t\t\t<p v-if=\"supportsArrayElement\">If the first pre-defined parameter is a (labeled) <strong>array</strong>, the value for a specific index or label can be accessed by typing the numeric index or textual label with a <kbd>$</kbd> in front, for example <kbd>$B1</kbd> for the label B1 or <kbd>$0</kbd> for the first element in the array. You can access subsequent parameters by adding additional $ characters at the beginning, e.g. <kbd>$$0</kbd> for the first element of an array in the second parameter, <kbd>$$$0</kbd> for the same behavior in the third parameter etc. Numeric labels are not supported.</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</template>\n\t\t<template #footer>\n\t\t\t<div class=\"footer\">\n\t\t\t\t<button type=\"button\" @click=\"createResult\">Insert</button>\n\t\t\t</div>\n\t\t</template>\n\t</Modal>\n</template>\n\n<script>\nimport Modal from './Modal.vue';\nimport Utils from '../../utils.js';\nimport TextEditor from '../TextEditor.vue';\nimport EventBusMixin from '../EventBusMixin.js';\nimport Process from '../../process';\nimport { Formula } from '@openeo/js-client';\n\nexport default {\n\tname: 'ExpressionModal',\n\tmixins: [EventBusMixin],\n\tcomponents: {\n\t\tModal,\n\t\tTextEditor\n\t},\n\tprops: {\n\t\tprocess: {\n\t\t\ttype: Object,\n\t\t\tdefault: () => ({})\n\t\t}\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tshow: true,\n\t\t\tinput: '',\n\t\t\tarrayElements: {},\n\t\t\tresult: {},\n\t\t\treplace: false\n\t\t};\n\t},\n\tcreated() {\n\t\ttry {\n\t\t\tthis.importFormula();\n\t\t} catch (error) {\n\t\t\tconsole.info(error);\n\t\t}\n\n\t\tthis.arrayElements = {};\n\t\tif(!this.replace) {\n\t\t\t// If not replacing: Add all array_element calls for labels to the list so that we don't get duplicate array_element calls\n\t\t\tfor(let id in this.process.getNodes()) {\n\t\t\t\tlet node = this.process.getNode(id);\n\t\t\t\tif (node.process_id === 'array_element') {\n\t\t\t\t\tlet placeholder = this.process.getArrayElementPlaceholder(node);\n\t\t\t\t\tthis.arrayElements[placeholder] = {from_node: node.id};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\tcomputed: {\n\t\t...Utils.mapGetters(['processes']),\n\t\tmathProcesses() {\n\t\t\treturn this.processes.getMathProcesses();\n\t\t},\n\t\tpgParameters() {\n\t\t\treturn this.process.getCallbackParameters();\n\t\t},\n\t\toperators() {\n\t\t\tvar ops = [];\n\t\t\tfor(var op in Formula.operatorMapping) {\n\t\t\t\tlet processId = Formula.operatorMapping[op];\n\t\t\t\tlet title = this.processes.get(processId).summary;\n\t\t\t\tops.push({op, processId, title});\n\t\t\t}\n\t\t\treturn ops;\n\t\t},\n\t\tresults() {\n\t\t\tlet resultNodes = [];\n\t\t\tfor(var id in this.process.getNodes()) {\n\t\t\t\tvar node = this.process.getNode(id);\n\t\t\t\tvar p = this.processes.get(node.process_id);\n\t\t\t\tif (Process.isMathProcess(p)) {\n\t\t\t\t\tresultNodes.push(id);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn resultNodes;\n\t\t},\n\t\tsupportsArrayElement() {\n\t\t\t// A pg parameter needs to be available\n\t\t\tif (this.pgParameters.length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// array_element must be supported\n\t\t\treturn this.processes.has('array_element');\n\t\t}\n\t},\n\tmethods: {\n\t\tonDrag(event, type, data) {\n\t\t\tswitch(type) {\n\t\t\t\tcase 'functions':\n\t\t\t\t\tlet params = (data.parameters || []).map(p => p.name);\n\t\t\t\t\tdata = data.id + '(' + params.join(', ') + ')';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'results':\n\t\t\t\t\tdata = '#' + data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tevent.dataTransfer.setData(\"text/plain\", data);\n\t\t},\n\t\tallowDrop(event) {\n\t\t\tevent.preventDefault();\n\t\t},\n\t\tonDrop(event) {\n\t\t\tvar text = event.dataTransfer.getData(\"text/plain\");\n\t\t\tif (text) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tthis.$refs.editor.insert(text, false);\n\t\t\t}\n\t\t},\n\t\timportFormula() {\n\t\t\tlet formula = this.process.toFormulaString();\n\t\t\tif (formula) {\n\t\t\t\tthis.input = formula;\n\t\t\t\tthis.replace = true;\n\t\t\t}\n\t\t},\n\t\tcreateResult() {\n\t\t\tif (this.input.length === 0) {\n\t\t\t\tthis.show = false;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tthis.result = {};\n\t\t\t\tlet formula = new Formula(this.input);\n\t\t\t\tlet res = this.parseTree(formula.tree);\n\t\t\t\tif (!Utils.isObject(res) || !res.from_node) {\n\t\t\t\t\tthrow new Error('Invalid formula specified.');\n\t\t\t\t}\n\t\t\t\t// Set result node\n\t\t\t\tthis.result[res.from_node].result = true;\n\t\t\t\t// Send result\n\t\t\t\tthis.$emit('save', this.result, this.replace);\n\t\t\t\tthis.show = false;\n\t\t\t} catch(e) {\n\t\t\t\tUtils.exception(this, e);\n\t\t\t}\n\t\t},\n\t\tparseTree(tree) {\n\t\t\tlet key = Object.keys(tree)[0]; // There's never more than one property so no loop required\n\t\t\tswitch(key) {\n\t\t\t\tcase 'Number':\n\t\t\t\t\treturn Number.parseFloat(tree.Number);\n\t\t\t\tcase 'Identifier':\n\t\t\t\t\treturn this.getRef(tree.Identifier);\n\t\t\t\tcase 'Expression':\n\t\t\t\t\treturn this.parseTree(tree.Expression);\n\t\t\t\tcase 'FunctionCall':\n\t\t\t\t\tlet args = [];\n\t\t\t\t\tfor(let i in tree.FunctionCall.args) {\n\t\t\t\t\t\targs.push(this.parseTree(tree.FunctionCall.args[i]));\n\t\t\t\t\t}\n\t\t\t\t\treturn this.addProcess(tree.FunctionCall.name, args);\n\t\t\t\tcase 'Binary':\n\t\t\t\t\treturn this.addOperatorProcess(\n\t\t\t\t\t\ttree.Binary.operator,\n\t\t\t\t\t\tthis.parseTree(tree.Binary.left),\n\t\t\t\t\t\tthis.parseTree(tree.Binary.right)\n\t\t\t\t\t);\n\t\t\t\tcase 'Unary':\n\t\t\t\t\tlet val = this.parseTree(tree.Unary.expression);\n\t\t\t\t\tif (tree.Unary.operator === '-') {\n\t\t\t\t\t\tif (typeof val === 'number') {\n\t\t\t\t\t\t\treturn -val;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\treturn this.addOperatorProcess('*', -1, val);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn val;\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('Operation ' + key + ' not supported.');\n\t\t\t}\n\t\t},\n\t\tgetRef(value) {\n\t\t\t// Convert native data types\n\t\t\tif (value === 'true') {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse if (value === 'false') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (value === 'null') {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Output of a process\n\t\t\tif (typeof value === 'string' && value.startsWith('#')) {\n\t\t\t\tlet nodeId = value.substring(1);\n\t\t\t\tif (this.results.includes(nodeId)) {\n\t\t\t\t\treturn { from_node: nodeId };\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Array labels / indices\n\t\t\tif (this.supportsArrayElement && typeof value === 'string') {\n\t\t\t\tlet prefix = value.match(/^\\$+/);\n\t\t\t\tlet count = prefix ? prefix[0].length : 0;\n\t\t\t\tif (count > 0) {\n\t\t\t\t\tlet ref = value.substring(count);\n\t\t\t\t\tif (!(value in this.arrayElements)) {\n\t\t\t\t\t\t// ToDo: Check whether label is really supported - see implementation for supportsArrayElement()\n\t\t\t\t\t\tlet args = {\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\tfrom_parameter: this.pgParameters[count-1].name\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (ref.match(/^\\d+$/)) {\n\t\t\t\t\t\t\targs.index = Number.parseInt(ref, 10);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\targs.label = ref;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.arrayElements[value] = this.addProcess(\"array_element\", args);\n\t\t\t\t\t}\n\t\t\t\t\treturn this.arrayElements[value];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Everything else is a parameter\n\t\t\tif (this.pgParameters.filter(p => p.name === value).length === 0) {\n\t\t\t\t// ToDo: Add new parameter to process\n\t\t\t}\n\t\t\treturn { from_parameter: value };\n\t\t},\n\t\taddOperatorProcess(operator, left, right) {\n\t\t\tif (typeof Formula.operatorMapping[operator] !== 'undefined') {\n\t\t\t\tlet process = this.processes.get(Formula.operatorMapping[operator]);\n\t\t\t\tlet args = {};\n\t\t\t\tif (!process || !Array.isArray(process.parameters) || process.parameters.length < 2) {\n\t\t\t\t\tthrow new Error(\"Process for operator \" + operator + \" must have at least two parameters\");\n\t\t\t\t}\n\t\t\t\targs[process.parameters[0].name || 'x'] = left;\n\t\t\t\targs[process.parameters[1].name || 'y'] = right;\n\t\t\t\treturn this.addProcess(process, args);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new Error('Operator ' + operator + ' not supported.');\n\t\t\t}\n\t\t},\n\t\taddProcess(process, args) {\n\t\t\tif (typeof process === 'string') {\n\t\t\t\tprocess = this.processes.get(process);\n\t\t\t}\n\n\t\t\tif (!process) {\n\t\t\t\tthrow new Error(\"Process not available: \" + name);\n\t\t\t}\n\t\t\telse if (args.length > Utils.size(process.parameters)) {\n\t\t\t\tthrow new Error(\"Number of given arguments exceeds number of process parameters for process '\" + name + \"'.\");\n\t\t\t}\n\n\t\t\t// Convert arguments array to object\n\t\t\tif (Array.isArray(args)) {\n\t\t\t\tlet namedArgs = {};\n\t\t\t\tfor (let i in args) {\n\t\t\t\t\tlet parameter = process.parameters[i];\n\t\t\t\t\tnamedArgs[parameter.name] = args[i];\n\t\t\t\t}\n\t\t\t\targs = namedArgs;\n\t\t\t}\n\t\t\t// ToDo: Check all arguments against their schemas / check all required fields are given\n\n\t\t\t// Add node to result with unique id\n\t\t\tlet nodeId = Utils.getUniqueId();\n\t\t\tlet node = {\n\t\t\t\tprocess_id: process.id,\n\t\t\t\targuments: args\n\t\t\t};\n\t\t\tthis.result[nodeId] = node;\n\t\t\treturn { from_node: nodeId };\n\t\t}\n\t}\n}\n</script>\n\n<style scoped>\n.content {\n\tdisplay: flex;\n\tflex-direction: column;\n}\n.content .textEditor {\n\tflex-grow: 1;\n}\n.description {\n\tmargin-top: 1rem;\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: flex-start;\n}\n.description p {\n\tmargin: 0.5em 0;\n}\n.editor {\n\twidth: 100%;\n\tmin-height: 4em;\n\theight: 10em;\n}\nkbd {\n\tfont-family: Consolas, \"Lucida Console\", monospace;\n\tdisplay: inline-block;\n\tborder-radius: 3px;\n\tpadding: 1px 5px;\n\tbox-shadow: 1px 1px 1px #777;\n\tmargin: 2px;\n\tfont-size: small;\n\tvertical-align: text-bottom;\n\tbackground: #eee;\n\tfont-weight: 600;\n\tcolor: #555;\n\tletter-spacing: 0.25px;\n}\nkbd.click {\n\tcursor: pointer;\n}\n</style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ExpressionModal.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ExpressionModal.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./ExpressionModal.vue?vue&type=template&id=cc5174a6&scoped=true\"\nimport script from \"./ExpressionModal.vue?vue&type=script&lang=js\"\nexport * from \"./ExpressionModal.vue?vue&type=script&lang=js\"\nimport style0 from \"./ExpressionModal.vue?vue&type=style&index=0&id=cc5174a6&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"cc5174a6\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","attrs","show","on","$event","$emit","scopedSlots","_u","key","fn","staticClass","ref","onDrop","allowDrop","model","value","input","callback","$$v","expression","_v","_l","operators","op","title","broadcast","id","processId","onDrag","_s","mathProcesses","length","func","summary","results","pgParameters","param","name","supportsArrayElement","_e","proxy","createResult","staticRenderFns","mixins","EventBusMixin","components","Modal","TextEditor","props","process","type","Object","default","data","arrayElements","result","replace","created","importFormula","error","console","info","getNodes","node","getNode","process_id","placeholder","getArrayElementPlaceholder","from_node","computed","Utils","mapGetters","processes","getMathProcesses","getCallbackParameters","ops","Formula","operatorMapping","get","push","resultNodes","p","Process","isMathProcess","has","methods","event","params","parameters","map","join","dataTransfer","setData","preventDefault","text","getData","$refs","editor","insert","formula","toFormulaString","res","parseTree","tree","isObject","Error","e","exception","keys","Number","parseFloat","getRef","Identifier","Expression","args","i","FunctionCall","addProcess","addOperatorProcess","Binary","operator","left","right","val","Unary","startsWith","nodeId","substring","includes","prefix","match","count","from_parameter","index","parseInt","label","filter","Array","isArray","size","namedArgs","parameter","getUniqueId","arguments","component"],"sourceRoot":""}