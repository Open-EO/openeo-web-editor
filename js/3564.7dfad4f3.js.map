{"version":3,"file":"js/3564.7dfad4f3.js","mappings":"gNAUO,SAASA,IACd,OAAO,CACT,CAMO,SAASC,IACd,OAAO,CACT,CAOO,SAASC,IAAQ,CAWjB,SAASC,EAAWC,GACzB,IAGIC,EAGAC,EAEAC,EARAC,GAAS,EAUb,OAAO,WACL,MAAMC,EAAWC,MAAMC,UAAUC,MAAMC,KAAKC,WAO5C,OANKN,GAAUO,OAASR,IAAa,QAAYE,EAAUH,KACzDE,GAAS,EACTD,EAAWQ,KACXT,EAAWG,EACXJ,EAAaD,EAAGY,MAAMD,KAAMD,YAEvBT,CACT,CACF,CAOO,SAASY,EAAUC,GACxB,SAASC,IACP,IAAIC,EACJ,IACEA,EAAQF,GAGV,CAFE,MAAOG,GACP,OAAOC,QAAQC,OAAOF,EACxB,CACA,OAAID,aAAiBE,QACZF,EAEFE,QAAQE,QAAQJ,EACzB,CACA,OAAOD,GACT,C,mHC7CA,MAAMM,GAAe,UAcrB,MAAMC,UAAiB,IACrBC,cACEC,QAMAb,KAAKc,SAAU,UAMfd,KAAKe,iBAAmB,EAMxBf,KAAKgB,yCAA2C,EAMhDhB,KAAKiB,2BAA6B,EAUlCjB,KAAKkB,6BAA8B,SAAW,SAC5CC,EACAC,EACAC,GAEA,IAAKA,EACH,OAAOrB,KAAKsB,sBAAsBF,GAEpC,MAAMG,EAAQvB,KAAKuB,QAEnB,OADAA,EAAMC,eAAeH,GACdE,EAAMD,sBAAsBF,EACrC,GACF,CASAK,oBAAoBL,EAAkBC,GACpC,OAAOrB,KAAKkB,4BACVlB,KAAK0B,cACLN,EACAC,EAEJ,CAOAE,QACE,OAAO,SACT,CAUAI,eAAeC,EAAGC,EAAGC,EAAcC,GACjC,OAAO,SACT,CAOAC,WAAWJ,EAAGC,GACZ,MAAMI,EAAQjC,KAAKkC,gBAAgB,CAACN,EAAGC,IACvC,OAAOI,EAAM,KAAOL,GAAKK,EAAM,KAAOJ,CACxC,CAUAK,gBAAgBC,EAAOL,GAGrB,OAFAA,EAAeA,GAA8B,CAACM,IAAKA,KACnDpC,KAAK2B,eAAeQ,EAAM,GAAIA,EAAM,GAAIL,EAAcO,KAC/CP,CACT,CASAQ,qBAAqBC,GACnB,OAAOvC,KAAKgC,WAAWO,EAAW,GAAIA,EAAW,GACnD,CAQAC,cAAcC,GACZ,OAAO,SACT,CAQAC,UAAUD,GACR,GAAIzC,KAAKe,iBAAmBf,KAAK0B,cAAe,CAC9C,MAAMe,EAASzC,KAAKwC,cAAcxC,KAAKc,UACnC6B,MAAMF,EAAO,KAAOE,MAAMF,EAAO,OACnC,QAAoBA,GAEtBzC,KAAKe,gBAAkBf,KAAK0B,aAC9B,CACA,OAAO,QAAe1B,KAAKc,QAAS2B,EACtC,CAUAG,OAAOC,EAAOC,IACZ,SACF,CAYAC,MAAMC,EAAIC,EAAIH,IACZ,SACF,CAWAI,SAASC,GACP,OAAOnD,KAAKsB,sBAAsB6B,EAAYA,EAChD,CAUA7B,sBAAsBF,GACpB,OAAO,SACT,CAOAgC,UACE,OAAO,SACT,CAWA5B,eAAe6B,IACb,SACF,CAQAC,iBAAiBb,GACf,OAAO,SACT,CAUAc,UAAUC,EAAQC,IAChB,SACF,CAiBApC,UAAUqC,EAAQC,GAEhB,MAAMC,GAAa,IAAAC,KAAcH,GAC3BL,EACqB,eAAzBO,EAAWE,WACP,SAAUC,EAAeC,EAAgBC,GACvC,MAAMC,EAAcN,EAAWlB,YACzByB,EAAkBP,EAAWQ,iBAC7BrB,GAAQ,QAAUoB,IAAmB,QAAUD,GAmBrD,OAlBA,QACExD,EACAyD,EAAgB,GAChBA,EAAgB,GAChBpB,GACCA,EACD,EACA,EACA,IAEF,QACEgB,EACA,EACAA,EAAcM,OACdJ,EACAvD,EACAsD,IAEK,IAAAM,cAAaV,EAAYD,EAAzB,CACLI,EACAC,EACAC,EAEJ,GACA,IAAAK,cAAaV,EAAYD,GAE/B,OADA3D,KAAKwB,eAAe6B,GACbrD,IACT,EAGF,S,mFCvUA,MAAMuE,UAA2B,IAI/B3D,YAAY4D,GACV3D,QAMAb,KAAKyE,YAAcD,GAA0B,KAK7CxE,KAAK0E,kBAAoB,GAEzB1E,KAAK2E,yBACP,CAKAC,4BACE5E,KAAK0E,kBAAkBG,QAAQ,MAC/B7E,KAAK0E,kBAAkBL,OAAS,CAClC,CAKAM,0BACE,GAAK3E,KAAKyE,YAGV,IAAK,IAAIK,EAAI,EAAGC,EAAK/E,KAAKyE,YAAYJ,OAAQS,EAAIC,IAAMD,EACtD9E,KAAK0E,kBAAkBM,MACrB,QAAOhF,KAAKyE,YAAYK,GAAI,WAAkB9E,KAAKiF,QAASjF,MAGlE,CAOAuB,QACE,MAAM2D,EAAqB,IAAIX,EAAmB,MAGlD,OAFAW,EAAmBC,cAAcnF,KAAKyE,aACtCS,EAAmBE,gBAAgBpF,MAC5BkF,CACT,CASAvD,eAAeC,EAAGC,EAAGC,EAAcC,GACjC,GAAIA,GAAqB,QAAyB/B,KAAK0C,YAAad,EAAGC,GACrE,OAAOE,EAET,MAAMyC,EAAaxE,KAAKyE,YACxB,IAAK,IAAIK,EAAI,EAAGC,EAAKP,EAAWH,OAAQS,EAAIC,IAAMD,EAChD/C,EAAqByC,EAAWM,GAAGnD,eACjCC,EACAC,EACAC,EACAC,GAGJ,OAAOA,CACT,CAOAC,WAAWJ,EAAGC,GACZ,MAAM2C,EAAaxE,KAAKyE,YACxB,IAAK,IAAIK,EAAI,EAAGC,EAAKP,EAAWH,OAAQS,EAAIC,IAAMD,EAChD,GAAIN,EAAWM,GAAG9C,WAAWJ,EAAGC,GAC9B,OAAO,EAGX,OAAO,CACT,CAOAW,cAAcC,IACZ,QAAoBA,GACpB,MAAM+B,EAAaxE,KAAKyE,YACxB,IAAK,IAAIK,EAAI,EAAGC,EAAKP,EAAWH,OAAQS,EAAIC,IAAMD,GAChD,QAAOrC,EAAQ+B,EAAWM,GAAGpC,aAE/B,OAAOD,CACT,CAOA4C,gBACE,OAAOC,EAAgBtF,KAAKyE,YAC9B,CAKAc,qBACE,OAAOvF,KAAKyE,WACd,CAKAe,8BAEE,IAAIC,EAAkB,GACtB,MAAMjB,EAAaxE,KAAKyE,YACxB,IAAK,IAAIK,EAAI,EAAGC,EAAKP,EAAWH,OAAQS,EAAIC,IAAMD,EAC5CN,EAAWM,GAAG1B,YAAcpD,KAAKoD,UACnCqC,EAAkBA,EAAgBC,OAE9BlB,EAAWM,GACXU,+BAGJC,EAAgBT,KAAKR,EAAWM,IAGpC,OAAOW,CACT,CAOAnE,sBAAsBF,GAKpB,GAJIpB,KAAKiB,6BAA+BjB,KAAK0B,gBAC3C1B,KAAKgB,yCAA2C,EAChDhB,KAAKiB,2BAA6BjB,KAAK0B,eAGvCN,EAAmB,GACgC,IAAlDpB,KAAKgB,0CACJI,EAAmBpB,KAAKgB,yCAE1B,OAAOhB,KAGT,MAAM2F,EAAuB,GACvBnB,EAAaxE,KAAKyE,YACxB,IAAImB,GAAa,EACjB,IAAK,IAAId,EAAI,EAAGC,EAAKP,EAAWH,OAAQS,EAAIC,IAAMD,EAAG,CACnD,MAAMe,EAAWrB,EAAWM,GACtBgB,EACJD,EAASvE,sBAAsBF,GACjCuE,EAAqBX,KAAKc,GACtBA,IAAuBD,IACzBD,GAAa,EAEjB,CACA,GAAIA,EAAY,CACd,MAAMG,EAA+B,IAAIxB,EAAmB,MAE5D,OADAwB,EAA6BC,mBAAmBL,GACzCI,CACT,CAEA,OADA/F,KAAKgB,yCAA2CI,EACzCpB,IACT,CAOAoD,UACE,MAAO,oBACT,CAQAE,iBAAiBb,GACf,MAAM+B,EAAaxE,KAAKyE,YACxB,IAAK,IAAIK,EAAI,EAAGC,EAAKP,EAAWH,OAAQS,EAAIC,IAAMD,EAChD,GAAIN,EAAWM,GAAGxB,iBAAiBb,GACjC,OAAO,EAGX,OAAO,CACT,CAKAwD,UACE,OAAmC,IAA5BjG,KAAKyE,YAAYJ,MAC1B,CASAzB,OAAOC,EAAOC,GACZ,MAAM0B,EAAaxE,KAAKyE,YACxB,IAAK,IAAIK,EAAI,EAAGC,EAAKP,EAAWH,OAAQS,EAAIC,IAAMD,EAChDN,EAAWM,GAAGlC,OAAOC,EAAOC,GAE9B9C,KAAKiF,SACP,CAYAlC,MAAMC,EAAIC,EAAIH,GACPA,IACHA,GAAS,QAAU9C,KAAK0C,cAE1B,MAAM8B,EAAaxE,KAAKyE,YACxB,IAAK,IAAIK,EAAI,EAAGC,EAAKP,EAAWH,OAAQS,EAAIC,IAAMD,EAChDN,EAAWM,GAAG/B,MAAMC,EAAIC,EAAIH,GAE9B9C,KAAKiF,SACP,CAOAE,cAAcX,GACZxE,KAAKgG,mBAAmBV,EAAgBd,GAC1C,CAKAwB,mBAAmBxB,GACjBxE,KAAK4E,4BACL5E,KAAKyE,YAAcD,EACnBxE,KAAK2E,0BACL3E,KAAKiF,SACP,CAWAzD,eAAe6B,GACb,MAAMmB,EAAaxE,KAAKyE,YACxB,IAAK,IAAIK,EAAI,EAAGC,EAAKP,EAAWH,OAAQS,EAAIC,IAAMD,EAChDN,EAAWM,GAAGtD,eAAe6B,GAE/BrD,KAAKiF,SACP,CASA1B,UAAUC,EAAQC,GAChB,MAAMe,EAAaxE,KAAKyE,YACxB,IAAK,IAAIK,EAAI,EAAGC,EAAKP,EAAWH,OAAQS,EAAIC,IAAMD,EAChDN,EAAWM,GAAGvB,UAAUC,EAAQC,GAElCzD,KAAKiF,SACP,CAKAiB,kBACElG,KAAK4E,4BACL/D,MAAMqF,iBACR,EAOF,SAASZ,EAAgBd,GACvB,MAAM2B,EAAmB,GACzB,IAAK,IAAIrB,EAAI,EAAGC,EAAKP,EAAWH,OAAQS,EAAIC,IAAMD,EAChDqB,EAAiBnB,KAAKR,EAAWM,GAAGvD,SAEtC,OAAO4E,CACT,CAEA,S,gKCjUA,MAAMC,UAAmB,KAMvBxF,YAAYyF,EAAaC,GACvBzF,QAMAb,KAAKuG,cAAgB,KAMrBvG,KAAKwG,uBAAyB,EAM9BxG,KAAKyG,WAAa,EAMlBzG,KAAK0G,mBAAqB,OAEXC,IAAXL,GAAyB3G,MAAMiH,QAAQP,EAAY,IAMrDrG,KAAK6G,eACyD,EAG5DP,GATFtG,KAAK8G,mBACHR,EAC6B,EAUnC,CAOAS,iBAAiBxE,GACVvC,KAAKgH,iBAGR,QAAOhH,KAAKgH,gBAAiBzE,GAF7BvC,KAAKgH,gBAAkBzE,EAAW1C,QAIpCG,KAAKiF,SACP,CAOA1D,QACE,MAAM0F,EAAa,IAAIb,EACrBpG,KAAKgH,gBAAgBnH,QACrBG,KAAKsG,QAGP,OADAW,EAAW7B,gBAAgBpF,MACpBiH,CACT,CASAtF,eAAeC,EAAGC,EAAGC,EAAcC,GACjC,OAAIA,GAAqB,QAAyB/B,KAAK0C,YAAad,EAAGC,GAC9DE,GAEL/B,KAAK0G,mBAAqB1G,KAAK0B,gBACjC1B,KAAKyG,UAAYS,KAAKC,MACpB,QACEnH,KAAKgH,gBACL,EACAhH,KAAKgH,gBAAgB3C,OACrBrE,KAAKiE,OACL,IAGJjE,KAAK0G,kBAAoB1G,KAAK0B,gBAEzB,QACL1B,KAAKgH,gBACL,EACAhH,KAAKgH,gBAAgB3C,OACrBrE,KAAKiE,OACLjE,KAAKyG,WACL,EACA7E,EACAC,EACAC,EACAC,GAEJ,CAaAqF,eAAeC,GACb,OAAO,OACLrH,KAAKgH,gBACL,EACAhH,KAAKgH,gBAAgB3C,OACrBrE,KAAKiE,OACLoD,EAEJ,CAgBAC,iBAAiBC,EAAGC,GAClB,MAAmB,OAAfxH,KAAKsG,QAAkC,QAAftG,KAAKsG,OACxB,MAETkB,OAA8Bb,IAAhBa,GAA4BA,GACnC,QACLxH,KAAKgH,gBACL,EACAhH,KAAKgH,gBAAgB3C,OACrBrE,KAAKiE,OACLsD,EACAC,GAEJ,CAOAC,iBACE,OAAO,QACLzH,KAAKgH,gBACL,EACAhH,KAAKgH,gBAAgB3C,OACrBrE,KAAKiE,OAET,CAYAyD,gBAAgBC,EAAUC,GACxB,OAAO,QACL5H,KAAKgH,gBACL,EACAhH,KAAKgH,gBAAgB3C,OACrBrE,KAAKiE,OACL0D,EACAC,EACA5H,KAAKiE,OAET,CAOA4D,YACE,OAAO,OACL7H,KAAKgH,gBACL,EACAhH,KAAKgH,gBAAgB3C,OACrBrE,KAAKiE,OAET,CAKA6D,kBAKE,OAJI9H,KAAKwG,uBAAyBxG,KAAK0B,gBACrC1B,KAAKuG,cAAgBvG,KAAK0H,gBAAgB,GAAK1H,KAAKuG,eACpDvG,KAAKwG,sBAAwBxG,KAAK0B,eAE7B1B,KAAKuG,aACd,CAOAwB,8BAA8B3G,GAC5B,MAAM4G,EAA4B,GAUlC,OATAA,EAA0B3D,QAAS,QACjCrE,KAAKgH,gBACL,EACAhH,KAAKgH,gBAAgB3C,OACrBrE,KAAKiE,OACL7C,EACA4G,EACA,GAEK,IAAI5B,EAAW4B,EAA2B,KACnD,CAOA5E,UACE,MAAO,YACT,CAQAE,iBAAiBb,GACf,OAAO,QACLzC,KAAKgH,gBACL,EACAhH,KAAKgH,gBAAgB3C,OACrBrE,KAAKiE,OACLxB,EAEJ,CAQAoE,eAAeR,EAAaC,GAC1BtG,KAAKiI,UAAU3B,EAAQD,EAAa,GAC/BrG,KAAKgH,kBACRhH,KAAKgH,gBAAkB,IAEzBhH,KAAKgH,gBAAgB3C,QAAS,QAC5BrE,KAAKgH,gBACL,EACAX,EACArG,KAAKiE,QAEPjE,KAAKiF,SACP,EAGF,S,oHCpSA,MAAMiD,UAAmB,KAMvBtH,YAAYyF,EAAaC,GACvBzF,QAMAb,KAAKyG,WAAa,EAMlBzG,KAAK0G,mBAAqB,OAEXC,IAAXL,GAAyB3G,MAAMiH,QAAQP,EAAY,IAMrDrG,KAAK6G,eACyD,EAG5DP,GATFtG,KAAK8G,mBACHR,EAC6B,EAUnC,CAOA/E,QACE,OAAO,IAAI2G,EAAWlI,KAAKgH,gBAAgBnH,QAASG,KAAKsG,OAC3D,CASA3E,eAAeC,EAAGC,EAAGC,EAAcC,GACjC,OAAIA,GAAqB,QAAyB/B,KAAK0C,YAAad,EAAGC,GAC9DE,GAEL/B,KAAK0G,mBAAqB1G,KAAK0B,gBACjC1B,KAAKyG,UAAYS,KAAKC,MACpB,QACEnH,KAAKgH,gBACL,EACAhH,KAAKgH,gBAAgB3C,OACrBrE,KAAKiE,OACL,IAGJjE,KAAK0G,kBAAoB1G,KAAK0B,gBAEzB,QACL1B,KAAKgH,gBACL,EACAhH,KAAKgH,gBAAgB3C,OACrBrE,KAAKiE,OACLjE,KAAKyG,WACL,EACA7E,EACAC,EACAC,EACAC,GAEJ,CAOAoG,UACE,OAAO,QACLnI,KAAKgH,gBACL,EACAhH,KAAKgH,gBAAgB3C,OACrBrE,KAAKiE,OAET,CAOAwD,iBACE,OAAO,QACLzH,KAAKgH,gBACL,EACAhH,KAAKgH,gBAAgB3C,OACrBrE,KAAKiE,OAET,CAOA8D,8BAA8B3G,GAC5B,MAAM4G,EAA4B,GAUlC,OATAA,EAA0B3D,QAAS,QACjCrE,KAAKgH,gBACL,EACAhH,KAAKgH,gBAAgB3C,OACrBrE,KAAKiE,OACL7C,EACA4G,EACA,GAEK,IAAIE,EAAWF,EAA2B,KACnD,CAOA5E,UACE,MAAO,YACT,CAQAE,iBAAiBb,GACf,OAAO,CACT,CAQAoE,eAAeR,EAAaC,GAC1BtG,KAAKiI,UAAU3B,EAAQD,EAAa,GAC/BrG,KAAKgH,kBACRhH,KAAKgH,gBAAkB,IAEzBhH,KAAKgH,gBAAgB3C,QAAS,QAC5BrE,KAAKgH,gBACL,EACAX,EACArG,KAAKiE,QAEPjE,KAAKiF,SACP,EAGF,S,oJCpKA,MAAMmD,UAAwB,KAQ5BxH,YAAYyF,EAAaC,EAAQ+B,GAqB/B,GApBAxH,QAMAb,KAAKsI,MAAQ,GAMbtI,KAAKyG,WAAa,EAMlBzG,KAAK0G,mBAAqB,EAEtB/G,MAAMiH,QAAQP,EAAY,IAC5BrG,KAAK6G,eACgE,EAGnEP,QAEG,QAAeK,IAAXL,GAAwB+B,EACjCrI,KAAK8G,mBACHR,EAC6B,GAE/BtG,KAAKsI,MAAQD,MACR,CACL,IAAI/B,EAAStG,KAAKuI,YAClB,MAAMC,EAA+C,EAC/CxB,EAAkB,GAClBqB,EAAO,GACb,IAAK,IAAIvD,EAAI,EAAGC,EAAKyD,EAAYnE,OAAQS,EAAIC,IAAMD,EAAG,CACpD,MAAMmC,EAAauB,EAAY1D,GACrB,IAANA,IACFwB,EAASW,EAAWsB,cAEtB,QAAOvB,EAAiBC,EAAWwB,sBACnCJ,EAAKrD,KAAKgC,EAAgB3C,OAC5B,CACArE,KAAK8G,mBAAmBR,EAAQU,GAChChH,KAAKsI,MAAQD,CACf,CACF,CAOAK,iBAAiBzB,GACVjH,KAAKgH,iBAGR,QAAOhH,KAAKgH,gBAAiBC,EAAWwB,qBAAqB5I,SAF7DG,KAAKgH,gBAAkBC,EAAWwB,qBAAqB5I,QAIzDG,KAAKsI,MAAMtD,KAAKhF,KAAKgH,gBAAgB3C,QACrCrE,KAAKiF,SACP,CAOA1D,QACE,MAAMoH,EAAkB,IAAIP,EAC1BpI,KAAKgH,gBAAgBnH,QACrBG,KAAKsG,OACLtG,KAAKsI,MAAMzI,SAGb,OADA8I,EAAgBvD,gBAAgBpF,MACzB2I,CACT,CASAhH,eAAeC,EAAGC,EAAGC,EAAcC,GACjC,OAAIA,GAAqB,QAAyB/B,KAAK0C,YAAad,EAAGC,GAC9DE,GAEL/B,KAAK0G,mBAAqB1G,KAAK0B,gBACjC1B,KAAKyG,UAAYS,KAAKC,MACpB,QACEnH,KAAKgH,gBACL,EACAhH,KAAKsI,MACLtI,KAAKiE,OACL,IAGJjE,KAAK0G,kBAAoB1G,KAAK0B,gBAEzB,QACL1B,KAAKgH,gBACL,EACAhH,KAAKsI,MACLtI,KAAKiE,OACLjE,KAAKyG,WACL,EACA7E,EACAC,EACAC,EACAC,GAEJ,CAwBAuF,iBAAiBC,EAAGC,EAAaoB,GAC/B,MACkB,OAAf5I,KAAKsG,QAAkC,QAAftG,KAAKsG,QACE,IAAhCtG,KAAKgH,gBAAgB3C,OAEd,MAETmD,OAA8Bb,IAAhBa,GAA4BA,EAC1CoB,OAA8BjC,IAAhBiC,GAA4BA,GACnC,QACL5I,KAAKgH,gBACL,EACAhH,KAAKsI,MACLtI,KAAKiE,OACLsD,EACAC,EACAoB,GAEJ,CAOAnB,iBACE,OAAO,QACLzH,KAAKgH,gBACL,EACAhH,KAAKsI,MACLtI,KAAKiE,OAET,CAKA4E,UACE,OAAO7I,KAAKsI,KACd,CAQAQ,cAAcC,GACZ,OAAIA,EAAQ,GAAK/I,KAAKsI,MAAMjE,QAAU0E,EAC7B,KAEF,IAAI,IACT/I,KAAKgH,gBAAgBnH,MACT,IAAVkJ,EAAc,EAAI/I,KAAKsI,MAAMS,EAAQ,GACrC/I,KAAKsI,MAAMS,IAEb/I,KAAKsG,OAET,CAOA0C,iBACE,MAAMhC,EAAkBhH,KAAKgH,gBACvBqB,EAAOrI,KAAKsI,MACZhC,EAAStG,KAAKsG,OAEdkC,EAAc,GACpB,IAAIS,EAAS,EACb,IAAK,IAAInE,EAAI,EAAGC,EAAKsD,EAAKhE,OAAQS,EAAIC,IAAMD,EAAG,CAC7C,MAAMoE,EAAMb,EAAKvD,GACXmC,EAAa,IAAI,IACrBD,EAAgBnH,MAAMoJ,EAAQC,GAC9B5C,GAEFkC,EAAYxD,KAAKiC,GACjBgC,EAASC,CACX,CACA,OAAOV,CACT,CAKAW,mBACE,MAAMC,EAAY,GACZpC,EAAkBhH,KAAKgH,gBAC7B,IAAIiC,EAAS,EACb,MAAMZ,EAAOrI,KAAKsI,MACZrE,EAASjE,KAAKiE,OACpB,IAAK,IAAIa,EAAI,EAAGC,EAAKsD,EAAKhE,OAAQS,EAAIC,IAAMD,EAAG,CAC7C,MAAMoE,EAAMb,EAAKvD,GACXuE,GAAW,QACfrC,EACAiC,EACAC,EACAjF,EACA,KAEF,QAAOmF,EAAWC,GAClBJ,EAASC,CACX,CACA,OAAOE,CACT,CAOArB,8BAA8B3G,GAC5B,MAAM4G,EAA4B,GAC5BsB,EAAiB,GAWvB,OAVAtB,EAA0B3D,QAAS,QACjCrE,KAAKgH,gBACL,EACAhH,KAAKsI,MACLtI,KAAKiE,OACL7C,EACA4G,EACA,EACAsB,GAEK,IAAIlB,EAAgBJ,EAA2B,KAAMsB,EAC9D,CAOAlG,UACE,MAAO,iBACT,CAQAE,iBAAiBb,GACf,OAAO,QACLzC,KAAKgH,gBACL,EACAhH,KAAKsI,MACLtI,KAAKiE,OACLxB,EAEJ,CAQAoE,eAAeR,EAAaC,GAC1BtG,KAAKiI,UAAU3B,EAAQD,EAAa,GAC/BrG,KAAKgH,kBACRhH,KAAKgH,gBAAkB,IAEzB,MAAMqB,GAAO,QACXrI,KAAKgH,gBACL,EACAX,EACArG,KAAKiE,OACLjE,KAAKsI,OAEPtI,KAAKgH,gBAAgB3C,OAAyB,IAAhBgE,EAAKhE,OAAe,EAAIgE,EAAKA,EAAKhE,OAAS,GACzErE,KAAKiF,SACP,EAGF,S,oHC5UA,MAAMsE,UAAmB,KAMvB3I,YAAYyF,EAAaC,GACvBzF,QACIyF,IAAW3G,MAAMiH,QAAQP,EAAY,IACvCrG,KAAK8G,mBACHR,EAC6B,GAG/BtG,KAAK6G,eACyD,EAG5DP,EAGN,CAOAkD,YAAYrH,GACLnC,KAAKgH,iBAGR,QAAOhH,KAAKgH,gBAAiB7E,EAAMsG,sBAFnCzI,KAAKgH,gBAAkB7E,EAAMsG,qBAAqB5I,QAIpDG,KAAKiF,SACP,CAOA1D,QACE,MAAMkI,EAAa,IAAIF,EACrBvJ,KAAKgH,gBAAgBnH,QACrBG,KAAKsG,QAGP,OADAmD,EAAWrE,gBAAgBpF,MACpByJ,CACT,CASA9H,eAAeC,EAAGC,EAAGC,EAAcC,GACjC,GAAIA,GAAqB,QAAyB/B,KAAK0C,YAAad,EAAGC,GACrE,OAAOE,EAET,MAAMiF,EAAkBhH,KAAKgH,gBACvB/C,EAASjE,KAAKiE,OACpB,IAAK,IAAIa,EAAI,EAAGC,EAAKiC,EAAgB3C,OAAQS,EAAIC,EAAID,GAAKb,EAAQ,CAChE,MAAMyF,GAAkB,QACtB9H,EACAC,EACAmF,EAAgBlC,GAChBkC,EAAgBlC,EAAI,IAEtB,GAAI4E,EAAkB3H,EAAoB,CACxCA,EAAqB2H,EACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI1F,IAAU0F,EAC5B7H,EAAa6H,GAAK3C,EAAgBlC,EAAI6E,GAExC7H,EAAauC,OAASJ,CACxB,CACF,CACA,OAAOlC,CACT,CAOA0F,iBACE,OAAO,QACLzH,KAAKgH,gBACL,EACAhH,KAAKgH,gBAAgB3C,OACrBrE,KAAKiE,OAET,CAQA2F,SAASb,GACP,MAAMc,EAAK7J,KAAKgH,gBAEZhH,KAAKgH,gBAAgB3C,OAASrE,KAAKiE,OADnC,EAEJ,OAAI8E,EAAQ,GAAKc,GAAKd,EACb,KAEF,IAAI,aACT/I,KAAKgH,gBAAgBnH,MACnBkJ,EAAQ/I,KAAKiE,QACZ8E,EAAQ,GAAK/I,KAAKiE,QAErBjE,KAAKsG,OAET,CAOAwD,YACE,MAAM9C,EAAkBhH,KAAKgH,gBACvBV,EAAStG,KAAKsG,OACdrC,EAASjE,KAAKiE,OAEd8F,EAAS,GACf,IAAK,IAAIjF,EAAI,EAAGC,EAAKiC,EAAgB3C,OAAQS,EAAIC,EAAID,GAAKb,EAAQ,CAChE,MAAM9B,EAAQ,IAAI,aAAM6E,EAAgBnH,MAAMiF,EAAGA,EAAIb,GAASqC,GAC9DyD,EAAO/E,KAAK7C,EACd,CACA,OAAO4H,CACT,CAOA3G,UACE,MAAO,YACT,CAQAE,iBAAiBb,GACf,MAAMuE,EAAkBhH,KAAKgH,gBACvB/C,EAASjE,KAAKiE,OACpB,IAAK,IAAIa,EAAI,EAAGC,EAAKiC,EAAgB3C,OAAQS,EAAIC,EAAID,GAAKb,EAAQ,CAChE,MAAMrC,EAAIoF,EAAgBlC,GACpBjD,EAAImF,EAAgBlC,EAAI,GAC9B,IAAI,QAAWrC,EAAQb,EAAGC,GACxB,OAAO,CAEX,CACA,OAAO,CACT,CAQAgF,eAAeR,EAAaC,GAC1BtG,KAAKiI,UAAU3B,EAAQD,EAAa,GAC/BrG,KAAKgH,kBACRhH,KAAKgH,gBAAkB,IAEzBhH,KAAKgH,gBAAgB3C,QAAS,QAC5BrE,KAAKgH,gBACL,EACAX,EACArG,KAAKiE,QAEPjE,KAAKiF,SACP,EAGF,S,0KC9LO,SAAS+E,EAAahD,EAAiBiC,EAAQgB,EAAOhG,GAC3D,MAAMiG,EAAc,GACpB,IAAIzH,GAAS,UACb,IAAK,IAAIqC,EAAI,EAAGC,EAAKkF,EAAM5F,OAAQS,EAAIC,IAAMD,EAAG,CAC9C,MAAMuD,EAAO4B,EAAMnF,GACnBrC,GAAS,QACPuE,EACAiC,EACAZ,EAAK,GACLpE,GAEFiG,EAAYlF,MAAMvC,EAAO,GAAKA,EAAO,IAAM,GAAIA,EAAO,GAAKA,EAAO,IAAM,GACxEwG,EAASZ,EAAKA,EAAKhE,OAAS,EAC9B,CACA,OAAO6F,CACT,C,0BCIA,MAAMC,UAAqBC,EAAA,GAOzBxJ,YAAYyF,EAAaC,EAAQ2D,GA6C/B,GA5CApJ,QAMAb,KAAKqK,OAAS,GAMdrK,KAAKsK,6BAA+B,EAMpCtK,KAAKuK,oBAAsB,KAM3BvK,KAAKyG,WAAa,EAMlBzG,KAAK0G,mBAAqB,EAM1B1G,KAAKwK,mBAAqB,EAM1BxK,KAAKyK,yBAA2B,MAE3BR,IAAUtK,MAAMiH,QAAQP,EAAY,IAAK,CAC5C,IAAIqE,EAAa1K,KAAKuI,YACtB,MAAMoC,EAAyC,EACzC3D,EAAkB,GAClB4D,EAAY,GAClB,IAAK,IAAI9F,EAAI,EAAGC,EAAK4F,EAAStG,OAAQS,EAAIC,IAAMD,EAAG,CACjD,MAAM+F,EAAUF,EAAS7F,GACf,IAANA,IACF4F,EAAaG,EAAQtC,aAEvB,MAAMU,EAASjC,EAAgB3C,OACzBgE,EAAOwC,EAAQhC,UACrB,IAAK,IAAIc,EAAI,EAAGmB,EAAKzC,EAAKhE,OAAQsF,EAAImB,IAAMnB,EAC1CtB,EAAKsB,IAAMV,GAEb,QAAOjC,EAAiB6D,EAAQpC,sBAChCmC,EAAU5F,KAAKqD,EACjB,CACA/B,EAASoE,EACTrE,EAAcW,EACdiD,EAAQW,CACV,MACejE,IAAXL,GAAwB2D,GAC1BjK,KAAK8G,mBACHR,EAC6B,GAE/BtG,KAAKqK,OAASJ,GAEdjK,KAAK6G,eACuE,EAG1EP,EAGN,CAOAyE,cAAcF,GAEZ,IAAIxC,EACJ,GAAKrI,KAAKgH,gBAIH,CACL,MAAMiC,EAASjJ,KAAKgH,gBAAgB3C,QACpC,QAAOrE,KAAKgH,gBAAiB6D,EAAQpC,sBACrCJ,EAAOwC,EAAQhC,UAAUhJ,QACzB,IAAK,IAAIiF,EAAI,EAAGC,EAAKsD,EAAKhE,OAAQS,EAAIC,IAAMD,EAC1CuD,EAAKvD,IAAMmE,CAEf,MAVEjJ,KAAKgH,gBAAkB6D,EAAQpC,qBAAqB5I,QACpDwI,EAAOwC,EAAQhC,UAAUhJ,QACzBG,KAAKqK,OAAOrF,OASdhF,KAAKqK,OAAOrF,KAAKqD,GACjBrI,KAAKiF,SACP,CAOA1D,QACE,MAAMyJ,EAAMhL,KAAKqK,OAAOhG,OAClB4G,EAAW,IAAItL,MAAMqL,GAC3B,IAAK,IAAIlG,EAAI,EAAGA,EAAIkG,IAAOlG,EACzBmG,EAASnG,GAAK9E,KAAKqK,OAAOvF,GAAGjF,QAG/B,MAAMqL,EAAe,IAAIf,EACvBnK,KAAKgH,gBAAgBnH,QACrBG,KAAKsG,OACL2E,GAIF,OAFAC,EAAa9F,gBAAgBpF,MAEtBkL,CACT,CASAvJ,eAAeC,EAAGC,EAAGC,EAAcC,GACjC,OAAIA,GAAqB,QAAyB/B,KAAK0C,YAAad,EAAGC,GAC9DE,GAEL/B,KAAK0G,mBAAqB1G,KAAK0B,gBACjC1B,KAAKyG,UAAYS,KAAKC,MACpB,QACEnH,KAAKgH,gBACL,EACAhH,KAAKqK,OACLrK,KAAKiE,OACL,IAGJjE,KAAK0G,kBAAoB1G,KAAK0B,gBAEzB,QACL1B,KAAKmL,6BACL,EACAnL,KAAKqK,OACLrK,KAAKiE,OACLjE,KAAKyG,WACL,EACA7E,EACAC,EACAC,EACAC,GAEJ,CAOAC,WAAWJ,EAAGC,GACZ,OAAO,QACL7B,KAAKmL,6BACL,EACAnL,KAAKqK,OACLrK,KAAKiE,OACLrC,EACAC,EAEJ,CAOAsG,UACE,OAAO,QACLnI,KAAKmL,6BACL,EACAnL,KAAKqK,OACLrK,KAAKiE,OAET,CAeAwD,eAAe2D,GACb,IAAIpE,EAcJ,YAbcL,IAAVyE,GACFpE,EAAkBhH,KAAKmL,6BAA6BtL,SACpD,EAAAwL,EAAA,IACErE,EACA,EACAhH,KAAKqK,OACLrK,KAAKiE,OACLmH,IAGFpE,EAAkBhH,KAAKgH,iBAGlB,EAAAsE,EAAA,IACLtE,EACA,EACAhH,KAAKqK,OACLrK,KAAKiE,OAET,CAKAsH,WACE,OAAOvL,KAAKqK,MACd,CAKAmB,wBACE,GAAIxL,KAAKsK,6BAA+BtK,KAAK0B,cAAe,CAC1D,MAAMwI,EAAcF,EAClBhK,KAAKgH,gBACL,EACAhH,KAAKqK,OACLrK,KAAKiE,QAEPjE,KAAKuK,qBAAsB,OACzBvK,KAAKmL,6BACL,EACAnL,KAAKqK,OACLrK,KAAKiE,OACLiG,GAEFlK,KAAKsK,4BAA8BtK,KAAK0B,aAC1C,CACA,OAAO1B,KAAKuK,mBACd,CAQAkB,oBACE,OAAO,IAAIlC,EAAA,EAAWvJ,KAAKwL,wBAAwB3L,QAAS,MAC9D,CAKAsL,6BACE,GAAInL,KAAKwK,mBAAqBxK,KAAK0B,cAAe,CAChD,MAAMsF,EAAkBhH,KAAKgH,iBAE3B,QAAwBA,EAAiB,EAAGhH,KAAKqK,OAAQrK,KAAKiE,QAE9DjE,KAAKyK,yBAA2BzD,GAEhChH,KAAKyK,yBAA2BzD,EAAgBnH,QAChDG,KAAKyK,yBAAyBpG,QAAS,EAAAgH,EAAA,IACrCrL,KAAKyK,yBACL,EACAzK,KAAKqK,OACLrK,KAAKiE,SAGTjE,KAAKwK,kBAAoBxK,KAAK0B,aAChC,CACA,OAAO1B,KAAKyK,wBACd,CAOA1C,8BAA8B3G,GAC5B,MAAM4G,EAA4B,GAC5B0D,EAAkB,GAWxB,OAVA1D,EAA0B3D,QAAS,QACjCrE,KAAKgH,gBACL,EACAhH,KAAKqK,OACLrK,KAAKiE,OACLiD,KAAKC,KAAK/F,GACV4G,EACA,EACA0D,GAEK,IAAIvB,EAAanC,EAA2B,KAAM0D,EAC3D,CAQAC,WAAW5C,GACT,GAAIA,EAAQ,GAAK/I,KAAKqK,OAAOhG,QAAU0E,EACrC,OAAO,KAET,IAAIE,EACJ,GAAc,IAAVF,EACFE,EAAS,MACJ,CACL,MAAM2C,EAAW5L,KAAKqK,OAAOtB,EAAQ,GACrCE,EAAS2C,EAASA,EAASvH,OAAS,EACtC,CACA,MAAMgE,EAAOrI,KAAKqK,OAAOtB,GAAOlJ,QAC1BqJ,EAAMb,EAAKA,EAAKhE,OAAS,GAC/B,GAAe,IAAX4E,EACF,IAAK,IAAInE,EAAI,EAAGC,EAAKsD,EAAKhE,OAAQS,EAAIC,IAAMD,EAC1CuD,EAAKvD,IAAMmE,EAGf,OAAO,IAAI4C,EAAA,GACT7L,KAAKgH,gBAAgBnH,MAAMoJ,EAAQC,GACnClJ,KAAKsG,OACL+B,EAEJ,CAOAyD,cACE,MAAMxF,EAAStG,KAAKsG,OACdU,EAAkBhH,KAAKgH,gBACvBiD,EAAQjK,KAAKqK,OACbM,EAAW,GACjB,IAAI1B,EAAS,EACb,IAAK,IAAInE,EAAI,EAAGC,EAAKkF,EAAM5F,OAAQS,EAAIC,IAAMD,EAAG,CAC9C,MAAMuD,EAAO4B,EAAMnF,GAAGjF,QAChBqJ,EAAMb,EAAKA,EAAKhE,OAAS,GAC/B,GAAe,IAAX4E,EACF,IAAK,IAAIU,EAAI,EAAGmB,EAAKzC,EAAKhE,OAAQsF,EAAImB,IAAMnB,EAC1CtB,EAAKsB,IAAMV,EAGf,MAAM4B,EAAU,IAAIgB,EAAA,GAClB7E,EAAgBnH,MAAMoJ,EAAQC,GAC9B5C,EACA+B,GAEFsC,EAAS3F,KAAK6F,GACd5B,EAASC,CACX,CACA,OAAOyB,CACT,CAOAvH,UACE,MAAO,cACT,CAQAE,iBAAiBb,GACf,OAAO,QACLzC,KAAKmL,6BACL,EACAnL,KAAKqK,OACLrK,KAAKiE,OACLxB,EAEJ,CAQAoE,eAAeR,EAAaC,GAC1BtG,KAAKiI,UAAU3B,EAAQD,EAAa,GAC/BrG,KAAKgH,kBACRhH,KAAKgH,gBAAkB,IAEzB,MAAMiD,GAAQ,EAAA8B,EAAA,IACZ/L,KAAKgH,gBACL,EACAX,EACArG,KAAKiE,OACLjE,KAAKqK,QAEP,GAAqB,IAAjBJ,EAAM5F,OACRrE,KAAKgH,gBAAgB3C,OAAS,MACzB,CACL,MAAM2H,EAAW/B,EAAMA,EAAM5F,OAAS,GACtCrE,KAAKgH,gBAAgB3C,OACC,IAApB2H,EAAS3H,OAAe,EAAI2H,EAASA,EAAS3H,OAAS,EAC3D,CACArE,KAAKiF,SACP,EAGF,S,gGCxcA,MAAMgH,UAAc,KAKlBrL,YAAYyF,EAAaC,GACvBzF,QACAb,KAAK6G,eAAeR,EAAaC,EACnC,CAOA/E,QACE,MAAMY,EAAQ,IAAI8J,EAAMjM,KAAKgH,gBAAgBnH,QAASG,KAAKsG,QAE3D,OADAnE,EAAMiD,gBAAgBpF,MACfmC,CACT,CASAR,eAAeC,EAAGC,EAAGC,EAAcC,GACjC,MAAMiF,EAAkBhH,KAAKgH,gBACvB0C,GAAkB,QACtB9H,EACAC,EACAmF,EAAgB,GAChBA,EAAgB,IAElB,GAAI0C,EAAkB3H,EAAoB,CACxC,MAAMkC,EAASjE,KAAKiE,OACpB,IAAK,IAAIa,EAAI,EAAGA,EAAIb,IAAUa,EAC5BhD,EAAagD,GAAKkC,EAAgBlC,GAGpC,OADAhD,EAAauC,OAASJ,EACfyF,CACT,CACA,OAAO3H,CACT,CAOA0F,iBACE,OAAQzH,KAAKgH,gBAAuBhH,KAAKgH,gBAAgBnH,QAA1B,EACjC,CAOA2C,cAAcC,GACZ,OAAO,QAA6BzC,KAAKgH,gBAAiBvE,EAC5D,CAOAW,UACE,MAAO,OACT,CAQAE,iBAAiBb,GACf,OAAO,QAAWA,EAAQzC,KAAKgH,gBAAgB,GAAIhH,KAAKgH,gBAAgB,GAC1E,CAOAH,eAAeR,EAAaC,GAC1BtG,KAAKiI,UAAU3B,EAAQD,EAAa,GAC/BrG,KAAKgH,kBACRhH,KAAKgH,gBAAkB,IAEzBhH,KAAKgH,gBAAgB3C,QAAS,QAC5BrE,KAAKgH,gBACL,EACAX,EACArG,KAAKiE,QAEPjE,KAAKiF,SACP,EAGF,S,8NC5FA,MAAM4G,UAAgB,KAYpBjL,YAAYyF,EAAaC,EAAQ+B,GAC/BxH,QAMAb,KAAKsI,MAAQ,GAMbtI,KAAKkM,4BAA8B,EAMnClM,KAAKmM,mBAAqB,KAM1BnM,KAAKyG,WAAa,EAMlBzG,KAAK0G,mBAAqB,EAM1B1G,KAAKwK,mBAAqB,EAM1BxK,KAAKyK,yBAA2B,UAEjB9D,IAAXL,GAAwB+B,GAC1BrI,KAAK8G,mBACHR,EAC6B,GAE/BtG,KAAKsI,MAAQD,GAEbrI,KAAK6G,eACgE,EAGnEP,EAGN,CAOA8F,iBAAiBC,GACVrM,KAAKgH,iBAGR,QAAOhH,KAAKgH,gBAAiBqF,EAAW5D,sBAFxCzI,KAAKgH,gBAAkBqF,EAAW5D,qBAAqB5I,QAIzDG,KAAKsI,MAAMtD,KAAKhF,KAAKgH,gBAAgB3C,QACrCrE,KAAKiF,SACP,CAOA1D,QACE,MAAMsJ,EAAU,IAAIgB,EAClB7L,KAAKgH,gBAAgBnH,QACrBG,KAAKsG,OACLtG,KAAKsI,MAAMzI,SAGb,OADAgL,EAAQzF,gBAAgBpF,MACjB6K,CACT,CASAlJ,eAAeC,EAAGC,EAAGC,EAAcC,GACjC,OAAIA,GAAqB,QAAyB/B,KAAK0C,YAAad,EAAGC,GAC9DE,GAEL/B,KAAK0G,mBAAqB1G,KAAK0B,gBACjC1B,KAAKyG,UAAYS,KAAKC,MACpB,QACEnH,KAAKgH,gBACL,EACAhH,KAAKsI,MACLtI,KAAKiE,OACL,IAGJjE,KAAK0G,kBAAoB1G,KAAK0B,gBAEzB,QACL1B,KAAKgH,gBACL,EACAhH,KAAKsI,MACLtI,KAAKiE,OACLjE,KAAKyG,WACL,EACA7E,EACAC,EACAC,EACAC,GAEJ,CAOAC,WAAWJ,EAAGC,GACZ,OAAO,QACL7B,KAAKmL,6BACL,EACAnL,KAAKsI,MACLtI,KAAKiE,OACLrC,EACAC,EAEJ,CAOAsG,UACE,OAAO,QACLnI,KAAKmL,6BACL,EACAnL,KAAKsI,MACLtI,KAAKiE,OAET,CAeAwD,eAAe2D,GACb,IAAIpE,EAQJ,YAPcL,IAAVyE,GACFpE,EAAkBhH,KAAKmL,6BAA6BtL,SACpD,QAAkBmH,EAAiB,EAAGhH,KAAKsI,MAAOtI,KAAKiE,OAAQmH,IAE/DpE,EAAkBhH,KAAKgH,iBAGlB,QAAwBA,EAAiB,EAAGhH,KAAKsI,MAAOtI,KAAKiE,OACtE,CAKA4E,UACE,OAAO7I,KAAKsI,KACd,CAKAgE,uBACE,GAAItM,KAAKkM,4BAA8BlM,KAAK0B,cAAe,CACzD,MAAM6K,GAAa,QAAUvM,KAAK0C,aAClC1C,KAAKmM,oBAAqB,OACxBnM,KAAKmL,6BACL,EACAnL,KAAKsI,MACLtI,KAAKiE,OACLsI,EACA,GAEFvM,KAAKkM,2BAA6BlM,KAAK0B,aACzC,CACA,OAAO1B,KAAKmM,kBACd,CAQAK,mBACE,OAAO,IAAI,aAAMxM,KAAKsM,uBAAwB,MAChD,CASAG,qBACE,OAAOzM,KAAKsI,MAAMjE,MACpB,CAYAqI,cAAc3D,GACZ,OAAIA,EAAQ,GAAK/I,KAAKsI,MAAMjE,QAAU0E,EAC7B,KAEF,IAAI,IACT/I,KAAKgH,gBAAgBnH,MACT,IAAVkJ,EAAc,EAAI/I,KAAKsI,MAAMS,EAAQ,GACrC/I,KAAKsI,MAAMS,IAEb/I,KAAKsG,OAET,CAOAqG,iBACE,MAAMrG,EAAStG,KAAKsG,OACdU,EAAkBhH,KAAKgH,gBACvBqB,EAAOrI,KAAKsI,MACZsE,EAAc,GACpB,IAAI3D,EAAS,EACb,IAAK,IAAInE,EAAI,EAAGC,EAAKsD,EAAKhE,OAAQS,EAAIC,IAAMD,EAAG,CAC7C,MAAMoE,EAAMb,EAAKvD,GACXuH,EAAa,IAAI,IACrBrF,EAAgBnH,MAAMoJ,EAAQC,GAC9B5C,GAEFsG,EAAY5H,KAAKqH,GACjBpD,EAASC,CACX,CACA,OAAO0D,CACT,CAKAzB,6BACE,GAAInL,KAAKwK,mBAAqBxK,KAAK0B,cAAe,CAChD,MAAMsF,EAAkBhH,KAAKgH,iBACzB,QAAuBA,EAAiB,EAAGhH,KAAKsI,MAAOtI,KAAKiE,QAC9DjE,KAAKyK,yBAA2BzD,GAEhChH,KAAKyK,yBAA2BzD,EAAgBnH,QAChDG,KAAKyK,yBAAyBpG,QAAS,QACrCrE,KAAKyK,yBACL,EACAzK,KAAKsI,MACLtI,KAAKiE,SAGTjE,KAAKwK,kBAAoBxK,KAAK0B,aAChC,CACA,OAAO1B,KAAKyK,wBACd,CAOA1C,8BAA8B3G,GAC5B,MAAM4G,EAA4B,GAC5BsB,EAAiB,GAWvB,OAVAtB,EAA0B3D,QAAS,QACjCrE,KAAKgH,gBACL,EACAhH,KAAKsI,MACLtI,KAAKiE,OACLiD,KAAKC,KAAK/F,GACV4G,EACA,EACAsB,GAEK,IAAIuC,EAAQ7D,EAA2B,KAAMsB,EACtD,CAOAlG,UACE,MAAO,SACT,CAQAE,iBAAiBb,GACf,OAAO,QACLzC,KAAKmL,6BACL,EACAnL,KAAKsI,MACLtI,KAAKiE,OACLxB,EAEJ,CAQAoE,eAAeR,EAAaC,GAC1BtG,KAAKiI,UAAU3B,EAAQD,EAAa,GAC/BrG,KAAKgH,kBACRhH,KAAKgH,gBAAkB,IAEzB,MAAMqB,GAAO,QACXrI,KAAKgH,gBACL,EACAX,EACArG,KAAKiE,OACLjE,KAAKsI,OAEPtI,KAAKgH,gBAAgB3C,OAAyB,IAAhBgE,EAAKhE,OAAe,EAAIgE,EAAKA,EAAKhE,OAAS,GACzErE,KAAKiF,SACP,EAGF,UAkCO,SAAS4H,EAAWpK,GACzB,MAAMqK,EAAOrK,EAAO,GACdsK,EAAOtK,EAAO,GACduK,EAAOvK,EAAO,GACdwK,EAAOxK,EAAO,GACduE,EAAkB,CACtB8F,EACAC,EACAD,EACAG,EACAD,EACAC,EACAD,EACAD,EACAD,EACAC,GAEF,OAAO,IAAIlB,EAAQ7E,EAAiB,KAAM,CAACA,EAAgB3C,QAC7D,CAWO,SAAS6I,EAAWC,EAAQC,EAAOvK,GACxCuK,EAAQA,GAAgB,GACxB,MAAMnJ,EAASkJ,EAAOE,YAChB/G,EAAS6G,EAAO5E,YAChB+E,EAASH,EAAOI,YAChBC,EAAcvJ,GAAUmJ,EAAQ,GAChCpG,EAAkB,IAAIrH,MAAM6N,GAClC,IAAK,IAAI1I,EAAI,EAAGA,EAAI0I,EAAa1I,GAAKb,EAAQ,CAC5C+C,EAAgBlC,GAAK,EACrBkC,EAAgBlC,EAAI,GAAK,EACzB,IAAK,IAAI6E,EAAI,EAAGA,EAAI1F,EAAQ0F,IAC1B3C,EAAgBlC,EAAI6E,GAAK2D,EAAO3D,EAEpC,CACA,MAAMtB,EAAO,CAACrB,EAAgB3C,QACxBwG,EAAU,IAAIgB,EAAQ7E,EAAiBV,EAAQ+B,GAErD,OADAoF,EAAY5C,EAASyC,EAAQH,EAAOO,YAAa7K,GAC1CgI,CACT,CAUO,SAAS4C,EAAY5C,EAASyC,EAAQK,EAAQ9K,GACnD,MAAMmE,EAAkB6D,EAAQpC,qBAC1BxE,EAAS4G,EAAQwC,YACjBD,EAAQpG,EAAgB3C,OAASJ,EAAS,EAC1C2J,EAAa/K,GAAgB,EACnC,IAAK,IAAIiC,EAAI,EAAGA,GAAKsI,IAAStI,EAAG,CAC/B,MAAMmE,EAASnE,EAAIb,EACbpB,EAAQ+K,EAAiC,GAAnB,QAAO9I,EAAGsI,GAAalG,KAAK2G,GAAMT,EAC9DpG,EAAgBiC,GAAUqE,EAAO,GAAKK,EAASzG,KAAK4G,IAAIjL,GACxDmE,EAAgBiC,EAAS,GAAKqE,EAAO,GAAKK,EAASzG,KAAK6G,IAAIlL,EAC9D,CACAgI,EAAQ5F,SACV,C,sGC5eA,MAAMmF,UAAuB,IAC3BxJ,cACEC,QAMAb,KAAKsG,OAAS,KAMdtG,KAAKiE,OAAS,EAMdjE,KAAKgH,gBAAkB,IACzB,CAOAxE,cAAcC,GACZ,OAAO,QACLzC,KAAKgH,gBACL,EACAhH,KAAKgH,gBAAgB3C,OACrBrE,KAAKiE,OACLxB,EAEJ,CAMAgF,iBACE,OAAO,SACT,CAOAuG,qBACE,OAAOhO,KAAKgH,gBAAgBnH,MAAM,EAAGG,KAAKiE,OAC5C,CAKAwE,qBACE,OAAOzI,KAAKgH,eACd,CAOAiH,oBACE,OAAOjO,KAAKgH,gBAAgBnH,MAC1BG,KAAKgH,gBAAgB3C,OAASrE,KAAKiE,OAEvC,CAOAsE,YACE,OAAOvI,KAAKsG,MACd,CAOAhF,sBAAsBF,GAOpB,GANIpB,KAAKiB,6BAA+BjB,KAAK0B,gBAC3C1B,KAAKgB,yCAA2C,EAChDhB,KAAKiB,2BAA6BjB,KAAK0B,eAKvCN,EAAmB,GACgC,IAAlDpB,KAAKgB,0CACJI,GAAoBpB,KAAKgB,yCAE3B,OAAOhB,KAGT,MAAM8F,EACJ9F,KAAK+H,8BAA8B3G,GAC/B4G,EAA4BlC,EAAmB2C,qBACrD,OAAIT,EAA0B3D,OAASrE,KAAKgH,gBAAgB3C,OACnDyB,GAQT9F,KAAKgB,yCAA2CI,EACzCpB,KACT,CAOA+H,8BAA8B3G,GAC5B,OAAOpB,IACT,CAKAqN,YACE,OAAOrN,KAAKiE,MACd,CAMA6C,mBAAmBR,EAAQU,GACzBhH,KAAKiE,OAASiK,EAAmB5H,GACjCtG,KAAKsG,OAASA,EACdtG,KAAKgH,gBAAkBA,CACzB,CAOAH,eAAeR,EAAaC,IAC1B,SACF,CAQA2B,UAAU3B,EAAQD,EAAa8H,GAE7B,IAAIlK,EACJ,GAAIqC,EACFrC,EAASiK,EAAmB5H,OACvB,CACL,IAAK,IAAIxB,EAAI,EAAGA,EAAIqJ,IAAWrJ,EAAG,CAChC,GAA2B,IAAvBuB,EAAYhC,OAGd,OAFArE,KAAKsG,OAAS,UACdtG,KAAKiE,OAAS,GAGhBoC,EAAoCA,EAAY,EAClD,CACApC,EAASoC,EAAYhC,OACrBiC,EAAS8H,EAAmBnK,EAC9B,CACAjE,KAAKsG,OAASA,EACdtG,KAAKiE,OAASA,CAChB,CAWAzC,eAAe6B,GACTrD,KAAKgH,kBACP3D,EAAYrD,KAAKgH,gBAAiBhH,KAAKgH,gBAAiBhH,KAAKiE,QAC7DjE,KAAKiF,UAET,CASArC,OAAOC,EAAOC,GACZ,MAAMkE,EAAkBhH,KAAKyI,qBAC7B,GAAIzB,EAAiB,CACnB,MAAM/C,EAASjE,KAAKqN,aACpB,QACErG,EACA,EACAA,EAAgB3C,OAChBJ,EACApB,EACAC,EACAkE,GAEFhH,KAAKiF,SACP,CACF,CAWAlC,MAAMC,EAAIC,EAAIH,QACD6D,IAAP1D,IACFA,EAAKD,GAEFF,IACHA,GAAS,QAAU9C,KAAK0C,cAE1B,MAAMsE,EAAkBhH,KAAKyI,qBAC7B,GAAIzB,EAAiB,CACnB,MAAM/C,EAASjE,KAAKqN,aACpB,QACErG,EACA,EACAA,EAAgB3C,OAChBJ,EACAjB,EACAC,EACAH,EACAkE,GAEFhH,KAAKiF,SACP,CACF,CASA1B,UAAUC,EAAQC,GAChB,MAAMuD,EAAkBhH,KAAKyI,qBAC7B,GAAIzB,EAAiB,CACnB,MAAM/C,EAASjE,KAAKqN,aACpB,QACErG,EACA,EACAA,EAAgB3C,OAChBJ,EACAT,EACAC,EACAuD,GAEFhH,KAAKiF,SACP,CACF,EAOF,SAASmJ,EAAmBnK,GAC1B,IAAIqC,EAQJ,OAPc,GAAVrC,EACFqC,EAAS,KACU,GAAVrC,EACTqC,EAAS,MACU,GAAVrC,IACTqC,EAAS,QAEkD,CAC/D,CAMO,SAAS4H,EAAmB5H,GACjC,IAAIrC,EAQJ,MAPc,MAAVqC,EACFrC,EAAS,EACU,OAAVqC,GAA6B,OAAVA,EAC5BrC,EAAS,EACU,QAAVqC,IACTrC,EAAS,GAEkB,CAC/B,CAQO,SAASoK,EAAgBC,EAAgBjN,EAAWuG,GACzD,MAAMZ,EAAkBsH,EAAe7F,qBACvC,IAAKzB,EACH,OAAO,KAET,MAAM/C,EAASqK,EAAejB,YAC9B,OAAO,QACLrG,EACA,EACAA,EAAgB3C,OAChBJ,EACA5C,EACAuG,EAEJ,CAEA,S,kBCjVO,SAASyE,EAAWrF,EAAiBiC,EAAQC,EAAKjF,GACvD,IAAIsK,EAAY,EACZC,EAAKxH,EAAgBkC,EAAMjF,GAC3BwK,EAAKzH,EAAgBkC,EAAMjF,EAAS,GACxC,KAAOgF,EAASC,EAAKD,GAAUhF,EAAQ,CACrC,MAAMyK,EAAK1H,EAAgBiC,GACrB0F,EAAK3H,EAAgBiC,EAAS,GACpCsF,GAAaE,EAAKC,EAAKF,EAAKG,EAC5BH,EAAKE,EACLD,EAAKE,CACP,CACA,OAAOJ,EAAY,CACrB,CASO,SAAS3B,EAAY5F,EAAiBiC,EAAQZ,EAAMpE,GACzD,IAAI2K,EAAO,EACX,IAAK,IAAI9J,EAAI,EAAGC,EAAKsD,EAAKhE,OAAQS,EAAIC,IAAMD,EAAG,CAC7C,MAAMoE,EAAMb,EAAKvD,GACjB8J,GAAQvC,EAAWrF,EAAiBiC,EAAQC,EAAKjF,GACjDgF,EAASC,CACX,CACA,OAAO0F,CACT,CASO,SAAS5E,EAAahD,EAAiBiC,EAAQgB,EAAOhG,GAC3D,IAAI2K,EAAO,EACX,IAAK,IAAI9J,EAAI,EAAGC,EAAKkF,EAAM5F,OAAQS,EAAIC,IAAMD,EAAG,CAC9C,MAAMuD,EAAO4B,EAAMnF,GACnB8J,GAAQhC,EAAY5F,EAAiBiC,EAAQZ,EAAMpE,GACnDgF,EAASZ,EAAKA,EAAKhE,OAAS,EAC9B,CACA,OAAOuK,CACT,C,mICxCA,SAASC,EACP7H,EACA8H,EACAC,EACA9K,EACArC,EACAC,EACAC,GAEA,MAAM0M,EAAKxH,EAAgB8H,GACrBL,EAAKzH,EAAgB8H,EAAU,GAC/BE,EAAKhI,EAAgB+H,GAAWP,EAChCS,EAAKjI,EAAgB+H,EAAU,GAAKN,EAC1C,IAAIxF,EACJ,GAAW,IAAP+F,GAAmB,IAAPC,EACdhG,EAAS6F,MACJ,CACL,MAAMI,IAAMtN,EAAI4M,GAAMQ,GAAMnN,EAAI4M,GAAMQ,IAAOD,EAAKA,EAAKC,EAAKA,GAC5D,GAAIC,EAAI,EACNjG,EAAS8F,MACJ,IAAIG,EAAI,EAAG,CAChB,IAAK,IAAIpK,EAAI,EAAGA,EAAIb,IAAUa,EAC5BhD,EAAagD,IAAK,QAChBkC,EAAgB8H,EAAUhK,GAC1BkC,EAAgB+H,EAAUjK,GAC1BoK,GAIJ,YADApN,EAAauC,OAASJ,EAExB,CACEgF,EAAS6F,CACX,CACF,CACA,IAAK,IAAIhK,EAAI,EAAGA,EAAIb,IAAUa,EAC5BhD,EAAagD,GAAKkC,EAAgBiC,EAASnE,GAE7ChD,EAAauC,OAASJ,CACxB,CAYO,SAASkL,EAAgBnI,EAAiBiC,EAAQC,EAAKjF,EAAQmL,GACpE,IAAIZ,EAAKxH,EAAgBiC,GACrBwF,EAAKzH,EAAgBiC,EAAS,GAClC,IAAKA,GAAUhF,EAAQgF,EAASC,EAAKD,GAAUhF,EAAQ,CACrD,MAAMyK,EAAK1H,EAAgBiC,GACrB0F,EAAK3H,EAAgBiC,EAAS,GAC9BoG,GAAe,QAAUb,EAAIC,EAAIC,EAAIC,GACvCU,EAAeD,IACjBA,EAAMC,GAERb,EAAKE,EACLD,EAAKE,CACP,CACA,OAAOS,CACT,CAUO,SAASE,EACdtI,EACAiC,EACAZ,EACApE,EACAmL,GAEA,IAAK,IAAItK,EAAI,EAAGC,EAAKsD,EAAKhE,OAAQS,EAAIC,IAAMD,EAAG,CAC7C,MAAMoE,EAAMb,EAAKvD,GACjBsK,EAAMD,EAAgBnI,EAAiBiC,EAAQC,EAAKjF,EAAQmL,GAC5DnG,EAASC,CACX,CACA,OAAOkG,CACT,CAUO,SAASG,EACdvI,EACAiC,EACAgB,EACAhG,EACAmL,GAEA,IAAK,IAAItK,EAAI,EAAGC,EAAKkF,EAAM5F,OAAQS,EAAIC,IAAMD,EAAG,CAC9C,MAAMuD,EAAO4B,EAAMnF,GACnBsK,EAAME,EAAqBtI,EAAiBiC,EAAQZ,EAAMpE,EAAQmL,GAClEnG,EAASZ,EAAKA,EAAKhE,OAAS,EAC9B,CACA,OAAO+K,CACT,CAgBO,SAASI,EACdxI,EACAiC,EACAC,EACAjF,EACAwL,EACAC,EACA9N,EACAC,EACAC,EACAC,EACA4N,GAEA,GAAI1G,GAAUC,EACZ,OAAOnH,EAET,IAAI+C,EAAG4E,EACP,GAAiB,IAAb+F,EAAgB,CAQlB,GANA/F,GAAkB,QAChB9H,EACAC,EACAmF,EAAgBiC,GAChBjC,EAAgBiC,EAAS,IAEvBS,EAAkB3H,EAAoB,CACxC,IAAK+C,EAAI,EAAGA,EAAIb,IAAUa,EACxBhD,EAAagD,GAAKkC,EAAgBiC,EAASnE,GAG7C,OADAhD,EAAauC,OAASJ,EACfyF,CACT,CACA,OAAO3H,CACT,CACA4N,EAAWA,GAAsB,CAACvN,IAAKA,KACvC,IAAI2G,EAAQE,EAAShF,EACrB,MAAO8E,EAAQG,EAWb,GAVA2F,EACE7H,EACA+B,EAAQ9E,EACR8E,EACA9E,EACArC,EACAC,EACA8N,GAEFjG,GAAkB,QAAU9H,EAAGC,EAAG8N,EAAS,GAAIA,EAAS,IACpDjG,EAAkB3H,EAAoB,CAExC,IADAA,EAAqB2H,EAChB5E,EAAI,EAAGA,EAAIb,IAAUa,EACxBhD,EAAagD,GAAK6K,EAAS7K,GAE7BhD,EAAauC,OAASJ,EACtB8E,GAAS9E,CACX,MAWE8E,GACE9E,EACAiD,KAAKkI,KACDlI,KAAKC,KAAKuC,GAAmBxC,KAAKC,KAAKpF,IACvC0N,EACA,EACF,GAIR,GAAIC,IAEFb,EACE7H,EACAkC,EAAMjF,EACNgF,EACAhF,EACArC,EACAC,EACA8N,GAEFjG,GAAkB,QAAU9H,EAAGC,EAAG8N,EAAS,GAAIA,EAAS,IACpDjG,EAAkB3H,GAAoB,CAExC,IADAA,EAAqB2H,EAChB5E,EAAI,EAAGA,EAAIb,IAAUa,EACxBhD,EAAagD,GAAK6K,EAAS7K,GAE7BhD,EAAauC,OAASJ,CACxB,CAEF,OAAOlC,CACT,CAgBO,SAAS6N,EACd5I,EACAiC,EACAZ,EACApE,EACAwL,EACAC,EACA9N,EACAC,EACAC,EACAC,EACA4N,GAEAA,EAAWA,GAAsB,CAACvN,IAAKA,KACvC,IAAK,IAAI0C,EAAI,EAAGC,EAAKsD,EAAKhE,OAAQS,EAAIC,IAAMD,EAAG,CAC7C,MAAMoE,EAAMb,EAAKvD,GACjB/C,EAAqByN,EACnBxI,EACAiC,EACAC,EACAjF,EACAwL,EACAC,EACA9N,EACAC,EACAC,EACAC,EACA4N,GAEF1G,EAASC,CACX,CACA,OAAOnH,CACT,CAgBO,SAAS8N,EACd7I,EACAiC,EACAgB,EACAhG,EACAwL,EACAC,EACA9N,EACAC,EACAC,EACAC,EACA4N,GAEAA,EAAWA,GAAsB,CAACvN,IAAKA,KACvC,IAAK,IAAI0C,EAAI,EAAGC,EAAKkF,EAAM5F,OAAQS,EAAIC,IAAMD,EAAG,CAC9C,MAAMuD,EAAO4B,EAAMnF,GACnB/C,EAAqB6N,EACnB5I,EACAiC,EACAZ,EACApE,EACAwL,EACAC,EACA9N,EACAC,EACAC,EACAC,EACA4N,GAEF1G,EAASZ,EAAKA,EAAKhE,OAAS,EAC9B,CACA,OAAOtC,CACT,C,8EClUO,SAAS+N,EACd9I,EACAiC,EACAC,EACAjF,EACAxB,GAEA,MAAMsN,GAAU,QACdtN,GAKA,SAAUF,GACR,OAAQyN,EACNhJ,EACAiC,EACAC,EACAjF,EACA1B,EAAW,GACXA,EAAW,GAEf,IAEF,OAAQwN,CACV,CAWO,SAASC,EACdhJ,EACAiC,EACAC,EACAjF,EACArC,EACAC,GASA,IAAIoO,EAAK,EACLzB,EAAKxH,EAAgBkC,EAAMjF,GAC3BwK,EAAKzH,EAAgBkC,EAAMjF,EAAS,GACxC,KAAOgF,EAASC,EAAKD,GAAUhF,EAAQ,CACrC,MAAMyK,EAAK1H,EAAgBiC,GACrB0F,EAAK3H,EAAgBiC,EAAS,GAChCwF,GAAM5M,EACJ8M,EAAK9M,IAAM6M,EAAKF,IAAO3M,EAAI4M,IAAO7M,EAAI4M,IAAOG,EAAKF,GAAM,GAC1DwB,IAEOtB,GAAM9M,IAAM6M,EAAKF,IAAO3M,EAAI4M,IAAO7M,EAAI4M,IAAOG,EAAKF,GAAM,GAClEwB,IAEFzB,EAAKE,EACLD,EAAKE,CACP,CACA,OAAc,IAAPsB,CACT,CAWO,SAASC,EACdlJ,EACAiC,EACAZ,EACApE,EACArC,EACAC,GAEA,GAAoB,IAAhBwG,EAAKhE,OACP,OAAO,EAET,IAAK2L,EAAqBhJ,EAAiBiC,EAAQZ,EAAK,GAAIpE,EAAQrC,EAAGC,GACrE,OAAO,EAET,IAAK,IAAIiD,EAAI,EAAGC,EAAKsD,EAAKhE,OAAQS,EAAIC,IAAMD,EAC1C,GACEkL,EAAqBhJ,EAAiBqB,EAAKvD,EAAI,GAAIuD,EAAKvD,GAAIb,EAAQrC,EAAGC,GAEvE,OAAO,EAGX,OAAO,CACT,CAWO,SAASsO,EACdnJ,EACAiC,EACAgB,EACAhG,EACArC,EACAC,GAEA,GAAqB,IAAjBoI,EAAM5F,OACR,OAAO,EAET,IAAK,IAAIS,EAAI,EAAGC,EAAKkF,EAAM5F,OAAQS,EAAIC,IAAMD,EAAG,CAC9C,MAAMuD,EAAO4B,EAAMnF,GACnB,GAAIoL,EAAsBlJ,EAAiBiC,EAAQZ,EAAMpE,EAAQrC,EAAGC,GAClE,OAAO,EAEToH,EAASZ,EAAKA,EAAKhE,OAAS,EAC9B,CACA,OAAO,CACT,C,kBCrIO,SAAS+L,EAAkBpJ,EAAiBiC,EAAQ1G,EAAY0B,GACrE,IAAK,IAAIa,EAAI,EAAGC,EAAKxC,EAAW8B,OAAQS,EAAIC,IAAMD,EAChDkC,EAAgBiC,KAAY1G,EAAWuC,GAEzC,OAAOmE,CACT,CASO,SAASoH,EACdrJ,EACAiC,EACA5C,EACApC,GAEA,IAAK,IAAIa,EAAI,EAAGC,EAAKsB,EAAYhC,OAAQS,EAAIC,IAAMD,EAAG,CACpD,MAAMvC,EAAa8D,EAAYvB,GAC/B,IAAK,IAAI6E,EAAI,EAAGA,EAAI1F,IAAU0F,EAC5B3C,EAAgBiC,KAAY1G,EAAWoH,EAE3C,CACA,OAAOV,CACT,CAUO,SAASqH,EACdtJ,EACAiC,EACAsH,EACAtM,EACAoE,GAEAA,EAAOA,GAAc,GACrB,IAAIvD,EAAI,EACR,IAAK,IAAI6E,EAAI,EAAGmB,EAAKyF,EAAalM,OAAQsF,EAAImB,IAAMnB,EAAG,CACrD,MAAMT,EAAMmH,EACVrJ,EACAiC,EACAsH,EAAa5G,GACb1F,GAEFoE,EAAKvD,KAAOoE,EACZD,EAASC,CACX,CAEA,OADAb,EAAKhE,OAASS,EACPuD,CACT,CAUO,SAASmI,EACdxJ,EACAiC,EACAwH,EACAxM,EACAgG,GAEAA,EAAQA,GAAgB,GACxB,IAAInF,EAAI,EACR,IAAK,IAAI6E,EAAI,EAAGmB,EAAK2F,EAAcpM,OAAQsF,EAAImB,IAAMnB,EAAG,CACtD,MAAMtB,EAAOiI,EACXtJ,EACAiC,EACAwH,EAAc9G,GACd1F,EACAgG,EAAMnF,IAEY,IAAhBuD,EAAKhE,SACPgE,EAAK,GAAKY,GAEZgB,EAAMnF,KAAOuD,EACbY,EAASZ,EAAKA,EAAKhE,OAAS,EAC9B,CAEA,OADA4F,EAAM5F,OAASS,EACRmF,CACT,C,8DC5FO,SAASyG,EACd1J,EACAiC,EACAC,EACAjF,EACAoC,GAEAA,OAA8BM,IAAhBN,EAA4BA,EAAc,GACxD,IAAIvB,EAAI,EACR,IAAK,IAAI6E,EAAIV,EAAQU,EAAIT,EAAKS,GAAK1F,EACjCoC,EAAYvB,KAAOkC,EAAgBnH,MAAM8J,EAAGA,EAAI1F,GAGlD,OADAoC,EAAYhC,OAASS,EACduB,CACT,CAUO,SAASsK,EACd3J,EACAiC,EACAZ,EACApE,EACAsM,GAEAA,OAAgC5J,IAAjB4J,EAA6BA,EAAe,GAC3D,IAAIzL,EAAI,EACR,IAAK,IAAI6E,EAAI,EAAGmB,EAAKzC,EAAKhE,OAAQsF,EAAImB,IAAMnB,EAAG,CAC7C,MAAMT,EAAMb,EAAKsB,GACjB4G,EAAazL,KAAO4L,EAClB1J,EACAiC,EACAC,EACAjF,EACAsM,EAAazL,IAEfmE,EAASC,CACX,CAEA,OADAqH,EAAalM,OAASS,EACfyL,CACT,CAWO,SAASK,EACd5J,EACAiC,EACAgB,EACAhG,EACAwM,GAEAA,OAAkC9J,IAAlB8J,EAA8BA,EAAgB,GAC9D,IAAI3L,EAAI,EACR,IAAK,IAAI6E,EAAI,EAAGmB,EAAKb,EAAM5F,OAAQsF,EAAImB,IAAMnB,EAAG,CAC9C,MAAMtB,EAAO4B,EAAMN,GACnB8G,EAAc3L,KACI,IAAhBuD,EAAKhE,QAAgBgE,EAAK,KAAOY,EAC7B,GACA0H,EACE3J,EACAiC,EACAZ,EACApE,EACAwM,EAAc3L,IAEtBmE,EAASZ,EAAKA,EAAKhE,OAAS,EAC9B,CAEA,OADAoM,EAAcpM,OAASS,EAChB2L,CACT,C,wGC3EO,SAASI,EACd7J,EACAiC,EACAZ,EACApE,EACAiG,EACA4G,EACAlJ,GAEA,IAAI9C,EAAGC,EAAInD,EAAG4M,EAAIE,EAAID,EAAIE,EAC1B,MAAM9M,EAAIqI,EAAY4G,EAAoB,GAEpCC,EAAgB,GAEtB,IAAK,IAAIC,EAAI,EAAGC,EAAK5I,EAAKhE,OAAQ2M,EAAIC,IAAMD,EAAG,CAC7C,MAAM9H,EAAMb,EAAK2I,GAGjB,IAFAxC,EAAKxH,EAAgBkC,EAAMjF,GAC3BwK,EAAKzH,EAAgBkC,EAAMjF,EAAS,GAC/Ba,EAAImE,EAAQnE,EAAIoE,EAAKpE,GAAKb,EAC7ByK,EAAK1H,EAAgBlC,GACrB6J,EAAK3H,EAAgBlC,EAAI,IACpBjD,GAAK4M,GAAME,GAAM9M,GAAO4M,GAAM5M,GAAKA,GAAK8M,KAC3C/M,GAAMC,EAAI4M,IAAOE,EAAKF,IAAQC,EAAKF,GAAMA,EACzCuC,EAAc/L,KAAKpD,IAErB4M,EAAKE,EACLD,EAAKE,CAET,CAGA,IAAIuC,EAAS9O,IACT+O,GAAoB9O,IAGxB,IAFA0O,EAAcK,KAAK,MACnB5C,EAAKuC,EAAc,GACdjM,EAAI,EAAGC,EAAKgM,EAAc1M,OAAQS,EAAIC,IAAMD,EAAG,CAClD4J,EAAKqC,EAAcjM,GACnB,MAAMuM,EAAgBnK,KAAKoK,IAAI5C,EAAKF,GAChC6C,EAAgBF,IAClBvP,GAAK4M,EAAKE,GAAM,GACZ,QAAsB1H,EAAiBiC,EAAQZ,EAAMpE,EAAQrC,EAAGC,KAClEqP,EAAStP,EACTuP,EAAmBE,IAGvB7C,EAAKE,CACP,CAMA,OALI/L,MAAMuO,KAGRA,EAAShH,EAAY4G,IAEnBlJ,GACFA,EAAK5C,KAAKkM,EAAQrP,EAAGsP,GACdvJ,GAEF,CAACsJ,EAAQrP,EAAGsP,EACrB,CAWO,SAASI,EACdvK,EACAiC,EACAgB,EACAhG,EACAiG,GAEA,IAAIsH,EAAiB,GACrB,IAAK,IAAI1M,EAAI,EAAGC,EAAKkF,EAAM5F,OAAQS,EAAIC,IAAMD,EAAG,CAC9C,MAAMuD,EAAO4B,EAAMnF,GACnB0M,EAAiBX,EACf7J,EACAiC,EACAZ,EACApE,EACAiG,EACA,EAAIpF,EACJ0M,GAEFvI,EAASZ,EAAKA,EAAKhE,OAAS,EAC9B,CACA,OAAOmN,CACT,C,gFC7FO,SAASC,EACdzK,EACAiC,EACAC,EACAjF,EACA0D,EACAC,EACA8J,GAEA,IAAIC,EAAGzC,EACP,MAAMrF,GAAKX,EAAMD,GAAUhF,EAC3B,GAAU,IAAN4F,EACF8H,EAAI1I,OACC,GAAU,IAANY,EACT8H,EAAI1I,EACJiG,EAAIvH,OACC,GAAU,IAANkC,EAAS,CAClB,IAAI2E,EAAKxH,EAAgBiC,GACrBwF,EAAKzH,EAAgBiC,EAAS,GAC9B5E,EAAS,EACb,MAAMuN,EAAoB,CAAC,GAC3B,IAAK,IAAI9M,EAAImE,EAAShF,EAAQa,EAAIoE,EAAKpE,GAAKb,EAAQ,CAClD,MAAMyK,EAAK1H,EAAgBlC,GACrB6J,EAAK3H,EAAgBlC,EAAI,GAC/BT,GAAU6C,KAAKC,MAAMuH,EAAKF,IAAOE,EAAKF,IAAOG,EAAKF,IAAOE,EAAKF,IAC9DmD,EAAkB5M,KAAKX,GACvBmK,EAAKE,EACLD,EAAKE,CACP,CACA,MAAMkD,EAASlK,EAAWtD,EACpB0E,GAAQ,QAAa6I,EAAmBC,GAC1C9I,EAAQ,GACVmG,GACG2C,EAASD,GAAmB7I,EAAQ,KACpC6I,GAAmB7I,EAAQ,GAAK6I,GAAmB7I,EAAQ,IAC9D4I,EAAI1I,IAAWF,EAAQ,GAAK9E,GAE5B0N,EAAI1I,EAASF,EAAQ9E,CAEzB,CACAyN,EAAYA,EAAY,EAAIA,EAAY,EACxC9J,EAAOA,GAAc,IAAIjI,MAAM+R,GAC/B,IAAK,IAAI5M,EAAI,EAAGA,EAAI4M,IAAa5M,EAC/B8C,EAAK9C,QACG6B,IAANgL,EACIvP,SACMuE,IAANuI,EACAlI,EAAgB2K,EAAI7M,IACpB,QAAKkC,EAAgB2K,EAAI7M,GAAIkC,EAAgB2K,EAAI1N,EAASa,GAAIoK,GAEtE,OAAOtH,CACT,CAWO,SAASkK,EACd9K,EACAiC,EACAC,EACAjF,EACAsD,EACAC,GAEA,GAAI0B,GAAOD,EACT,OAAO,KAET,IAAI1G,EACJ,GAAIgF,EAAIP,EAAgBiC,EAAShF,EAAS,GACxC,OAAIuD,GACFjF,EAAayE,EAAgBnH,MAAMoJ,EAAQA,EAAShF,GACpD1B,EAAW0B,EAAS,GAAKsD,EAClBhF,GAEF,KACF,GAAIyE,EAAgBkC,EAAM,GAAK3B,EACpC,OAAIC,GACFjF,EAAayE,EAAgBnH,MAAMqJ,EAAMjF,EAAQiF,GACjD3G,EAAW0B,EAAS,GAAKsD,EAClBhF,GAEF,KAGT,GAAIgF,GAAKP,EAAgBiC,EAAShF,EAAS,GACzC,OAAO+C,EAAgBnH,MAAMoJ,EAAQA,EAAShF,GAEhD,IAAI8N,EAAK9I,EAAShF,EACd+N,EAAK9I,EAAMjF,EACf,MAAO8N,EAAKC,EAAI,CACd,MAAMC,EAAOF,EAAKC,GAAO,EACrBzK,EAAIP,GAAiBiL,EAAM,GAAKhO,EAAS,GAC3C+N,EAAKC,EAELF,EAAKE,EAAM,CAEf,CACA,MAAMC,EAAKlL,EAAgB+K,EAAK9N,EAAS,GACzC,GAAIsD,GAAK2K,EACP,OAAOlL,EAAgBnH,OAAOkS,EAAK,GAAK9N,GAAS8N,EAAK,GAAK9N,EAASA,GAEtE,MAAMkO,EAAKnL,GAAiB+K,EAAK,GAAK9N,EAAS,GACzCiL,GAAK3H,EAAI2K,IAAOC,EAAKD,GAC3B3P,EAAa,GACb,IAAK,IAAIuC,EAAI,EAAGA,EAAIb,EAAS,IAAKa,EAChCvC,EAAWyC,MACT,QACEgC,GAAiB+K,EAAK,GAAK9N,EAASa,GACpCkC,EAAgB+K,EAAK9N,EAASa,GAC9BoK,IAKN,OADA3M,EAAWyC,KAAKuC,GACThF,CACT,CAYO,SAAS6P,EACdpL,EACAiC,EACAZ,EACApE,EACAsD,EACAC,EACAoB,GAEA,GAAIA,EACF,OAAOkJ,EACL9K,EACAiC,EACAZ,EAAKA,EAAKhE,OAAS,GACnBJ,EACAsD,EACAC,GAGJ,IAAIjF,EACJ,GAAIgF,EAAIP,EAAgB/C,EAAS,GAC/B,OAAIuD,GACFjF,EAAayE,EAAgBnH,MAAM,EAAGoE,GACtC1B,EAAW0B,EAAS,GAAKsD,EAClBhF,GAEF,KAET,GAAIyE,EAAgBA,EAAgB3C,OAAS,GAAKkD,EAChD,OAAIC,GACFjF,EAAayE,EAAgBnH,MAAMmH,EAAgB3C,OAASJ,GAC5D1B,EAAW0B,EAAS,GAAKsD,EAClBhF,GAEF,KAET,IAAK,IAAIuC,EAAI,EAAGC,EAAKsD,EAAKhE,OAAQS,EAAIC,IAAMD,EAAG,CAC7C,MAAMoE,EAAMb,EAAKvD,GACjB,GAAImE,GAAUC,EAAd,CAGA,GAAI3B,EAAIP,EAAgBiC,EAAShF,EAAS,GACxC,OAAO,KACF,GAAIsD,GAAKP,EAAgBkC,EAAM,GACpC,OAAO4I,EACL9K,EACAiC,EACAC,EACAjF,EACAsD,GACA,GAGJ0B,EAASC,CAbT,CAcF,CACA,OAAO,IACT,C,6GCxLO,SAASmJ,EACdrL,EACAiC,EACAC,EACAjF,EACAxB,GAEA,MAAM6P,GAAoB,SACxB,UACAtL,EACAiC,EACAC,EACAjF,GAEF,SAAK,QAAWxB,EAAQ6P,QAGpB,QAAe7P,EAAQ6P,KAGvBA,EAAkB,IAAM7P,EAAO,IAAM6P,EAAkB,IAAM7P,EAAO,KAGpE6P,EAAkB,IAAM7P,EAAO,IAAM6P,EAAkB,IAAM7P,EAAO,KAGjE,OACLuE,EACAiC,EACAC,EACAjF,GAOA,SAAUsO,EAAQC,GAChB,OAAO,QAAkB/P,EAAQ8P,EAAQC,EAC3C,MAEJ,CAUO,SAASC,EACdzL,EACAiC,EACAZ,EACApE,EACAxB,GAEA,IAAK,IAAIqC,EAAI,EAAGC,EAAKsD,EAAKhE,OAAQS,EAAIC,IAAMD,EAAG,CAC7C,GACEuN,EAAqBrL,EAAiBiC,EAAQZ,EAAKvD,GAAIb,EAAQxB,GAE/D,OAAO,EAETwG,EAASZ,EAAKvD,EAChB,CACA,OAAO,CACT,CAUO,SAAS4N,EACd1L,EACAiC,EACAC,EACAjF,EACAxB,GAEA,QAAI4P,EAAqBrL,EAAiBiC,EAAQC,EAAKjF,EAAQxB,QAI7D,QACEuE,EACAiC,EACAC,EACAjF,EACAxB,EAAO,GACPA,EAAO,SAMT,QACEuE,EACAiC,EACAC,EACAjF,EACAxB,EAAO,GACPA,EAAO,SAMT,QACEuE,EACAiC,EACAC,EACAjF,EACAxB,EAAO,GACPA,EAAO,QAMT,QACEuE,EACAiC,EACAC,EACAjF,EACAxB,EAAO,GACPA,EAAO,MAMb,CAUO,SAASkQ,EACd3L,EACAiC,EACAZ,EACApE,EACAxB,GAEA,IAAKiQ,EAAqB1L,EAAiBiC,EAAQZ,EAAK,GAAIpE,EAAQxB,GAClE,OAAO,EAET,GAAoB,IAAhB4F,EAAKhE,OACP,OAAO,EAET,IAAK,IAAIS,EAAI,EAAGC,EAAKsD,EAAKhE,OAAQS,EAAIC,IAAMD,EAC1C,IACE,QACEkC,EACAqB,EAAKvD,EAAI,GACTuD,EAAKvD,GACLb,EACAxB,KAIC4P,EACCrL,EACAqB,EAAKvD,EAAI,GACTuD,EAAKvD,GACLb,EACAxB,GAGF,OAAO,EAIb,OAAO,CACT,CAUO,SAASmQ,EACd5L,EACAiC,EACAgB,EACAhG,EACAxB,GAEA,IAAK,IAAIqC,EAAI,EAAGC,EAAKkF,EAAM5F,OAAQS,EAAIC,IAAMD,EAAG,CAC9C,MAAMuD,EAAO4B,EAAMnF,GACnB,GACE6N,EAA0B3L,EAAiBiC,EAAQZ,EAAMpE,EAAQxB,GAEjE,OAAO,EAETwG,EAASZ,EAAKA,EAAKhE,OAAS,EAC9B,CACA,OAAO,CACT,C,kBC5NO,SAASwO,EAAiB7L,EAAiBiC,EAAQC,EAAKjF,GAC7D,IAAIuK,EAAKxH,EAAgBiC,GACrBwF,EAAKzH,EAAgBiC,EAAS,GAC9B5E,EAAS,EACb,IAAK,IAAIS,EAAImE,EAAShF,EAAQa,EAAIoE,EAAKpE,GAAKb,EAAQ,CAClD,MAAMyK,EAAK1H,EAAgBlC,GACrB6J,EAAK3H,EAAgBlC,EAAI,GAC/BT,GAAU6C,KAAKC,MAAMuH,EAAKF,IAAOE,EAAKF,IAAOG,EAAKF,IAAOE,EAAKF,IAC9DD,EAAKE,EACLD,EAAKE,CACP,CACA,OAAOtK,CACT,C,kCCbO,SAASgC,EAAYW,EAAiBiC,EAAQC,EAAKjF,GACxD,MAAOgF,EAASC,EAAMjF,EAAQ,CAC5B,IAAK,IAAIa,EAAI,EAAGA,EAAIb,IAAUa,EAAG,CAC/B,MAAMgO,EAAM9L,EAAgBiC,EAASnE,GACrCkC,EAAgBiC,EAASnE,GAAKkC,EAAgBkC,EAAMjF,EAASa,GAC7DkC,EAAgBkC,EAAMjF,EAASa,GAAKgO,CACtC,CACA7J,GAAUhF,EACViF,GAAOjF,CACT,CACF,CCLO,SAAS8O,EAAsB/L,EAAiBiC,EAAQC,EAAKjF,GAGlE,IAAI+O,EAAO,EACPxE,EAAKxH,EAAgBkC,EAAMjF,GAC3BwK,EAAKzH,EAAgBkC,EAAMjF,EAAS,GACxC,KAAOgF,EAASC,EAAKD,GAAUhF,EAAQ,CACrC,MAAMyK,EAAK1H,EAAgBiC,GACrB0F,EAAK3H,EAAgBiC,EAAS,GACpC+J,IAAStE,EAAKF,IAAOG,EAAKF,GAC1BD,EAAKE,EACLD,EAAKE,CACP,CACA,OAAgB,IAATqE,OAAarM,EAAYqM,EAAO,CACzC,CAeO,SAASC,EACdjM,EACAiC,EACAZ,EACApE,EACAmH,GAEAA,OAAkBzE,IAAVyE,GAAsBA,EAC9B,IAAK,IAAItG,EAAI,EAAGC,EAAKsD,EAAKhE,OAAQS,EAAIC,IAAMD,EAAG,CAC7C,MAAMoE,EAAMb,EAAKvD,GACXoO,EAAcH,EAClB/L,EACAiC,EACAC,EACAjF,GAEF,GAAU,IAANa,GACF,GAAKsG,GAAS8H,IAAkB9H,IAAU8H,EACxC,OAAO,OAGT,GAAK9H,IAAU8H,IAAkB9H,GAAS8H,EACxC,OAAO,EAGXjK,EAASC,CACX,CACA,OAAO,CACT,CAeO,SAASiK,EACdnM,EACAiC,EACAgB,EACAhG,EACAmH,GAEA,IAAK,IAAItG,EAAI,EAAGC,EAAKkF,EAAM5F,OAAQS,EAAIC,IAAMD,EAAG,CAC9C,MAAMuD,EAAO4B,EAAMnF,GACnB,IAAKmO,EAAuBjM,EAAiBiC,EAAQZ,EAAMpE,EAAQmH,GACjE,OAAO,EAEL/C,EAAKhE,SACP4E,EAASZ,EAAKA,EAAKhE,OAAS,GAEhC,CACA,OAAO,CACT,CAeO,SAAS+O,EACdpM,EACAiC,EACAZ,EACApE,EACAmH,GAEAA,OAAkBzE,IAAVyE,GAAsBA,EAC9B,IAAK,IAAItG,EAAI,EAAGC,EAAKsD,EAAKhE,OAAQS,EAAIC,IAAMD,EAAG,CAC7C,MAAMoE,EAAMb,EAAKvD,GACXoO,EAAcH,EAClB/L,EACAiC,EACAC,EACAjF,GAEIoP,EACE,IAANvO,EACKsG,GAAS8H,IAAkB9H,IAAU8H,EACrC9H,IAAU8H,IAAkB9H,GAAS8H,EACxCG,GACF,EAAmBrM,EAAiBiC,EAAQC,EAAKjF,GAEnDgF,EAASC,CACX,CACA,OAAOD,CACT,CAeO,SAASqK,EACdtM,EACAiC,EACAgB,EACAhG,EACAmH,GAEA,IAAK,IAAItG,EAAI,EAAGC,EAAKkF,EAAM5F,OAAQS,EAAIC,IAAMD,EAC3CmE,EAASmK,EACPpM,EACAiC,EACAgB,EAAMnF,GACNb,EACAmH,GAGJ,OAAOnC,CACT,C,8DChKO,SAASpE,EAAQmC,EAAiBiC,EAAQC,EAAKjF,EAAQoD,GAC5D,IAAIkM,EAEJ,IADAtK,GAAUhF,EACHgF,EAASC,EAAKD,GAAUhF,EAK7B,GAJAsP,EAAMlM,EACJL,EAAgBnH,MAAMoJ,EAAShF,EAAQgF,GACvCjC,EAAgBnH,MAAMoJ,EAAQA,EAAShF,IAErCsP,EACF,OAAOA,EAGX,OAAO,CACT,C,uGC4DO,SAASC,EACdxM,EACAiC,EACAC,EACAjF,EACA7C,EACA4G,EACAyL,GAEA,MAAM5J,GAAKX,EAAMD,GAAUhF,EAC3B,GAAI4F,EAAI,EAAG,CACT,KAAOZ,EAASC,EAAKD,GAAUhF,EAC7B+D,EAA0ByL,KAAsBzM,EAAgBiC,GAChEjB,EAA0ByL,KACxBzM,EAAgBiC,EAAS,GAE7B,OAAOwK,CACT,CAEA,MAAMC,EAAU,IAAI/T,MAAMkK,GAC1B6J,EAAQ,GAAK,EACbA,EAAQ7J,EAAI,GAAK,EAEjB,MAAM8J,EAAQ,CAAC1K,EAAQC,EAAMjF,GAC7B,IAAI8E,EAAQ,EACZ,MAAO4K,EAAMtP,OAAS,EAAG,CACvB,MAAMuP,EAAOD,EAAME,MACbC,EAAQH,EAAME,MACpB,IAAIE,EAAqB,EACzB,MAAMvF,EAAKxH,EAAgB8M,GACrBrF,EAAKzH,EAAgB8M,EAAQ,GAC7BpF,EAAK1H,EAAgB4M,GACrBjF,EAAK3H,EAAgB4M,EAAO,GAClC,IAAK,IAAI9O,EAAIgP,EAAQ7P,EAAQa,EAAI8O,EAAM9O,GAAKb,EAAQ,CAClD,MAAMrC,EAAIoF,EAAgBlC,GACpBjD,EAAImF,EAAgBlC,EAAI,GACxB4E,GAAkB,QAAuB9H,EAAGC,EAAG2M,EAAIC,EAAIC,EAAIC,GAC7DjF,EAAkBqK,IACpBhL,EAAQjE,EACRiP,EAAqBrK,EAEzB,CACIqK,EAAqB3S,IACvBsS,GAAS3K,EAAQE,GAAUhF,GAAU,EACjC6P,EAAQ7P,EAAS8E,GACnB4K,EAAM3O,KAAK8O,EAAO/K,GAEhBA,EAAQ9E,EAAS2P,GACnBD,EAAM3O,KAAK+D,EAAO6K,GAGxB,CACA,IAAK,IAAI9O,EAAI,EAAGA,EAAI+E,IAAK/E,EACnB4O,EAAQ5O,KACVkD,EAA0ByL,KACxBzM,EAAgBiC,EAASnE,EAAIb,GAC/B+D,EAA0ByL,KACxBzM,EAAgBiC,EAASnE,EAAIb,EAAS,IAG5C,OAAOwP,CACT,CAcO,SAASO,EACdhN,EACAiC,EACAZ,EACApE,EACA7C,EACA4G,EACAyL,EACAnK,GAEA,IAAK,IAAIxE,EAAI,EAAGC,EAAKsD,EAAKhE,OAAQS,EAAIC,IAAMD,EAAG,CAC7C,MAAMoE,EAAMb,EAAKvD,GACjB2O,EAAmBD,EACjBxM,EACAiC,EACAC,EACAjF,EACA7C,EACA4G,EACAyL,GAEFnK,EAAetE,KAAKyO,GACpBxK,EAASC,CACX,CACA,OAAOuK,CACT,CAuGO,SAASQ,EAAK5T,EAAO8C,GAC1B,OAAOA,EAAY+D,KAAKgN,MAAM7T,EAAQ8C,EACxC,CAqBO,SAASgR,EACdnN,EACAiC,EACAC,EACAjF,EACAd,EACA6E,EACAyL,GAGA,GAAIxK,GAAUC,EACZ,OAAOuK,EAGT,IAQI/E,EAAIC,EARJH,EAAKyF,EAAKjN,EAAgBiC,GAAS9F,GACnCsL,EAAKwF,EAAKjN,EAAgBiC,EAAS,GAAI9F,GAC3C8F,GAAUhF,EAEV+D,EAA0ByL,KAAsBjF,EAChDxG,EAA0ByL,KAAsBhF,EAIhD,GAIE,GAHAC,EAAKuF,EAAKjN,EAAgBiC,GAAS9F,GACnCwL,EAAKsF,EAAKjN,EAAgBiC,EAAS,GAAI9F,GACvC8F,GAAUhF,EACNgF,GAAUC,EAOZ,OAFAlB,EAA0ByL,KAAsB/E,EAChD1G,EAA0ByL,KAAsB9E,EACzC8E,QAEF/E,GAAMF,GAAMG,GAAMF,GAC3B,MAAOxF,EAASC,EAAK,CAEnB,MAAMkL,EAAKH,EAAKjN,EAAgBiC,GAAS9F,GACnCkR,EAAKJ,EAAKjN,EAAgBiC,EAAS,GAAI9F,GAG7C,GAFA8F,GAAUhF,EAENmQ,GAAM1F,GAAM2F,GAAM1F,EACpB,SAGF,MAAM2F,EAAM5F,EAAKF,EACX+F,EAAM5F,EAAKF,EAEX+F,EAAMJ,EAAK5F,EACXiG,EAAMJ,EAAK5F,EAKf6F,EAAMG,GAAOF,EAAMC,IACjBF,EAAM,GAAKE,EAAMF,GAAQA,GAAOE,GAAQF,EAAM,GAAKE,EAAMF,KACzDC,EAAM,GAAKE,EAAMF,GAAQA,GAAOE,GAAQF,EAAM,GAAKE,EAAMF,IAG3D7F,EAAK0F,EACLzF,EAAK0F,IAMPrM,EAA0ByL,KAAsB/E,EAChD1G,EAA0ByL,KAAsB9E,EAChDH,EAAKE,EACLD,EAAKE,EACLD,EAAK0F,EACLzF,EAAK0F,EACP,CAIA,OAFArM,EAA0ByL,KAAsB/E,EAChD1G,EAA0ByL,KAAsB9E,EACzC8E,CACT,CAcO,SAASiB,EACd1N,EACAiC,EACAZ,EACApE,EACAd,EACA6E,EACAyL,EACAnK,GAEA,IAAK,IAAIxE,EAAI,EAAGC,EAAKsD,EAAKhE,OAAQS,EAAIC,IAAMD,EAAG,CAC7C,MAAMoE,EAAMb,EAAKvD,GACjB2O,EAAmBU,EACjBnN,EACAiC,EACAC,EACAjF,EACAd,EACA6E,EACAyL,GAEFnK,EAAetE,KAAKyO,GACpBxK,EAASC,CACX,CACA,OAAOuK,CACT,CAcO,SAASkB,EACd3N,EACAiC,EACAgB,EACAhG,EACAd,EACA6E,EACAyL,EACA/H,GAEA,IAAK,IAAI5G,EAAI,EAAGC,EAAKkF,EAAM5F,OAAQS,EAAIC,IAAMD,EAAG,CAC9C,MAAMuD,EAAO4B,EAAMnF,GACbwE,EAAiB,GACvBmK,EAAmBiB,EACjB1N,EACAiC,EACAZ,EACApE,EACAd,EACA6E,EACAyL,EACAnK,GAEFoC,EAAgB1G,KAAKsE,GACrBL,EAASZ,EAAKA,EAAKhE,OAAS,EAC9B,CACA,OAAOoP,CACT,C,kBC9cO,SAASmB,EAAcC,EAAU7N,EAAiBiC,EAAQC,EAAKjF,GACpE,IAKI6Q,EAAMhQ,EAAGiQ,EAAKC,EAAKxG,EAAIC,EAAIwG,EAAKC,EAAKC,EAAKC,EAL1CC,EAAapM,EACbqM,EAAWrM,EACXsM,EAAS,EACThO,EAAI,EACJiO,EAAQvM,EAEZ,IAAKnE,EAAImE,EAAQnE,EAAIoE,EAAKpE,GAAKb,EAAQ,CACrC,MAAMyK,EAAK1H,EAAgBlC,GACrB6J,EAAK3H,EAAgBlC,EAAI,QACpB6B,IAAP6H,IACF2G,EAAMzG,EAAKF,EACX4G,EAAMzG,EAAKF,EACXuG,EAAM9N,KAAKC,KAAKgO,EAAMA,EAAMC,EAAMA,QACtBzO,IAARsO,IACF1N,GAAKwN,EACLD,EAAO5N,KAAK4N,MAAMG,EAAME,EAAMD,EAAME,IAAQL,EAAMC,IAC9CF,EAAOD,IACLtN,EAAIgO,IACNA,EAAShO,EACT8N,EAAaG,EACbF,EAAWxQ,GAEbyC,EAAI,EACJiO,EAAQ1Q,EAAIb,IAGhB8Q,EAAMC,EACNC,EAAME,EACND,EAAME,GAER5G,EAAKE,EACLD,EAAKE,CACP,CAEA,OADApH,GAAKyN,EACEzN,EAAIgO,EAAS,CAACC,EAAO1Q,GAAK,CAACuQ,EAAYC,EAChD,C,6EC3BO,SAASG,EACdzO,EACAiC,EACAC,EACAjF,EACAyR,EACAC,EACAd,EACA9R,EACA6S,EACAC,EACAC,EACAC,GAEA,IAAIrH,EAAK1H,EAAgBiC,GACrB0F,EAAK3H,EAAgBiC,EAAS,GAC9BuF,EAAK,EACLC,EAAK,EACL4C,EAAgB,EAChB2E,EAAW,EAEf,SAASC,IACPzH,EAAKE,EACLD,EAAKE,EACL1F,GAAUhF,EACVyK,EAAK1H,EAAgBiC,GACrB0F,EAAK3H,EAAgBiC,EAAS,GAC9B+M,GAAY3E,EACZA,EAAgBnK,KAAKC,MAAMuH,EAAKF,IAAOE,EAAKF,IAAOG,EAAKF,IAAOE,EAAKF,GACtE,CACA,GACEwH,UACOhN,EAASC,EAAMjF,GAAU+R,EAAW3E,EAAgBsE,GAE7D,IAAI/M,EACgB,IAAlByI,EAAsB,GAAKsE,EAASK,GAAY3E,EAClD,MAAM6E,GAAS,QAAK1H,EAAIE,EAAI9F,GACtBuN,GAAS,QAAK1H,EAAIE,EAAI/F,GAEtBwN,EAAcnN,EAAShF,EACvBoS,EAAcL,EACdM,EAAOX,EAAS5S,EAAQ6S,EAAyBC,EAAMH,EAAMI,GACnE,MAAO7M,EAASC,EAAMjF,GAAU+R,EAAW3E,EAAgBiF,EACzDL,IAEFrN,EAAgC,IAAlByI,EAAsB,GAAKiF,EAAON,GAAY3E,EAC5D,MAAMkF,GAAO,QAAK/H,EAAIE,EAAI9F,GACpB4N,GAAO,QAAK/H,EAAIE,EAAI/F,GAG1B,IAAIyK,EACJ,GAAI0C,EAAU,CACZ,MAAMU,EAAO,CAACP,EAAQC,EAAQI,EAAMC,IACpC,QAAOC,EAAM,EAAG,EAAG,EAAGV,EAAUU,EAAMA,GACtCpD,EAAUoD,EAAK,GAAKA,EAAK,EAC3B,MACEpD,EAAU6C,EAASK,EAGrB,MAAM1I,EAAK3G,KAAK2G,GACV6I,EAAS,GACTC,EAAgBP,EAAcnS,IAAWgF,EAQ/C,IAAI2N,EAEJ,GARA3N,EAASmN,EACT/E,EAAgB,EAChB2E,EAAWK,EACX3H,EAAK1H,EAAgBiC,GACrB0F,EAAK3H,EAAgBiC,EAAS,GAI1B0N,EAAe,CACjBV,IAEAW,EAAgB1P,KAAK2P,MAAMlI,EAAKF,EAAIC,EAAKF,GACrC6E,IACFuD,GAAiBA,EAAgB,GAAK/I,EAAKA,GAE7C,MAAMjM,GAAK2U,EAAOL,GAAU,EACtBrU,GAAK2U,EAAOL,GAAU,EAE5B,OADAO,EAAO,GAAK,CAAC9U,EAAGC,GAAIyU,EAAOX,GAAU,EAAGiB,EAAelB,GAChDgB,CACT,CAGAhB,EAAOA,EAAKoB,QAAQ,MAAO,KAE3B,IAAK,IAAIhS,EAAI,EAAGC,EAAK2Q,EAAKrR,OAAQS,EAAIC,GAAM,CAC1CkR,IACA,IAAIpT,EAAQqE,KAAK2P,MAAMlI,EAAKF,EAAIC,EAAKF,GAIrC,GAHI6E,IACFxQ,GAASA,EAAQ,GAAKgL,EAAKA,QAEPlH,IAAlBiQ,EAA6B,CAC/B,IAAIG,EAAQlU,EAAQ+T,EAEpB,GADAG,GAASA,EAAQlJ,GAAM,EAAIA,EAAKkJ,GAASlJ,EAAK,EAAIA,EAAK,EACnD3G,KAAKoK,IAAIyF,GAASlC,EACpB,OAAO,IAEX,CACA+B,EAAgB/T,EAEhB,MAAMmU,EAASlS,EACf,IAAImS,EAAa,EACjB,KAAOnS,EAAIC,IAAMD,EAAG,CAClB,MAAMiE,EAAQsK,EAAUtO,EAAKD,EAAI,EAAIA,EAC/BkG,EAAMjI,EAAQ6S,EAAyBC,EAAMH,EAAK3M,GAAQ+M,GAChE,GACE7M,EAAShF,EAASiF,GAClB8M,EAAW3E,EAAgBsE,EAASsB,EAAajM,EAAM,EAEvD,MAEFiM,GAAcjM,CAChB,CACA,GAAIlG,IAAMkS,EACR,SAEF,MAAME,EAAQ7D,EACVqC,EAAKyB,UAAUpS,EAAKiS,EAAQjS,EAAKD,GACjC4Q,EAAKyB,UAAUH,EAAQlS,GAC3B8D,EACoB,IAAlByI,EACI,GACCsE,EAASsB,EAAa,EAAIjB,GAAY3E,EAC7C,MAAMzP,GAAI,QAAK4M,EAAIE,EAAI9F,GACjB/G,GAAI,QAAK4M,EAAIE,EAAI/F,GACvB8N,EAAO1R,KAAK,CAACpD,EAAGC,EAAGoV,EAAa,EAAGpU,EAAOqU,IAC1CvB,GAAUsB,CACZ,CACA,OAAOP,CACT,C,kBC5IO,SAASU,EACdpQ,EACAiC,EACAC,EACAjF,EACA5C,EACAuG,GAEAA,EAAOA,GAAc,GACrB,IAAI9C,EAAI,EACR,IAAK,IAAI6E,EAAIV,EAAQU,EAAIT,EAAKS,GAAK1F,EAAQ,CACzC,MAAMrC,EAAIoF,EAAgB2C,GACpB9H,EAAImF,EAAgB2C,EAAI,GAC9B/B,EAAK9C,KAAOzD,EAAU,GAAKO,EAAIP,EAAU,GAAKQ,EAAIR,EAAU,GAC5DuG,EAAK9C,KAAOzD,EAAU,GAAKO,EAAIP,EAAU,GAAKQ,EAAIR,EAAU,EAC9D,CAIA,OAHIuG,GAAQA,EAAKvD,QAAUS,IACzB8C,EAAKvD,OAASS,GAET8C,CACT,CAYO,SAAShF,EACdoE,EACAiC,EACAC,EACAjF,EACApB,EACAC,EACA8E,GAEAA,EAAOA,GAAc,GACrB,MAAMkG,EAAM5G,KAAK4G,IAAIjL,GACfkL,EAAM7G,KAAK6G,IAAIlL,GACfwU,EAAUvU,EAAO,GACjBwU,EAAUxU,EAAO,GACvB,IAAIgC,EAAI,EACR,IAAK,IAAI6E,EAAIV,EAAQU,EAAIT,EAAKS,GAAK1F,EAAQ,CACzC,MAAMT,EAASwD,EAAgB2C,GAAK0N,EAC9B5T,EAASuD,EAAgB2C,EAAI,GAAK2N,EACxC1P,EAAK9C,KAAOuS,EAAU7T,EAASsK,EAAMrK,EAASsK,EAC9CnG,EAAK9C,KAAOwS,EAAU9T,EAASuK,EAAMtK,EAASqK,EAC9C,IAAK,IAAIyJ,EAAI5N,EAAI,EAAG4N,EAAI5N,EAAI1F,IAAUsT,EACpC3P,EAAK9C,KAAOkC,EAAgBuQ,EAEhC,CAIA,OAHI3P,GAAQA,EAAKvD,QAAUS,IACzB8C,EAAKvD,OAASS,GAET8C,CACT,CAcO,SAAS7E,EACdiE,EACAiC,EACAC,EACAjF,EACAjB,EACAC,EACAH,EACA8E,GAEAA,EAAOA,GAAc,GACrB,MAAMyP,EAAUvU,EAAO,GACjBwU,EAAUxU,EAAO,GACvB,IAAIgC,EAAI,EACR,IAAK,IAAI6E,EAAIV,EAAQU,EAAIT,EAAKS,GAAK1F,EAAQ,CACzC,MAAMT,EAASwD,EAAgB2C,GAAK0N,EAC9B5T,EAASuD,EAAgB2C,EAAI,GAAK2N,EACxC1P,EAAK9C,KAAOuS,EAAUrU,EAAKQ,EAC3BoE,EAAK9C,KAAOwS,EAAUrU,EAAKQ,EAC3B,IAAK,IAAI8T,EAAI5N,EAAI,EAAG4N,EAAI5N,EAAI1F,IAAUsT,EACpC3P,EAAK9C,KAAOkC,EAAgBuQ,EAEhC,CAIA,OAHI3P,GAAQA,EAAKvD,QAAUS,IACzB8C,EAAKvD,OAASS,GAET8C,CACT,CAYO,SAASrE,EACdyD,EACAiC,EACAC,EACAjF,EACAT,EACAC,EACAmE,GAEAA,EAAOA,GAAc,GACrB,IAAI9C,EAAI,EACR,IAAK,IAAI6E,EAAIV,EAAQU,EAAIT,EAAKS,GAAK1F,EAAQ,CACzC2D,EAAK9C,KAAOkC,EAAgB2C,GAAKnG,EACjCoE,EAAK9C,KAAOkC,EAAgB2C,EAAI,GAAKlG,EACrC,IAAK,IAAI8T,EAAI5N,EAAI,EAAG4N,EAAI5N,EAAI1F,IAAUsT,EACpC3P,EAAK9C,KAAOkC,EAAgBuQ,EAEhC,CAIA,OAHI3P,GAAQA,EAAKvD,QAAUS,IACzB8C,EAAKvD,OAASS,GAET8C,CACT,C","sources":["webpack://@openeo/web-editor/./node_modules/ol/functions.js","webpack://@openeo/web-editor/./node_modules/ol/geom/Geometry.js","webpack://@openeo/web-editor/./node_modules/ol/geom/GeometryCollection.js","webpack://@openeo/web-editor/./node_modules/ol/geom/LineString.js","webpack://@openeo/web-editor/./node_modules/ol/geom/LinearRing.js","webpack://@openeo/web-editor/./node_modules/ol/geom/MultiLineString.js","webpack://@openeo/web-editor/./node_modules/ol/geom/MultiPoint.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/center.js","webpack://@openeo/web-editor/./node_modules/ol/geom/MultiPolygon.js","webpack://@openeo/web-editor/./node_modules/ol/geom/Point.js","webpack://@openeo/web-editor/./node_modules/ol/geom/Polygon.js","webpack://@openeo/web-editor/./node_modules/ol/geom/SimpleGeometry.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/area.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/closest.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/contains.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/deflate.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/inflate.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/interiorpoint.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/interpolate.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/intersectsextent.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/length.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/reverse.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/orient.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/segments.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/simplify.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/straightchunk.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/textpath.js","webpack://@openeo/web-editor/./node_modules/ol/geom/flat/transform.js"],"sourcesContent":["/**\n * @module ol/functions\n */\n\nimport {equals as arrayEquals} from './array.js';\n\n/**\n * Always returns true.\n * @return {boolean} true.\n */\nexport function TRUE() {\n  return true;\n}\n\n/**\n * Always returns false.\n * @return {boolean} false.\n */\nexport function FALSE() {\n  return false;\n}\n\n/**\n * A reusable function, used e.g. as a default for callbacks.\n *\n * @return {void} Nothing.\n */\nexport function VOID() {}\n\n/**\n * Wrap a function in another function that remembers the last return.  If the\n * returned function is called twice in a row with the same arguments and the same\n * this object, it will return the value from the first call in the second call.\n *\n * @param {function(...any): ReturnType} fn The function to memoize.\n * @return {function(...any): ReturnType} The memoized function.\n * @template ReturnType\n */\nexport function memoizeOne(fn) {\n  let called = false;\n\n  /** @type {ReturnType} */\n  let lastResult;\n\n  /** @type {Array<any>} */\n  let lastArgs;\n\n  let lastThis;\n\n  return function () {\n    const nextArgs = Array.prototype.slice.call(arguments);\n    if (!called || this !== lastThis || !arrayEquals(nextArgs, lastArgs)) {\n      called = true;\n      lastThis = this;\n      lastArgs = nextArgs;\n      lastResult = fn.apply(this, arguments);\n    }\n    return lastResult;\n  };\n}\n\n/**\n * @template T\n * @param {function(): (T | Promise<T>)} getter A function that returns a value or a promise for a value.\n * @return {Promise<T>} A promise for the value.\n */\nexport function toPromise(getter) {\n  function promiseGetter() {\n    let value;\n    try {\n      value = getter();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    if (value instanceof Promise) {\n      return value;\n    }\n    return Promise.resolve(value);\n  }\n  return promiseGetter();\n}\n","/**\n * @module ol/geom/Geometry\n */\nimport BaseObject from '../Object.js';\nimport {abstract} from '../util.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../transform.js';\nimport {\n  createEmpty,\n  createOrUpdateEmpty,\n  getHeight,\n  returnOrUpdate,\n} from '../extent.js';\nimport {get as getProjection, getTransform} from '../proj.js';\nimport {memoizeOne} from '../functions.js';\nimport {transform2D} from './flat/transform.js';\n\n/**\n * @typedef {'XY' | 'XYZ' | 'XYM' | 'XYZM'} GeometryLayout\n * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')\n * or measure ('M') coordinate is available.\n */\n\n/**\n * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString' | 'MultiPolygon' | 'GeometryCollection' | 'Circle'} Type\n * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,\n * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,\n * `'GeometryCollection'`, or `'Circle'`.\n */\n\n/**\n * @type {import(\"../transform.js\").Transform}\n */\nconst tmpTransform = createTransform();\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for vector geometries.\n *\n * To get notified of changes to the geometry, register a listener for the\n * generic `change` event on your geometry instance.\n *\n * @abstract\n * @api\n */\nclass Geometry extends BaseObject {\n  constructor() {\n    super();\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.extentRevision_ = -1;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.simplifiedGeometryRevision = 0;\n\n    /**\n     * Get a transformed and simplified version of the geometry.\n     * @abstract\n     * @param {number} revision The geometry revision.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n     * @return {Geometry} Simplified geometry.\n     */\n    this.simplifyTransformedInternal = memoizeOne(function (\n      revision,\n      squaredTolerance,\n      transform\n    ) {\n      if (!transform) {\n        return this.getSimplifiedGeometry(squaredTolerance);\n      }\n      const clone = this.clone();\n      clone.applyTransform(transform);\n      return clone.getSimplifiedGeometry(squaredTolerance);\n    });\n  }\n\n  /**\n   * Get a transformed and simplified version of the geometry.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n   * @return {Geometry} Simplified geometry.\n   */\n  simplifyTransformed(squaredTolerance, transform) {\n    return this.simplifyTransformedInternal(\n      this.getRevision(),\n      squaredTolerance,\n      transform\n    );\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @abstract\n   * @return {!Geometry} Clone.\n   */\n  clone() {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    return abstract();\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    const coord = this.getClosestPoint([x, y]);\n    return coord[0] === x && coord[1] === y;\n  }\n\n  /**\n   * Return the closest point of the geometry to the passed point as\n   * {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} point Point.\n   * @param {import(\"../coordinate.js\").Coordinate} [closestPoint] Closest point.\n   * @return {import(\"../coordinate.js\").Coordinate} Closest point.\n   * @api\n   */\n  getClosestPoint(point, closestPoint) {\n    closestPoint = closestPoint ? closestPoint : [NaN, NaN];\n    this.closestPointXY(point[0], point[1], closestPoint, Infinity);\n    return closestPoint;\n  }\n\n  /**\n   * Returns true if this geometry includes the specified coordinate. If the\n   * coordinate is on the boundary of the geometry, returns false.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {boolean} Contains coordinate.\n   * @api\n   */\n  intersectsCoordinate(coordinate) {\n    return this.containsXY(coordinate[0], coordinate[1]);\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    return abstract();\n  }\n\n  /**\n   * Get the extent of the geometry.\n   * @param {import(\"../extent.js\").Extent} [extent] Extent.\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  getExtent(extent) {\n    if (this.extentRevision_ != this.getRevision()) {\n      const extent = this.computeExtent(this.extent_);\n      if (isNaN(extent[0]) || isNaN(extent[1])) {\n        createOrUpdateEmpty(extent);\n      }\n      this.extentRevision_ = this.getRevision();\n    }\n    return returnOrUpdate(this.extent_, extent);\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    abstract();\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  scale(sx, sy, anchor) {\n    abstract();\n  }\n\n  /**\n   * Create a simplified version of this geometry.  For linestrings, this uses\n   * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)\n   * algorithm.  For polygons, a quantization-based\n   * simplification is used to preserve topology.\n   * @param {number} tolerance The tolerance distance for simplification.\n   * @return {Geometry} A new, simplified version of the original geometry.\n   * @api\n   */\n  simplify(tolerance) {\n    return this.getSimplifiedGeometry(tolerance * tolerance);\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker\n   * algorithm.\n   * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Geometry} Simplified geometry.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    return abstract();\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @abstract\n   * @return {Type} Geometry type.\n   */\n  getType() {\n    return abstract();\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @abstract\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   */\n  applyTransform(transformFn) {\n    abstract();\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   */\n  intersectsExtent(extent) {\n    return abstract();\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @abstract\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    abstract();\n  }\n\n  /**\n   * Transform each coordinate of the geometry from one coordinate reference\n   * system to another. The geometry is modified in place.\n   * For example, a line will be transformed to a line and a circle to a circle.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @return {Geometry} This geometry.  Note that original geometry is\n   *     modified in place.\n   * @api\n   */\n  transform(source, destination) {\n    /** @type {import(\"../proj/Projection.js\").default} */\n    const sourceProj = getProjection(source);\n    const transformFn =\n      sourceProj.getUnits() == 'tile-pixels'\n        ? function (inCoordinates, outCoordinates, stride) {\n            const pixelExtent = sourceProj.getExtent();\n            const projectedExtent = sourceProj.getWorldExtent();\n            const scale = getHeight(projectedExtent) / getHeight(pixelExtent);\n            composeTransform(\n              tmpTransform,\n              projectedExtent[0],\n              projectedExtent[3],\n              scale,\n              -scale,\n              0,\n              0,\n              0\n            );\n            transform2D(\n              inCoordinates,\n              0,\n              inCoordinates.length,\n              stride,\n              tmpTransform,\n              outCoordinates\n            );\n            return getTransform(sourceProj, destination)(\n              inCoordinates,\n              outCoordinates,\n              stride\n            );\n          }\n        : getTransform(sourceProj, destination);\n    this.applyTransform(transformFn);\n    return this;\n  }\n}\n\nexport default Geometry;\n","/**\n * @module ol/geom/GeometryCollection\n */\nimport EventType from '../events/EventType.js';\nimport Geometry from './Geometry.js';\nimport {\n  closestSquaredDistanceXY,\n  createOrUpdateEmpty,\n  extend,\n  getCenter,\n} from '../extent.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @classdesc\n * An array of {@link module:ol/geom/Geometry~Geometry} objects.\n *\n * @api\n */\nclass GeometryCollection extends Geometry {\n  /**\n   * @param {Array<Geometry>} [geometries] Geometries.\n   */\n  constructor(geometries) {\n    super();\n\n    /**\n     * @private\n     * @type {Array<Geometry>}\n     */\n    this.geometries_ = geometries ? geometries : null;\n\n    /**\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    this.changeEventsKeys_ = [];\n\n    this.listenGeometriesChange_();\n  }\n\n  /**\n   * @private\n   */\n  unlistenGeometriesChange_() {\n    this.changeEventsKeys_.forEach(unlistenByKey);\n    this.changeEventsKeys_.length = 0;\n  }\n\n  /**\n   * @private\n   */\n  listenGeometriesChange_() {\n    if (!this.geometries_) {\n      return;\n    }\n    for (let i = 0, ii = this.geometries_.length; i < ii; ++i) {\n      this.changeEventsKeys_.push(\n        listen(this.geometries_[i], EventType.CHANGE, this.changed, this)\n      );\n    }\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!GeometryCollection} Clone.\n   * @api\n   */\n  clone() {\n    const geometryCollection = new GeometryCollection(null);\n    geometryCollection.setGeometries(this.geometries_);\n    geometryCollection.applyProperties(this);\n    return geometryCollection;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      minSquaredDistance = geometries[i].closestPointXY(\n        x,\n        y,\n        closestPoint,\n        minSquaredDistance\n      );\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].containsXY(x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    createOrUpdateEmpty(extent);\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      extend(extent, geometries[i].getExtent());\n    }\n    return extent;\n  }\n\n  /**\n   * Return the geometries that make up this geometry collection.\n   * @return {Array<Geometry>} Geometries.\n   * @api\n   */\n  getGeometries() {\n    return cloneGeometries(this.geometries_);\n  }\n\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n  getGeometriesArray() {\n    return this.geometries_;\n  }\n\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n  getGeometriesArrayRecursive() {\n    /** @type {Array<Geometry>} */\n    let geometriesArray = [];\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].getType() === this.getType()) {\n        geometriesArray = geometriesArray.concat(\n          /** @type {GeometryCollection} */ (\n            geometries[i]\n          ).getGeometriesArrayRecursive()\n        );\n      } else {\n        geometriesArray.push(geometries[i]);\n      }\n    }\n    return geometriesArray;\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {GeometryCollection} Simplified GeometryCollection.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n    if (\n      squaredTolerance < 0 ||\n      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n        squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance)\n    ) {\n      return this;\n    }\n\n    const simplifiedGeometries = [];\n    const geometries = this.geometries_;\n    let simplified = false;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      const geometry = geometries[i];\n      const simplifiedGeometry =\n        geometry.getSimplifiedGeometry(squaredTolerance);\n      simplifiedGeometries.push(simplifiedGeometry);\n      if (simplifiedGeometry !== geometry) {\n        simplified = true;\n      }\n    }\n    if (simplified) {\n      const simplifiedGeometryCollection = new GeometryCollection(null);\n      simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);\n      return simplifiedGeometryCollection;\n    }\n    this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n    return this;\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'GeometryCollection';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].intersectsExtent(extent)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return this.geometries_.length === 0;\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].rotate(angle, anchor);\n    }\n    this.changed();\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  scale(sx, sy, anchor) {\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].scale(sx, sy, anchor);\n    }\n    this.changed();\n  }\n\n  /**\n   * Set the geometries that make up this geometry collection.\n   * @param {Array<Geometry>} geometries Geometries.\n   * @api\n   */\n  setGeometries(geometries) {\n    this.setGeometriesArray(cloneGeometries(geometries));\n  }\n\n  /**\n   * @param {Array<Geometry>} geometries Geometries.\n   */\n  setGeometriesArray(geometries) {\n    this.unlistenGeometriesChange_();\n    this.geometries_ = geometries;\n    this.listenGeometriesChange_();\n    this.changed();\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   */\n  applyTransform(transformFn) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].applyTransform(transformFn);\n    }\n    this.changed();\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].translate(deltaX, deltaY);\n    }\n    this.changed();\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    this.unlistenGeometriesChange_();\n    super.disposeInternal();\n  }\n}\n\n/**\n * @param {Array<Geometry>} geometries Geometries.\n * @return {Array<Geometry>} Cloned geometries.\n */\nfunction cloneGeometries(geometries) {\n  const clonedGeometries = [];\n  for (let i = 0, ii = geometries.length; i < ii; ++i) {\n    clonedGeometries.push(geometries[i].clone());\n  }\n  return clonedGeometries;\n}\n\nexport default GeometryCollection;\n","/**\n * @module ol/geom/LineString\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {assignClosestPoint, maxSquaredDelta} from './flat/closest.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport {deflateCoordinates} from './flat/deflate.js';\nimport {douglasPeucker} from './flat/simplify.js';\nimport {extend} from '../array.js';\nimport {forEach as forEachSegment} from './flat/segments.js';\nimport {inflateCoordinates} from './flat/inflate.js';\nimport {interpolatePoint, lineStringCoordinateAtM} from './flat/interpolate.js';\nimport {intersectsLineString} from './flat/intersectsextent.js';\nimport {lineStringLength} from './flat/length.js';\n\n/**\n * @classdesc\n * Linestring geometry.\n *\n * @api\n */\nclass LineString extends SimpleGeometry {\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.flatMidpoint_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatMidpointRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (layout !== undefined && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n    } else {\n      this.setCoordinates(\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\n          coordinates\n        ),\n        layout\n      );\n    }\n  }\n\n  /**\n   * Append the passed coordinate to the coordinates of the linestring.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @api\n   */\n  appendCoordinate(coordinate) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = coordinate.slice();\n    } else {\n      extend(this.flatCoordinates, coordinate);\n    }\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!LineString} Clone.\n   * @api\n   */\n  clone() {\n    const lineString = new LineString(\n      this.flatCoordinates.slice(),\n      this.layout\n    );\n    lineString.applyProperties(this);\n    return lineString;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        maxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.flatCoordinates.length,\n          this.stride,\n          0\n        )\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestPoint(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      this.maxDelta_,\n      false,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance\n    );\n  }\n\n  /**\n   * Iterate over each segment, calling the provided callback.\n   * If the callback returns a truthy value the function returns that\n   * value immediately. Otherwise the function returns `false`.\n   *\n   * @param {function(this: S, import(\"../coordinate.js\").Coordinate, import(\"../coordinate.js\").Coordinate): T} callback Function\n   *     called for each segment. The function will receive two arguments, the start and end coordinates of the segment.\n   * @return {T|boolean} Value.\n   * @template T,S\n   * @api\n   */\n  forEachSegment(callback) {\n    return forEachSegment(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      callback\n    );\n  }\n\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * @param {number} m M.\n   * @param {boolean} [extrapolate] Extrapolate. Default is `false`.\n   * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\n   * @api\n   */\n  getCoordinateAtM(m, extrapolate) {\n    if (this.layout != 'XYM' && this.layout != 'XYZM') {\n      return null;\n    }\n    extrapolate = extrapolate !== undefined ? extrapolate : false;\n    return lineStringCoordinateAtM(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      m,\n      extrapolate\n    );\n  }\n\n  /**\n   * Return the coordinates of the linestring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * Return the coordinate at the provided fraction along the linestring.\n   * The `fraction` is a number between 0 and 1, where 0 is the start of the\n   * linestring and 1 is the end.\n   * @param {number} fraction Fraction.\n   * @param {import(\"../coordinate.js\").Coordinate} [dest] Optional coordinate whose values will\n   *     be modified. If not provided, a new coordinate will be returned.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate of the interpolated point.\n   * @api\n   */\n  getCoordinateAt(fraction, dest) {\n    return interpolatePoint(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      fraction,\n      dest,\n      this.stride\n    );\n  }\n\n  /**\n   * Return the length of the linestring on projected plane.\n   * @return {number} Length (on projected plane).\n   * @api\n   */\n  getLength() {\n    return lineStringLength(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * @return {Array<number>} Flat midpoint.\n   */\n  getFlatMidpoint() {\n    if (this.flatMidpointRevision_ != this.getRevision()) {\n      this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);\n      this.flatMidpointRevision_ = this.getRevision();\n    }\n    return this.flatMidpoint_;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LineString} Simplified LineString.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      0\n    );\n    return new LineString(simplifiedFlatCoordinates, 'XY');\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'LineString';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLineString(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      extent\n    );\n  }\n\n  /**\n   * Set the coordinates of the linestring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride\n    );\n    this.changed();\n  }\n}\n\nexport default LineString;\n","/**\n * @module ol/geom/LinearRing\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {assignClosestPoint, maxSquaredDelta} from './flat/closest.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport {deflateCoordinates} from './flat/deflate.js';\nimport {douglasPeucker} from './flat/simplify.js';\nimport {inflateCoordinates} from './flat/inflate.js';\nimport {linearRing as linearRingArea} from './flat/area.js';\n\n/**\n * @classdesc\n * Linear ring geometry. Only used as part of polygon; cannot be rendered\n * on its own.\n *\n * @api\n */\nclass LinearRing extends SimpleGeometry {\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (layout !== undefined && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n    } else {\n      this.setCoordinates(\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\n          coordinates\n        ),\n        layout\n      );\n    }\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!LinearRing} Clone.\n   * @api\n   */\n  clone() {\n    return new LinearRing(this.flatCoordinates.slice(), this.layout);\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        maxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.flatCoordinates.length,\n          this.stride,\n          0\n        )\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestPoint(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      this.maxDelta_,\n      true,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance\n    );\n  }\n\n  /**\n   * Return the area of the linear ring on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  getArea() {\n    return linearRingArea(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * Return the coordinates of the linear ring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LinearRing} Simplified LinearRing.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      0\n    );\n    return new LinearRing(simplifiedFlatCoordinates, 'XY');\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'LinearRing';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return false;\n  }\n\n  /**\n   * Set the coordinates of the linear ring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride\n    );\n    this.changed();\n  }\n}\n\nexport default LinearRing;\n","/**\n * @module ol/geom/MultiLineString\n */\nimport LineString from './LineString.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {arrayMaxSquaredDelta, assignClosestArrayPoint} from './flat/closest.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport {deflateCoordinatesArray} from './flat/deflate.js';\nimport {douglasPeuckerArray} from './flat/simplify.js';\nimport {extend} from '../array.js';\nimport {inflateCoordinatesArray} from './flat/inflate.js';\nimport {\n  interpolatePoint,\n  lineStringsCoordinateAtM,\n} from './flat/interpolate.js';\nimport {intersectsLineStringArray} from './flat/intersectsextent.js';\n\n/**\n * @classdesc\n * Multi-linestring geometry.\n *\n * @api\n */\nclass MultiLineString extends SimpleGeometry {\n  /**\n   * @param {Array<Array<import(\"../coordinate.js\").Coordinate>|LineString>|Array<number>} coordinates\n   *     Coordinates or LineString geometries. (For internal use, flat coordinates in\n   *     combination with `layout` and `ends` are also accepted.)\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @param {Array<number>} [ends] Flat coordinate ends for internal use.\n   */\n  constructor(coordinates, layout, ends) {\n    super();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.ends_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (Array.isArray(coordinates[0])) {\n      this.setCoordinates(\n        /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (\n          coordinates\n        ),\n        layout\n      );\n    } else if (layout !== undefined && ends) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n      this.ends_ = ends;\n    } else {\n      let layout = this.getLayout();\n      const lineStrings = /** @type {Array<LineString>} */ (coordinates);\n      const flatCoordinates = [];\n      const ends = [];\n      for (let i = 0, ii = lineStrings.length; i < ii; ++i) {\n        const lineString = lineStrings[i];\n        if (i === 0) {\n          layout = lineString.getLayout();\n        }\n        extend(flatCoordinates, lineString.getFlatCoordinates());\n        ends.push(flatCoordinates.length);\n      }\n      this.setFlatCoordinates(layout, flatCoordinates);\n      this.ends_ = ends;\n    }\n  }\n\n  /**\n   * Append the passed linestring to the multilinestring.\n   * @param {LineString} lineString LineString.\n   * @api\n   */\n  appendLineString(lineString) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = lineString.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, lineString.getFlatCoordinates().slice());\n    }\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiLineString} Clone.\n   * @api\n   */\n  clone() {\n    const multiLineString = new MultiLineString(\n      this.flatCoordinates.slice(),\n      this.layout,\n      this.ends_.slice()\n    );\n    multiLineString.applyProperties(this);\n    return multiLineString;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        arrayMaxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.ends_,\n          this.stride,\n          0\n        )\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestArrayPoint(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      this.maxDelta_,\n      false,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance\n    );\n  }\n\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * `interpolate` controls interpolation between consecutive LineStrings\n   * within the MultiLineString. If `interpolate` is `true` the coordinates\n   * will be linearly interpolated between the last coordinate of one LineString\n   * and the first coordinate of the next LineString.  If `interpolate` is\n   * `false` then the function will return `null` for Ms falling between\n   * LineStrings.\n   *\n   * @param {number} m M.\n   * @param {boolean} [extrapolate] Extrapolate. Default is `false`.\n   * @param {boolean} [interpolate] Interpolate. Default is `false`.\n   * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\n   * @api\n   */\n  getCoordinateAtM(m, extrapolate, interpolate) {\n    if (\n      (this.layout != 'XYM' && this.layout != 'XYZM') ||\n      this.flatCoordinates.length === 0\n    ) {\n      return null;\n    }\n    extrapolate = extrapolate !== undefined ? extrapolate : false;\n    interpolate = interpolate !== undefined ? interpolate : false;\n    return lineStringsCoordinateAtM(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      m,\n      extrapolate,\n      interpolate\n    );\n  }\n\n  /**\n   * Return the coordinates of the multilinestring.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinatesArray(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride\n    );\n  }\n\n  /**\n   * @return {Array<number>} Ends.\n   */\n  getEnds() {\n    return this.ends_;\n  }\n\n  /**\n   * Return the linestring at the specified index.\n   * @param {number} index Index.\n   * @return {LineString} LineString.\n   * @api\n   */\n  getLineString(index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new LineString(\n      this.flatCoordinates.slice(\n        index === 0 ? 0 : this.ends_[index - 1],\n        this.ends_[index]\n      ),\n      this.layout\n    );\n  }\n\n  /**\n   * Return the linestrings of this multilinestring.\n   * @return {Array<LineString>} LineStrings.\n   * @api\n   */\n  getLineStrings() {\n    const flatCoordinates = this.flatCoordinates;\n    const ends = this.ends_;\n    const layout = this.layout;\n    /** @type {Array<LineString>} */\n    const lineStrings = [];\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const lineString = new LineString(\n        flatCoordinates.slice(offset, end),\n        layout\n      );\n      lineStrings.push(lineString);\n      offset = end;\n    }\n    return lineStrings;\n  }\n\n  /**\n   * @return {Array<number>} Flat midpoints.\n   */\n  getFlatMidpoints() {\n    const midpoints = [];\n    const flatCoordinates = this.flatCoordinates;\n    let offset = 0;\n    const ends = this.ends_;\n    const stride = this.stride;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const midpoint = interpolatePoint(\n        flatCoordinates,\n        offset,\n        end,\n        stride,\n        0.5\n      );\n      extend(midpoints, midpoint);\n      offset = end;\n    }\n    return midpoints;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {MultiLineString} Simplified MultiLineString.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    const simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = douglasPeuckerArray(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      0,\n      simplifiedEnds\n    );\n    return new MultiLineString(simplifiedFlatCoordinates, 'XY', simplifiedEnds);\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'MultiLineString';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLineStringArray(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      extent\n    );\n  }\n\n  /**\n   * Set the coordinates of the multilinestring.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const ends = deflateCoordinatesArray(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride,\n      this.ends_\n    );\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n}\n\nexport default MultiLineString;\n","/**\n * @module ol/geom/MultiPoint\n */\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {closestSquaredDistanceXY, containsXY} from '../extent.js';\nimport {deflateCoordinates} from './flat/deflate.js';\nimport {extend} from '../array.js';\nimport {inflateCoordinates} from './flat/inflate.js';\nimport {squaredDistance as squaredDx} from '../math.js';\n\n/**\n * @classdesc\n * Multi-point geometry.\n *\n * @api\n */\nclass MultiPoint extends SimpleGeometry {\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n    if (layout && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n    } else {\n      this.setCoordinates(\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\n          coordinates\n        ),\n        layout\n      );\n    }\n  }\n\n  /**\n   * Append the passed point to this multipoint.\n   * @param {Point} point Point.\n   * @api\n   */\n  appendPoint(point) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = point.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, point.getFlatCoordinates());\n    }\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiPoint} Clone.\n   * @api\n   */\n  clone() {\n    const multiPoint = new MultiPoint(\n      this.flatCoordinates.slice(),\n      this.layout\n    );\n    multiPoint.applyProperties(this);\n    return multiPoint;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    const flatCoordinates = this.flatCoordinates;\n    const stride = this.stride;\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const squaredDistance = squaredDx(\n        x,\n        y,\n        flatCoordinates[i],\n        flatCoordinates[i + 1]\n      );\n      if (squaredDistance < minSquaredDistance) {\n        minSquaredDistance = squaredDistance;\n        for (let j = 0; j < stride; ++j) {\n          closestPoint[j] = flatCoordinates[i + j];\n        }\n        closestPoint.length = stride;\n      }\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * Return the coordinates of the multipoint.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * Return the point at the specified index.\n   * @param {number} index Index.\n   * @return {Point} Point.\n   * @api\n   */\n  getPoint(index) {\n    const n = !this.flatCoordinates\n      ? 0\n      : this.flatCoordinates.length / this.stride;\n    if (index < 0 || n <= index) {\n      return null;\n    }\n    return new Point(\n      this.flatCoordinates.slice(\n        index * this.stride,\n        (index + 1) * this.stride\n      ),\n      this.layout\n    );\n  }\n\n  /**\n   * Return the points of this multipoint.\n   * @return {Array<Point>} Points.\n   * @api\n   */\n  getPoints() {\n    const flatCoordinates = this.flatCoordinates;\n    const layout = this.layout;\n    const stride = this.stride;\n    /** @type {Array<Point>} */\n    const points = [];\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const point = new Point(flatCoordinates.slice(i, i + stride), layout);\n      points.push(point);\n    }\n    return points;\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'MultiPoint';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    const flatCoordinates = this.flatCoordinates;\n    const stride = this.stride;\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const x = flatCoordinates[i];\n      const y = flatCoordinates[i + 1];\n      if (containsXY(extent, x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set the coordinates of the multipoint.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride\n    );\n    this.changed();\n  }\n}\n\nexport default MultiPoint;\n","/**\n * @module ol/geom/flat/center\n */\nimport {createEmpty, createOrUpdateFromFlatCoordinates} from '../../extent.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @return {Array<number>} Flat centers.\n */\nexport function linearRingss(flatCoordinates, offset, endss, stride) {\n  const flatCenters = [];\n  let extent = createEmpty();\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    extent = createOrUpdateFromFlatCoordinates(\n      flatCoordinates,\n      offset,\n      ends[0],\n      stride\n    );\n    flatCenters.push((extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2);\n    offset = ends[ends.length - 1];\n  }\n  return flatCenters;\n}\n","/**\n * @module ol/geom/MultiPolygon\n */\nimport MultiPoint from './MultiPoint.js';\nimport Polygon from './Polygon.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {\n  assignClosestMultiArrayPoint,\n  multiArrayMaxSquaredDelta,\n} from './flat/closest.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport {deflateMultiCoordinatesArray} from './flat/deflate.js';\nimport {extend} from '../array.js';\nimport {getInteriorPointsOfMultiArray} from './flat/interiorpoint.js';\nimport {inflateMultiCoordinatesArray} from './flat/inflate.js';\nimport {intersectsLinearRingMultiArray} from './flat/intersectsextent.js';\nimport {\n  linearRingssAreOriented,\n  orientLinearRingsArray,\n} from './flat/orient.js';\nimport {linearRingss as linearRingssArea} from './flat/area.js';\nimport {linearRingss as linearRingssCenter} from './flat/center.js';\nimport {linearRingssContainsXY} from './flat/contains.js';\nimport {quantizeMultiArray} from './flat/simplify.js';\n\n/**\n * @classdesc\n * Multi-polygon geometry.\n *\n * @api\n */\nclass MultiPolygon extends SimpleGeometry {\n  /**\n   * @param {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>|Polygon>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` and `endss` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @param {Array<Array<number>>} [endss] Array of ends for internal use with flat coordinates.\n   */\n  constructor(coordinates, layout, endss) {\n    super();\n\n    /**\n     * @type {Array<Array<number>>}\n     * @private\n     */\n    this.endss_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatInteriorPointsRevision_ = -1;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.flatInteriorPoints_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.orientedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.orientedFlatCoordinates_ = null;\n\n    if (!endss && !Array.isArray(coordinates[0])) {\n      let thisLayout = this.getLayout();\n      const polygons = /** @type {Array<Polygon>} */ (coordinates);\n      const flatCoordinates = [];\n      const thisEndss = [];\n      for (let i = 0, ii = polygons.length; i < ii; ++i) {\n        const polygon = polygons[i];\n        if (i === 0) {\n          thisLayout = polygon.getLayout();\n        }\n        const offset = flatCoordinates.length;\n        const ends = polygon.getEnds();\n        for (let j = 0, jj = ends.length; j < jj; ++j) {\n          ends[j] += offset;\n        }\n        extend(flatCoordinates, polygon.getFlatCoordinates());\n        thisEndss.push(ends);\n      }\n      layout = thisLayout;\n      coordinates = flatCoordinates;\n      endss = thisEndss;\n    }\n    if (layout !== undefined && endss) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n      this.endss_ = endss;\n    } else {\n      this.setCoordinates(\n        /** @type {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} */ (\n          coordinates\n        ),\n        layout\n      );\n    }\n  }\n\n  /**\n   * Append the passed polygon to this multipolygon.\n   * @param {Polygon} polygon Polygon.\n   * @api\n   */\n  appendPolygon(polygon) {\n    /** @type {Array<number>} */\n    let ends;\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = polygon.getFlatCoordinates().slice();\n      ends = polygon.getEnds().slice();\n      this.endss_.push();\n    } else {\n      const offset = this.flatCoordinates.length;\n      extend(this.flatCoordinates, polygon.getFlatCoordinates());\n      ends = polygon.getEnds().slice();\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\n        ends[i] += offset;\n      }\n    }\n    this.endss_.push(ends);\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiPolygon} Clone.\n   * @api\n   */\n  clone() {\n    const len = this.endss_.length;\n    const newEndss = new Array(len);\n    for (let i = 0; i < len; ++i) {\n      newEndss[i] = this.endss_[i].slice();\n    }\n\n    const multiPolygon = new MultiPolygon(\n      this.flatCoordinates.slice(),\n      this.layout,\n      newEndss\n    );\n    multiPolygon.applyProperties(this);\n\n    return multiPolygon;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        multiArrayMaxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.endss_,\n          this.stride,\n          0\n        )\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestMultiArrayPoint(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.endss_,\n      this.stride,\n      this.maxDelta_,\n      true,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance\n    );\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    return linearRingssContainsXY(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.endss_,\n      this.stride,\n      x,\n      y\n    );\n  }\n\n  /**\n   * Return the area of the multipolygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  getArea() {\n    return linearRingssArea(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.endss_,\n      this.stride\n    );\n  }\n\n  /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for multi-polygons.\n   *\n   * @param {boolean} [right] Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} Coordinates.\n   * @api\n   */\n  getCoordinates(right) {\n    let flatCoordinates;\n    if (right !== undefined) {\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\n      orientLinearRingsArray(\n        flatCoordinates,\n        0,\n        this.endss_,\n        this.stride,\n        right\n      );\n    } else {\n      flatCoordinates = this.flatCoordinates;\n    }\n\n    return inflateMultiCoordinatesArray(\n      flatCoordinates,\n      0,\n      this.endss_,\n      this.stride\n    );\n  }\n\n  /**\n   * @return {Array<Array<number>>} Endss.\n   */\n  getEndss() {\n    return this.endss_;\n  }\n\n  /**\n   * @return {Array<number>} Flat interior points.\n   */\n  getFlatInteriorPoints() {\n    if (this.flatInteriorPointsRevision_ != this.getRevision()) {\n      const flatCenters = linearRingssCenter(\n        this.flatCoordinates,\n        0,\n        this.endss_,\n        this.stride\n      );\n      this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(\n        this.getOrientedFlatCoordinates(),\n        0,\n        this.endss_,\n        this.stride,\n        flatCenters\n      );\n      this.flatInteriorPointsRevision_ = this.getRevision();\n    }\n    return this.flatInteriorPoints_;\n  }\n\n  /**\n   * Return the interior points as {@link module:ol/geom/MultiPoint~MultiPoint multipoint}.\n   * @return {MultiPoint} Interior points as XYM coordinates, where M is\n   * the length of the horizontal intersection that the point belongs to.\n   * @api\n   */\n  getInteriorPoints() {\n    return new MultiPoint(this.getFlatInteriorPoints().slice(), 'XYM');\n  }\n\n  /**\n   * @return {Array<number>} Oriented flat coordinates.\n   */\n  getOrientedFlatCoordinates() {\n    if (this.orientedRevision_ != this.getRevision()) {\n      const flatCoordinates = this.flatCoordinates;\n      if (\n        linearRingssAreOriented(flatCoordinates, 0, this.endss_, this.stride)\n      ) {\n        this.orientedFlatCoordinates_ = flatCoordinates;\n      } else {\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\n        this.orientedFlatCoordinates_.length = orientLinearRingsArray(\n          this.orientedFlatCoordinates_,\n          0,\n          this.endss_,\n          this.stride\n        );\n      }\n      this.orientedRevision_ = this.getRevision();\n    }\n    return this.orientedFlatCoordinates_;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {MultiPolygon} Simplified MultiPolygon.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    const simplifiedEndss = [];\n    simplifiedFlatCoordinates.length = quantizeMultiArray(\n      this.flatCoordinates,\n      0,\n      this.endss_,\n      this.stride,\n      Math.sqrt(squaredTolerance),\n      simplifiedFlatCoordinates,\n      0,\n      simplifiedEndss\n    );\n    return new MultiPolygon(simplifiedFlatCoordinates, 'XY', simplifiedEndss);\n  }\n\n  /**\n   * Return the polygon at the specified index.\n   * @param {number} index Index.\n   * @return {Polygon} Polygon.\n   * @api\n   */\n  getPolygon(index) {\n    if (index < 0 || this.endss_.length <= index) {\n      return null;\n    }\n    let offset;\n    if (index === 0) {\n      offset = 0;\n    } else {\n      const prevEnds = this.endss_[index - 1];\n      offset = prevEnds[prevEnds.length - 1];\n    }\n    const ends = this.endss_[index].slice();\n    const end = ends[ends.length - 1];\n    if (offset !== 0) {\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\n        ends[i] -= offset;\n      }\n    }\n    return new Polygon(\n      this.flatCoordinates.slice(offset, end),\n      this.layout,\n      ends\n    );\n  }\n\n  /**\n   * Return the polygons of this multipolygon.\n   * @return {Array<Polygon>} Polygons.\n   * @api\n   */\n  getPolygons() {\n    const layout = this.layout;\n    const flatCoordinates = this.flatCoordinates;\n    const endss = this.endss_;\n    const polygons = [];\n    let offset = 0;\n    for (let i = 0, ii = endss.length; i < ii; ++i) {\n      const ends = endss[i].slice();\n      const end = ends[ends.length - 1];\n      if (offset !== 0) {\n        for (let j = 0, jj = ends.length; j < jj; ++j) {\n          ends[j] -= offset;\n        }\n      }\n      const polygon = new Polygon(\n        flatCoordinates.slice(offset, end),\n        layout,\n        ends\n      );\n      polygons.push(polygon);\n      offset = end;\n    }\n    return polygons;\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'MultiPolygon';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLinearRingMultiArray(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.endss_,\n      this.stride,\n      extent\n    );\n  }\n\n  /**\n   * Set the coordinates of the multipolygon.\n   * @param {!Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 3);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const endss = deflateMultiCoordinatesArray(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride,\n      this.endss_\n    );\n    if (endss.length === 0) {\n      this.flatCoordinates.length = 0;\n    } else {\n      const lastEnds = endss[endss.length - 1];\n      this.flatCoordinates.length =\n        lastEnds.length === 0 ? 0 : lastEnds[lastEnds.length - 1];\n    }\n    this.changed();\n  }\n}\n\nexport default MultiPolygon;\n","/**\n * @module ol/geom/Point\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {containsXY, createOrUpdateFromCoordinate} from '../extent.js';\nimport {deflateCoordinate} from './flat/deflate.js';\nimport {squaredDistance as squaredDx} from '../math.js';\n\n/**\n * @classdesc\n * Point geometry.\n *\n * @api\n */\nclass Point extends SimpleGeometry {\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n    this.setCoordinates(coordinates, layout);\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Point} Clone.\n   * @api\n   */\n  clone() {\n    const point = new Point(this.flatCoordinates.slice(), this.layout);\n    point.applyProperties(this);\n    return point;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    const flatCoordinates = this.flatCoordinates;\n    const squaredDistance = squaredDx(\n      x,\n      y,\n      flatCoordinates[0],\n      flatCoordinates[1]\n    );\n    if (squaredDistance < minSquaredDistance) {\n      const stride = this.stride;\n      for (let i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[i];\n      }\n      closestPoint.length = stride;\n      return squaredDistance;\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * Return the coordinate of the point.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return !this.flatCoordinates ? [] : this.flatCoordinates.slice();\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    return createOrUpdateFromCoordinate(this.flatCoordinates, extent);\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'Point';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);\n  }\n\n  /**\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 0);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinate(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride\n    );\n    this.changed();\n  }\n}\n\nexport default Point;\n","/**\n * @module ol/geom/Polygon\n */\nimport LinearRing from './LinearRing.js';\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {arrayMaxSquaredDelta, assignClosestArrayPoint} from './flat/closest.js';\nimport {closestSquaredDistanceXY, getCenter} from '../extent.js';\nimport {deflateCoordinatesArray} from './flat/deflate.js';\nimport {extend} from '../array.js';\nimport {getInteriorPointOfArray} from './flat/interiorpoint.js';\nimport {inflateCoordinatesArray} from './flat/inflate.js';\nimport {intersectsLinearRingArray} from './flat/intersectsextent.js';\nimport {linearRingsAreOriented, orientLinearRings} from './flat/orient.js';\nimport {linearRings as linearRingsArea} from './flat/area.js';\nimport {linearRingsContainsXY} from './flat/contains.js';\nimport {modulo} from '../math.js';\nimport {quantizeArray} from './flat/simplify.js';\nimport {offset as sphereOffset} from '../sphere.js';\n\n/**\n * @classdesc\n * Polygon geometry.\n *\n * @api\n */\nclass Polygon extends SimpleGeometry {\n  /**\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>|!Array<number>} coordinates\n   *     Array of linear rings that define the polygon. The first linear ring of the\n   *     array defines the outer-boundary or surface of the polygon. Each subsequent\n   *     linear ring defines a hole in the surface of the polygon. A linear ring is\n   *     an array of vertices' coordinates where the first coordinate and the last are\n   *     equivalent. (For internal use, flat coordinates in combination with\n   *     `layout` and `ends` are also accepted.)\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @param {Array<number>} [ends] Ends (for internal use with flat coordinates).\n   */\n  constructor(coordinates, layout, ends) {\n    super();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.ends_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatInteriorPointRevision_ = -1;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.flatInteriorPoint_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.orientedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.orientedFlatCoordinates_ = null;\n\n    if (layout !== undefined && ends) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n      this.ends_ = ends;\n    } else {\n      this.setCoordinates(\n        /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (\n          coordinates\n        ),\n        layout\n      );\n    }\n  }\n\n  /**\n   * Append the passed linear ring to this polygon.\n   * @param {LinearRing} linearRing Linear ring.\n   * @api\n   */\n  appendLinearRing(linearRing) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = linearRing.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, linearRing.getFlatCoordinates());\n    }\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Polygon} Clone.\n   * @api\n   */\n  clone() {\n    const polygon = new Polygon(\n      this.flatCoordinates.slice(),\n      this.layout,\n      this.ends_.slice()\n    );\n    polygon.applyProperties(this);\n    return polygon;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        arrayMaxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.ends_,\n          this.stride,\n          0\n        )\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestArrayPoint(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      this.maxDelta_,\n      true,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance\n    );\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    return linearRingsContainsXY(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride,\n      x,\n      y\n    );\n  }\n\n  /**\n   * Return the area of the polygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  getArea() {\n    return linearRingsArea(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride\n    );\n  }\n\n  /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for polygons.\n   *\n   * @param {boolean} [right] Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @api\n   */\n  getCoordinates(right) {\n    let flatCoordinates;\n    if (right !== undefined) {\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\n      orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, right);\n    } else {\n      flatCoordinates = this.flatCoordinates;\n    }\n\n    return inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Ends.\n   */\n  getEnds() {\n    return this.ends_;\n  }\n\n  /**\n   * @return {Array<number>} Interior point.\n   */\n  getFlatInteriorPoint() {\n    if (this.flatInteriorPointRevision_ != this.getRevision()) {\n      const flatCenter = getCenter(this.getExtent());\n      this.flatInteriorPoint_ = getInteriorPointOfArray(\n        this.getOrientedFlatCoordinates(),\n        0,\n        this.ends_,\n        this.stride,\n        flatCenter,\n        0\n      );\n      this.flatInteriorPointRevision_ = this.getRevision();\n    }\n    return this.flatInteriorPoint_;\n  }\n\n  /**\n   * Return an interior point of the polygon.\n   * @return {Point} Interior point as XYM coordinate, where M is the\n   * length of the horizontal intersection that the point belongs to.\n   * @api\n   */\n  getInteriorPoint() {\n    return new Point(this.getFlatInteriorPoint(), 'XYM');\n  }\n\n  /**\n   * Return the number of rings of the polygon,  this includes the exterior\n   * ring and any interior rings.\n   *\n   * @return {number} Number of rings.\n   * @api\n   */\n  getLinearRingCount() {\n    return this.ends_.length;\n  }\n\n  /**\n   * Return the Nth linear ring of the polygon geometry. Return `null` if the\n   * given index is out of range.\n   * The exterior linear ring is available at index `0` and the interior rings\n   * at index `1` and beyond.\n   *\n   * @param {number} index Index.\n   * @return {LinearRing|null} Linear ring.\n   * @api\n   */\n  getLinearRing(index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new LinearRing(\n      this.flatCoordinates.slice(\n        index === 0 ? 0 : this.ends_[index - 1],\n        this.ends_[index]\n      ),\n      this.layout\n    );\n  }\n\n  /**\n   * Return the linear rings of the polygon.\n   * @return {Array<LinearRing>} Linear rings.\n   * @api\n   */\n  getLinearRings() {\n    const layout = this.layout;\n    const flatCoordinates = this.flatCoordinates;\n    const ends = this.ends_;\n    const linearRings = [];\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const linearRing = new LinearRing(\n        flatCoordinates.slice(offset, end),\n        layout\n      );\n      linearRings.push(linearRing);\n      offset = end;\n    }\n    return linearRings;\n  }\n\n  /**\n   * @return {Array<number>} Oriented flat coordinates.\n   */\n  getOrientedFlatCoordinates() {\n    if (this.orientedRevision_ != this.getRevision()) {\n      const flatCoordinates = this.flatCoordinates;\n      if (linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {\n        this.orientedFlatCoordinates_ = flatCoordinates;\n      } else {\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\n        this.orientedFlatCoordinates_.length = orientLinearRings(\n          this.orientedFlatCoordinates_,\n          0,\n          this.ends_,\n          this.stride\n        );\n      }\n      this.orientedRevision_ = this.getRevision();\n    }\n    return this.orientedFlatCoordinates_;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Polygon} Simplified Polygon.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    const simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = quantizeArray(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      Math.sqrt(squaredTolerance),\n      simplifiedFlatCoordinates,\n      0,\n      simplifiedEnds\n    );\n    return new Polygon(simplifiedFlatCoordinates, 'XY', simplifiedEnds);\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'Polygon';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLinearRingArray(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride,\n      extent\n    );\n  }\n\n  /**\n   * Set the coordinates of the polygon.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const ends = deflateCoordinatesArray(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride,\n      this.ends_\n    );\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n}\n\nexport default Polygon;\n\n/**\n * Create an approximation of a circle on the surface of a sphere.\n * @param {import(\"../coordinate.js\").Coordinate} center Center (`[lon, lat]` in degrees).\n * @param {number} radius The great-circle distance from the center to\n *     the polygon vertices in meters.\n * @param {number} [n] Optional number of vertices for the resulting\n *     polygon. Default is `32`.\n * @param {number} [sphereRadius] Optional radius for the sphere (defaults to\n *     the Earth's mean radius using the WGS84 ellipsoid).\n * @return {Polygon} The \"circular\" polygon.\n * @api\n */\nexport function circular(center, radius, n, sphereRadius) {\n  n = n ? n : 32;\n  /** @type {Array<number>} */\n  const flatCoordinates = [];\n  for (let i = 0; i < n; ++i) {\n    extend(\n      flatCoordinates,\n      sphereOffset(center, radius, (2 * Math.PI * i) / n, sphereRadius)\n    );\n  }\n  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\n  return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);\n}\n\n/**\n * Create a polygon from an extent. The layout used is `XY`.\n * @param {import(\"../extent.js\").Extent} extent The extent.\n * @return {Polygon} The polygon.\n * @api\n */\nexport function fromExtent(extent) {\n  const minX = extent[0];\n  const minY = extent[1];\n  const maxX = extent[2];\n  const maxY = extent[3];\n  const flatCoordinates = [\n    minX,\n    minY,\n    minX,\n    maxY,\n    maxX,\n    maxY,\n    maxX,\n    minY,\n    minX,\n    minY,\n  ];\n  return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);\n}\n\n/**\n * Create a regular polygon from a circle.\n * @param {import(\"./Circle.js\").default} circle Circle geometry.\n * @param {number} [sides] Number of sides of the polygon. Default is 32.\n * @param {number} [angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n * @return {Polygon} Polygon geometry.\n * @api\n */\nexport function fromCircle(circle, sides, angle) {\n  sides = sides ? sides : 32;\n  const stride = circle.getStride();\n  const layout = circle.getLayout();\n  const center = circle.getCenter();\n  const arrayLength = stride * (sides + 1);\n  const flatCoordinates = new Array(arrayLength);\n  for (let i = 0; i < arrayLength; i += stride) {\n    flatCoordinates[i] = 0;\n    flatCoordinates[i + 1] = 0;\n    for (let j = 2; j < stride; j++) {\n      flatCoordinates[i + j] = center[j];\n    }\n  }\n  const ends = [flatCoordinates.length];\n  const polygon = new Polygon(flatCoordinates, layout, ends);\n  makeRegular(polygon, center, circle.getRadius(), angle);\n  return polygon;\n}\n\n/**\n * Modify the coordinates of a polygon to make it a regular polygon.\n * @param {Polygon} polygon Polygon geometry.\n * @param {import(\"../coordinate.js\").Coordinate} center Center of the regular polygon.\n * @param {number} radius Radius of the regular polygon.\n * @param {number} [angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n */\nexport function makeRegular(polygon, center, radius, angle) {\n  const flatCoordinates = polygon.getFlatCoordinates();\n  const stride = polygon.getStride();\n  const sides = flatCoordinates.length / stride - 1;\n  const startAngle = angle ? angle : 0;\n  for (let i = 0; i <= sides; ++i) {\n    const offset = i * stride;\n    const angle = startAngle + (modulo(i, sides) * 2 * Math.PI) / sides;\n    flatCoordinates[offset] = center[0] + radius * Math.cos(angle);\n    flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);\n  }\n  polygon.changed();\n}\n","/**\n * @module ol/geom/SimpleGeometry\n */\nimport Geometry from './Geometry.js';\nimport {abstract} from '../util.js';\nimport {createOrUpdateFromFlatCoordinates, getCenter} from '../extent.js';\nimport {rotate, scale, transform2D, translate} from './flat/transform.js';\n\n/**\n * @classdesc\n * Abstract base class; only used for creating subclasses; do not instantiate\n * in apps, as cannot be rendered.\n *\n * @abstract\n * @api\n */\nclass SimpleGeometry extends Geometry {\n  constructor() {\n    super();\n\n    /**\n     * @protected\n     * @type {import(\"./Geometry.js\").GeometryLayout}\n     */\n    this.layout = 'XY';\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.stride = 2;\n\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    this.flatCoordinates = null;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    return createOrUpdateFromFlatCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      extent\n    );\n  }\n\n  /**\n   * @abstract\n   * @return {Array<*> | null} Coordinates.\n   */\n  getCoordinates() {\n    return abstract();\n  }\n\n  /**\n   * Return the first coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} First coordinate.\n   * @api\n   */\n  getFirstCoordinate() {\n    return this.flatCoordinates.slice(0, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Flat coordinates.\n   */\n  getFlatCoordinates() {\n    return this.flatCoordinates;\n  }\n\n  /**\n   * Return the last coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} Last point.\n   * @api\n   */\n  getLastCoordinate() {\n    return this.flatCoordinates.slice(\n      this.flatCoordinates.length - this.stride\n    );\n  }\n\n  /**\n   * Return the {@link import(\"./Geometry.js\").GeometryLayout layout} of the geometry.\n   * @return {import(\"./Geometry.js\").GeometryLayout} Layout.\n   * @api\n   */\n  getLayout() {\n    return this.layout;\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n    // If squaredTolerance is negative or if we know that simplification will not\n    // have any effect then just return this.\n    if (\n      squaredTolerance < 0 ||\n      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n        squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)\n    ) {\n      return this;\n    }\n\n    const simplifiedGeometry =\n      this.getSimplifiedGeometryInternal(squaredTolerance);\n    const simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\n    if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {\n      return simplifiedGeometry;\n    }\n    // Simplification did not actually remove any coordinates.  We now know\n    // that any calls to getSimplifiedGeometry with a squaredTolerance less\n    // than or equal to the current squaredTolerance will also not have any\n    // effect.  This allows us to short circuit simplification (saving CPU\n    // cycles) and prevents the cache of simplified geometries from filling\n    // up with useless identical copies of this geometry (saving memory).\n    this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n    return this;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    return this;\n  }\n\n  /**\n   * @return {number} Stride.\n   */\n  getStride() {\n    return this.stride;\n  }\n\n  /**\n   * @param {import(\"./Geometry.js\").GeometryLayout} layout Layout.\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   */\n  setFlatCoordinates(layout, flatCoordinates) {\n    this.stride = getStrideForLayout(layout);\n    this.layout = layout;\n    this.flatCoordinates = flatCoordinates;\n  }\n\n  /**\n   * @abstract\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  setCoordinates(coordinates, layout) {\n    abstract();\n  }\n\n  /**\n   * @param {import(\"./Geometry.js\").GeometryLayout|undefined} layout Layout.\n   * @param {Array<*>} coordinates Coordinates.\n   * @param {number} nesting Nesting.\n   * @protected\n   */\n  setLayout(layout, coordinates, nesting) {\n    /** @type {number} */\n    let stride;\n    if (layout) {\n      stride = getStrideForLayout(layout);\n    } else {\n      for (let i = 0; i < nesting; ++i) {\n        if (coordinates.length === 0) {\n          this.layout = 'XY';\n          this.stride = 2;\n          return;\n        }\n        coordinates = /** @type {Array} */ (coordinates[0]);\n      }\n      stride = coordinates.length;\n      layout = getLayoutForStride(stride);\n    }\n    this.layout = layout;\n    this.stride = stride;\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   */\n  applyTransform(transformFn) {\n    if (this.flatCoordinates) {\n      transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);\n      this.changed();\n    }\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in counter-clockwise radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      rotate(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        stride,\n        angle,\n        anchor,\n        flatCoordinates\n      );\n      this.changed();\n    }\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  scale(sx, sy, anchor) {\n    if (sy === undefined) {\n      sy = sx;\n    }\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      scale(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        stride,\n        sx,\n        sy,\n        anchor,\n        flatCoordinates\n      );\n      this.changed();\n    }\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      translate(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        stride,\n        deltaX,\n        deltaY,\n        flatCoordinates\n      );\n      this.changed();\n    }\n  }\n}\n\n/**\n * @param {number} stride Stride.\n * @return {import(\"./Geometry.js\").GeometryLayout} layout Layout.\n */\nfunction getLayoutForStride(stride) {\n  let layout;\n  if (stride == 2) {\n    layout = 'XY';\n  } else if (stride == 3) {\n    layout = 'XYZ';\n  } else if (stride == 4) {\n    layout = 'XYZM';\n  }\n  return /** @type {import(\"./Geometry.js\").GeometryLayout} */ (layout);\n}\n\n/**\n * @param {import(\"./Geometry.js\").GeometryLayout} layout Layout.\n * @return {number} Stride.\n */\nexport function getStrideForLayout(layout) {\n  let stride;\n  if (layout == 'XY') {\n    stride = 2;\n  } else if (layout == 'XYZ' || layout == 'XYM') {\n    stride = 3;\n  } else if (layout == 'XYZM') {\n    stride = 4;\n  }\n  return /** @type {number} */ (stride);\n}\n\n/**\n * @param {SimpleGeometry} simpleGeometry Simple geometry.\n * @param {import(\"../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed flat coordinates.\n */\nexport function transformGeom2D(simpleGeometry, transform, dest) {\n  const flatCoordinates = simpleGeometry.getFlatCoordinates();\n  if (!flatCoordinates) {\n    return null;\n  }\n  const stride = simpleGeometry.getStride();\n  return transform2D(\n    flatCoordinates,\n    0,\n    flatCoordinates.length,\n    stride,\n    transform,\n    dest\n  );\n}\n\nexport default SimpleGeometry;\n","/**\n * @module ol/geom/flat/area\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {number} Area.\n */\nexport function linearRing(flatCoordinates, offset, end, stride) {\n  let twiceArea = 0;\n  let x1 = flatCoordinates[end - stride];\n  let y1 = flatCoordinates[end - stride + 1];\n  for (; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    twiceArea += y1 * x2 - x1 * y2;\n    x1 = x2;\n    y1 = y2;\n  }\n  return twiceArea / 2;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @return {number} Area.\n */\nexport function linearRings(flatCoordinates, offset, ends, stride) {\n  let area = 0;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    area += linearRing(flatCoordinates, offset, end, stride);\n    offset = end;\n  }\n  return area;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @return {number} Area.\n */\nexport function linearRingss(flatCoordinates, offset, endss, stride) {\n  let area = 0;\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    area += linearRings(flatCoordinates, offset, ends, stride);\n    offset = ends[ends.length - 1];\n  }\n  return area;\n}\n","/**\n * @module ol/geom/flat/closest\n */\nimport {lerp, squaredDistance as squaredDx} from '../../math.js';\n\n/**\n * Returns the point on the 2D line segment flatCoordinates[offset1] to\n * flatCoordinates[offset2] that is closest to the point (x, y).  Extra\n * dimensions are linearly interpolated.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset1 Offset 1.\n * @param {number} offset2 Offset 2.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n */\nfunction assignClosest(\n  flatCoordinates,\n  offset1,\n  offset2,\n  stride,\n  x,\n  y,\n  closestPoint\n) {\n  const x1 = flatCoordinates[offset1];\n  const y1 = flatCoordinates[offset1 + 1];\n  const dx = flatCoordinates[offset2] - x1;\n  const dy = flatCoordinates[offset2 + 1] - y1;\n  let offset;\n  if (dx === 0 && dy === 0) {\n    offset = offset1;\n  } else {\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      offset = offset2;\n    } else if (t > 0) {\n      for (let i = 0; i < stride; ++i) {\n        closestPoint[i] = lerp(\n          flatCoordinates[offset1 + i],\n          flatCoordinates[offset2 + i],\n          t\n        );\n      }\n      closestPoint.length = stride;\n      return;\n    } else {\n      offset = offset1;\n    }\n  }\n  for (let i = 0; i < stride; ++i) {\n    closestPoint[i] = flatCoordinates[offset + i];\n  }\n  closestPoint.length = stride;\n}\n\n/**\n * Return the squared of the largest distance between any pair of consecutive\n * coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function maxSquaredDelta(flatCoordinates, offset, end, stride, max) {\n  let x1 = flatCoordinates[offset];\n  let y1 = flatCoordinates[offset + 1];\n  for (offset += stride; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    const squaredDelta = squaredDx(x1, y1, x2, y2);\n    if (squaredDelta > max) {\n      max = squaredDelta;\n    }\n    x1 = x2;\n    y1 = y2;\n  }\n  return max;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function arrayMaxSquaredDelta(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  max\n) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    max = maxSquaredDelta(flatCoordinates, offset, end, stride, max);\n    offset = end;\n  }\n  return max;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function multiArrayMaxSquaredDelta(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  max\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    max = arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max);\n    offset = ends[ends.length - 1];\n  }\n  return max;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestPoint(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  maxDelta,\n  isRing,\n  x,\n  y,\n  closestPoint,\n  minSquaredDistance,\n  tmpPoint\n) {\n  if (offset == end) {\n    return minSquaredDistance;\n  }\n  let i, squaredDistance;\n  if (maxDelta === 0) {\n    // All points are identical, so just test the first point.\n    squaredDistance = squaredDx(\n      x,\n      y,\n      flatCoordinates[offset],\n      flatCoordinates[offset + 1]\n    );\n    if (squaredDistance < minSquaredDistance) {\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[offset + i];\n      }\n      closestPoint.length = stride;\n      return squaredDistance;\n    }\n    return minSquaredDistance;\n  }\n  tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];\n  let index = offset + stride;\n  while (index < end) {\n    assignClosest(\n      flatCoordinates,\n      index - stride,\n      index,\n      stride,\n      x,\n      y,\n      tmpPoint\n    );\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\n    if (squaredDistance < minSquaredDistance) {\n      minSquaredDistance = squaredDistance;\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = tmpPoint[i];\n      }\n      closestPoint.length = stride;\n      index += stride;\n    } else {\n      // Skip ahead multiple points, because we know that all the skipped\n      // points cannot be any closer than the closest point we have found so\n      // far.  We know this because we know how close the current point is, how\n      // close the closest point we have found so far is, and the maximum\n      // distance between consecutive points.  For example, if we're currently\n      // at distance 10, the best we've found so far is 3, and that the maximum\n      // distance between consecutive points is 2, then we'll need to skip at\n      // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of\n      // finding a closer point.  We use Math.max(..., 1) to ensure that we\n      // always advance at least one point, to avoid an infinite loop.\n      index +=\n        stride *\n        Math.max(\n          ((Math.sqrt(squaredDistance) - Math.sqrt(minSquaredDistance)) /\n            maxDelta) |\n            0,\n          1\n        );\n    }\n  }\n  if (isRing) {\n    // Check the closing segment.\n    assignClosest(\n      flatCoordinates,\n      end - stride,\n      offset,\n      stride,\n      x,\n      y,\n      tmpPoint\n    );\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\n    if (squaredDistance < minSquaredDistance) {\n      minSquaredDistance = squaredDistance;\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = tmpPoint[i];\n      }\n      closestPoint.length = stride;\n    }\n  }\n  return minSquaredDistance;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestArrayPoint(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  maxDelta,\n  isRing,\n  x,\n  y,\n  closestPoint,\n  minSquaredDistance,\n  tmpPoint\n) {\n  tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    minSquaredDistance = assignClosestPoint(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      maxDelta,\n      isRing,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance,\n      tmpPoint\n    );\n    offset = end;\n  }\n  return minSquaredDistance;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestMultiArrayPoint(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  maxDelta,\n  isRing,\n  x,\n  y,\n  closestPoint,\n  minSquaredDistance,\n  tmpPoint\n) {\n  tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    minSquaredDistance = assignClosestArrayPoint(\n      flatCoordinates,\n      offset,\n      ends,\n      stride,\n      maxDelta,\n      isRing,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance,\n      tmpPoint\n    );\n    offset = ends[ends.length - 1];\n  }\n  return minSquaredDistance;\n}\n","/**\n * @module ol/geom/flat/contains\n */\nimport {forEachCorner} from '../../extent.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} Contains extent.\n */\nexport function linearRingContainsExtent(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  extent\n) {\n  const outside = forEachCorner(\n    extent,\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @return {boolean} Contains (x, y).\n     */\n    function (coordinate) {\n      return !linearRingContainsXY(\n        flatCoordinates,\n        offset,\n        end,\n        stride,\n        coordinate[0],\n        coordinate[1]\n      );\n    }\n  );\n  return !outside;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\nexport function linearRingContainsXY(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  x,\n  y\n) {\n  // https://geomalgorithms.com/a03-_inclusion.html\n  // Copyright 2000 softSurfer, 2012 Dan Sunday\n  // This code may be freely used and modified for any purpose\n  // providing that this copyright notice is included with it.\n  // SoftSurfer makes no warranty for this code, and cannot be held\n  // liable for any real or imagined damage resulting from its use.\n  // Users of this code must verify correctness for their application.\n  let wn = 0;\n  let x1 = flatCoordinates[end - stride];\n  let y1 = flatCoordinates[end - stride + 1];\n  for (; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    if (y1 <= y) {\n      if (y2 > y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0) {\n        wn++;\n      }\n    } else if (y2 <= y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) < 0) {\n      wn--;\n    }\n    x1 = x2;\n    y1 = y2;\n  }\n  return wn !== 0;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\nexport function linearRingsContainsXY(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  x,\n  y\n) {\n  if (ends.length === 0) {\n    return false;\n  }\n  if (!linearRingContainsXY(flatCoordinates, offset, ends[0], stride, x, y)) {\n    return false;\n  }\n  for (let i = 1, ii = ends.length; i < ii; ++i) {\n    if (\n      linearRingContainsXY(flatCoordinates, ends[i - 1], ends[i], stride, x, y)\n    ) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\nexport function linearRingssContainsXY(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  x,\n  y\n) {\n  if (endss.length === 0) {\n    return false;\n  }\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {\n      return true;\n    }\n    offset = ends[ends.length - 1];\n  }\n  return false;\n}\n","/**\n * @module ol/geom/flat/deflate\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {number} stride Stride.\n * @return {number} offset Offset.\n */\nexport function deflateCoordinate(flatCoordinates, offset, coordinate, stride) {\n  for (let i = 0, ii = coordinate.length; i < ii; ++i) {\n    flatCoordinates[offset++] = coordinate[i];\n  }\n  return offset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<import(\"../../coordinate.js\").Coordinate>} coordinates Coordinates.\n * @param {number} stride Stride.\n * @return {number} offset Offset.\n */\nexport function deflateCoordinates(\n  flatCoordinates,\n  offset,\n  coordinates,\n  stride\n) {\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    const coordinate = coordinates[i];\n    for (let j = 0; j < stride; ++j) {\n      flatCoordinates[offset++] = coordinate[j];\n    }\n  }\n  return offset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<import(\"../../coordinate.js\").Coordinate>>} coordinatess Coordinatess.\n * @param {number} stride Stride.\n * @param {Array<number>} [ends] Ends.\n * @return {Array<number>} Ends.\n */\nexport function deflateCoordinatesArray(\n  flatCoordinates,\n  offset,\n  coordinatess,\n  stride,\n  ends\n) {\n  ends = ends ? ends : [];\n  let i = 0;\n  for (let j = 0, jj = coordinatess.length; j < jj; ++j) {\n    const end = deflateCoordinates(\n      flatCoordinates,\n      offset,\n      coordinatess[j],\n      stride\n    );\n    ends[i++] = end;\n    offset = end;\n  }\n  ends.length = i;\n  return ends;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} coordinatesss Coordinatesss.\n * @param {number} stride Stride.\n * @param {Array<Array<number>>} [endss] Endss.\n * @return {Array<Array<number>>} Endss.\n */\nexport function deflateMultiCoordinatesArray(\n  flatCoordinates,\n  offset,\n  coordinatesss,\n  stride,\n  endss\n) {\n  endss = endss ? endss : [];\n  let i = 0;\n  for (let j = 0, jj = coordinatesss.length; j < jj; ++j) {\n    const ends = deflateCoordinatesArray(\n      flatCoordinates,\n      offset,\n      coordinatesss[j],\n      stride,\n      endss[i]\n    );\n    if (ends.length === 0) {\n      ends[0] = offset;\n    }\n    endss[i++] = ends;\n    offset = ends[ends.length - 1];\n  }\n  endss.length = i;\n  return endss;\n}\n","/**\n * @module ol/geom/flat/inflate\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Array<import(\"../../coordinate.js\").Coordinate>} [coordinates] Coordinates.\n * @return {Array<import(\"../../coordinate.js\").Coordinate>} Coordinates.\n */\nexport function inflateCoordinates(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  coordinates\n) {\n  coordinates = coordinates !== undefined ? coordinates : [];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    coordinates[i++] = flatCoordinates.slice(j, j + stride);\n  }\n  coordinates.length = i;\n  return coordinates;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {Array<Array<import(\"../../coordinate.js\").Coordinate>>} [coordinatess] Coordinatess.\n * @return {Array<Array<import(\"../../coordinate.js\").Coordinate>>} Coordinatess.\n */\nexport function inflateCoordinatesArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  coordinatess\n) {\n  coordinatess = coordinatess !== undefined ? coordinatess : [];\n  let i = 0;\n  for (let j = 0, jj = ends.length; j < jj; ++j) {\n    const end = ends[j];\n    coordinatess[i++] = inflateCoordinates(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      coordinatess[i]\n    );\n    offset = end;\n  }\n  coordinatess.length = i;\n  return coordinatess;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} [coordinatesss]\n *     Coordinatesss.\n * @return {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} Coordinatesss.\n */\nexport function inflateMultiCoordinatesArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  coordinatesss\n) {\n  coordinatesss = coordinatesss !== undefined ? coordinatesss : [];\n  let i = 0;\n  for (let j = 0, jj = endss.length; j < jj; ++j) {\n    const ends = endss[j];\n    coordinatesss[i++] =\n      ends.length === 1 && ends[0] === offset\n        ? []\n        : inflateCoordinatesArray(\n            flatCoordinates,\n            offset,\n            ends,\n            stride,\n            coordinatesss[i]\n          );\n    offset = ends[ends.length - 1];\n  }\n  coordinatesss.length = i;\n  return coordinatesss;\n}\n","/**\n * @module ol/geom/flat/interiorpoint\n */\nimport {ascending} from '../../array.js';\nimport {linearRingsContainsXY} from './contains.js';\n\n/**\n * Calculates a point that is likely to lie in the interior of the linear rings.\n * Inspired by JTS's com.vividsolutions.jts.geom.Geometry#getInteriorPoint.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {Array<number>} flatCenters Flat centers.\n * @param {number} flatCentersOffset Flat center offset.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Destination point as XYM coordinate, where M is the\n * length of the horizontal intersection that the point belongs to.\n */\nexport function getInteriorPointOfArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  flatCenters,\n  flatCentersOffset,\n  dest\n) {\n  let i, ii, x, x1, x2, y1, y2;\n  const y = flatCenters[flatCentersOffset + 1];\n  /** @type {Array<number>} */\n  const intersections = [];\n  // Calculate intersections with the horizontal line\n  for (let r = 0, rr = ends.length; r < rr; ++r) {\n    const end = ends[r];\n    x1 = flatCoordinates[end - stride];\n    y1 = flatCoordinates[end - stride + 1];\n    for (i = offset; i < end; i += stride) {\n      x2 = flatCoordinates[i];\n      y2 = flatCoordinates[i + 1];\n      if ((y <= y1 && y2 <= y) || (y1 <= y && y <= y2)) {\n        x = ((y - y1) / (y2 - y1)) * (x2 - x1) + x1;\n        intersections.push(x);\n      }\n      x1 = x2;\n      y1 = y2;\n    }\n  }\n  // Find the longest segment of the horizontal line that has its center point\n  // inside the linear ring.\n  let pointX = NaN;\n  let maxSegmentLength = -Infinity;\n  intersections.sort(ascending);\n  x1 = intersections[0];\n  for (i = 1, ii = intersections.length; i < ii; ++i) {\n    x2 = intersections[i];\n    const segmentLength = Math.abs(x2 - x1);\n    if (segmentLength > maxSegmentLength) {\n      x = (x1 + x2) / 2;\n      if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {\n        pointX = x;\n        maxSegmentLength = segmentLength;\n      }\n    }\n    x1 = x2;\n  }\n  if (isNaN(pointX)) {\n    // There is no horizontal line that has its center point inside the linear\n    // ring.  Use the center of the the linear ring's extent.\n    pointX = flatCenters[flatCentersOffset];\n  }\n  if (dest) {\n    dest.push(pointX, y, maxSegmentLength);\n    return dest;\n  }\n  return [pointX, y, maxSegmentLength];\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {Array<number>} flatCenters Flat centers.\n * @return {Array<number>} Interior points as XYM coordinates, where M is the\n * length of the horizontal intersection that the point belongs to.\n */\nexport function getInteriorPointsOfMultiArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  flatCenters\n) {\n  let interiorPoints = [];\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    interiorPoints = getInteriorPointOfArray(\n      flatCoordinates,\n      offset,\n      ends,\n      stride,\n      flatCenters,\n      2 * i,\n      interiorPoints\n    );\n    offset = ends[ends.length - 1];\n  }\n  return interiorPoints;\n}\n","/**\n * @module ol/geom/flat/interpolate\n */\nimport {binarySearch} from '../../array.js';\nimport {lerp} from '../../math.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} fraction Fraction.\n * @param {Array<number>} [dest] Destination.\n * @param {number} [dimension] Destination dimension (default is `2`)\n * @return {Array<number>} Destination.\n */\nexport function interpolatePoint(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  fraction,\n  dest,\n  dimension\n) {\n  let o, t;\n  const n = (end - offset) / stride;\n  if (n === 1) {\n    o = offset;\n  } else if (n === 2) {\n    o = offset;\n    t = fraction;\n  } else if (n !== 0) {\n    let x1 = flatCoordinates[offset];\n    let y1 = flatCoordinates[offset + 1];\n    let length = 0;\n    const cumulativeLengths = [0];\n    for (let i = offset + stride; i < end; i += stride) {\n      const x2 = flatCoordinates[i];\n      const y2 = flatCoordinates[i + 1];\n      length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n      cumulativeLengths.push(length);\n      x1 = x2;\n      y1 = y2;\n    }\n    const target = fraction * length;\n    const index = binarySearch(cumulativeLengths, target);\n    if (index < 0) {\n      t =\n        (target - cumulativeLengths[-index - 2]) /\n        (cumulativeLengths[-index - 1] - cumulativeLengths[-index - 2]);\n      o = offset + (-index - 2) * stride;\n    } else {\n      o = offset + index * stride;\n    }\n  }\n  dimension = dimension > 1 ? dimension : 2;\n  dest = dest ? dest : new Array(dimension);\n  for (let i = 0; i < dimension; ++i) {\n    dest[i] =\n      o === undefined\n        ? NaN\n        : t === undefined\n        ? flatCoordinates[o + i]\n        : lerp(flatCoordinates[o + i], flatCoordinates[o + stride + i], t);\n  }\n  return dest;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} m M.\n * @param {boolean} extrapolate Extrapolate.\n * @return {import(\"../../coordinate.js\").Coordinate|null} Coordinate.\n */\nexport function lineStringCoordinateAtM(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  m,\n  extrapolate\n) {\n  if (end == offset) {\n    return null;\n  }\n  let coordinate;\n  if (m < flatCoordinates[offset + stride - 1]) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(offset, offset + stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    }\n    return null;\n  } else if (flatCoordinates[end - 1] < m) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(end - stride, end);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    }\n    return null;\n  }\n  // FIXME use O(1) search\n  if (m == flatCoordinates[offset + stride - 1]) {\n    return flatCoordinates.slice(offset, offset + stride);\n  }\n  let lo = offset / stride;\n  let hi = end / stride;\n  while (lo < hi) {\n    const mid = (lo + hi) >> 1;\n    if (m < flatCoordinates[(mid + 1) * stride - 1]) {\n      hi = mid;\n    } else {\n      lo = mid + 1;\n    }\n  }\n  const m0 = flatCoordinates[lo * stride - 1];\n  if (m == m0) {\n    return flatCoordinates.slice((lo - 1) * stride, (lo - 1) * stride + stride);\n  }\n  const m1 = flatCoordinates[(lo + 1) * stride - 1];\n  const t = (m - m0) / (m1 - m0);\n  coordinate = [];\n  for (let i = 0; i < stride - 1; ++i) {\n    coordinate.push(\n      lerp(\n        flatCoordinates[(lo - 1) * stride + i],\n        flatCoordinates[lo * stride + i],\n        t\n      )\n    );\n  }\n  coordinate.push(m);\n  return coordinate;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} m M.\n * @param {boolean} extrapolate Extrapolate.\n * @param {boolean} interpolate Interpolate.\n * @return {import(\"../../coordinate.js\").Coordinate|null} Coordinate.\n */\nexport function lineStringsCoordinateAtM(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  m,\n  extrapolate,\n  interpolate\n) {\n  if (interpolate) {\n    return lineStringCoordinateAtM(\n      flatCoordinates,\n      offset,\n      ends[ends.length - 1],\n      stride,\n      m,\n      extrapolate\n    );\n  }\n  let coordinate;\n  if (m < flatCoordinates[stride - 1]) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(0, stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    }\n    return null;\n  }\n  if (flatCoordinates[flatCoordinates.length - 1] < m) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(flatCoordinates.length - stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    }\n    return null;\n  }\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    if (offset == end) {\n      continue;\n    }\n    if (m < flatCoordinates[offset + stride - 1]) {\n      return null;\n    } else if (m <= flatCoordinates[end - 1]) {\n      return lineStringCoordinateAtM(\n        flatCoordinates,\n        offset,\n        end,\n        stride,\n        m,\n        false\n      );\n    }\n    offset = end;\n  }\n  return null;\n}\n","/**\n * @module ol/geom/flat/intersectsextent\n */\nimport {\n  containsExtent,\n  createEmpty,\n  extendFlatCoordinates,\n  intersects,\n  intersectsSegment,\n} from '../../extent.js';\nimport {forEach as forEachSegment} from './segments.js';\nimport {linearRingContainsExtent, linearRingContainsXY} from './contains.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLineString(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  extent\n) {\n  const coordinatesExtent = extendFlatCoordinates(\n    createEmpty(),\n    flatCoordinates,\n    offset,\n    end,\n    stride\n  );\n  if (!intersects(extent, coordinatesExtent)) {\n    return false;\n  }\n  if (containsExtent(extent, coordinatesExtent)) {\n    return true;\n  }\n  if (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) {\n    return true;\n  }\n  if (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3]) {\n    return true;\n  }\n  return forEachSegment(\n    flatCoordinates,\n    offset,\n    end,\n    stride,\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} point1 Start point.\n     * @param {import(\"../../coordinate.js\").Coordinate} point2 End point.\n     * @return {boolean} `true` if the segment and the extent intersect,\n     *     `false` otherwise.\n     */\n    function (point1, point2) {\n      return intersectsSegment(extent, point1, point2);\n    }\n  );\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLineStringArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  extent\n) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    if (\n      intersectsLineString(flatCoordinates, offset, ends[i], stride, extent)\n    ) {\n      return true;\n    }\n    offset = ends[i];\n  }\n  return false;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRing(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  extent\n) {\n  if (intersectsLineString(flatCoordinates, offset, end, stride, extent)) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[0],\n      extent[1]\n    )\n  ) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[0],\n      extent[3]\n    )\n  ) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[2],\n      extent[1]\n    )\n  ) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[2],\n      extent[3]\n    )\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRingArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  extent\n) {\n  if (!intersectsLinearRing(flatCoordinates, offset, ends[0], stride, extent)) {\n    return false;\n  }\n  if (ends.length === 1) {\n    return true;\n  }\n  for (let i = 1, ii = ends.length; i < ii; ++i) {\n    if (\n      linearRingContainsExtent(\n        flatCoordinates,\n        ends[i - 1],\n        ends[i],\n        stride,\n        extent\n      )\n    ) {\n      if (\n        !intersectsLineString(\n          flatCoordinates,\n          ends[i - 1],\n          ends[i],\n          stride,\n          extent\n        )\n      ) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRingMultiArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  extent\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    if (\n      intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent)\n    ) {\n      return true;\n    }\n    offset = ends[ends.length - 1];\n  }\n  return false;\n}\n","/**\n * @module ol/geom/flat/length\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {number} Length.\n */\nexport function lineStringLength(flatCoordinates, offset, end, stride) {\n  let x1 = flatCoordinates[offset];\n  let y1 = flatCoordinates[offset + 1];\n  let length = 0;\n  for (let i = offset + stride; i < end; i += stride) {\n    const x2 = flatCoordinates[i];\n    const y2 = flatCoordinates[i + 1];\n    length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n    x1 = x2;\n    y1 = y2;\n  }\n  return length;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {number} Perimeter.\n */\nexport function linearRingLength(flatCoordinates, offset, end, stride) {\n  let perimeter = lineStringLength(flatCoordinates, offset, end, stride);\n  const dx = flatCoordinates[end - stride] - flatCoordinates[offset];\n  const dy = flatCoordinates[end - stride + 1] - flatCoordinates[offset + 1];\n  perimeter += Math.sqrt(dx * dx + dy * dy);\n  return perimeter;\n}\n","/**\n * @module ol/geom/flat/reverse\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n */\nexport function coordinates(flatCoordinates, offset, end, stride) {\n  while (offset < end - stride) {\n    for (let i = 0; i < stride; ++i) {\n      const tmp = flatCoordinates[offset + i];\n      flatCoordinates[offset + i] = flatCoordinates[end - stride + i];\n      flatCoordinates[end - stride + i] = tmp;\n    }\n    offset += stride;\n    end -= stride;\n  }\n}\n","/**\n * @module ol/geom/flat/orient\n */\nimport {coordinates as reverseCoordinates} from './reverse.js';\n\n/**\n * Is the linear ring oriented clockwise in a coordinate system with a bottom-left\n * coordinate origin? For a coordinate system with a top-left coordinate origin,\n * the ring's orientation is clockwise when this function returns false.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {boolean} Is clockwise.\n */\nexport function linearRingIsClockwise(flatCoordinates, offset, end, stride) {\n  // https://stackoverflow.com/q/1165647/clockwise-method#1165943\n  // https://github.com/OSGeo/gdal/blob/master/gdal/ogr/ogrlinearring.cpp\n  let edge = 0;\n  let x1 = flatCoordinates[end - stride];\n  let y1 = flatCoordinates[end - stride + 1];\n  for (; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    edge += (x2 - x1) * (y2 + y1);\n    x1 = x2;\n    y1 = y2;\n  }\n  return edge === 0 ? undefined : edge > 0;\n}\n\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [right] Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\nexport function linearRingsAreOriented(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  right\n) {\n  right = right !== undefined ? right : false;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const isClockwise = linearRingIsClockwise(\n      flatCoordinates,\n      offset,\n      end,\n      stride\n    );\n    if (i === 0) {\n      if ((right && isClockwise) || (!right && !isClockwise)) {\n        return false;\n      }\n    } else {\n      if ((right && !isClockwise) || (!right && isClockwise)) {\n        return false;\n      }\n    }\n    offset = end;\n  }\n  return true;\n}\n\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [right] Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\nexport function linearRingssAreOriented(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  right\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    if (!linearRingsAreOriented(flatCoordinates, offset, ends, stride, right)) {\n      return false;\n    }\n    if (ends.length) {\n      offset = ends[ends.length - 1];\n    }\n  }\n  return true;\n}\n\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {boolean} [right] Follow the right-hand rule for orientation.\n * @return {number} End.\n */\nexport function orientLinearRings(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  right\n) {\n  right = right !== undefined ? right : false;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const isClockwise = linearRingIsClockwise(\n      flatCoordinates,\n      offset,\n      end,\n      stride\n    );\n    const reverse =\n      i === 0\n        ? (right && isClockwise) || (!right && !isClockwise)\n        : (right && !isClockwise) || (!right && isClockwise);\n    if (reverse) {\n      reverseCoordinates(flatCoordinates, offset, end, stride);\n    }\n    offset = end;\n  }\n  return offset;\n}\n\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [right] Follow the right-hand rule for orientation.\n * @return {number} End.\n */\nexport function orientLinearRingsArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  right\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    offset = orientLinearRings(\n      flatCoordinates,\n      offset,\n      endss[i],\n      stride,\n      right\n    );\n  }\n  return offset;\n}\n\n/**\n * Return a two-dimensional endss\n * @param {Array<number>} flatCoordinates Flat coordinates\n * @param {Array<number>} ends Linear ring end indexes\n * @return {Array<Array<number>>} Two dimensional endss array that can\n * be used to contruct a MultiPolygon\n */\nexport function inflateEnds(flatCoordinates, ends) {\n  const endss = [];\n  let offset = 0;\n  let prevEndIndex = 0;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    // classifies an array of rings into polygons with outer rings and holes\n    if (!linearRingIsClockwise(flatCoordinates, offset, end, 2)) {\n      endss.push(ends.slice(prevEndIndex, i + 1));\n    } else {\n      if (endss.length === 0) {\n        continue;\n      }\n      endss[endss.length - 1].push(ends[prevEndIndex]);\n    }\n    prevEndIndex = i + 1;\n    offset = end;\n  }\n  return endss;\n}\n","/**\n * @module ol/geom/flat/segments\n */\n\n/**\n * This function calls `callback` for each segment of the flat coordinates\n * array. If the callback returns a truthy value the function returns that\n * value immediately. Otherwise the function returns `false`.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {function(import(\"../../coordinate.js\").Coordinate, import(\"../../coordinate.js\").Coordinate): T} callback Function\n *     called for each segment.\n * @return {T|boolean} Value.\n * @template T\n */\nexport function forEach(flatCoordinates, offset, end, stride, callback) {\n  let ret;\n  offset += stride;\n  for (; offset < end; offset += stride) {\n    ret = callback(\n      flatCoordinates.slice(offset - stride, offset),\n      flatCoordinates.slice(offset, offset + stride)\n    );\n    if (ret) {\n      return ret;\n    }\n  }\n  return false;\n}\n","/**\n * @module ol/geom/flat/simplify\n */\n// Based on simplify-js https://github.com/mourner/simplify-js\n// Copyright (c) 2012, Vladimir Agafonkin\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n//    1. Redistributions of source code must retain the above copyright notice,\n//       this list of conditions and the following disclaimer.\n//\n//    2. Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\n\nimport {squaredDistance, squaredSegmentDistance} from '../../math.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {boolean} highQuality Highest quality.\n * @param {Array<number>} [simplifiedFlatCoordinates] Simplified flat\n *     coordinates.\n * @return {Array<number>} Simplified line string.\n */\nexport function simplifyLineString(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  squaredTolerance,\n  highQuality,\n  simplifiedFlatCoordinates\n) {\n  simplifiedFlatCoordinates =\n    simplifiedFlatCoordinates !== undefined ? simplifiedFlatCoordinates : [];\n  if (!highQuality) {\n    end = radialDistance(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      0\n    );\n    flatCoordinates = simplifiedFlatCoordinates;\n    offset = 0;\n    stride = 2;\n  }\n  simplifiedFlatCoordinates.length = douglasPeucker(\n    flatCoordinates,\n    offset,\n    end,\n    stride,\n    squaredTolerance,\n    simplifiedFlatCoordinates,\n    0\n  );\n  return simplifiedFlatCoordinates;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\nexport function douglasPeucker(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  squaredTolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset\n) {\n  const n = (end - offset) / stride;\n  if (n < 3) {\n    for (; offset < end; offset += stride) {\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\n      simplifiedFlatCoordinates[simplifiedOffset++] =\n        flatCoordinates[offset + 1];\n    }\n    return simplifiedOffset;\n  }\n  /** @type {Array<number>} */\n  const markers = new Array(n);\n  markers[0] = 1;\n  markers[n - 1] = 1;\n  /** @type {Array<number>} */\n  const stack = [offset, end - stride];\n  let index = 0;\n  while (stack.length > 0) {\n    const last = stack.pop();\n    const first = stack.pop();\n    let maxSquaredDistance = 0;\n    const x1 = flatCoordinates[first];\n    const y1 = flatCoordinates[first + 1];\n    const x2 = flatCoordinates[last];\n    const y2 = flatCoordinates[last + 1];\n    for (let i = first + stride; i < last; i += stride) {\n      const x = flatCoordinates[i];\n      const y = flatCoordinates[i + 1];\n      const squaredDistance = squaredSegmentDistance(x, y, x1, y1, x2, y2);\n      if (squaredDistance > maxSquaredDistance) {\n        index = i;\n        maxSquaredDistance = squaredDistance;\n      }\n    }\n    if (maxSquaredDistance > squaredTolerance) {\n      markers[(index - offset) / stride] = 1;\n      if (first + stride < index) {\n        stack.push(first, index);\n      }\n      if (index + stride < last) {\n        stack.push(index, last);\n      }\n    }\n  }\n  for (let i = 0; i < n; ++i) {\n    if (markers[i]) {\n      simplifiedFlatCoordinates[simplifiedOffset++] =\n        flatCoordinates[offset + i * stride];\n      simplifiedFlatCoordinates[simplifiedOffset++] =\n        flatCoordinates[offset + i * stride + 1];\n    }\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<number>} simplifiedEnds Simplified ends.\n * @return {number} Simplified offset.\n */\nexport function douglasPeuckerArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  squaredTolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n  simplifiedEnds\n) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    simplifiedOffset = douglasPeucker(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      simplifiedOffset\n    );\n    simplifiedEnds.push(simplifiedOffset);\n    offset = end;\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<Array<number>>} simplifiedEndss Simplified endss.\n * @return {number} Simplified offset.\n */\nexport function douglasPeuckerMultiArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  squaredTolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n  simplifiedEndss\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    const simplifiedEnds = [];\n    simplifiedOffset = douglasPeuckerArray(\n      flatCoordinates,\n      offset,\n      ends,\n      stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      simplifiedOffset,\n      simplifiedEnds\n    );\n    simplifiedEndss.push(simplifiedEnds);\n    offset = ends[ends.length - 1];\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\nexport function radialDistance(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  squaredTolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset\n) {\n  if (end <= offset + stride) {\n    // zero or one point, no simplification possible, so copy and return\n    for (; offset < end; offset += stride) {\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\n      simplifiedFlatCoordinates[simplifiedOffset++] =\n        flatCoordinates[offset + 1];\n    }\n    return simplifiedOffset;\n  }\n  let x1 = flatCoordinates[offset];\n  let y1 = flatCoordinates[offset + 1];\n  // copy first point\n  simplifiedFlatCoordinates[simplifiedOffset++] = x1;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y1;\n  let x2 = x1;\n  let y2 = y1;\n  for (offset += stride; offset < end; offset += stride) {\n    x2 = flatCoordinates[offset];\n    y2 = flatCoordinates[offset + 1];\n    if (squaredDistance(x1, y1, x2, y2) > squaredTolerance) {\n      // copy point at offset\n      simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n      simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n      x1 = x2;\n      y1 = y2;\n    }\n  }\n  if (x2 != x1 || y2 != y1) {\n    // copy last point\n    simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {number} value Value.\n * @param {number} tolerance Tolerance.\n * @return {number} Rounded value.\n */\nexport function snap(value, tolerance) {\n  return tolerance * Math.round(value / tolerance);\n}\n\n/**\n * Simplifies a line string using an algorithm designed by Tim Schaub.\n * Coordinates are snapped to the nearest value in a virtual grid and\n * consecutive duplicate coordinates are discarded.  This effectively preserves\n * topology as the simplification of any subsection of a line string is\n * independent of the rest of the line string.  This means that, for examples,\n * the common edge between two polygons will be simplified to the same line\n * string independently in both polygons.  This implementation uses a single\n * pass over the coordinates and eliminates intermediate collinear points.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\nexport function quantize(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  tolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset\n) {\n  // do nothing if the line is empty\n  if (offset == end) {\n    return simplifiedOffset;\n  }\n  // snap the first coordinate (P1)\n  let x1 = snap(flatCoordinates[offset], tolerance);\n  let y1 = snap(flatCoordinates[offset + 1], tolerance);\n  offset += stride;\n  // add the first coordinate to the output\n  simplifiedFlatCoordinates[simplifiedOffset++] = x1;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y1;\n  // find the next coordinate that does not snap to the same value as the first\n  // coordinate (P2)\n  let x2, y2;\n  do {\n    x2 = snap(flatCoordinates[offset], tolerance);\n    y2 = snap(flatCoordinates[offset + 1], tolerance);\n    offset += stride;\n    if (offset == end) {\n      // all coordinates snap to the same value, the line collapses to a point\n      // push the last snapped value anyway to ensure that the output contains\n      // at least two points\n      // FIXME should we really return at least two points anyway?\n      simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n      simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n      return simplifiedOffset;\n    }\n  } while (x2 == x1 && y2 == y1);\n  while (offset < end) {\n    // snap the next coordinate (P3)\n    const x3 = snap(flatCoordinates[offset], tolerance);\n    const y3 = snap(flatCoordinates[offset + 1], tolerance);\n    offset += stride;\n    // skip P3 if it is equal to P2\n    if (x3 == x2 && y3 == y2) {\n      continue;\n    }\n    // calculate the delta between P1 and P2\n    const dx1 = x2 - x1;\n    const dy1 = y2 - y1;\n    // calculate the delta between P3 and P1\n    const dx2 = x3 - x1;\n    const dy2 = y3 - y1;\n    // if P1, P2, and P3 are colinear and P3 is further from P1 than P2 is from\n    // P1 in the same direction then P2 is on the straight line between P1 and\n    // P3\n    if (\n      dx1 * dy2 == dy1 * dx2 &&\n      ((dx1 < 0 && dx2 < dx1) || dx1 == dx2 || (dx1 > 0 && dx2 > dx1)) &&\n      ((dy1 < 0 && dy2 < dy1) || dy1 == dy2 || (dy1 > 0 && dy2 > dy1))\n    ) {\n      // discard P2 and set P2 = P3\n      x2 = x3;\n      y2 = y3;\n      continue;\n    }\n    // either P1, P2, and P3 are not colinear, or they are colinear but P3 is\n    // between P3 and P1 or on the opposite half of the line to P2.  add P2,\n    // and continue with P1 = P2 and P2 = P3\n    simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n    x1 = x2;\n    y1 = y2;\n    x2 = x3;\n    y2 = y3;\n  }\n  // add the last point (P2)\n  simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<number>} simplifiedEnds Simplified ends.\n * @return {number} Simplified offset.\n */\nexport function quantizeArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  tolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n  simplifiedEnds\n) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    simplifiedOffset = quantize(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      tolerance,\n      simplifiedFlatCoordinates,\n      simplifiedOffset\n    );\n    simplifiedEnds.push(simplifiedOffset);\n    offset = end;\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<Array<number>>} simplifiedEndss Simplified endss.\n * @return {number} Simplified offset.\n */\nexport function quantizeMultiArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  tolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n  simplifiedEndss\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    const simplifiedEnds = [];\n    simplifiedOffset = quantizeArray(\n      flatCoordinates,\n      offset,\n      ends,\n      stride,\n      tolerance,\n      simplifiedFlatCoordinates,\n      simplifiedOffset,\n      simplifiedEnds\n    );\n    simplifiedEndss.push(simplifiedEnds);\n    offset = ends[ends.length - 1];\n  }\n  return simplifiedOffset;\n}\n","/**\n * @module ol/geom/flat/straightchunk\n */\n\n/**\n * @param {number} maxAngle Maximum acceptable angle delta between segments.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {Array<number>} Start and end of the first suitable chunk of the\n * given `flatCoordinates`.\n */\nexport function matchingChunk(maxAngle, flatCoordinates, offset, end, stride) {\n  let chunkStart = offset;\n  let chunkEnd = offset;\n  let chunkM = 0;\n  let m = 0;\n  let start = offset;\n  let acos, i, m12, m23, x1, y1, x12, y12, x23, y23;\n  for (i = offset; i < end; i += stride) {\n    const x2 = flatCoordinates[i];\n    const y2 = flatCoordinates[i + 1];\n    if (x1 !== undefined) {\n      x23 = x2 - x1;\n      y23 = y2 - y1;\n      m23 = Math.sqrt(x23 * x23 + y23 * y23);\n      if (x12 !== undefined) {\n        m += m12;\n        acos = Math.acos((x12 * x23 + y12 * y23) / (m12 * m23));\n        if (acos > maxAngle) {\n          if (m > chunkM) {\n            chunkM = m;\n            chunkStart = start;\n            chunkEnd = i;\n          }\n          m = 0;\n          start = i - stride;\n        }\n      }\n      m12 = m23;\n      x12 = x23;\n      y12 = y23;\n    }\n    x1 = x2;\n    y1 = y2;\n  }\n  m += m23;\n  return m > chunkM ? [start, i] : [chunkStart, chunkEnd];\n}\n","/**\n * @module ol/geom/flat/textpath\n */\nimport {lerp} from '../../math.js';\nimport {rotate} from './transform.js';\n\n/**\n * @param {Array<number>} flatCoordinates Path to put text on.\n * @param {number} offset Start offset of the `flatCoordinates`.\n * @param {number} end End offset of the `flatCoordinates`.\n * @param {number} stride Stride.\n * @param {string} text Text to place on the path.\n * @param {number} startM m along the path where the text starts.\n * @param {number} maxAngle Max angle between adjacent chars in radians.\n * @param {number} scale The product of the text scale and the device pixel ratio.\n * @param {function(string, string, Object<string, number>):number} measureAndCacheTextWidth Measure and cache text width.\n * @param {string} font The font.\n * @param {Object<string, number>} cache A cache of measured widths.\n * @param {number} rotation Rotation to apply to the flatCoordinates to determine whether text needs to be reversed.\n * @return {Array<Array<*>>|null} The result array (or null if `maxAngle` was\n * exceeded). Entries of the array are x, y, anchorX, angle, chunk.\n */\nexport function drawTextOnPath(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  text,\n  startM,\n  maxAngle,\n  scale,\n  measureAndCacheTextWidth,\n  font,\n  cache,\n  rotation\n) {\n  let x2 = flatCoordinates[offset];\n  let y2 = flatCoordinates[offset + 1];\n  let x1 = 0;\n  let y1 = 0;\n  let segmentLength = 0;\n  let segmentM = 0;\n\n  function advance() {\n    x1 = x2;\n    y1 = y2;\n    offset += stride;\n    x2 = flatCoordinates[offset];\n    y2 = flatCoordinates[offset + 1];\n    segmentM += segmentLength;\n    segmentLength = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n  }\n  do {\n    advance();\n  } while (offset < end - stride && segmentM + segmentLength < startM);\n\n  let interpolate =\n    segmentLength === 0 ? 0 : (startM - segmentM) / segmentLength;\n  const beginX = lerp(x1, x2, interpolate);\n  const beginY = lerp(y1, y2, interpolate);\n\n  const startOffset = offset - stride;\n  const startLength = segmentM;\n  const endM = startM + scale * measureAndCacheTextWidth(font, text, cache);\n  while (offset < end - stride && segmentM + segmentLength < endM) {\n    advance();\n  }\n  interpolate = segmentLength === 0 ? 0 : (endM - segmentM) / segmentLength;\n  const endX = lerp(x1, x2, interpolate);\n  const endY = lerp(y1, y2, interpolate);\n\n  // Keep text upright\n  let reverse;\n  if (rotation) {\n    const flat = [beginX, beginY, endX, endY];\n    rotate(flat, 0, 4, 2, rotation, flat, flat);\n    reverse = flat[0] > flat[2];\n  } else {\n    reverse = beginX > endX;\n  }\n\n  const PI = Math.PI;\n  const result = [];\n  const singleSegment = startOffset + stride === offset;\n\n  offset = startOffset;\n  segmentLength = 0;\n  segmentM = startLength;\n  x2 = flatCoordinates[offset];\n  y2 = flatCoordinates[offset + 1];\n\n  let previousAngle;\n  // All on the same segment\n  if (singleSegment) {\n    advance();\n\n    previousAngle = Math.atan2(y2 - y1, x2 - x1);\n    if (reverse) {\n      previousAngle += previousAngle > 0 ? -PI : PI;\n    }\n    const x = (endX + beginX) / 2;\n    const y = (endY + beginY) / 2;\n    result[0] = [x, y, (endM - startM) / 2, previousAngle, text];\n    return result;\n  }\n\n  // rendering across line segments\n  text = text.replace(/\\n/g, ' '); // ensure rendering in single-line as all calculations below don't handle multi-lines\n\n  for (let i = 0, ii = text.length; i < ii; ) {\n    advance();\n    let angle = Math.atan2(y2 - y1, x2 - x1);\n    if (reverse) {\n      angle += angle > 0 ? -PI : PI;\n    }\n    if (previousAngle !== undefined) {\n      let delta = angle - previousAngle;\n      delta += delta > PI ? -2 * PI : delta < -PI ? 2 * PI : 0;\n      if (Math.abs(delta) > maxAngle) {\n        return null;\n      }\n    }\n    previousAngle = angle;\n\n    const iStart = i;\n    let charLength = 0;\n    for (; i < ii; ++i) {\n      const index = reverse ? ii - i - 1 : i;\n      const len = scale * measureAndCacheTextWidth(font, text[index], cache);\n      if (\n        offset + stride < end &&\n        segmentM + segmentLength < startM + charLength + len / 2\n      ) {\n        break;\n      }\n      charLength += len;\n    }\n    if (i === iStart) {\n      continue;\n    }\n    const chars = reverse\n      ? text.substring(ii - iStart, ii - i)\n      : text.substring(iStart, i);\n    interpolate =\n      segmentLength === 0\n        ? 0\n        : (startM + charLength / 2 - segmentM) / segmentLength;\n    const x = lerp(x1, x2, interpolate);\n    const y = lerp(y1, y2, interpolate);\n    result.push([x, y, charLength / 2, angle, chars]);\n    startM += charLength;\n  }\n  return result;\n}\n","/**\n * @module ol/geom/flat/transform\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function transform2D(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  transform,\n  dest\n) {\n  dest = dest ? dest : [];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const x = flatCoordinates[j];\n    const y = flatCoordinates[j + 1];\n    dest[i++] = transform[0] * x + transform[2] * y + transform[4];\n    dest[i++] = transform[1] * x + transform[3] * y + transform[5];\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} angle Angle.\n * @param {Array<number>} anchor Rotation anchor point.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function rotate(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  angle,\n  anchor,\n  dest\n) {\n  dest = dest ? dest : [];\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  const anchorX = anchor[0];\n  const anchorY = anchor[1];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const deltaX = flatCoordinates[j] - anchorX;\n    const deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + deltaX * cos - deltaY * sin;\n    dest[i++] = anchorY + deltaX * sin + deltaY * cos;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * Scale the coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} sx Scale factor in the x-direction.\n * @param {number} sy Scale factor in the y-direction.\n * @param {Array<number>} anchor Scale anchor point.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function scale(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  sx,\n  sy,\n  anchor,\n  dest\n) {\n  dest = dest ? dest : [];\n  const anchorX = anchor[0];\n  const anchorY = anchor[1];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const deltaX = flatCoordinates[j] - anchorX;\n    const deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + sx * deltaX;\n    dest[i++] = anchorY + sy * deltaY;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} deltaX Delta X.\n * @param {number} deltaY Delta Y.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function translate(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  deltaX,\n  deltaY,\n  dest\n) {\n  dest = dest ? dest : [];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    dest[i++] = flatCoordinates[j] + deltaX;\n    dest[i++] = flatCoordinates[j + 1] + deltaY;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n"],"names":["TRUE","FALSE","VOID","memoizeOne","fn","lastResult","lastArgs","lastThis","called","nextArgs","Array","prototype","slice","call","arguments","this","apply","toPromise","getter","promiseGetter","value","err","Promise","reject","resolve","tmpTransform","Geometry","constructor","super","extent_","extentRevision_","simplifiedGeometryMaxMinSquaredTolerance","simplifiedGeometryRevision","simplifyTransformedInternal","revision","squaredTolerance","transform","getSimplifiedGeometry","clone","applyTransform","simplifyTransformed","getRevision","closestPointXY","x","y","closestPoint","minSquaredDistance","containsXY","coord","getClosestPoint","point","NaN","Infinity","intersectsCoordinate","coordinate","computeExtent","extent","getExtent","isNaN","rotate","angle","anchor","scale","sx","sy","simplify","tolerance","getType","transformFn","intersectsExtent","translate","deltaX","deltaY","source","destination","sourceProj","get","getUnits","inCoordinates","outCoordinates","stride","pixelExtent","projectedExtent","getWorldExtent","length","getTransform","GeometryCollection","geometries","geometries_","changeEventsKeys_","listenGeometriesChange_","unlistenGeometriesChange_","forEach","i","ii","push","changed","geometryCollection","setGeometries","applyProperties","getGeometries","cloneGeometries","getGeometriesArray","getGeometriesArrayRecursive","geometriesArray","concat","simplifiedGeometries","simplified","geometry","simplifiedGeometry","simplifiedGeometryCollection","setGeometriesArray","isEmpty","disposeInternal","clonedGeometries","LineString","coordinates","layout","flatMidpoint_","flatMidpointRevision_","maxDelta_","maxDeltaRevision_","undefined","isArray","setCoordinates","setFlatCoordinates","appendCoordinate","flatCoordinates","lineString","Math","sqrt","forEachSegment","callback","getCoordinateAtM","m","extrapolate","getCoordinates","getCoordinateAt","fraction","dest","getLength","getFlatMidpoint","getSimplifiedGeometryInternal","simplifiedFlatCoordinates","setLayout","LinearRing","getArea","MultiLineString","ends","ends_","getLayout","lineStrings","getFlatCoordinates","appendLineString","multiLineString","interpolate","getEnds","getLineString","index","getLineStrings","offset","end","getFlatMidpoints","midpoints","midpoint","simplifiedEnds","MultiPoint","appendPoint","multiPoint","squaredDistance","j","getPoint","n","getPoints","points","linearRingss","endss","flatCenters","MultiPolygon","SimpleGeometry","endss_","flatInteriorPointsRevision_","flatInteriorPoints_","orientedRevision_","orientedFlatCoordinates_","thisLayout","polygons","thisEndss","polygon","jj","appendPolygon","len","newEndss","multiPolygon","getOrientedFlatCoordinates","right","orient","inflate","getEndss","getFlatInteriorPoints","getInteriorPoints","simplifiedEndss","getPolygon","prevEnds","Polygon","getPolygons","deflate","lastEnds","Point","flatInteriorPointRevision_","flatInteriorPoint_","appendLinearRing","linearRing","getFlatInteriorPoint","flatCenter","getInteriorPoint","getLinearRingCount","getLinearRing","getLinearRings","linearRings","fromExtent","minX","minY","maxX","maxY","fromCircle","circle","sides","getStride","center","getCenter","arrayLength","makeRegular","getRadius","radius","startAngle","PI","cos","sin","getFirstCoordinate","getLastCoordinate","getStrideForLayout","nesting","getLayoutForStride","transformGeom2D","simpleGeometry","twiceArea","x1","y1","x2","y2","area","assignClosest","offset1","offset2","dx","dy","t","maxSquaredDelta","max","squaredDelta","arrayMaxSquaredDelta","multiArrayMaxSquaredDelta","assignClosestPoint","maxDelta","isRing","tmpPoint","assignClosestArrayPoint","assignClosestMultiArrayPoint","linearRingContainsExtent","outside","linearRingContainsXY","wn","linearRingsContainsXY","linearRingssContainsXY","deflateCoordinate","deflateCoordinates","deflateCoordinatesArray","coordinatess","deflateMultiCoordinatesArray","coordinatesss","inflateCoordinates","inflateCoordinatesArray","inflateMultiCoordinatesArray","getInteriorPointOfArray","flatCentersOffset","intersections","r","rr","pointX","maxSegmentLength","sort","segmentLength","abs","getInteriorPointsOfMultiArray","interiorPoints","interpolatePoint","dimension","o","cumulativeLengths","target","lineStringCoordinateAtM","lo","hi","mid","m0","m1","lineStringsCoordinateAtM","intersectsLineString","coordinatesExtent","point1","point2","intersectsLineStringArray","intersectsLinearRing","intersectsLinearRingArray","intersectsLinearRingMultiArray","lineStringLength","tmp","linearRingIsClockwise","edge","linearRingsAreOriented","isClockwise","linearRingssAreOriented","orientLinearRings","reverse","orientLinearRingsArray","ret","douglasPeucker","simplifiedOffset","markers","stack","last","pop","first","maxSquaredDistance","douglasPeuckerArray","snap","round","quantize","x3","y3","dx1","dy1","dx2","dy2","quantizeArray","quantizeMultiArray","matchingChunk","maxAngle","acos","m12","m23","x12","y12","x23","y23","chunkStart","chunkEnd","chunkM","start","drawTextOnPath","text","startM","measureAndCacheTextWidth","font","cache","rotation","segmentM","advance","beginX","beginY","startOffset","startLength","endM","endX","endY","flat","result","singleSegment","previousAngle","atan2","replace","delta","iStart","charLength","chars","substring","transform2D","anchorX","anchorY","k"],"sourceRoot":""}