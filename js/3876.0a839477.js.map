{"version":3,"file":"js/3876.0a839477.js","mappings":"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","sources":["webpack://@openeo/web-editor/./node_modules/ol/webgl/ShaderBuilder.js","webpack://@openeo/web-editor/./node_modules/ol/webgl/Buffer.js","webpack://@openeo/web-editor/./node_modules/ol/worker/webgl.js","webpack://@openeo/web-editor/./node_modules/rbush/rbush.min.js","webpack://@openeo/web-editor/./node_modules/ol/webgl/BaseTileRepresentation.js","webpack://@openeo/web-editor/./node_modules/ol/webgl/TileTexture.js","webpack://@openeo/web-editor/./node_modules/ol/webgl/PaletteTexture.js","webpack://@openeo/web-editor/./node_modules/ol/webgl/ContextEventType.js","webpack://@openeo/web-editor/./node_modules/ol/webgl/PostProcessingPass.js","webpack://@openeo/web-editor/./node_modules/ol/webgl/Helper.js","webpack://@openeo/web-editor/./node_modules/ol/vec/mat4.js","webpack://@openeo/web-editor/./node_modules/ol/webgl/RenderTarget.js","webpack://@openeo/web-editor/./node_modules/ol/webgl.js"],"sourcesContent":["/**\n * Class for generating shaders from literal style objects\n * @module ol/webgl/ShaderBuilder\n */\nimport {LINESTRING_ANGLE_COSINE_CUTOFF} from '../render/webgl/utils.js';\nimport {colorToGlsl, numberToGlsl, stringToGlsl} from '../expr/gpu.js';\nimport {createDefaultStyle} from '../style/flat.js';\n\nexport const COMMON_HEADER = `#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_screenToWorldMatrix;\nuniform vec2 u_viewportSizePx;\nuniform float u_pixelRatio;\nuniform float u_globalAlpha;\nuniform float u_time;\nuniform float u_zoom;\nuniform float u_resolution;\nuniform float u_rotation;\nuniform vec4 u_renderExtent;\nuniform vec2 u_patternOrigin;\nuniform float u_depth;\nuniform mediump int u_hitDetection;\n\nconst float PI = 3.141592653589793238;\nconst float TWO_PI = 2.0 * PI;\n\n// this used to produce an alpha-premultiplied color from a texture\nvec4 samplePremultiplied(sampler2D sampler, vec2 texCoord) {\n  vec4 color = texture2D(sampler, texCoord);\n  return vec4(color.rgb * color.a, color.a);\n}\n`;\n\nconst DEFAULT_STYLE = createDefaultStyle();\n\n/**\n * @typedef {Object} VaryingDescription\n * @property {string} name Varying name, as will be declared in the header.\n * @property {string} type Varying type, either `float`, `vec2`, `vec4`...\n * @property {string} expression Expression which will be assigned to the varying in the vertex shader, and\n * passed on to the fragment shader.\n */\n\n/**\n * @classdesc\n * This class implements a classic builder pattern for generating many different types of shaders.\n * Methods can be chained, e. g.:\n *\n * ```js\n * const shader = new ShaderBuilder()\n *   .addVarying('v_width', 'float', 'a_width')\n *   .addUniform('u_time')\n *   .setColorExpression('...')\n *   .setSymbolSizeExpression('...')\n *   .getSymbolFragmentShader();\n * ```\n */\nexport class ShaderBuilder {\n  constructor() {\n    /**\n     * Uniforms; these will be declared in the header (should include the type).\n     * @type {Array<string>}\n     * @private\n     */\n    this.uniforms_ = [];\n\n    /**\n     * Attributes; these will be declared in the header (should include the type).\n     * @type {Array<string>}\n     * @private\n     */\n    this.attributes_ = [];\n\n    /**\n     * Varyings with a name, a type and an expression.\n     * @type {Array<VaryingDescription>}\n     * @private\n     */\n    this.varyings_ = [];\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hasSymbol_ = false;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.symbolSizeExpression_ = `vec2(${numberToGlsl(\n      DEFAULT_STYLE['circle-radius'],\n    )} + ${numberToGlsl(DEFAULT_STYLE['circle-stroke-width'] * 0.5)})`;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.symbolRotationExpression_ = '0.0';\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.symbolOffsetExpression_ = 'vec2(0.0)';\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.symbolColorExpression_ = colorToGlsl(\n      /** @type {string} */ (DEFAULT_STYLE['circle-fill-color']),\n    );\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.texCoordExpression_ = 'vec4(0.0, 0.0, 1.0, 1.0)';\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.discardExpression_ = 'false';\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.symbolRotateWithView_ = false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hasStroke_ = false;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.strokeWidthExpression_ = numberToGlsl(DEFAULT_STYLE['stroke-width']);\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.strokeColorExpression_ = colorToGlsl(\n      /** @type {string} */ (DEFAULT_STYLE['stroke-color']),\n    );\n\n    /**\n     * @private\n     */\n    this.strokeOffsetExpression_ = '0.';\n\n    /**\n     * @private\n     */\n    this.strokeCapExpression_ = stringToGlsl('round');\n\n    /**\n     * @private\n     */\n    this.strokeJoinExpression_ = stringToGlsl('round');\n\n    /**\n     * @private\n     */\n    this.strokeMiterLimitExpression_ = '10.';\n\n    /**\n     * @private\n     */\n    this.strokeDistanceFieldExpression_ = '-1000.';\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hasFill_ = false;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.fillColorExpression_ = colorToGlsl(\n      /** @type {string} */ (DEFAULT_STYLE['fill-color']),\n    );\n\n    /**\n     * @type {Array<string>}\n     * @private\n     */\n    this.vertexShaderFunctions_ = [];\n\n    /**\n     * @type {Array<string>}\n     * @private\n     */\n    this.fragmentShaderFunctions_ = [];\n  }\n\n  /**\n   * Adds a uniform accessible in both fragment and vertex shaders.\n   * The given name should include a type, such as `sampler2D u_texture`.\n   * @param {string} name Uniform name\n   * @return {ShaderBuilder} the builder object\n   */\n  addUniform(name) {\n    this.uniforms_.push(name);\n    return this;\n  }\n\n  /**\n   * Adds an attribute accessible in the vertex shader, read from the geometry buffer.\n   * The given name should include a type, such as `vec2 a_position`.\n   * @param {string} name Attribute name\n   * @return {ShaderBuilder} the builder object\n   */\n  addAttribute(name) {\n    this.attributes_.push(name);\n    return this;\n  }\n\n  /**\n   * Adds a varying defined in the vertex shader and accessible from the fragment shader.\n   * The type and expression of the varying have to be specified separately.\n   * @param {string} name Varying name\n   * @param {'float'|'vec2'|'vec3'|'vec4'} type Type\n   * @param {string} expression Expression used to assign a value to the varying.\n   * @return {ShaderBuilder} the builder object\n   */\n  addVarying(name, type, expression) {\n    this.varyings_.push({\n      name: name,\n      type: type,\n      expression: expression,\n    });\n    return this;\n  }\n\n  /**\n   * Sets an expression to compute the size of the shape.\n   * This expression can use all the uniforms and attributes available\n   * in the vertex shader, and should evaluate to a `vec2` value.\n   * @param {string} expression Size expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setSymbolSizeExpression(expression) {\n    this.hasSymbol_ = true;\n    this.symbolSizeExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current symbol size expression\n   */\n  getSymbolSizeExpression() {\n    return this.symbolSizeExpression_;\n  }\n\n  /**\n   * Sets an expression to compute the rotation of the shape.\n   * This expression can use all the uniforms and attributes available\n   * in the vertex shader, and should evaluate to a `float` value in radians.\n   * @param {string} expression Size expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setSymbolRotationExpression(expression) {\n    this.symbolRotationExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * Sets an expression to compute the offset of the symbol from the point center.\n   * This expression can use all the uniforms and attributes available\n   * in the vertex shader, and should evaluate to a `vec2` value.\n   * @param {string} expression Offset expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setSymbolOffsetExpression(expression) {\n    this.symbolOffsetExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current symbol offset expression\n   */\n  getSymbolOffsetExpression() {\n    return this.symbolOffsetExpression_;\n  }\n\n  /**\n   * Sets an expression to compute the color of the shape.\n   * This expression can use all the uniforms, varyings and attributes available\n   * in the fragment shader, and should evaluate to a `vec4` value.\n   * @param {string} expression Color expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setSymbolColorExpression(expression) {\n    this.hasSymbol_ = true;\n    this.symbolColorExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current symbol color expression\n   */\n  getSymbolColorExpression() {\n    return this.symbolColorExpression_;\n  }\n\n  /**\n   * Sets an expression to compute the texture coordinates of the vertices.\n   * This expression can use all the uniforms and attributes available\n   * in the vertex shader, and should evaluate to a `vec4` value.\n   * @param {string} expression Texture coordinate expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setTextureCoordinateExpression(expression) {\n    this.texCoordExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * Sets an expression to determine whether a fragment (pixel) should be discarded,\n   * i.e. not drawn at all.\n   * This expression can use all the uniforms, varyings and attributes available\n   * in the fragment shader, and should evaluate to a `bool` value (it will be\n   * used in an `if` statement)\n   * @param {string} expression Fragment discard expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setFragmentDiscardExpression(expression) {\n    this.discardExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current fragment discard expression\n   */\n  getFragmentDiscardExpression() {\n    return this.discardExpression_;\n  }\n\n  /**\n   * Sets whether the symbols should rotate with the view or stay aligned with the map.\n   * Note: will only be used for point geometry shaders.\n   * @param {boolean} rotateWithView Rotate with view\n   * @return {ShaderBuilder} the builder object\n   */\n  setSymbolRotateWithView(rotateWithView) {\n    this.symbolRotateWithView_ = rotateWithView;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke width expression, returning value in pixels\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeWidthExpression(expression) {\n    this.hasStroke_ = true;\n    this.strokeWidthExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke color expression, evaluate to `vec4`: can rely on currentLengthPx and currentRadiusPx\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeColorExpression(expression) {\n    this.hasStroke_ = true;\n    this.strokeColorExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current stroke color expression\n   */\n  getStrokeColorExpression() {\n    return this.strokeColorExpression_;\n  }\n\n  /**\n   * @param {string} expression Stroke color expression, evaluate to `float`\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeOffsetExpression(expression) {\n    this.strokeOffsetExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke line cap expression, evaluate to `float`\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeCapExpression(expression) {\n    this.strokeCapExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke line join expression, evaluate to `float`\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeJoinExpression(expression) {\n    this.strokeJoinExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke miter limit expression, evaluate to `float`\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeMiterLimitExpression(expression) {\n    this.strokeMiterLimitExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke distance field expression, evaluate to `float`\n   * This can override the default distance field; can rely on currentLengthPx and currentRadiusPx\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeDistanceFieldExpression(expression) {\n    this.strokeDistanceFieldExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Fill color expression, evaluate to `vec4`\n   * @return {ShaderBuilder} the builder object\n   */\n  setFillColorExpression(expression) {\n    this.hasFill_ = true;\n    this.fillColorExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current fill color expression\n   */\n  getFillColorExpression() {\n    return this.fillColorExpression_;\n  }\n\n  addVertexShaderFunction(code) {\n    if (this.vertexShaderFunctions_.includes(code)) {\n      return;\n    }\n    this.vertexShaderFunctions_.push(code);\n  }\n  addFragmentShaderFunction(code) {\n    if (this.fragmentShaderFunctions_.includes(code)) {\n      return;\n    }\n    this.fragmentShaderFunctions_.push(code);\n  }\n\n  /**\n   * Generates a symbol vertex shader from the builder parameters\n   * @return {string|null} The full shader as a string; null if no size or color specified\n   */\n  getSymbolVertexShader() {\n    if (!this.hasSymbol_) {\n      return null;\n    }\n\n    return `${COMMON_HEADER}\n${this.uniforms_\n  .map(function (uniform) {\n    return 'uniform ' + uniform + ';';\n  })\n  .join('\\n')}\nattribute vec2 a_position;\nattribute float a_index;\nattribute vec4 a_prop_hitColor;\n${this.attributes_\n  .map(function (attribute) {\n    return 'attribute ' + attribute + ';';\n  })\n  .join('\\n')}\nvarying vec2 v_texCoord;\nvarying vec2 v_quadCoord;\nvarying vec4 v_prop_hitColor;\nvarying vec2 v_centerPx;\nvarying float v_angle;\nvarying vec2 v_quadSizePx;\n${this.varyings_\n  .map(function (varying) {\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\n  })\n  .join('\\n')}\n${this.vertexShaderFunctions_.join('\\n')}\nvec2 pxToScreen(vec2 coordPx) {\n  vec2 scaled = coordPx / u_viewportSizePx / 0.5;\n  return scaled;\n}\n\nvec2 screenToPx(vec2 coordScreen) {\n  return (coordScreen * 0.5 + 0.5) * u_viewportSizePx;\n}\n\nvoid main(void) {\n  v_quadSizePx = ${this.symbolSizeExpression_};\n  vec2 halfSizePx = v_quadSizePx * 0.5;\n  vec2 centerOffsetPx = ${this.symbolOffsetExpression_};\n  vec2 offsetPx = centerOffsetPx;\n  if (a_index == 0.0) {\n    offsetPx -= halfSizePx;\n  } else if (a_index == 1.0) {\n    offsetPx += halfSizePx * vec2(1., -1.);\n  } else if (a_index == 2.0) {\n    offsetPx += halfSizePx;\n  } else {\n    offsetPx += halfSizePx * vec2(-1., 1.);\n  }\n  float angle = ${this.symbolRotationExpression_};\n  ${this.symbolRotateWithView_ ? 'angle += u_rotation;' : ''}\n  float c = cos(-angle);\n  float s = sin(-angle);\n  offsetPx = vec2(c * offsetPx.x - s * offsetPx.y, s * offsetPx.x + c * offsetPx.y);\n  vec4 center = u_projectionMatrix * vec4(a_position, 0.0, 1.0);\n  gl_Position = center + vec4(pxToScreen(offsetPx), u_depth, 0.);\n  vec4 texCoord = ${this.texCoordExpression_};\n  float u = a_index == 0.0 || a_index == 3.0 ? texCoord.s : texCoord.p;\n  float v = a_index == 2.0 || a_index == 3.0 ? texCoord.t : texCoord.q;\n  v_texCoord = vec2(u, v);\n  v_prop_hitColor = a_prop_hitColor;\n  v_angle = angle;\n  c = cos(-v_angle);\n  s = sin(-v_angle);\n  centerOffsetPx = vec2(c * centerOffsetPx.x - s * centerOffsetPx.y, s * centerOffsetPx.x + c * centerOffsetPx.y); \n  v_centerPx = screenToPx(center.xy) + centerOffsetPx;\n${this.varyings_\n  .map(function (varying) {\n    return '  ' + varying.name + ' = ' + varying.expression + ';';\n  })\n  .join('\\n')}\n}`;\n  }\n\n  /**\n   * Generates a symbol fragment shader from the builder parameters\n   * @return {string|null} The full shader as a string; null if no size or color specified\n   */\n  getSymbolFragmentShader() {\n    if (!this.hasSymbol_) {\n      return null;\n    }\n\n    return `${COMMON_HEADER}\n${this.uniforms_\n  .map(function (uniform) {\n    return 'uniform ' + uniform + ';';\n  })\n  .join('\\n')}\nvarying vec2 v_texCoord;\nvarying vec4 v_prop_hitColor;\nvarying vec2 v_centerPx;\nvarying float v_angle;\nvarying vec2 v_quadSizePx;\n${this.varyings_\n  .map(function (varying) {\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\n  })\n  .join('\\n')}\n${this.fragmentShaderFunctions_.join('\\n')}\n\nvoid main(void) {\n  if (${this.discardExpression_}) { discard; }\n  vec2 coordsPx = gl_FragCoord.xy / u_pixelRatio - v_centerPx; // relative to center\n  float c = cos(v_angle);\n  float s = sin(v_angle);\n  coordsPx = vec2(c * coordsPx.x - s * coordsPx.y, s * coordsPx.x + c * coordsPx.y);\n  gl_FragColor = ${this.symbolColorExpression_};\n  if (u_hitDetection > 0) {\n    if (gl_FragColor.a < 0.05) { discard; };\n    gl_FragColor = v_prop_hitColor;\n  }\n}`;\n  }\n\n  /**\n   * Generates a stroke vertex shader from the builder parameters\n   * @return {string|null} The full shader as a string; null if no size or color specified\n   */\n  getStrokeVertexShader() {\n    if (!this.hasStroke_) {\n      return null;\n    }\n\n    return `${COMMON_HEADER}\n${this.uniforms_\n  .map(function (uniform) {\n    return 'uniform ' + uniform + ';';\n  })\n  .join('\\n')}\nattribute vec2 a_position;\nattribute float a_index;\nattribute vec2 a_segmentStart;\nattribute vec2 a_segmentEnd;\nattribute float a_parameters;\nattribute float a_distance;\nattribute vec2 a_joinAngles;\nattribute vec4 a_prop_hitColor;\n${this.attributes_\n  .map(function (attribute) {\n    return 'attribute ' + attribute + ';';\n  })\n  .join('\\n')}\nvarying vec2 v_segmentStart;\nvarying vec2 v_segmentEnd;\nvarying float v_angleStart;\nvarying float v_angleEnd;\nvarying float v_width;\nvarying vec4 v_prop_hitColor;\nvarying float v_distanceOffsetPx;\n${this.varyings_\n  .map(function (varying) {\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\n  })\n  .join('\\n')}\n${this.vertexShaderFunctions_.join('\\n')}\nvec2 worldToPx(vec2 worldPos) {\n  vec4 screenPos = u_projectionMatrix * vec4(worldPos, 0.0, 1.0);\n  return (0.5 * screenPos.xy + 0.5) * u_viewportSizePx;\n}\n\nvec4 pxToScreen(vec2 pxPos) {\n  vec2 screenPos = 2.0 * pxPos / u_viewportSizePx - 1.0;\n  return vec4(screenPos, u_depth, 1.0);\n}\n\nbool isCap(float joinAngle) {\n  return joinAngle < -0.1;\n}\n\nvec2 getJoinOffsetDirection(vec2 normalPx, float joinAngle) {\n  float halfAngle = joinAngle / 2.0;\n  float c = cos(halfAngle);\n  float s = sin(halfAngle);\n  vec2 angleBisectorNormal = vec2(s * normalPx.x + c * normalPx.y, -c * normalPx.x + s * normalPx.y);\n  float length = 1.0 / s;\n  return angleBisectorNormal * length;\n}\n\nvec2 getOffsetPoint(vec2 point, vec2 normal, float joinAngle, float offsetPx) {\n  // if on a cap or the join angle is too high, offset the line along the segment normal\n  if (cos(joinAngle) > 0.998 || isCap(joinAngle)) {\n    return point - normal * offsetPx;\n  }\n  // offset is applied along the inverted normal (positive offset goes \"right\" relative to line direction)\n  return point - getJoinOffsetDirection(normal, joinAngle) * offsetPx;\n}\n\nvoid main(void) {\n  v_angleStart = a_joinAngles.x;\n  v_angleEnd = a_joinAngles.y;\n  float vertexNumber = floor(abs(a_parameters) / 10000. + 0.5);\n  // we're reading the fractional part while keeping the sign (so -4.12 gives -0.12, 3.45 gives 0.45)\n  float angleTangentSum = fract(abs(a_parameters) / 10000.) * 10000. * sign(a_parameters);\n\n  float lineWidth = ${this.strokeWidthExpression_};\n  float lineOffsetPx = ${this.strokeOffsetExpression_};\n\n  // compute segment start/end in px with offset\n  vec2 segmentStartPx = worldToPx(a_segmentStart);\n  vec2 segmentEndPx = worldToPx(a_segmentEnd);\n  vec2 tangentPx = normalize(segmentEndPx - segmentStartPx);\n  vec2 normalPx = vec2(-tangentPx.y, tangentPx.x);\n  segmentStartPx = getOffsetPoint(segmentStartPx, normalPx, v_angleStart, lineOffsetPx),\n  segmentEndPx = getOffsetPoint(segmentEndPx, normalPx, v_angleEnd, lineOffsetPx);\n  \n  // compute current vertex position\n  float normalDir = vertexNumber < 0.5 || (vertexNumber > 1.5 && vertexNumber < 2.5) ? 1.0 : -1.0;\n  float tangentDir = vertexNumber < 1.5 ? 1.0 : -1.0;\n  float angle = vertexNumber < 1.5 ? v_angleStart : v_angleEnd;\n  vec2 joinDirection;\n  vec2 positionPx = vertexNumber < 1.5 ? segmentStartPx : segmentEndPx;\n  // if angle is too high, do not make a proper join\n  if (cos(angle) > ${LINESTRING_ANGLE_COSINE_CUTOFF} || isCap(angle)) {\n    joinDirection = normalPx * normalDir - tangentPx * tangentDir;\n  } else {\n    joinDirection = getJoinOffsetDirection(normalPx * normalDir, angle);\n  }\n  positionPx = positionPx + joinDirection * (lineWidth * 0.5 + 1.); // adding 1 pixel for antialiasing\n  gl_Position = pxToScreen(positionPx);\n\n  v_segmentStart = segmentStartPx;\n  v_segmentEnd = segmentEndPx;\n  v_width = lineWidth;\n  v_prop_hitColor = a_prop_hitColor;\n  v_distanceOffsetPx = a_distance / u_resolution - (lineOffsetPx * angleTangentSum);\n${this.varyings_\n  .map(function (varying) {\n    return '  ' + varying.name + ' = ' + varying.expression + ';';\n  })\n  .join('\\n')}\n}`;\n  }\n\n  /**\n   * Generates a stroke fragment shader from the builder parameters\n   *\n   * @return {string|null} The full shader as a string; null if no size or color specified\n   */\n  getStrokeFragmentShader() {\n    if (!this.hasStroke_) {\n      return null;\n    }\n\n    return `${COMMON_HEADER}\n${this.uniforms_\n  .map(function (uniform) {\n    return 'uniform ' + uniform + ';';\n  })\n  .join('\\n')}\nvarying vec2 v_segmentStart;\nvarying vec2 v_segmentEnd;\nvarying float v_angleStart;\nvarying float v_angleEnd;\nvarying float v_width;\nvarying vec4 v_prop_hitColor;\nvarying float v_distanceOffsetPx;\n${this.varyings_\n  .map(function (varying) {\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\n  })\n  .join('\\n')}\n${this.fragmentShaderFunctions_.join('\\n')}\n\nvec2 pxToWorld(vec2 pxPos) {\n  vec2 screenPos = 2.0 * pxPos / u_viewportSizePx - 1.0;\n  return (u_screenToWorldMatrix * vec4(screenPos, 0.0, 1.0)).xy;\n}\n\nbool isCap(float joinAngle) {\n  return joinAngle < -0.1;\n}\n\nfloat segmentDistanceField(vec2 point, vec2 start, vec2 end, float width) {\n  vec2 tangent = normalize(end - start);\n  vec2 normal = vec2(-tangent.y, tangent.x);\n  vec2 startToPoint = point - start;\n  return abs(dot(startToPoint, normal)) - width * 0.5;\n}\n\nfloat buttCapDistanceField(vec2 point, vec2 start, vec2 end) {\n  vec2 startToPoint = point - start;\n  vec2 tangent = normalize(end - start);\n  return dot(startToPoint, -tangent);\n}\n\nfloat squareCapDistanceField(vec2 point, vec2 start, vec2 end, float width) {\n  return buttCapDistanceField(point, start, end) - width * 0.5;\n}\n\nfloat roundCapDistanceField(vec2 point, vec2 start, vec2 end, float width) {\n  float onSegment = max(0., 1000. * dot(point - start, end - start)); // this is very high when inside the segment\n  return length(point - start) - width * 0.5 - onSegment;\n}\n\nfloat roundJoinDistanceField(vec2 point, vec2 start, vec2 end, float width) {\n  return roundCapDistanceField(point, start, end, width);\n}\n\nfloat bevelJoinField(vec2 point, vec2 start, vec2 end, float width, float joinAngle) {\n  vec2 startToPoint = point - start;\n  vec2 tangent = normalize(end - start);\n  float c = cos(joinAngle * 0.5);\n  float s = sin(joinAngle * 0.5);\n  float direction = -sign(sin(joinAngle));\n  vec2 bisector = vec2(c * tangent.x - s * tangent.y, s * tangent.x + c * tangent.y);\n  float radius = width * 0.5 * s;\n  return dot(startToPoint, bisector * direction) - radius;\n}\n\nfloat miterJoinDistanceField(vec2 point, vec2 start, vec2 end, float width, float joinAngle) {\n  if (cos(joinAngle) > ${LINESTRING_ANGLE_COSINE_CUTOFF}) { // avoid risking a division by zero\n    return bevelJoinField(point, start, end, width, joinAngle);\n  }\n  float miterLength = 1. / sin(joinAngle * 0.5);\n  float miterLimit = ${this.strokeMiterLimitExpression_};\n  if (miterLength > miterLimit) {\n    return bevelJoinField(point, start, end, width, joinAngle);\n  }\n  return -1000.;\n}\n\nfloat capDistanceField(vec2 point, vec2 start, vec2 end, float width, float capType) {\n   if (capType == ${stringToGlsl('butt')}) {\n    return buttCapDistanceField(point, start, end);\n  } else if (capType == ${stringToGlsl('square')}) {\n    return squareCapDistanceField(point, start, end, width);\n  }\n  return roundCapDistanceField(point, start, end, width);\n}\n\nfloat joinDistanceField(vec2 point, vec2 start, vec2 end, float width, float joinAngle, float joinType) {\n  if (joinType == ${stringToGlsl('bevel')}) {\n    return bevelJoinField(point, start, end, width, joinAngle);\n  } else if (joinType == ${stringToGlsl('miter')}) {\n    return miterJoinDistanceField(point, start, end, width, joinAngle);\n  }\n  return roundJoinDistanceField(point, start, end, width);\n}\n\nfloat computeSegmentPointDistance(vec2 point, vec2 start, vec2 end, float width, float joinAngle, float capType, float joinType) {\n  if (isCap(joinAngle)) {\n    return capDistanceField(point, start, end, width, capType);\n  }\n  return joinDistanceField(point, start, end, width, joinAngle, joinType);\n}\n\nvoid main(void) {\n  vec2 currentPoint = gl_FragCoord.xy / u_pixelRatio;\n  #ifdef GL_FRAGMENT_PRECISION_HIGH\n  vec2 worldPos = pxToWorld(currentPoint);\n  if (\n    abs(u_renderExtent[0] - u_renderExtent[2]) > 0.0 && (\n      worldPos[0] < u_renderExtent[0] ||\n      worldPos[1] < u_renderExtent[1] ||\n      worldPos[0] > u_renderExtent[2] ||\n      worldPos[1] > u_renderExtent[3]\n    )\n  ) {\n    discard;\n  }\n  #endif\n  if (${this.discardExpression_}) { discard; }\n\n  float segmentLength = length(v_segmentEnd - v_segmentStart);\n  vec2 segmentTangent = (v_segmentEnd - v_segmentStart) / segmentLength;\n  vec2 segmentNormal = vec2(-segmentTangent.y, segmentTangent.x);\n  vec2 startToPoint = currentPoint - v_segmentStart;\n  float currentLengthPx = max(0., min(dot(segmentTangent, startToPoint), segmentLength)) + v_distanceOffsetPx; \n  float currentRadiusPx = abs(dot(segmentNormal, startToPoint));\n  float currentRadiusRatio = dot(segmentNormal, startToPoint) * 2. / v_width;\n  vec4 color = ${this.strokeColorExpression_} * u_globalAlpha;\n  float capType = ${this.strokeCapExpression_};\n  float joinType = ${this.strokeJoinExpression_};\n  float segmentStartDistance = computeSegmentPointDistance(currentPoint, v_segmentStart, v_segmentEnd, v_width, v_angleStart, capType, joinType);\n  float segmentEndDistance = computeSegmentPointDistance(currentPoint, v_segmentEnd, v_segmentStart, v_width, v_angleEnd, capType, joinType);\n  float distance = max(\n    segmentDistanceField(currentPoint, v_segmentStart, v_segmentEnd, v_width),\n    max(segmentStartDistance, segmentEndDistance)\n  );\n  distance = max(distance, ${this.strokeDistanceFieldExpression_});\n  gl_FragColor = color * smoothstep(0.5, -0.5, distance);\n  if (u_hitDetection > 0) {\n    if (gl_FragColor.a < 0.1) { discard; };\n    gl_FragColor = v_prop_hitColor;\n  }\n}`;\n  }\n\n  /**\n   * Generates a fill vertex shader from the builder parameters\n   *\n   * @return {string|null} The full shader as a string; null if no color specified\n   */\n  getFillVertexShader() {\n    if (!this.hasFill_) {\n      return null;\n    }\n\n    return `${COMMON_HEADER}\n${this.uniforms_\n  .map(function (uniform) {\n    return 'uniform ' + uniform + ';';\n  })\n  .join('\\n')}\nattribute vec2 a_position;\nattribute vec4 a_prop_hitColor;\n${this.attributes_\n  .map(function (attribute) {\n    return 'attribute ' + attribute + ';';\n  })\n  .join('\\n')}\nvarying vec4 v_prop_hitColor;\n${this.varyings_\n  .map(function (varying) {\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\n  })\n  .join('\\n')}\n${this.vertexShaderFunctions_.join('\\n')}\nvoid main(void) {\n  gl_Position = u_projectionMatrix * vec4(a_position, u_depth, 1.0);\n  v_prop_hitColor = a_prop_hitColor;\n${this.varyings_\n  .map(function (varying) {\n    return '  ' + varying.name + ' = ' + varying.expression + ';';\n  })\n  .join('\\n')}\n}`;\n  }\n\n  /**\n   * Generates a fill fragment shader from the builder parameters\n   * @return {string|null} The full shader as a string; null if no color specified\n   */\n  getFillFragmentShader() {\n    if (!this.hasFill_) {\n      return null;\n    }\n\n    return `${COMMON_HEADER}\n${this.uniforms_\n  .map(function (uniform) {\n    return 'uniform ' + uniform + ';';\n  })\n  .join('\\n')}\nvarying vec4 v_prop_hitColor;\n${this.varyings_\n  .map(function (varying) {\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\n  })\n  .join('\\n')}\n${this.fragmentShaderFunctions_.join('\\n')}\nvec2 pxToWorld(vec2 pxPos) {\n  vec2 screenPos = 2.0 * pxPos / u_viewportSizePx - 1.0;\n  return (u_screenToWorldMatrix * vec4(screenPos, 0.0, 1.0)).xy;\n}\n\nvec2 worldToPx(vec2 worldPos) {\n  vec4 screenPos = u_projectionMatrix * vec4(worldPos, 0.0, 1.0);\n  return (0.5 * screenPos.xy + 0.5) * u_viewportSizePx;\n}\n\nvoid main(void) {\n  vec2 pxPos = gl_FragCoord.xy / u_pixelRatio;\n  vec2 pxOrigin = worldToPx(u_patternOrigin);\n  #ifdef GL_FRAGMENT_PRECISION_HIGH\n  vec2 worldPos = pxToWorld(pxPos);\n  if (\n    abs(u_renderExtent[0] - u_renderExtent[2]) > 0.0 && (\n      worldPos[0] < u_renderExtent[0] ||\n      worldPos[1] < u_renderExtent[1] ||\n      worldPos[0] > u_renderExtent[2] ||\n      worldPos[1] > u_renderExtent[3]\n    )\n  ) {\n    discard;\n  }\n  #endif\n  if (${this.discardExpression_}) { discard; }\n  gl_FragColor = ${this.fillColorExpression_} * u_globalAlpha;\n  if (u_hitDetection > 0) {\n    if (gl_FragColor.a < 0.1) { discard; };\n    gl_FragColor = v_prop_hitColor;\n  }\n}`;\n  }\n}\n","/**\n * @module ol/webgl/Buffer\n */\nimport {\n  ARRAY_BUFFER,\n  DYNAMIC_DRAW,\n  ELEMENT_ARRAY_BUFFER,\n  STATIC_DRAW,\n  STREAM_DRAW,\n} from '../webgl.js';\nimport {assert} from '../asserts.js';\n\n/**\n * Used to describe the intended usage for the data: `STATIC_DRAW`, `STREAM_DRAW`\n * or `DYNAMIC_DRAW`.\n * @enum {number}\n */\nexport const BufferUsage = {\n  STATIC_DRAW: STATIC_DRAW,\n  STREAM_DRAW: STREAM_DRAW,\n  DYNAMIC_DRAW: DYNAMIC_DRAW,\n};\n\n/**\n * @classdesc\n * Object used to store an array of data as well as usage information for that data.\n * Stores typed arrays internally, either Float32Array or Uint16/32Array depending on\n * the buffer type (ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER) and available extensions.\n *\n * To populate the array, you can either use:\n * * A size using `#ofSize(buffer)`\n * * An `ArrayBuffer` object using `#fromArrayBuffer(buffer)`\n * * A plain array using `#fromArray(array)`\n *\n * Note:\n * See the documentation of [WebGLRenderingContext.bufferData](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)\n * for more info on buffer usage.\n */\nclass WebGLArrayBuffer {\n  /**\n   * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n   * @param {number} [usage] Intended usage, either `STATIC_DRAW`, `STREAM_DRAW` or `DYNAMIC_DRAW`.\n   * Default is `DYNAMIC_DRAW`.\n   */\n  constructor(type, usage) {\n    /**\n     * @private\n     * @type {Float32Array|Uint32Array|null}\n     */\n    this.array_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.type_ = type;\n\n    assert(\n      type === ARRAY_BUFFER || type === ELEMENT_ARRAY_BUFFER,\n      'A `WebGLArrayBuffer` must either be of type `ELEMENT_ARRAY_BUFFER` or `ARRAY_BUFFER`',\n    );\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.usage_ = usage !== undefined ? usage : BufferUsage.STATIC_DRAW;\n  }\n\n  /**\n   * Populates the buffer with an array of the given size (all values will be zeroes).\n   * @param {number} size Array size\n   * @return {WebGLArrayBuffer} This\n   */\n  ofSize(size) {\n    this.array_ = new (getArrayClassForType(this.type_))(size);\n    return this;\n  }\n\n  /**\n   * Populates the buffer with an array of the given size.\n   * @param {Array<number>} array Numerical array\n   * @return {WebGLArrayBuffer} This\n   */\n  fromArray(array) {\n    this.array_ = getArrayClassForType(this.type_).from(array);\n    return this;\n  }\n\n  /**\n   * Populates the buffer with a raw binary array buffer.\n   * @param {ArrayBuffer} buffer Raw binary buffer to populate the array with. Note that this buffer must have been\n   * initialized for the same typed array class.\n   * @return {WebGLArrayBuffer} This\n   */\n  fromArrayBuffer(buffer) {\n    this.array_ = new (getArrayClassForType(this.type_))(buffer);\n    return this;\n  }\n\n  /**\n   * @return {number} Buffer type.\n   */\n  getType() {\n    return this.type_;\n  }\n\n  /**\n   * Will return null if the buffer was not initialized\n   * @return {Float32Array|Uint32Array|null} Array.\n   */\n  getArray() {\n    return this.array_;\n  }\n\n  /**\n   * @return {number} Usage.\n   */\n  getUsage() {\n    return this.usage_;\n  }\n\n  /**\n   * Will return 0 if the buffer is not initialized\n   * @return {number} Array size\n   */\n  getSize() {\n    return this.array_ ? this.array_.length : 0;\n  }\n}\n\n/**\n * Returns a typed array constructor based on the given buffer type\n * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n * @return {Float32ArrayConstructor|Uint32ArrayConstructor} The typed array class to use for this buffer.\n */\nexport function getArrayClassForType(type) {\n  switch (type) {\n    case ARRAY_BUFFER:\n      return Float32Array;\n    case ELEMENT_ARRAY_BUFFER:\n      return Uint32Array;\n    default:\n      return Float32Array;\n  }\n}\n\nexport default WebGLArrayBuffer;\n","\n        export function create() {\n          const source = \"const e=\\\"GENERATE_POLYGON_BUFFERS\\\",t=\\\"GENERATE_POINT_BUFFERS\\\",n=\\\"GENERATE_LINE_STRING_BUFFERS\\\";function r(e,t){const n=t[0],r=t[1];return t[0]=e[0]*n+e[2]*r+e[4],t[1]=e[1]*n+e[3]*r+e[5],t}function x(e,t){const n=(r=t)[0]*r[3]-r[1]*r[2];var r;!function(e,t){if(!e)throw new Error(t)}(0!==n,\\\"Transformation matrix cannot be inverted\\\");const x=t[0],i=t[1],u=t[2],o=t[3],f=t[4],s=t[5];return e[0]=o/n,e[1]=-i/n,e[2]=-u/n,e[3]=x/n,e[4]=(u*s-o*f)/n,e[5]=-(x*s-i*f)/n,e}function i(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,\\\"default\\\")?e.default:e}new Array(6);var u={exports:{}};function o(e,t,n){n=n||2;var r,x,i,u,o,s,l,v=t&&t.length,h=v?t[0]*n:e.length,c=f(e,0,h,n,!0),g=[];if(!c||c.next===c.prev)return g;if(v&&(c=function(e,t,n,r){var x,i,u,o=[];for(x=0,i=t.length;x<i;x++)(u=f(e,t[x]*r,x<i-1?t[x+1]*r:e.length,r,!1))===u.next&&(u.steiner=!0),o.push(d(u));for(o.sort(p),x=0;x<o.length;x++)n=y(o[x],n);return n}(e,t,c,n)),e.length>80*n){r=i=e[0],x=u=e[1];for(var b=n;b<h;b+=n)(o=e[b])<r&&(r=o),(s=e[b+1])<x&&(x=s),o>i&&(i=o),s>u&&(u=s);l=0!==(l=Math.max(i-r,u-x))?32767/l:0}return a(c,g,n,r,x,l,0),g}function f(e,t,n,r,x){var i,u;if(x===O(e,t,n,r)>0)for(i=t;i<n;i+=r)u=P(i,e[i],e[i+1],u);else for(i=n-r;i>=t;i-=r)u=P(i,e[i],e[i+1],u);return u&&m(u,u.next)&&(B(u),u=u.next),u}function s(e,t){if(!e)return e;t||(t=e);var n,r=e;do{if(n=!1,r.steiner||!m(r,r.next)&&0!==w(r.prev,r,r.next))r=r.next;else{if(B(r),(r=t=r.prev)===r.next)break;n=!0}}while(n||r!==t);return t}function a(e,t,n,r,x,i,u){if(e){!u&&i&&function(e,t,n,r){var x=e;do{0===x.z&&(x.z=b(x.x,x.y,t,n,r)),x.prevZ=x.prev,x.nextZ=x.next,x=x.next}while(x!==e);x.prevZ.nextZ=null,x.prevZ=null,function(e){var t,n,r,x,i,u,o,f,s=1;do{for(n=e,e=null,i=null,u=0;n;){for(u++,r=n,o=0,t=0;t<s&&(o++,r=r.nextZ);t++);for(f=s;o>0||f>0&&r;)0!==o&&(0===f||!r||n.z<=r.z)?(x=n,n=n.nextZ,o--):(x=r,r=r.nextZ,f--),i?i.nextZ=x:e=x,x.prevZ=i,i=x;n=r}i.nextZ=null,s*=2}while(u>1)}(x)}(e,r,x,i);for(var o,f,p=e;e.prev!==e.next;)if(o=e.prev,f=e.next,i?v(e,r,x,i):l(e))t.push(o.i/n|0),t.push(e.i/n|0),t.push(f.i/n|0),B(e),e=f.next,p=f.next;else if((e=f)===p){u?1===u?a(e=h(s(e),t,n),t,n,r,x,i,2):2===u&&c(e,t,n,r,x,i):a(s(e),t,n,r,x,i,1);break}}}function l(e){var t=e.prev,n=e,r=e.next;if(w(t,n,r)>=0)return!1;for(var x=t.x,i=n.x,u=r.x,o=t.y,f=n.y,s=r.y,a=x<i?x<u?x:u:i<u?i:u,l=o<f?o<s?o:s:f<s?f:s,v=x>i?x>u?x:u:i>u?i:u,h=o>f?o>s?o:s:f>s?f:s,c=r.next;c!==t;){if(c.x>=a&&c.x<=v&&c.y>=l&&c.y<=h&&M(x,o,i,f,u,s,c.x,c.y)&&w(c.prev,c,c.next)>=0)return!1;c=c.next}return!0}function v(e,t,n,r){var x=e.prev,i=e,u=e.next;if(w(x,i,u)>=0)return!1;for(var o=x.x,f=i.x,s=u.x,a=x.y,l=i.y,v=u.y,h=o<f?o<s?o:s:f<s?f:s,c=a<l?a<v?a:v:l<v?l:v,p=o>f?o>s?o:s:f>s?f:s,y=a>l?a>v?a:v:l>v?l:v,g=b(h,c,t,n,r),d=b(p,y,t,n,r),Z=e.prevZ,m=e.nextZ;Z&&Z.z>=g&&m&&m.z<=d;){if(Z.x>=h&&Z.x<=p&&Z.y>=c&&Z.y<=y&&Z!==x&&Z!==u&&M(o,a,f,l,s,v,Z.x,Z.y)&&w(Z.prev,Z,Z.next)>=0)return!1;if(Z=Z.prevZ,m.x>=h&&m.x<=p&&m.y>=c&&m.y<=y&&m!==x&&m!==u&&M(o,a,f,l,s,v,m.x,m.y)&&w(m.prev,m,m.next)>=0)return!1;m=m.nextZ}for(;Z&&Z.z>=g;){if(Z.x>=h&&Z.x<=p&&Z.y>=c&&Z.y<=y&&Z!==x&&Z!==u&&M(o,a,f,l,s,v,Z.x,Z.y)&&w(Z.prev,Z,Z.next)>=0)return!1;Z=Z.prevZ}for(;m&&m.z<=d;){if(m.x>=h&&m.x<=p&&m.y>=c&&m.y<=y&&m!==x&&m!==u&&M(o,a,f,l,s,v,m.x,m.y)&&w(m.prev,m,m.next)>=0)return!1;m=m.nextZ}return!0}function h(e,t,n){var r=e;do{var x=r.prev,i=r.next.next;!m(x,i)&&A(x,r,r.next,i)&&z(x,i)&&z(i,x)&&(t.push(x.i/n|0),t.push(r.i/n|0),t.push(i.i/n|0),B(r),B(r.next),r=e=i),r=r.next}while(r!==e);return s(r)}function c(e,t,n,r,x,i){var u=e;do{for(var o=u.next.next;o!==u.prev;){if(u.i!==o.i&&Z(u,o)){var f=F(u,o);return u=s(u,u.next),f=s(f,f.next),a(u,t,n,r,x,i,0),void a(f,t,n,r,x,i,0)}o=o.next}u=u.next}while(u!==e)}function p(e,t){return e.x-t.x}function y(e,t){var n=function(e,t){var n,r=t,x=e.x,i=e.y,u=-1/0;do{if(i<=r.y&&i>=r.next.y&&r.next.y!==r.y){var o=r.x+(i-r.y)*(r.next.x-r.x)/(r.next.y-r.y);if(o<=x&&o>u&&(u=o,n=r.x<r.next.x?r:r.next,o===x))return n}r=r.next}while(r!==t);if(!n)return null;var f,s=n,a=n.x,l=n.y,v=1/0;r=n;do{x>=r.x&&r.x>=a&&x!==r.x&&M(i<l?x:u,i,a,l,i<l?u:x,i,r.x,r.y)&&(f=Math.abs(i-r.y)/(x-r.x),z(r,e)&&(f<v||f===v&&(r.x>n.x||r.x===n.x&&g(n,r)))&&(n=r,v=f)),r=r.next}while(r!==s);return n}(e,t);if(!n)return t;var r=F(n,e);return s(r,r.next),s(n,n.next)}function g(e,t){return w(e.prev,e,t.prev)<0&&w(t.next,e,e.next)<0}function b(e,t,n,r,x){return(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=(e-n)*x|0)|e<<8))|e<<4))|e<<2))|e<<1))|(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=(t-r)*x|0)|t<<8))|t<<4))|t<<2))|t<<1))<<1}function d(e){var t=e,n=e;do{(t.x<n.x||t.x===n.x&&t.y<n.y)&&(n=t),t=t.next}while(t!==e);return n}function M(e,t,n,r,x,i,u,o){return(x-u)*(t-o)>=(e-u)*(i-o)&&(e-u)*(r-o)>=(n-u)*(t-o)&&(n-u)*(i-o)>=(x-u)*(r-o)}function Z(e,t){return e.next.i!==t.i&&e.prev.i!==t.i&&!function(e,t){var n=e;do{if(n.i!==e.i&&n.next.i!==e.i&&n.i!==t.i&&n.next.i!==t.i&&A(n,n.next,e,t))return!0;n=n.next}while(n!==e);return!1}(e,t)&&(z(e,t)&&z(t,e)&&function(e,t){var n=e,r=!1,x=(e.x+t.x)/2,i=(e.y+t.y)/2;do{n.y>i!=n.next.y>i&&n.next.y!==n.y&&x<(n.next.x-n.x)*(i-n.y)/(n.next.y-n.y)+n.x&&(r=!r),n=n.next}while(n!==e);return r}(e,t)&&(w(e.prev,e,t.prev)||w(e,t.prev,t))||m(e,t)&&w(e.prev,e,e.next)>0&&w(t.prev,t,t.next)>0)}function w(e,t,n){return(t.y-e.y)*(n.x-t.x)-(t.x-e.x)*(n.y-t.y)}function m(e,t){return e.x===t.x&&e.y===t.y}function A(e,t,n,r){var x=I(w(e,t,n)),i=I(w(e,t,r)),u=I(w(n,r,e)),o=I(w(n,r,t));return x!==i&&u!==o||(!(0!==x||!E(e,n,t))||(!(0!==i||!E(e,r,t))||(!(0!==u||!E(n,e,r))||!(0!==o||!E(n,t,r)))))}function E(e,t,n){return t.x<=Math.max(e.x,n.x)&&t.x>=Math.min(e.x,n.x)&&t.y<=Math.max(e.y,n.y)&&t.y>=Math.min(e.y,n.y)}function I(e){return e>0?1:e<0?-1:0}function z(e,t){return w(e.prev,e,e.next)<0?w(e,t,e.next)>=0&&w(e,e.prev,t)>=0:w(e,t,e.prev)<0||w(e,e.next,t)<0}function F(e,t){var n=new _(e.i,e.x,e.y),r=new _(t.i,t.x,t.y),x=e.next,i=t.prev;return e.next=t,t.prev=e,n.next=x,x.prev=n,r.next=n,n.prev=r,i.next=r,r.prev=i,r}function P(e,t,n,r){var x=new _(e,t,n);return r?(x.next=r.next,x.prev=r,r.next.prev=x,r.next=x):(x.prev=x,x.next=x),x}function B(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function _(e,t,n){this.i=e,this.x=t,this.y=n,this.prev=null,this.next=null,this.z=0,this.prevZ=null,this.nextZ=null,this.steiner=!1}function O(e,t,n,r){for(var x=0,i=t,u=n-r;i<n;i+=r)x+=(e[u]-e[i])*(e[i+1]+e[u+1]),u=i;return x}u.exports=o,u.exports.default=o,o.deviation=function(e,t,n,r){var x=t&&t.length,i=x?t[0]*n:e.length,u=Math.abs(O(e,0,i,n));if(x)for(var o=0,f=t.length;o<f;o++){var s=t[o]*n,a=o<f-1?t[o+1]*n:e.length;u-=Math.abs(O(e,s,a,n))}var l=0;for(o=0;o<r.length;o+=3){var v=r[o]*n,h=r[o+1]*n,c=r[o+2]*n;l+=Math.abs((e[v]-e[c])*(e[h+1]-e[v+1])-(e[v]-e[h])*(e[c+1]-e[v+1]))}return 0===u&&0===l?0:Math.abs((l-u)/u)},o.flatten=function(e){for(var t=e[0][0].length,n={vertices:[],holes:[],dimensions:t},r=0,x=0;x<e.length;x++){for(var i=0;i<e[x].length;i++)for(var u=0;u<t;u++)n.vertices.push(e[x][i][u]);x>0&&(r+=e[x-1].length,n.holes.push(r))}return n};var N=i(u.exports);const R=[],S={vertexPosition:0,indexPosition:0};function T(e,t,n,r,x){e[t+0]=n,e[t+1]=r,e[t+2]=x}function U(e,t,n,r,x,i){const u=3+x,o=e[t+0],f=e[t+1],s=R;s.length=x;for(let n=0;n<s.length;n++)s[n]=e[t+2+n];let a=i?i.vertexPosition:0,l=i?i.indexPosition:0;const v=a/u;return T(n,a,o,f,0),s.length&&n.set(s,a+3),a+=u,T(n,a,o,f,1),s.length&&n.set(s,a+3),a+=u,T(n,a,o,f,2),s.length&&n.set(s,a+3),a+=u,T(n,a,o,f,3),s.length&&n.set(s,a+3),a+=u,r[l++]=v,r[l++]=v+1,r[l++]=v+3,r[l++]=v+1,r[l++]=v+2,r[l++]=v+3,S.vertexPosition=a,S.indexPosition=l,S}function k(e,t,n,x,i,u,o,f,s,a,l){const v=8+f.length,h=u.length/v,c=[e[t+0],e[t+1]],p=[e[n],e[n+1]],y=r(s,[...c]),g=r(s,[...p]);function b(e,t,n){const r=Math.sqrt((t[0]-e[0])*(t[0]-e[0])+(t[1]-e[1])*(t[1]-e[1])),x=[(t[0]-e[0])/r,(t[1]-e[1])/r],i=[-x[1],x[0]],u=Math.sqrt((n[0]-e[0])*(n[0]-e[0])+(n[1]-e[1])*(n[1]-e[1])),o=[(n[0]-e[0])/u,(n[1]-e[1])/u],f=0===r||0===u?0:Math.acos((s=o[0]*x[0]+o[1]*x[1],a=-1,l=1,Math.min(Math.max(s,a),l)));var s,a,l;return o[0]*i[0]+o[1]*i[1]>0?f:2*Math.PI-f}let d=-1,M=-1,Z=l;const w=null!==i;if(null!==x){d=b(y,g,r(s,[...[e[x],e[x+1]]])),Math.cos(d)<=.985&&(Z+=Math.tan((d-Math.PI)/2))}if(w){M=b(g,y,r(s,[...[e[i],e[i+1]]])),Math.cos(M)<=.985&&(Z+=Math.tan((Math.PI-M)/2))}function m(e,t){return 0===t?1e4*e:Math.sign(t)*(1e4*e+Math.abs(t))}return u.push(c[0],c[1],p[0],p[1],d,M,a,m(0,l)),u.push(...f),u.push(c[0],c[1],p[0],p[1],d,M,a,m(1,l)),u.push(...f),u.push(c[0],c[1],p[0],p[1],d,M,a,m(2,l)),u.push(...f),u.push(c[0],c[1],p[0],p[1],d,M,a,m(3,l)),u.push(...f),o.push(h,h+1,h+2,h+1,h+3,h+2),{length:a+Math.sqrt((g[0]-y[0])*(g[0]-y[0])+(g[1]-y[1])*(g[1]-y[1])),angle:Z}}function G(e,t,n,r,x){const i=2+x;let u=t;const o=e.slice(u,u+x);u+=x;const f=e[u++];let s=0;const a=new Array(f-1);for(let t=0;t<f;t++)s+=e[u++],t<f-1&&(a[t]=s);const l=e.slice(u,u+2*s),v=N(l,a,2);for(let e=0;e<v.length;e++)r.push(v[e]+n.length/i);for(let e=0;e<l.length;e+=2)n.push(l[e],l[e+1],...o);return u+2*s}const j=self;j.onmessage=r=>{const i=r.data;switch(i.type){case t:{const e=3,t=2,n=i.customAttributesSize,r=t+n,x=new Float32Array(i.renderInstructions),u=x.length/r,o=4*u*(n+e),f=new Uint32Array(6*u),s=new Float32Array(o);let a;for(let e=0;e<x.length;e+=r)a=U(x,e,s,f,n,a);const l=Object.assign({vertexBuffer:s.buffer,indexBuffer:f.buffer,renderInstructions:x.buffer},i);j.postMessage(l,[s.buffer,f.buffer,x.buffer]);break}case n:{const e=[],t=[],n=i.customAttributesSize,r=2,u=new Float32Array(i.renderInstructions);let o=0;const f=[1,0,0,1,0,0];let s,a;for(x(f,i.renderInstructionsTransform);o<u.length;){a=Array.from(u.slice(o,o+n)),o+=n,s=u[o++];const x=o,i=o+(s-1)*r,l=u[x]===u[i]&&u[x+1]===u[i+1];let v=0,h=0;for(let n=0;n<s-1;n++){let c=null;n>0?c=o+(n-1)*r:l&&(c=i-r);let p=null;n<s-2?p=o+(n+2)*r:l&&(p=x+r);const y=k(u,o+n*r,o+(n+1)*r,c,p,e,t,a,f,v,h);v=y.length,h=y.angle}o+=s*r}const l=Uint32Array.from(t),v=Float32Array.from(e),h=Object.assign({vertexBuffer:v.buffer,indexBuffer:l.buffer,renderInstructions:u.buffer},i);j.postMessage(h,[v.buffer,l.buffer,u.buffer]);break}case e:{const e=[],t=[],n=i.customAttributesSize,r=new Float32Array(i.renderInstructions);let x=0;for(;x<r.length;)x=G(r,x,e,t,n);const u=Uint32Array.from(t),o=Float32Array.from(e),f=Object.assign({vertexBuffer:o.buffer,indexBuffer:u.buffer,renderInstructions:r.buffer},i);j.postMessage(f,[o.buffer,u.buffer,r.buffer]);break}}};\";\n          return new Worker(typeof Blob === 'undefined'\n            ? 'data:application/javascript;base64,' + Buffer.from(source, 'binary').toString('base64')\n            : URL.createObjectURL(new Blob([source], {type: 'application/javascript'})));\n        }\n      \n","!function(t,i){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=i():\"function\"==typeof define&&define.amd?define(i):(t=t||self).RBush=i()}(this,function(){\"use strict\";function t(t,r,e,a,h){!function t(n,r,e,a,h){for(;a>e;){if(a-e>600){var o=a-e+1,s=r-e+1,l=Math.log(o),f=.5*Math.exp(2*l/3),u=.5*Math.sqrt(l*f*(o-f)/o)*(s-o/2<0?-1:1),m=Math.max(e,Math.floor(r-s*f/o+u)),c=Math.min(a,Math.floor(r+(o-s)*f/o+u));t(n,r,m,c,h)}var p=n[r],d=e,x=a;for(i(n,e,r),h(n[a],p)>0&&i(n,e,a);d<x;){for(i(n,d,x),d++,x--;h(n[d],p)<0;)d++;for(;h(n[x],p)>0;)x--}0===h(n[e],p)?i(n,e,x):i(n,++x,a),x<=r&&(e=x+1),r<=x&&(a=x-1)}}(t,r,e||0,a||t.length-1,h||n)}function i(t,i,n){var r=t[i];t[i]=t[n],t[n]=r}function n(t,i){return t<i?-1:t>i?1:0}var r=function(t){void 0===t&&(t=9),this._maxEntries=Math.max(4,t),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear()};function e(t,i,n){if(!n)return i.indexOf(t);for(var r=0;r<i.length;r++)if(n(t,i[r]))return r;return-1}function a(t,i){h(t,0,t.children.length,i,t)}function h(t,i,n,r,e){e||(e=p(null)),e.minX=1/0,e.minY=1/0,e.maxX=-1/0,e.maxY=-1/0;for(var a=i;a<n;a++){var h=t.children[a];o(e,t.leaf?r(h):h)}return e}function o(t,i){return t.minX=Math.min(t.minX,i.minX),t.minY=Math.min(t.minY,i.minY),t.maxX=Math.max(t.maxX,i.maxX),t.maxY=Math.max(t.maxY,i.maxY),t}function s(t,i){return t.minX-i.minX}function l(t,i){return t.minY-i.minY}function f(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}function u(t){return t.maxX-t.minX+(t.maxY-t.minY)}function m(t,i){return t.minX<=i.minX&&t.minY<=i.minY&&i.maxX<=t.maxX&&i.maxY<=t.maxY}function c(t,i){return i.minX<=t.maxX&&i.minY<=t.maxY&&i.maxX>=t.minX&&i.maxY>=t.minY}function p(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function d(i,n,r,e,a){for(var h=[n,r];h.length;)if(!((r=h.pop())-(n=h.pop())<=e)){var o=n+Math.ceil((r-n)/e/2)*e;t(i,o,n,r,a),h.push(n,o,o,r)}}return r.prototype.all=function(){return this._all(this.data,[])},r.prototype.search=function(t){var i=this.data,n=[];if(!c(t,i))return n;for(var r=this.toBBox,e=[];i;){for(var a=0;a<i.children.length;a++){var h=i.children[a],o=i.leaf?r(h):h;c(t,o)&&(i.leaf?n.push(h):m(t,o)?this._all(h,n):e.push(h))}i=e.pop()}return n},r.prototype.collides=function(t){var i=this.data;if(!c(t,i))return!1;for(var n=[];i;){for(var r=0;r<i.children.length;r++){var e=i.children[r],a=i.leaf?this.toBBox(e):e;if(c(t,a)){if(i.leaf||m(t,a))return!0;n.push(e)}}i=n.pop()}return!1},r.prototype.load=function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var i=0;i<t.length;i++)this.insert(t[i]);return this}var n=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else{if(this.data.height<n.height){var r=this.data;this.data=n,n=r}this._insert(n,this.data.height-n.height-1,!0)}else this.data=n;return this},r.prototype.insert=function(t){return t&&this._insert(t,this.data.height-1),this},r.prototype.clear=function(){return this.data=p([]),this},r.prototype.remove=function(t,i){if(!t)return this;for(var n,r,a,h=this.data,o=this.toBBox(t),s=[],l=[];h||s.length;){if(h||(h=s.pop(),r=s[s.length-1],n=l.pop(),a=!0),h.leaf){var f=e(t,h.children,i);if(-1!==f)return h.children.splice(f,1),s.push(h),this._condense(s),this}a||h.leaf||!m(h,o)?r?(n++,h=r.children[n],a=!1):h=null:(s.push(h),l.push(n),n=0,r=h,h=h.children[0])}return this},r.prototype.toBBox=function(t){return t},r.prototype.compareMinX=function(t,i){return t.minX-i.minX},r.prototype.compareMinY=function(t,i){return t.minY-i.minY},r.prototype.toJSON=function(){return this.data},r.prototype.fromJSON=function(t){return this.data=t,this},r.prototype._all=function(t,i){for(var n=[];t;)t.leaf?i.push.apply(i,t.children):n.push.apply(n,t.children),t=n.pop();return i},r.prototype._build=function(t,i,n,r){var e,h=n-i+1,o=this._maxEntries;if(h<=o)return a(e=p(t.slice(i,n+1)),this.toBBox),e;r||(r=Math.ceil(Math.log(h)/Math.log(o)),o=Math.ceil(h/Math.pow(o,r-1))),(e=p([])).leaf=!1,e.height=r;var s=Math.ceil(h/o),l=s*Math.ceil(Math.sqrt(o));d(t,i,n,l,this.compareMinX);for(var f=i;f<=n;f+=l){var u=Math.min(f+l-1,n);d(t,f,u,s,this.compareMinY);for(var m=f;m<=u;m+=s){var c=Math.min(m+s-1,u);e.children.push(this._build(t,m,c,r-1))}}return a(e,this.toBBox),e},r.prototype._chooseSubtree=function(t,i,n,r){for(;r.push(i),!i.leaf&&r.length-1!==n;){for(var e=1/0,a=1/0,h=void 0,o=0;o<i.children.length;o++){var s=i.children[o],l=f(s),u=(m=t,c=s,(Math.max(c.maxX,m.maxX)-Math.min(c.minX,m.minX))*(Math.max(c.maxY,m.maxY)-Math.min(c.minY,m.minY))-l);u<a?(a=u,e=l<e?l:e,h=s):u===a&&l<e&&(e=l,h=s)}i=h||i.children[0]}var m,c;return i},r.prototype._insert=function(t,i,n){var r=n?t:this.toBBox(t),e=[],a=this._chooseSubtree(r,this.data,i,e);for(a.children.push(t),o(a,r);i>=0&&e[i].children.length>this._maxEntries;)this._split(e,i),i--;this._adjustParentBBoxes(r,e,i)},r.prototype._split=function(t,i){var n=t[i],r=n.children.length,e=this._minEntries;this._chooseSplitAxis(n,e,r);var h=this._chooseSplitIndex(n,e,r),o=p(n.children.splice(h,n.children.length-h));o.height=n.height,o.leaf=n.leaf,a(n,this.toBBox),a(o,this.toBBox),i?t[i-1].children.push(o):this._splitRoot(n,o)},r.prototype._splitRoot=function(t,i){this.data=p([t,i]),this.data.height=t.height+1,this.data.leaf=!1,a(this.data,this.toBBox)},r.prototype._chooseSplitIndex=function(t,i,n){for(var r,e,a,o,s,l,u,m=1/0,c=1/0,p=i;p<=n-i;p++){var d=h(t,0,p,this.toBBox),x=h(t,p,n,this.toBBox),v=(e=d,a=x,o=void 0,s=void 0,l=void 0,u=void 0,o=Math.max(e.minX,a.minX),s=Math.max(e.minY,a.minY),l=Math.min(e.maxX,a.maxX),u=Math.min(e.maxY,a.maxY),Math.max(0,l-o)*Math.max(0,u-s)),M=f(d)+f(x);v<m?(m=v,r=p,c=M<c?M:c):v===m&&M<c&&(c=M,r=p)}return r||n-i},r.prototype._chooseSplitAxis=function(t,i,n){var r=t.leaf?this.compareMinX:s,e=t.leaf?this.compareMinY:l;this._allDistMargin(t,i,n,r)<this._allDistMargin(t,i,n,e)&&t.children.sort(r)},r.prototype._allDistMargin=function(t,i,n,r){t.children.sort(r);for(var e=this.toBBox,a=h(t,0,i,e),s=h(t,n-i,n,e),l=u(a)+u(s),f=i;f<n-i;f++){var m=t.children[f];o(a,t.leaf?e(m):m),l+=u(a)}for(var c=n-i-1;c>=i;c--){var p=t.children[c];o(s,t.leaf?e(p):p),l+=u(s)}return l},r.prototype._adjustParentBBoxes=function(t,i,n){for(var r=n;r>=0;r--)o(i[r],t)},r.prototype._condense=function(t){for(var i=t.length-1,n=void 0;i>=0;i--)0===t[i].children.length?i>0?(n=t[i-1].children).splice(n.indexOf(t[i]),1):this.clear():a(t[i],this.toBBox)},r});\n","/**\n * @module ol/webgl/BaseTileRepresentation\n */\n\nimport EventTarget from '../events/Target.js';\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport TileState from '../TileState.js';\nimport {abstract} from '../util.js';\n\n/**\n * @typedef {import(\"../Tile.js\").default} BaseTileType\n */\n\n/**\n * @template {BaseTileType} TileType\n * @typedef {Object} TileRepresentationOptions\n * @property {TileType} tile The tile.\n * @property {import(\"../tilegrid/TileGrid.js\").default} grid Tile grid.\n * @property {import(\"../webgl/Helper.js\").default} helper WebGL helper.\n * @property {number} [gutter=0] The size in pixels of the gutter around image tiles to ignore.\n */\n\n/**\n * @classdesc\n * Base class for representing a tile in a webgl context\n * @template {import(\"../Tile.js\").default} TileType\n * @abstract\n */\nclass BaseTileRepresentation extends EventTarget {\n  /**\n   * @param {TileRepresentationOptions<TileType>} options The tile representation options.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * @type {TileType}\n     */\n    this.tile;\n    this.handleTileChange_ = this.handleTileChange_.bind(this);\n\n    /**\n     * @type {number}\n     * @protected\n     */\n    this.gutter_ = options.gutter || 0;\n\n    /**\n     * @type {import(\"../webgl/Helper.js\").default}\n     * @protected\n     */\n    this.helper_ = options.helper;\n\n    this.loaded = false;\n    this.ready = false;\n  }\n\n  /**\n   * @param {TileType} tile Tile.\n   */\n  setTile(tile) {\n    if (tile !== this.tile) {\n      if (this.tile) {\n        this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n      }\n      this.tile = tile;\n      this.loaded = tile.getState() === TileState.LOADED;\n      if (this.loaded) {\n        this.uploadTile();\n      } else {\n        if (tile instanceof ImageTile) {\n          const image = tile.getImage();\n          if (image instanceof Image && !image.crossOrigin) {\n            image.crossOrigin = 'anonymous';\n          }\n        }\n        tile.addEventListener(EventType.CHANGE, this.handleTileChange_);\n      }\n    }\n  }\n\n  /**\n   * @abstract\n   * @protected\n   */\n  uploadTile() {\n    abstract();\n  }\n\n  setReady() {\n    this.ready = true;\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  handleTileChange_() {\n    if (this.tile.getState() === TileState.LOADED) {\n      this.loaded = true;\n      this.uploadTile();\n    }\n  }\n\n  disposeInternal() {\n    this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n  }\n}\n\nexport default BaseTileRepresentation;\n","/**\n * @module ol/webgl/TileTexture\n */\n\nimport BaseTileRepresentation from './BaseTileRepresentation.js';\nimport DataTile, {asArrayLike, asImageLike} from '../DataTile.js';\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport WebGLArrayBuffer from './Buffer.js';\nimport {ARRAY_BUFFER, STATIC_DRAW} from '../webgl.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {toSize} from '../size.js';\n\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction bindAndConfigure(gl, texture, interpolate) {\n  const resampleFilter = interpolate ? gl.LINEAR : gl.NEAREST;\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, resampleFilter);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, resampleFilter);\n}\n\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {import(\"../DataTile.js\").ImageLike} image The image.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction uploadImageTexture(gl, texture, image, interpolate) {\n  bindAndConfigure(gl, texture, interpolate);\n\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n}\n\n/**\n * @param {import(\"./Helper.js\").default} helper The WebGL helper.\n * @param {WebGLTexture} texture The texture.\n * @param {import(\"../DataTile.js\").ArrayLike} data The pixel data.\n * @param {import(\"../size.js\").Size} size The pixel size.\n * @param {number} bandCount The band count.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction uploadDataTexture(\n  helper,\n  texture,\n  data,\n  size,\n  bandCount,\n  interpolate,\n) {\n  const gl = helper.getGL();\n  let textureType;\n  let canInterpolate;\n  if (data instanceof Float32Array) {\n    textureType = gl.FLOAT;\n    helper.getExtension('OES_texture_float');\n    const extension = helper.getExtension('OES_texture_float_linear');\n    canInterpolate = extension !== null;\n  } else {\n    textureType = gl.UNSIGNED_BYTE;\n    canInterpolate = true;\n  }\n  bindAndConfigure(gl, texture, interpolate && canInterpolate);\n\n  const bytesPerRow = data.byteLength / size[1];\n  let unpackAlignment = 1;\n  if (bytesPerRow % 8 === 0) {\n    unpackAlignment = 8;\n  } else if (bytesPerRow % 4 === 0) {\n    unpackAlignment = 4;\n  } else if (bytesPerRow % 2 === 0) {\n    unpackAlignment = 2;\n  }\n\n  let format;\n  switch (bandCount) {\n    case 1: {\n      format = gl.LUMINANCE;\n      break;\n    }\n    case 2: {\n      format = gl.LUMINANCE_ALPHA;\n      break;\n    }\n    case 3: {\n      format = gl.RGB;\n      break;\n    }\n    case 4: {\n      format = gl.RGBA;\n      break;\n    }\n    default: {\n      throw new Error(`Unsupported number of bands: ${bandCount}`);\n    }\n  }\n\n  const oldUnpackAlignment = gl.getParameter(gl.UNPACK_ALIGNMENT);\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, unpackAlignment);\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    0,\n    format,\n    size[0],\n    size[1],\n    0,\n    format,\n    textureType,\n    data,\n  );\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, oldUnpackAlignment);\n}\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet pixelContext = null;\n\nfunction createPixelContext() {\n  pixelContext = createCanvasContext2D(1, 1, undefined, {\n    willReadFrequently: true,\n  });\n}\n\n/**\n * @typedef {import(\"../DataTile.js\").default|ImageTile|ReprojTile} TileType\n */\n\n/**\n * @extends {BaseTileRepresentation<TileType>}\n */\nclass TileTexture extends BaseTileRepresentation {\n  /**\n   * @param {import(\"./BaseTileRepresentation.js\").TileRepresentationOptions<TileType>} options The tile texture options.\n   */\n  constructor(options) {\n    super(options);\n\n    /**\n     * @type {Array<WebGLTexture>}\n     */\n    this.textures = [];\n\n    /**\n     * @type {import(\"../size.js\").Size}\n     * @private\n     */\n    this.renderSize_ = toSize(\n      options.grid.getTileSize(options.tile.tileCoord[0]),\n    );\n\n    /**\n     * @type {number}\n     */\n    this.bandCount = NaN;\n\n    const coords = new WebGLArrayBuffer(ARRAY_BUFFER, STATIC_DRAW);\n    coords.fromArray([\n      0, // P0\n      1,\n      1, // P1\n      1,\n      1, // P2\n      0,\n      0, // P3\n      0,\n    ]);\n    this.helper_.flushBufferData(coords);\n\n    /**\n     * @type {WebGLArrayBuffer}\n     */\n    this.coords = coords;\n\n    this.setTile(options.tile);\n  }\n\n  uploadTile() {\n    const helper = this.helper_;\n    const gl = helper.getGL();\n    const tile = this.tile;\n\n    this.textures.length = 0;\n\n    /**\n     * @type {import(\"../DataTile.js\").Data}\n     */\n    let data;\n\n    if (tile instanceof ImageTile || tile instanceof ReprojTile) {\n      data = tile.getImage();\n    } else {\n      data = tile.getData();\n    }\n\n    const image = asImageLike(data);\n    if (image) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n      this.bandCount = 4;\n      uploadImageTexture(gl, texture, image, tile.interpolate);\n      this.setReady();\n      return;\n    }\n\n    data = asArrayLike(data);\n\n    const sourceTileSize = /** @type {DataTile} */ (tile).getSize();\n    const pixelSize = [\n      sourceTileSize[0] + 2 * this.gutter_,\n      sourceTileSize[1] + 2 * this.gutter_,\n    ];\n    const isFloat = data instanceof Float32Array;\n    const pixelCount = pixelSize[0] * pixelSize[1];\n    const DataType = isFloat ? Float32Array : Uint8Array;\n    const bytesPerElement = DataType.BYTES_PER_ELEMENT;\n    const bytesPerRow = data.byteLength / pixelSize[1];\n\n    this.bandCount = Math.floor(bytesPerRow / bytesPerElement / pixelSize[0]);\n    const textureCount = Math.ceil(this.bandCount / 4);\n\n    if (textureCount === 1) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n      uploadDataTexture(\n        helper,\n        texture,\n        data,\n        pixelSize,\n        this.bandCount,\n        tile.interpolate,\n      );\n      this.setReady();\n      return;\n    }\n\n    const textureDataArrays = new Array(textureCount);\n    for (let textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n\n      const bandCount =\n        textureIndex < textureCount - 1 ? 4 : ((this.bandCount - 1) % 4) + 1;\n      textureDataArrays[textureIndex] = new DataType(pixelCount * bandCount);\n    }\n\n    let dataIndex = 0;\n    let rowOffset = 0;\n    const colCount = pixelSize[0] * this.bandCount;\n    for (let rowIndex = 0; rowIndex < pixelSize[1]; ++rowIndex) {\n      for (let colIndex = 0; colIndex < colCount; ++colIndex) {\n        const dataValue = data[rowOffset + colIndex];\n\n        const pixelIndex = Math.floor(dataIndex / this.bandCount);\n        const bandIndex = colIndex % this.bandCount;\n        const textureIndex = Math.floor(bandIndex / 4);\n        const textureData = textureDataArrays[textureIndex];\n        const bandCount = textureData.length / pixelCount;\n        const textureBandIndex = bandIndex % 4;\n        textureData[pixelIndex * bandCount + textureBandIndex] = dataValue;\n\n        ++dataIndex;\n      }\n      rowOffset += bytesPerRow / bytesPerElement;\n    }\n\n    for (let textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n      const texture = this.textures[textureIndex];\n      const textureData = textureDataArrays[textureIndex];\n      const bandCount = textureData.length / pixelCount;\n      uploadDataTexture(\n        helper,\n        texture,\n        textureData,\n        pixelSize,\n        bandCount,\n        tile.interpolate,\n      );\n    }\n\n    this.setReady();\n  }\n\n  disposeInternal() {\n    const gl = this.helper_.getGL();\n    this.helper_.deleteBuffer(this.coords);\n    for (let i = 0; i < this.textures.length; ++i) {\n      gl.deleteTexture(this.textures[i]);\n    }\n    this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n  }\n\n  /**\n   * @param {import(\"../DataTile.js\").ImageLike} image The image.\n   * @param {number} renderCol The column index (in rendered tile space).\n   * @param {number} renderRow The row index (in rendered tile space).\n   * @return {Uint8ClampedArray|null} The data.\n   * @private\n   */\n  getImagePixelData_(image, renderCol, renderRow) {\n    const gutter = this.gutter_;\n    const renderWidth = this.renderSize_[0];\n    const renderHeight = this.renderSize_[1];\n\n    if (!pixelContext) {\n      createPixelContext();\n    }\n    pixelContext.clearRect(0, 0, 1, 1);\n\n    const sourceWidth = image.width;\n    const sourceHeight = image.height;\n\n    const sourceWidthWithoutGutter = sourceWidth - 2 * gutter;\n    const sourceHeightWithoutGutter = sourceHeight - 2 * gutter;\n\n    const sourceCol =\n      gutter + Math.floor(sourceWidthWithoutGutter * (renderCol / renderWidth));\n\n    const sourceRow =\n      gutter +\n      Math.floor(sourceHeightWithoutGutter * (renderRow / renderHeight));\n\n    let data;\n    try {\n      pixelContext.drawImage(image, sourceCol, sourceRow, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      pixelContext = null;\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * @param {import(\"../DataTile.js\").ArrayLike} data The data.\n   * @param {import(\"../size.js\").Size} sourceSize The size.\n   * @param {number} renderCol The column index (in rendered tile space).\n   * @param {number} renderRow The row index (in rendered tile space).\n   * @return {import(\"../DataTile.js\").ArrayLike|null} The data.\n   * @private\n   */\n  getArrayPixelData_(data, sourceSize, renderCol, renderRow) {\n    const gutter = this.gutter_;\n    const renderWidth = this.renderSize_[0];\n    const renderHeight = this.renderSize_[1];\n\n    const sourceWidthWithoutGutter = sourceSize[0];\n    const sourceHeightWithoutGutter = sourceSize[1];\n    const sourceWidth = sourceWidthWithoutGutter + 2 * gutter;\n    const sourceHeight = sourceHeightWithoutGutter + 2 * gutter;\n\n    const sourceCol =\n      gutter + Math.floor(sourceWidthWithoutGutter * (renderCol / renderWidth));\n\n    const sourceRow =\n      gutter +\n      Math.floor(sourceHeightWithoutGutter * (renderRow / renderHeight));\n\n    if (data instanceof DataView) {\n      const bytesPerPixel = data.byteLength / (sourceWidth * sourceHeight);\n      const offset = bytesPerPixel * (sourceRow * sourceWidth + sourceCol);\n      const buffer = data.buffer.slice(offset, offset + bytesPerPixel);\n      return new DataView(buffer);\n    }\n\n    const offset = this.bandCount * (sourceRow * sourceWidth + sourceCol);\n    return data.slice(offset, offset + this.bandCount);\n  }\n\n  /**\n   * Get data for a pixel.  If the tile is not loaded, null is returned.\n   * @param {number} renderCol The column index (in rendered tile space).\n   * @param {number} renderRow The row index (in rendered tile space).\n   * @return {import(\"../DataTile.js\").ArrayLike|null} The data.\n   */\n  getPixelData(renderCol, renderRow) {\n    if (!this.loaded) {\n      return null;\n    }\n\n    if (this.tile instanceof DataTile) {\n      const data = this.tile.getData();\n      const arrayData = asArrayLike(data);\n      if (arrayData) {\n        const sourceSize = this.tile.getSize();\n        return this.getArrayPixelData_(\n          arrayData,\n          sourceSize,\n          renderCol,\n          renderRow,\n        );\n      }\n      return this.getImagePixelData_(asImageLike(data), renderCol, renderRow);\n    }\n\n    return this.getImagePixelData_(this.tile.getImage(), renderCol, renderRow);\n  }\n}\n\nexport default TileTexture;\n","/**\n * @module ol/webgl/PaletteTexture\n */\n\nclass PaletteTexture {\n  /**\n   * @param {string} name The name of the texture.\n   * @param {Uint8Array} data The texture data.\n   */\n  constructor(name, data) {\n    this.name = name;\n    this.data = data;\n\n    /**\n     * @type {WebGLTexture|null}\n     * @private\n     */\n    this.texture_ = null;\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl Rendering context.\n   * @return {WebGLTexture} The texture.\n   */\n  getTexture(gl) {\n    if (!this.texture_) {\n      const texture = gl.createTexture();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,\n        gl.RGBA,\n        this.data.length / 4,\n        1,\n        0,\n        gl.RGBA,\n        gl.UNSIGNED_BYTE,\n        this.data,\n      );\n      this.texture_ = texture;\n    }\n    return this.texture_;\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl Rendering context.\n   */\n  delete(gl) {\n    if (this.texture_) {\n      gl.deleteTexture(this.texture_);\n    }\n    this.texture_ = null;\n  }\n}\n\nexport default PaletteTexture;\n","/**\n * @module ol/webgl/ContextEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  LOST: 'webglcontextlost',\n  RESTORED: 'webglcontextrestored',\n};\n","/**\n * @module ol/webgl/PostProcessingPass\n */\n\nimport {getUid} from '../util.js';\n\nconst DEFAULT_VERTEX_SHADER = `\n  precision mediump float;\n  \n  attribute vec2 a_position;\n  varying vec2 v_texCoord;\n  varying vec2 v_screenCoord;\n  \n  uniform vec2 u_screenSize;\n   \n  void main() {\n    v_texCoord = a_position * 0.5 + 0.5;\n    v_screenCoord = v_texCoord * u_screenSize;\n    gl_Position = vec4(a_position, 0.0, 1.0);\n  }\n`;\n\nconst DEFAULT_FRAGMENT_SHADER = `\n  precision mediump float;\n   \n  uniform sampler2D u_image;\n  uniform float u_opacity;\n   \n  varying vec2 v_texCoord;\n   \n  void main() {\n    gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n  }\n`;\n\n/**\n * @typedef {Object} Options\n * @property {WebGLRenderingContext} webGlContext WebGL context; mandatory.\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"./Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {import(\"./Helper\").UniformValue} value Value\n * @property {WebGLUniformLocation} location Location\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n\n/**\n * @classdesc\n * This class is used to define Post Processing passes with custom shaders and uniforms.\n * This is used internally by {@link module:ol/webgl/Helper~WebGLHelper}.\n *\n * Please note that the final output on the DOM canvas is expected to have premultiplied alpha, which means that\n * a pixel which is 100% red with an opacity of 50% must have a color of (r=0.5, g=0, b=0, a=0.5).\n * Failing to provide pixel colors with premultiplied alpha will result in render anomalies.\n *\n * The default post-processing pass does *not* multiply color values with alpha value, it expects color values to be\n * premultiplied.\n *\n * Default shaders are shown hereafter:\n *\n * * Vertex shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   attribute vec2 a_position;\n *   varying vec2 v_texCoord;\n *   varying vec2 v_screenCoord;\n *\n *   uniform vec2 u_screenSize;\n *\n *   void main() {\n *     v_texCoord = a_position * 0.5 + 0.5;\n *     v_screenCoord = v_texCoord * u_screenSize;\n *     gl_Position = vec4(a_position, 0.0, 1.0);\n *   }\n *   ```\n *\n * * Fragment shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   uniform sampler2D u_image;\n *   uniform float u_opacity;\n *\n *   varying vec2 v_texCoord;\n *\n *   void main() {\n *     gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n *   }\n *   ```\n */\nclass WebGLPostProcessingPass {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    this.gl_ = options.webGlContext;\n    const gl = this.gl_;\n\n    this.scaleRatio_ = options.scaleRatio || 1;\n\n    this.renderTargetTexture_ = gl.createTexture();\n    this.renderTargetTextureSize_ = null;\n\n    this.frameBuffer_ = gl.createFramebuffer();\n    this.depthBuffer_ = gl.createRenderbuffer();\n\n    // compile the program for the frame buffer\n    // TODO: make compilation errors show up\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(\n      vertexShader,\n      options.vertexShader || DEFAULT_VERTEX_SHADER,\n    );\n    gl.compileShader(vertexShader);\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(\n      fragmentShader,\n      options.fragmentShader || DEFAULT_FRAGMENT_SHADER,\n    );\n    gl.compileShader(fragmentShader);\n    this.renderTargetProgram_ = gl.createProgram();\n    gl.attachShader(this.renderTargetProgram_, vertexShader);\n    gl.attachShader(this.renderTargetProgram_, fragmentShader);\n    gl.linkProgram(this.renderTargetProgram_);\n\n    // bind the vertices buffer for the frame buffer\n    this.renderTargetVerticesBuffer_ = gl.createBuffer();\n    const verticesArray = [-1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1];\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n    gl.bufferData(\n      gl.ARRAY_BUFFER,\n      new Float32Array(verticesArray),\n      gl.STATIC_DRAW,\n    );\n\n    this.renderTargetAttribLocation_ = gl.getAttribLocation(\n      this.renderTargetProgram_,\n      'a_position',\n    );\n    this.renderTargetUniformLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_screenSize',\n    );\n    this.renderTargetOpacityLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_opacity',\n    );\n    this.renderTargetTextureLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_image',\n    );\n\n    /**\n     * Holds info about custom uniforms used in the post processing pass\n     * @type {Array<UniformInternalDescription>}\n     * @private\n     */\n    this.uniforms_ = [];\n    options.uniforms &&\n      Object.keys(options.uniforms).forEach((name) => {\n        this.uniforms_.push({\n          value: options.uniforms[name],\n          location: gl.getUniformLocation(this.renderTargetProgram_, name),\n        });\n      });\n  }\n\n  /**\n   * Get the WebGL rendering context\n   * @return {WebGLRenderingContext} The rendering context.\n   */\n  getGL() {\n    return this.gl_;\n  }\n\n  /**\n   * Initialize the render target texture of the post process, make sure it is at the\n   * right size and bind it as a render target for the next draw calls.\n   * The last step to be initialized will be the one where the primitives are rendered.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   */\n  init(frameState) {\n    const gl = this.getGL();\n    const textureSize = [\n      gl.drawingBufferWidth * this.scaleRatio_,\n      gl.drawingBufferHeight * this.scaleRatio_,\n    ];\n\n    // rendering goes to my buffer\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.getFrameBuffer());\n    gl.bindRenderbuffer(gl.RENDERBUFFER, this.getDepthBuffer());\n    gl.viewport(0, 0, textureSize[0], textureSize[1]);\n\n    // if size has changed: adjust canvas & render target texture\n    if (\n      !this.renderTargetTextureSize_ ||\n      this.renderTargetTextureSize_[0] !== textureSize[0] ||\n      this.renderTargetTextureSize_[1] !== textureSize[1]\n    ) {\n      this.renderTargetTextureSize_ = textureSize;\n\n      // create a new texture\n      const level = 0;\n      const internalFormat = gl.RGBA;\n      const border = 0;\n      const format = gl.RGBA;\n      const type = gl.UNSIGNED_BYTE;\n      const data = null;\n      gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        level,\n        internalFormat,\n        textureSize[0],\n        textureSize[1],\n        border,\n        format,\n        type,\n        data,\n      );\n\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n      // bind the texture to the framebuffer\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        this.renderTargetTexture_,\n        0,\n      );\n\n      gl.renderbufferStorage(\n        gl.RENDERBUFFER,\n        gl.DEPTH_COMPONENT16,\n        textureSize[0],\n        textureSize[1],\n      );\n      gl.framebufferRenderbuffer(\n        gl.FRAMEBUFFER,\n        gl.DEPTH_ATTACHMENT,\n        gl.RENDERBUFFER,\n        this.depthBuffer_,\n      );\n    }\n  }\n\n  /**\n   * Render to the next postprocessing pass (or to the canvas if final pass).\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {WebGLPostProcessingPass} [nextPass] Next pass, optional\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [preCompose] Called before composing.\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [postCompose] Called before composing.\n   */\n  apply(frameState, nextPass, preCompose, postCompose) {\n    const gl = this.getGL();\n    const size = frameState.size;\n\n    gl.bindFramebuffer(\n      gl.FRAMEBUFFER,\n      nextPass ? nextPass.getFrameBuffer() : null,\n    );\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n\n    if (!nextPass) {\n      // clear the canvas if we are the first to render to it\n      // and preserveDrawingBuffer is true\n      const canvasId = getUid(gl.canvas);\n      if (!frameState.renderTargets[canvasId]) {\n        const attributes = gl.getContextAttributes();\n        if (attributes && attributes.preserveDrawingBuffer) {\n          gl.clearColor(0.0, 0.0, 0.0, 0.0);\n          gl.clearDepth(1.0);\n          gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n\n        frameState.renderTargets[canvasId] = true;\n      }\n    }\n\n    gl.disable(gl.DEPTH_TEST);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n\n    gl.useProgram(this.renderTargetProgram_);\n    gl.enableVertexAttribArray(this.renderTargetAttribLocation_);\n    gl.vertexAttribPointer(\n      this.renderTargetAttribLocation_,\n      2,\n      gl.FLOAT,\n      false,\n      0,\n      0,\n    );\n    gl.uniform2f(this.renderTargetUniformLocation_, size[0], size[1]);\n    gl.uniform1i(this.renderTargetTextureLocation_, 0);\n\n    const opacity = frameState.layerStatesArray[frameState.layerIndex].opacity;\n    gl.uniform1f(this.renderTargetOpacityLocation_, opacity);\n\n    this.applyUniforms(frameState);\n\n    if (preCompose) {\n      preCompose(gl, frameState);\n    }\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    if (postCompose) {\n      postCompose(gl, frameState);\n    }\n  }\n\n  /**\n   * @return {WebGLFramebuffer} Frame buffer\n   */\n  getFrameBuffer() {\n    return this.frameBuffer_;\n  }\n\n  /**\n   * @return {WebGLRenderbuffer} Depth buffer\n   */\n  getDepthBuffer() {\n    return this.depthBuffer_;\n  }\n\n  /**\n   * Sets the custom uniforms based on what was given in the constructor.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  applyUniforms(frameState) {\n    const gl = this.getGL();\n\n    let value;\n    let textureSlot = 1;\n    this.uniforms_.forEach(function (uniform) {\n      value =\n        typeof uniform.value === 'function'\n          ? uniform.value(frameState)\n          : uniform.value;\n\n      // apply value based on type\n      if (value instanceof HTMLCanvasElement || value instanceof ImageData) {\n        // create a texture & put data\n        if (!uniform.texture) {\n          uniform.texture = gl.createTexture();\n        }\n        gl.activeTexture(gl[`TEXTURE${textureSlot}`]);\n        gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        if (value instanceof ImageData) {\n          gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            gl.RGBA,\n            value.width,\n            value.height,\n            0,\n            gl.UNSIGNED_BYTE,\n            new Uint8Array(value.data),\n          );\n        } else {\n          gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            value,\n          );\n        }\n\n        // fill texture slots\n        gl.uniform1i(uniform.location, textureSlot++);\n      } else if (Array.isArray(value)) {\n        switch (value.length) {\n          case 2:\n            gl.uniform2f(uniform.location, value[0], value[1]);\n            return;\n          case 3:\n            gl.uniform3f(uniform.location, value[0], value[1], value[2]);\n            return;\n          case 4:\n            gl.uniform4f(\n              uniform.location,\n              value[0],\n              value[1],\n              value[2],\n              value[3],\n            );\n            return;\n          default:\n            return;\n        }\n      } else if (typeof value === 'number') {\n        gl.uniform1f(uniform.location, value);\n      }\n    });\n  }\n}\n\nexport default WebGLPostProcessingPass;\n","/**\n * @module ol/webgl/Helper\n */\nimport ContextEventType from '../webgl/ContextEventType.js';\nimport Disposable from '../Disposable.js';\nimport WebGLPostProcessingPass from './PostProcessingPass.js';\nimport {\n  FLOAT,\n  UNSIGNED_BYTE,\n  UNSIGNED_INT,\n  UNSIGNED_SHORT,\n  getContext,\n} from '../webgl.js';\nimport {clear} from '../obj.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../transform.js';\nimport {create, fromTransform} from '../vec/mat4.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {Object} BufferCacheEntry\n * @property {import(\"./Buffer.js\").default} buffer Buffer.\n * @property {WebGLBuffer} webGlBuffer WebGlBuffer.\n */\n\n/**\n * Shader types, either `FRAGMENT_SHADER` or `VERTEX_SHADER`.\n * @enum {number}\n */\nexport const ShaderType = {\n  FRAGMENT_SHADER: 0x8b30,\n  VERTEX_SHADER: 0x8b31,\n};\n\n/**\n * Names of uniforms made available to all shaders.\n * Please note: changing these *will* break custom shaders!\n * @enum {string}\n */\nexport const DefaultUniform = {\n  PROJECTION_MATRIX: 'u_projectionMatrix',\n  SCREEN_TO_WORLD_MATRIX: 'u_screenToWorldMatrix',\n  TIME: 'u_time',\n  ZOOM: 'u_zoom',\n  RESOLUTION: 'u_resolution',\n  ROTATION: 'u_rotation',\n  VIEWPORT_SIZE_PX: 'u_viewportSizePx',\n  PIXEL_RATIO: 'u_pixelRatio',\n  HIT_DETECTION: 'u_hitDetection',\n};\n\n/**\n * Attribute types, either `UNSIGNED_BYTE`, `UNSIGNED_SHORT`, `UNSIGNED_INT` or `FLOAT`\n * Note: an attribute stored in a `Float32Array` should be of type `FLOAT`.\n * @enum {number}\n */\nexport const AttributeType = {\n  UNSIGNED_BYTE: UNSIGNED_BYTE,\n  UNSIGNED_SHORT: UNSIGNED_SHORT,\n  UNSIGNED_INT: UNSIGNED_INT,\n  FLOAT: FLOAT,\n};\n\n/**\n * Description of an attribute in a buffer\n * @typedef {Object} AttributeDescription\n * @property {string} name Attribute name to use in shaders\n * @property {number} size Number of components per attributes\n * @property {AttributeType} [type] Attribute type, i.e. number of bytes used to store the value. This is\n * determined by the class of typed array which the buffer uses (eg. `Float32Array` for a `FLOAT` attribute).\n * Default is `FLOAT`.\n */\n\n/**\n * @typedef {number|Array<number>|HTMLCanvasElement|HTMLImageElement|ImageData|WebGLTexture|import(\"../transform\").Transform} UniformLiteralValue\n */\n\n/**\n * Uniform value can be a number, array of numbers (2 to 4), canvas element or a callback returning\n * one of the previous types.\n * @typedef {UniformLiteralValue|function(import(\"../Map.js\").FrameState):UniformLiteralValue} UniformValue\n */\n\n/**\n * @typedef {Object} PostProcessesOptions\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas which will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} Options\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions; property names must match the uniform\n * names in the provided or default shaders.\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\n * @property {string} [canvasCacheKey] The cache key for the canvas.\n */\n\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {string} name Name\n * @property {UniformValue} [value] Value\n * @property {UniformValue} [prevValue] The previous value.\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n\n/**\n * @typedef {Object} CanvasCacheItem\n * @property {WebGLRenderingContext} context The context of this canvas.\n * @property {number} users The count of users of this canvas.\n */\n\n/**\n * @type {Object<string,CanvasCacheItem>}\n */\nconst canvasCache = {};\n\n/**\n * @param {string} key The cache key for the canvas.\n * @return {string} The shared cache key.\n */\nfunction getSharedCanvasCacheKey(key) {\n  return 'shared/' + key;\n}\n\nlet uniqueCanvasCacheKeyCount = 0;\n\n/**\n * @return {string} The unique cache key.\n */\nfunction getUniqueCanvasCacheKey() {\n  const key = 'unique/' + uniqueCanvasCacheKeyCount;\n  uniqueCanvasCacheKeyCount += 1;\n  return key;\n}\n\n/**\n * @param {string} key The cache key for the canvas.\n * @return {WebGLRenderingContext} The canvas.\n */\nfunction getOrCreateContext(key) {\n  let cacheItem = canvasCache[key];\n  if (!cacheItem) {\n    const canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    canvas.style.position = 'absolute';\n    canvas.style.left = '0';\n    const context = getContext(canvas);\n    cacheItem = {users: 0, context};\n    canvasCache[key] = cacheItem;\n  }\n\n  cacheItem.users += 1;\n  return cacheItem.context;\n}\n\n/**\n * @param {string} key The cache key for the canvas.\n */\nfunction releaseCanvas(key) {\n  const cacheItem = canvasCache[key];\n  if (!cacheItem) {\n    return;\n  }\n\n  cacheItem.users -= 1;\n  if (cacheItem.users > 0) {\n    return;\n  }\n\n  const gl = cacheItem.context;\n  const extension = gl.getExtension('WEBGL_lose_context');\n  if (extension) {\n    extension.loseContext();\n  }\n  const canvas = gl.canvas;\n  canvas.width = 1;\n  canvas.height = 1;\n\n  delete canvasCache[key];\n}\n\n/**\n * @classdesc\n * This class is intended to provide low-level functions related to WebGL rendering, so that accessing\n * directly the WebGL API should not be required anymore.\n *\n * Several operations are handled by the `WebGLHelper` class:\n *\n * ### Define custom shaders and uniforms\n *\n *   *Shaders* are low-level programs executed on the GPU and written in GLSL. There are two types of shaders:\n *\n *   Vertex shaders are used to manipulate the position and attribute of *vertices* of rendered primitives (ie. corners of a square).\n *   Outputs are:\n *\n *   * `gl_Position`: position of the vertex in screen space\n *\n *   * Varyings usually prefixed with `v_` are passed on to the fragment shader\n *\n *   Fragment shaders are used to control the actual color of the pixels drawn on screen. Their only output is `gl_FragColor`.\n *\n *   Both shaders can take *uniforms* or *attributes* as input. Attributes are explained later. Uniforms are common, read-only values that\n *   can be changed at every frame and can be of type float, arrays of float or images.\n *\n *   Shaders must be compiled and assembled into a program like so:\n *   ```js\n *   // here we simply create two shaders and assemble them in a program which is then used\n *   // for subsequent rendering calls; note how a frameState is required to set up a program,\n *   // as several default uniforms are computed from it (projection matrix, zoom level, etc.)\n *   const vertexShader = new WebGLVertex(VERTEX_SHADER);\n *   const fragmentShader = new WebGLFragment(FRAGMENT_SHADER);\n *   const program = this.context.getProgram(fragmentShader, vertexShader);\n *   helper.useProgram(this.program, frameState);\n *   ```\n *\n *   Uniforms are defined using the `uniforms` option and can either be explicit values or callbacks taking the frame state as argument.\n *   You can also change their value along the way like so:\n *   ```js\n *   helper.setUniformFloatValue('u_value', valueAsNumber);\n *   ```\n *\n * ### Defining post processing passes\n *\n *   *Post processing* describes the act of rendering primitives to a texture, and then rendering this texture to the final canvas\n *   while applying special effects in screen space.\n *   Typical uses are: blurring, color manipulation, depth of field, filtering...\n *\n *   The `WebGLHelper` class offers the possibility to define post processes at creation time using the `postProcesses` option.\n *   A post process step accepts the following options:\n *\n *   * `fragmentShader` and `vertexShader`: text literals in GLSL language that will be compiled and used in the post processing step.\n *   * `uniforms`: uniforms can be defined for the post processing steps just like for the main render.\n *   * `scaleRatio`: allows using an intermediate texture smaller or higher than the final canvas in the post processing step.\n *     This is typically used in blur steps to reduce the performance overhead by using an already downsampled texture as input.\n *\n *   The {@link module:ol/webgl/PostProcessingPass~WebGLPostProcessingPass} class is used internally, refer to its documentation for more info.\n *\n * ### Binding WebGL buffers and flushing data into them\n *\n *   Data that must be passed to the GPU has to be transferred using {@link module:ol/webgl/Buffer~WebGLArrayBuffer} objects.\n *   A buffer has to be created only once, but must be bound every time the buffer content will be used for rendering.\n *   This is done using {@link bindBuffer}.\n *   When the buffer's array content has changed, the new data has to be flushed to the GPU memory; this is done using\n *   {@link flushBufferData}. Note: this operation is expensive and should be done as infrequently as possible.\n *\n *   When binding an array buffer, a `target` parameter must be given: it should be either {@link module:ol/webgl.ARRAY_BUFFER}\n *   (if the buffer contains vertices data) or {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER} (if the buffer contains indices data).\n *\n *   Examples below:\n *   ```js\n *   // at initialization phase\n *   const verticesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\n *   const indicesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\n *\n *   // when array values have changed\n *   helper.flushBufferData(ARRAY_BUFFER, this.verticesBuffer);\n *   helper.flushBufferData(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n *\n *   // at rendering phase\n *   helper.bindBuffer(ARRAY_BUFFER, this.verticesBuffer);\n *   helper.bindBuffer(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n *   ```\n *\n * ### Specifying attributes\n *\n *   The GPU only receives the data as arrays of numbers. These numbers must be handled differently depending on what it describes (position, texture coordinate...).\n *   Attributes are used to specify these uses. Specify the attribute names with\n *   {@link module:ol/webgl/Helper~WebGLHelper#enableAttributes} (see code snippet below).\n *\n *   Please note that you will have to specify the type and offset of the attributes in the data array. You can refer to the documentation of [WebGLRenderingContext.vertexAttribPointer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer) for more explanation.\n *   ```js\n *   // here we indicate that the data array has the following structure:\n *   // [posX, posY, offsetX, offsetY, texCoordU, texCoordV, posX, posY, ...]\n *   helper.enableAttributes([\n *     {\n *        name: 'a_position',\n *        size: 2\n *     },\n *     {\n *       name: 'a_offset',\n *       size: 2\n *     },\n *     {\n *       name: 'a_texCoord',\n *       size: 2\n *     }\n *   ])\n *   ```\n *\n * ### Rendering primitives\n *\n *   Once all the steps above have been achieved, rendering primitives to the screen is done using {@link prepareDraw}, {@link drawElements} and {@link finalizeDraw}.\n *   ```js\n *   // frame preparation step\n *   helper.prepareDraw(frameState);\n *\n *   // call this for every data array that has to be rendered on screen\n *   helper.drawElements(0, this.indicesBuffer.getArray().length);\n *\n *   // finalize the rendering by applying post processes\n *   helper.finalizeDraw(frameState);\n *   ```\n *\n * For an example usage of this class, refer to {@link module:ol/renderer/webgl/PointsLayer~WebGLPointsLayerRenderer}.\n */\nclass WebGLHelper extends Disposable {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n    options = options || {};\n\n    /** @private */\n    this.boundHandleWebGLContextLost_ = this.handleWebGLContextLost.bind(this);\n\n    /** @private */\n    this.boundHandleWebGLContextRestored_ =\n      this.handleWebGLContextRestored.bind(this);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.canvasCacheKey_ = options.canvasCacheKey\n      ? getSharedCanvasCacheKey(options.canvasCacheKey)\n      : getUniqueCanvasCacheKey();\n\n    /**\n     * @private\n     * @type {WebGLRenderingContext}\n     */\n    this.gl_ = getOrCreateContext(this.canvasCacheKey_);\n\n    /**\n     * @private\n     * @type {!Object<string, BufferCacheEntry>}\n     */\n    this.bufferCache_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Object>}\n     */\n    this.extensionCache_ = {};\n\n    /**\n     * @private\n     * @type {WebGLProgram}\n     */\n    this.currentProgram_ = null;\n\n    /**\n     * @private\n     * @type boolean\n     */\n    this.needsToBeRecreated_ = false;\n\n    const canvas = this.gl_.canvas;\n\n    canvas.addEventListener(\n      ContextEventType.LOST,\n      this.boundHandleWebGLContextLost_,\n    );\n    canvas.addEventListener(\n      ContextEventType.RESTORED,\n      this.boundHandleWebGLContextRestored_,\n    );\n\n    /**\n     * @private\n     * @type {import(\"../transform.js\").Transform}\n     */\n    this.offsetRotateMatrix_ = createTransform();\n\n    /**\n     * @private\n     * @type {import(\"../transform.js\").Transform}\n     */\n    this.offsetScaleMatrix_ = createTransform();\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.tmpMat4_ = create();\n\n    /**\n     * @private\n     * @type {Object<string, Object<string, WebGLUniformLocation>>}\n     */\n    this.uniformLocationsByProgram_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Object<string, number>>}\n     */\n    this.attribLocationsByProgram_ = {};\n\n    /**\n     * Holds info about custom uniforms used in the post processing pass.\n     * If the uniform is a texture, the WebGL Texture object will be stored here.\n     * @type {Array<UniformInternalDescription>}\n     * @private\n     */\n    this.uniforms_ = [];\n    if (options.uniforms) {\n      this.setUniforms(options.uniforms);\n    }\n\n    /**\n     * An array of PostProcessingPass objects is kept in this variable, built from the steps provided in the\n     * options. If no post process was given, a default one is used (so as not to have to make an exception to\n     * the frame buffer logic).\n     * @type {Array<WebGLPostProcessingPass>}\n     * @private\n     */\n    this.postProcessPasses_ = options.postProcesses\n      ? options.postProcesses.map(\n          (options) =>\n            new WebGLPostProcessingPass({\n              webGlContext: this.gl_,\n              scaleRatio: options.scaleRatio,\n              vertexShader: options.vertexShader,\n              fragmentShader: options.fragmentShader,\n              uniforms: options.uniforms,\n            }),\n        )\n      : [new WebGLPostProcessingPass({webGlContext: this.gl_})];\n\n    /**\n     * @type {string|null}\n     * @private\n     */\n    this.shaderCompileErrors_ = null;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.startTime_ = Date.now();\n  }\n\n  /**\n   * @param {Object<string, UniformValue>} uniforms Uniform definitions.\n   */\n  setUniforms(uniforms) {\n    this.uniforms_ = [];\n    this.addUniforms(uniforms);\n  }\n\n  /**\n   * @param {Object<string, UniformValue>} uniforms Uniform definitions.\n   */\n  addUniforms(uniforms) {\n    for (const name in uniforms) {\n      this.uniforms_.push({\n        name: name,\n        value: uniforms[name],\n      });\n    }\n  }\n\n  /**\n   * @param {string} canvasCacheKey The canvas cache key.\n   * @return {boolean} The provided key matches the one this helper was constructed with.\n   */\n  canvasCacheKeyMatches(canvasCacheKey) {\n    return this.canvasCacheKey_ === getSharedCanvasCacheKey(canvasCacheKey);\n  }\n\n  /**\n   * Get a WebGL extension.  If the extension is not supported, null is returned.\n   * Extensions are cached after they are enabled for the first time.\n   * @param {string} name The extension name.\n   * @return {Object|null} The extension or null if not supported.\n   */\n  getExtension(name) {\n    if (name in this.extensionCache_) {\n      return this.extensionCache_[name];\n    }\n    const extension = this.gl_.getExtension(name);\n    this.extensionCache_[name] = extension;\n    return extension;\n  }\n\n  /**\n   * Just bind the buffer if it's in the cache. Otherwise create\n   * the WebGL buffer, bind it, populate it, and add an entry to\n   * the cache.\n   * @param {import(\"./Buffer\").default} buffer Buffer.\n   */\n  bindBuffer(buffer) {\n    const gl = this.gl_;\n    const bufferKey = getUid(buffer);\n    let bufferCache = this.bufferCache_[bufferKey];\n    if (!bufferCache) {\n      const webGlBuffer = gl.createBuffer();\n      bufferCache = {\n        buffer: buffer,\n        webGlBuffer: webGlBuffer,\n      };\n      this.bufferCache_[bufferKey] = bufferCache;\n    }\n    gl.bindBuffer(buffer.getType(), bufferCache.webGlBuffer);\n  }\n\n  /**\n   * Update the data contained in the buffer array; this is required for the\n   * new data to be rendered\n   * @param {import(\"./Buffer\").default} buffer Buffer.\n   */\n  flushBufferData(buffer) {\n    const gl = this.gl_;\n    this.bindBuffer(buffer);\n    gl.bufferData(buffer.getType(), buffer.getArray(), buffer.getUsage());\n  }\n\n  /**\n   * @param {import(\"./Buffer.js\").default} buf Buffer.\n   */\n  deleteBuffer(buf) {\n    const gl = this.gl_;\n    const bufferKey = getUid(buf);\n    const bufferCacheEntry = this.bufferCache_[bufferKey];\n    if (bufferCacheEntry && !gl.isContextLost()) {\n      gl.deleteBuffer(bufferCacheEntry.webGlBuffer);\n    }\n    delete this.bufferCache_[bufferKey];\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    const canvas = this.gl_.canvas;\n    canvas.removeEventListener(\n      ContextEventType.LOST,\n      this.boundHandleWebGLContextLost_,\n    );\n    canvas.removeEventListener(\n      ContextEventType.RESTORED,\n      this.boundHandleWebGLContextRestored_,\n    );\n\n    releaseCanvas(this.canvasCacheKey_);\n\n    delete this.gl_;\n  }\n\n  /**\n   * Clear the buffer & set the viewport to draw.\n   * Post process passes will be initialized here, the first one being bound as a render target for\n   * subsequent draw calls.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {boolean} [disableAlphaBlend] If true, no alpha blending will happen.\n   * @param {boolean} [enableDepth] If true, enables depth testing.\n   */\n  prepareDraw(frameState, disableAlphaBlend, enableDepth) {\n    const gl = this.gl_;\n    const canvas = this.getCanvas();\n    const size = frameState.size;\n    const pixelRatio = frameState.pixelRatio;\n\n    if (\n      canvas.width !== size[0] * pixelRatio ||\n      canvas.height !== size[1] * pixelRatio\n    ) {\n      canvas.width = size[0] * pixelRatio;\n      canvas.height = size[1] * pixelRatio;\n      canvas.style.width = size[0] + 'px';\n      canvas.style.height = size[1] + 'px';\n    }\n\n    // loop backwards in post processes list\n    for (let i = this.postProcessPasses_.length - 1; i >= 0; i--) {\n      this.postProcessPasses_[i].init(frameState);\n    }\n\n    gl.bindTexture(gl.TEXTURE_2D, null);\n\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    gl.depthRange(0.0, 1.0);\n    gl.clearDepth(1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\n    if (enableDepth) {\n      gl.enable(gl.DEPTH_TEST);\n      gl.depthFunc(gl.LEQUAL);\n    } else {\n      gl.disable(gl.DEPTH_TEST);\n    }\n  }\n\n  /**\n   * Prepare a program to use a texture.\n   * @param {WebGLTexture} texture The texture.\n   * @param {number} slot The texture slot.\n   * @param {string} uniformName The corresponding uniform name.\n   */\n  bindTexture(texture, slot, uniformName) {\n    const gl = this.gl_;\n    gl.activeTexture(gl.TEXTURE0 + slot);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.uniform1i(this.getUniformLocation(uniformName), slot);\n  }\n\n  /**\n   * Clear the render target & bind it for future draw operations.\n   * This is similar to `prepareDraw`, only post processes will not be applied.\n   * Note: the whole viewport will be drawn to the render target, regardless of its size.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {import(\"./RenderTarget.js\").default} renderTarget Render target to draw to\n   * @param {boolean} [disableAlphaBlend] If true, no alpha blending will happen.\n   * @param {boolean} [enableDepth] If true, enables depth testing.\n   */\n  prepareDrawToRenderTarget(\n    frameState,\n    renderTarget,\n    disableAlphaBlend,\n    enableDepth,\n  ) {\n    const gl = this.gl_;\n    const size = renderTarget.getSize();\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, renderTarget.getFramebuffer());\n    gl.bindRenderbuffer(gl.RENDERBUFFER, renderTarget.getDepthbuffer());\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.bindTexture(gl.TEXTURE_2D, renderTarget.getTexture());\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    gl.depthRange(0.0, 1.0);\n    gl.clearDepth(1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\n    if (enableDepth) {\n      gl.enable(gl.DEPTH_TEST);\n      gl.depthFunc(gl.LEQUAL);\n    } else {\n      gl.disable(gl.DEPTH_TEST);\n    }\n  }\n\n  /**\n   * Execute a draw call based on the currently bound program, texture, buffers, attributes.\n   * @param {number} start Start index.\n   * @param {number} end End index.\n   */\n  drawElements(start, end) {\n    const gl = this.gl_;\n    this.getExtension('OES_element_index_uint');\n\n    const elementType = gl.UNSIGNED_INT;\n    const elementSize = 4;\n\n    const numItems = end - start;\n    const offsetInBytes = start * elementSize;\n    gl.drawElements(gl.TRIANGLES, numItems, elementType, offsetInBytes);\n  }\n\n  /**\n   * Apply the successive post process passes which will eventually render to the actual canvas.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [preCompose] Called before composing.\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [postCompose] Called before composing.\n   */\n  finalizeDraw(frameState, preCompose, postCompose) {\n    // apply post processes using the next one as target\n    for (let i = 0, ii = this.postProcessPasses_.length; i < ii; i++) {\n      if (i === ii - 1) {\n        this.postProcessPasses_[i].apply(\n          frameState,\n          null,\n          preCompose,\n          postCompose,\n        );\n      } else {\n        this.postProcessPasses_[i].apply(\n          frameState,\n          this.postProcessPasses_[i + 1],\n        );\n      }\n    }\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Canvas.\n   */\n  getCanvas() {\n    return /** @type {HTMLCanvasElement} */ (this.gl_.canvas);\n  }\n\n  /**\n   * Get the WebGL rendering context\n   * @return {WebGLRenderingContext} The rendering context.\n   */\n  getGL() {\n    return this.gl_;\n  }\n\n  /**\n   * Sets the default matrix uniforms for a given frame state. This is called internally in `prepareDraw`.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  applyFrameState(frameState) {\n    const size = frameState.size;\n    const rotation = frameState.viewState.rotation;\n    const pixelRatio = frameState.pixelRatio;\n\n    this.setUniformFloatValue(\n      DefaultUniform.TIME,\n      (Date.now() - this.startTime_) * 0.001,\n    );\n    this.setUniformFloatValue(DefaultUniform.ZOOM, frameState.viewState.zoom);\n    this.setUniformFloatValue(\n      DefaultUniform.RESOLUTION,\n      frameState.viewState.resolution,\n    );\n    this.setUniformFloatValue(DefaultUniform.PIXEL_RATIO, pixelRatio);\n    this.setUniformFloatVec2(DefaultUniform.VIEWPORT_SIZE_PX, [\n      size[0],\n      size[1],\n    ]);\n    this.setUniformFloatValue(DefaultUniform.ROTATION, rotation);\n  }\n\n  /**\n   * Sets the `u_hitDetection` uniform.\n   * @param {boolean} enabled Whether to enable the hit detection code path\n   */\n  applyHitDetectionUniform(enabled) {\n    const loc = this.getUniformLocation(DefaultUniform.HIT_DETECTION);\n    this.getGL().uniform1i(loc, enabled ? 1 : 0);\n\n    // hit detection uses a fixed pixel ratio\n    if (enabled) {\n      this.setUniformFloatValue(DefaultUniform.PIXEL_RATIO, 0.5);\n    }\n  }\n\n  /**\n   * Sets the custom uniforms based on what was given in the constructor. This is called internally in `prepareDraw`.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  applyUniforms(frameState) {\n    const gl = this.gl_;\n\n    let value;\n    let textureSlot = 0;\n    this.uniforms_.forEach((uniform) => {\n      value =\n        typeof uniform.value === 'function'\n          ? uniform.value(frameState)\n          : uniform.value;\n\n      // apply value based on type\n      if (\n        value instanceof HTMLCanvasElement ||\n        value instanceof HTMLImageElement ||\n        value instanceof ImageData ||\n        value instanceof WebGLTexture\n      ) {\n        // create a texture & put data\n        if (value instanceof WebGLTexture && !uniform.texture) {\n          uniform.prevValue = undefined;\n          uniform.texture = value;\n        } else if (!uniform.texture) {\n          uniform.prevValue = undefined;\n          uniform.texture = gl.createTexture();\n        }\n        this.bindTexture(uniform.texture, textureSlot, uniform.name);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        const imageReady =\n          !(value instanceof HTMLImageElement) ||\n          /** @type {HTMLImageElement} */ (value).complete;\n        if (\n          !(value instanceof WebGLTexture) &&\n          imageReady &&\n          uniform.prevValue !== value\n        ) {\n          uniform.prevValue = value;\n          gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            value,\n          );\n        }\n        textureSlot++;\n      } else if (Array.isArray(value) && value.length === 6) {\n        this.setUniformMatrixValue(\n          uniform.name,\n          fromTransform(this.tmpMat4_, value),\n        );\n      } else if (Array.isArray(value) && value.length <= 4) {\n        switch (value.length) {\n          case 2:\n            gl.uniform2f(\n              this.getUniformLocation(uniform.name),\n              value[0],\n              value[1],\n            );\n            return;\n          case 3:\n            gl.uniform3f(\n              this.getUniformLocation(uniform.name),\n              value[0],\n              value[1],\n              value[2],\n            );\n            return;\n          case 4:\n            gl.uniform4f(\n              this.getUniformLocation(uniform.name),\n              value[0],\n              value[1],\n              value[2],\n              value[3],\n            );\n            return;\n          default:\n            return;\n        }\n      } else if (typeof value === 'number') {\n        gl.uniform1f(this.getUniformLocation(uniform.name), value);\n      }\n    });\n  }\n\n  /**\n   * Set up a program for use. The program will be set as the current one. Then, the uniforms used\n   * in the program will be set based on the current frame state and the helper configuration.\n   * @param {WebGLProgram} program Program.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  useProgram(program, frameState) {\n    const gl = this.gl_;\n    gl.useProgram(program);\n    this.currentProgram_ = program;\n    this.applyFrameState(frameState);\n    this.applyUniforms(frameState);\n  }\n\n  /**\n   * Will attempt to compile a vertex or fragment shader based on source\n   * On error, the shader will be returned but\n   * `gl.getShaderParameter(shader, gl.COMPILE_STATUS)` will return `true`\n   * Use `gl.getShaderInfoLog(shader)` to have details\n   * @param {string} source Shader source\n   * @param {ShaderType} type VERTEX_SHADER or FRAGMENT_SHADER\n   * @return {WebGLShader} Shader object\n   */\n  compileShader(source, type) {\n    const gl = this.gl_;\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    return shader;\n  }\n\n  /**\n   * Create a program for a vertex and fragment shader.  Throws if shader compilation fails.\n   * @param {string} fragmentShaderSource Fragment shader source.\n   * @param {string} vertexShaderSource Vertex shader source.\n   * @return {WebGLProgram} Program\n   */\n  getProgram(fragmentShaderSource, vertexShaderSource) {\n    const gl = this.gl_;\n\n    const fragmentShader = this.compileShader(\n      fragmentShaderSource,\n      gl.FRAGMENT_SHADER,\n    );\n\n    const vertexShader = this.compileShader(\n      vertexShaderSource,\n      gl.VERTEX_SHADER,\n    );\n\n    const program = gl.createProgram();\n    gl.attachShader(program, fragmentShader);\n    gl.attachShader(program, vertexShader);\n    gl.linkProgram(program);\n\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      const message = `Fragment shader compilation failed: ${gl.getShaderInfoLog(\n        fragmentShader,\n      )}`;\n      throw new Error(message);\n    }\n    gl.deleteShader(fragmentShader);\n\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      const message = `Vertex shader compilation failed: ${gl.getShaderInfoLog(\n        vertexShader,\n      )}`;\n      throw new Error(message);\n    }\n    gl.deleteShader(vertexShader);\n\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      const message = `GL program linking failed: ${gl.getProgramInfoLog(\n        program,\n      )}`;\n      throw new Error(message);\n    }\n\n    return program;\n  }\n\n  /**\n   * Will get the location from the shader or the cache\n   * @param {string} name Uniform name\n   * @return {WebGLUniformLocation} uniformLocation\n   */\n  getUniformLocation(name) {\n    const programUid = getUid(this.currentProgram_);\n    if (this.uniformLocationsByProgram_[programUid] === undefined) {\n      this.uniformLocationsByProgram_[programUid] = {};\n    }\n    if (this.uniformLocationsByProgram_[programUid][name] === undefined) {\n      this.uniformLocationsByProgram_[programUid][name] =\n        this.gl_.getUniformLocation(this.currentProgram_, name);\n    }\n    return this.uniformLocationsByProgram_[programUid][name];\n  }\n\n  /**\n   * Will get the location from the shader or the cache\n   * @param {string} name Attribute name\n   * @return {number} attribLocation\n   */\n  getAttributeLocation(name) {\n    const programUid = getUid(this.currentProgram_);\n    if (this.attribLocationsByProgram_[programUid] === undefined) {\n      this.attribLocationsByProgram_[programUid] = {};\n    }\n    if (this.attribLocationsByProgram_[programUid][name] === undefined) {\n      this.attribLocationsByProgram_[programUid][name] =\n        this.gl_.getAttribLocation(this.currentProgram_, name);\n    }\n    return this.attribLocationsByProgram_[programUid][name];\n  }\n\n  /**\n   * Sets the given transform to apply the rotation/translation/scaling of the given frame state.\n   * The resulting transform can be used to convert world space coordinates to view coordinates in the [-1, 1] range.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../transform\").Transform} transform Transform to update.\n   * @return {import(\"../transform\").Transform} The updated transform object.\n   */\n  makeProjectionTransform(frameState, transform) {\n    const size = frameState.size;\n    const rotation = frameState.viewState.rotation;\n    const resolution = frameState.viewState.resolution;\n    const center = frameState.viewState.center;\n    composeTransform(\n      transform,\n      0,\n      0,\n      2 / (resolution * size[0]),\n      2 / (resolution * size[1]),\n      -rotation,\n      -center[0],\n      -center[1],\n    );\n    return transform;\n  }\n\n  /**\n   * Give a value for a standard float uniform\n   * @param {string} uniform Uniform name\n   * @param {number} value Value\n   */\n  setUniformFloatValue(uniform, value) {\n    this.gl_.uniform1f(this.getUniformLocation(uniform), value);\n  }\n\n  /**\n   * Give a value for a vec2 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Array of length 4.\n   */\n  setUniformFloatVec2(uniform, value) {\n    this.gl_.uniform2fv(this.getUniformLocation(uniform), value);\n  }\n\n  /**\n   * Give a value for a vec4 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Array of length 4.\n   */\n  setUniformFloatVec4(uniform, value) {\n    this.gl_.uniform4fv(this.getUniformLocation(uniform), value);\n  }\n\n  /**\n   * Give a value for a standard matrix4 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Matrix value\n   */\n  setUniformMatrixValue(uniform, value) {\n    this.gl_.uniformMatrix4fv(this.getUniformLocation(uniform), false, value);\n  }\n\n  /**\n   * Will set the currently bound buffer to an attribute of the shader program. Used by `#enableAttributes`\n   * internally.\n   * @param {string} attribName Attribute name\n   * @param {number} size Number of components per attributes\n   * @param {number} type UNSIGNED_INT, UNSIGNED_BYTE, UNSIGNED_SHORT or FLOAT\n   * @param {number} stride Stride in bytes (0 means attribs are packed)\n   * @param {number} offset Offset in bytes\n   * @private\n   */\n  enableAttributeArray_(attribName, size, type, stride, offset) {\n    const location = this.getAttributeLocation(attribName);\n    // the attribute has not been found in the shaders or is not used; do not enable it\n    if (location < 0) {\n      return;\n    }\n    this.gl_.enableVertexAttribArray(location);\n    this.gl_.vertexAttribPointer(location, size, type, false, stride, offset);\n  }\n\n  /**\n   * Will enable the following attributes to be read from the currently bound buffer,\n   * i.e. tell the GPU where to read the different attributes in the buffer. An error in the\n   * size/type/order of attributes will most likely break the rendering and throw a WebGL exception.\n   * @param {Array<AttributeDescription>} attributes Ordered list of attributes to read from the buffer\n   */\n  enableAttributes(attributes) {\n    const stride = computeAttributesStride(attributes);\n    let offset = 0;\n    for (let i = 0; i < attributes.length; i++) {\n      const attr = attributes[i];\n      this.enableAttributeArray_(\n        attr.name,\n        attr.size,\n        attr.type || FLOAT,\n        stride,\n        offset,\n      );\n      offset += attr.size * getByteSizeFromType(attr.type);\n    }\n  }\n\n  /**\n   * WebGL context was lost\n   * @param {WebGLContextEvent} event The context loss event.\n   * @private\n   */\n  handleWebGLContextLost(event) {\n    clear(this.bufferCache_);\n    this.currentProgram_ = null;\n\n    event.preventDefault();\n  }\n\n  /**\n   * WebGL context was restored\n   * @private\n   */\n  handleWebGLContextRestored() {\n    this.needsToBeRecreated_ = true;\n  }\n\n  /**\n   * Returns whether this helper needs to be recreated, as the context was lost and then restored.\n   * @return {boolean} Whether this helper needs to be recreated.\n   */\n  needsToBeRecreated() {\n    return this.needsToBeRecreated_;\n  }\n\n  /**\n   * Will create or reuse a given webgl texture and apply the given size. If no image data\n   * specified, the texture will be empty, otherwise image data will be used and the `size`\n   * parameter will be ignored.\n   * Note: wrap parameters are set to clamp to edge, min filter is set to linear.\n   * @param {Array<number>} size Expected size of the texture\n   * @param {ImageData|HTMLImageElement|HTMLCanvasElement} [data] Image data/object to bind to the texture\n   * @param {WebGLTexture} [texture] Existing texture to reuse\n   * @return {WebGLTexture} The generated texture\n   */\n  createTexture(size, data, texture) {\n    const gl = this.gl_;\n    texture = texture || gl.createTexture();\n\n    // set params & size\n    const level = 0;\n    const internalFormat = gl.RGBA;\n    const border = 0;\n    const format = gl.RGBA;\n    const type = gl.UNSIGNED_BYTE;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    if (data) {\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, format, type, data);\n    } else {\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        level,\n        internalFormat,\n        size[0],\n        size[1],\n        border,\n        format,\n        type,\n        null,\n      );\n    }\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n    return texture;\n  }\n}\n\n/**\n * Compute a stride in bytes based on a list of attributes\n * @param {Array<AttributeDescription>} attributes Ordered list of attributes\n * @return {number} Stride, ie amount of values for each vertex in the vertex buffer\n */\nexport function computeAttributesStride(attributes) {\n  let stride = 0;\n  for (let i = 0; i < attributes.length; i++) {\n    const attr = attributes[i];\n    stride += attr.size * getByteSizeFromType(attr.type);\n  }\n  return stride;\n}\n\n/**\n * Computes the size in byte of an attribute type.\n * @param {AttributeType} type Attribute type\n * @return {number} The size in bytes\n */\nfunction getByteSizeFromType(type) {\n  switch (type) {\n    case AttributeType.UNSIGNED_BYTE:\n      return Uint8Array.BYTES_PER_ELEMENT;\n    case AttributeType.UNSIGNED_SHORT:\n      return Uint16Array.BYTES_PER_ELEMENT;\n    case AttributeType.UNSIGNED_INT:\n      return Uint32Array.BYTES_PER_ELEMENT;\n    case AttributeType.FLOAT:\n    default:\n      return Float32Array.BYTES_PER_ELEMENT;\n  }\n}\n\nexport default WebGLHelper;\n","/**\n * @module ol/vec/mat4\n */\n\n/**\n * @return {Array<number>} \"4x4 matrix representing a 3D identity transform.\"\n */\nexport function create() {\n  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n}\n\n/**\n * @param {Array<number>} mat4 Flattened 4x4 matrix receiving the result.\n * @param {import(\"../transform.js\").Transform} transform Transformation matrix.\n * @return {Array<number>} \"2D transformation matrix as flattened 4x4 matrix.\"\n */\nexport function fromTransform(mat4, transform) {\n  mat4[0] = transform[0];\n  mat4[1] = transform[1];\n  mat4[4] = transform[2];\n  mat4[5] = transform[3];\n  mat4[12] = transform[4];\n  mat4[13] = transform[5];\n  return mat4;\n}\n","/**\n * A wrapper class to simplify rendering to a texture instead of the final canvas\n * @module ol/webgl/RenderTarget\n */\nimport {equals} from '../array.js';\n\n// for pixel color reading\nconst tmpArray4 = new Uint8Array(4);\n\n/**\n * @classdesc\n * This class is a wrapper around the association of both a `WebGLTexture` and a `WebGLFramebuffer` instances,\n * simplifying initialization and binding for rendering.\n */\nclass WebGLRenderTarget {\n  /**\n   * @param {import(\"./Helper.js\").default} helper WebGL helper; mandatory.\n   * @param {Array<number>} [size] Expected size of the render target texture; note: this can be changed later on.\n   */\n  constructor(helper, size) {\n    /**\n     * @private\n     * @type {import(\"./Helper.js\").default}\n     */\n    this.helper_ = helper;\n    const gl = helper.getGL();\n\n    /**\n     * @private\n     * @type {WebGLTexture}\n     */\n    this.texture_ = gl.createTexture();\n\n    /**\n     * @private\n     * @type {WebGLFramebuffer}\n     */\n    this.framebuffer_ = gl.createFramebuffer();\n\n    /**\n     * @private\n     * @type {WebGLRenderbuffer}\n     */\n    this.depthbuffer_ = gl.createRenderbuffer();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.size_ = size || [1, 1];\n\n    /**\n     * @type {Uint8Array}\n     * @private\n     */\n    this.data_ = new Uint8Array(0);\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.dataCacheDirty_ = true;\n\n    this.updateSize_();\n  }\n\n  /**\n   * Changes the size of the render target texture. Note: will do nothing if the size\n   * is already the same.\n   * @param {Array<number>} size Expected size of the render target texture\n   */\n  setSize(size) {\n    if (equals(size, this.size_)) {\n      return;\n    }\n    this.size_[0] = size[0];\n    this.size_[1] = size[1];\n    this.updateSize_();\n  }\n\n  /**\n   * Returns the size of the render target texture\n   * @return {Array<number>} Size of the render target texture\n   */\n  getSize() {\n    return this.size_;\n  }\n\n  /**\n   * This will cause following calls to `#readAll` or `#readPixel` to download the content of the\n   * render target into memory, which is an expensive operation.\n   * This content will be kept in cache but should be cleared after each new render.\n   */\n  clearCachedData() {\n    this.dataCacheDirty_ = true;\n  }\n\n  /**\n   * Returns the full content of the frame buffer as a series of r, g, b, a components\n   * in the 0-255 range (unsigned byte).\n   * @return {Uint8Array} Integer array of color values\n   */\n  readAll() {\n    if (this.dataCacheDirty_) {\n      const size = this.size_;\n      const gl = this.helper_.getGL();\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n      gl.readPixels(\n        0,\n        0,\n        size[0],\n        size[1],\n        gl.RGBA,\n        gl.UNSIGNED_BYTE,\n        this.data_,\n      );\n      this.dataCacheDirty_ = false;\n    }\n    return this.data_;\n  }\n\n  /**\n   * Reads one pixel of the frame buffer as an array of r, g, b, a components\n   * in the 0-255 range (unsigned byte).\n   * If x and/or y are outside of existing data, an array filled with 0 is returned.\n   * @param {number} x Pixel coordinate\n   * @param {number} y Pixel coordinate\n   * @return {Uint8Array} Integer array with one color value (4 components)\n   */\n  readPixel(x, y) {\n    if (x < 0 || y < 0 || x > this.size_[0] || y >= this.size_[1]) {\n      tmpArray4[0] = 0;\n      tmpArray4[1] = 0;\n      tmpArray4[2] = 0;\n      tmpArray4[3] = 0;\n      return tmpArray4;\n    }\n\n    this.readAll();\n    const index =\n      Math.floor(x) + (this.size_[1] - Math.floor(y) - 1) * this.size_[0];\n    tmpArray4[0] = this.data_[index * 4];\n    tmpArray4[1] = this.data_[index * 4 + 1];\n    tmpArray4[2] = this.data_[index * 4 + 2];\n    tmpArray4[3] = this.data_[index * 4 + 3];\n    return tmpArray4;\n  }\n\n  /**\n   * @return {WebGLTexture} Texture to render to\n   */\n  getTexture() {\n    return this.texture_;\n  }\n\n  /**\n   * @return {WebGLFramebuffer} Frame buffer of the render target\n   */\n  getFramebuffer() {\n    return this.framebuffer_;\n  }\n\n  /**\n   * @return {WebGLRenderbuffer} Depth buffer of the render target\n   */\n  getDepthbuffer() {\n    return this.depthbuffer_;\n  }\n\n  /**\n   * @private\n   */\n  updateSize_() {\n    const size = this.size_;\n    const gl = this.helper_.getGL();\n\n    this.texture_ = this.helper_.createTexture(size, null, this.texture_);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      this.texture_,\n      0,\n    );\n\n    gl.bindRenderbuffer(gl.RENDERBUFFER, this.depthbuffer_);\n    gl.renderbufferStorage(\n      gl.RENDERBUFFER,\n      gl.DEPTH_COMPONENT16,\n      size[0],\n      size[1],\n    );\n    gl.framebufferRenderbuffer(\n      gl.FRAMEBUFFER,\n      gl.DEPTH_ATTACHMENT,\n      gl.RENDERBUFFER,\n      this.depthbuffer_,\n    );\n\n    this.data_ = new Uint8Array(size[0] * size[1] * 4);\n  }\n}\n\nexport default WebGLRenderTarget;\n","/**\n * @module ol/webgl\n */\n\nimport {SAFARI_BUG_237906} from './has.js';\n\n/**\n * Constants taken from goog.webgl\n */\n\n/**\n * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing vertices data, such as\n * position, color, texture coordinate, etc. These vertices are then referenced by an index buffer\n * to be drawn on screen (see {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER}).\n * @const\n * @type {number}\n * @api\n */\nexport const ARRAY_BUFFER = 0x8892;\n\n/**\n * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing indices data.\n * Index buffers are essentially lists of references to vertices defined in a vertex buffer\n * (see {@link module:ol/webgl.ARRAY_BUFFER}), and define the primitives (triangles) to be drawn.\n * @const\n * @type {number}\n * @api\n */\nexport const ELEMENT_ARRAY_BUFFER = 0x8893;\n\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport const STREAM_DRAW = 0x88e0;\n\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport const STATIC_DRAW = 0x88e4;\n\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport const DYNAMIC_DRAW = 0x88e8;\n\n/**\n * @const\n * @type {number}\n */\nexport const UNSIGNED_BYTE = 0x1401;\n\n/**\n * @const\n * @type {number}\n */\nexport const UNSIGNED_SHORT = 0x1403;\n\n/**\n * @const\n * @type {number}\n */\nexport const UNSIGNED_INT = 0x1405;\n\n/**\n * @const\n * @type {number}\n */\nexport const FLOAT = 0x1406;\n\n/** end of goog.webgl constants\n */\n\n/**\n * @const\n * @type {Array<string>}\n */\nconst CONTEXT_IDS = ['experimental-webgl', 'webgl', 'webkit-3d', 'moz-webgl'];\n\n/**\n * @param {HTMLCanvasElement} canvas Canvas.\n * @param {Object} [attributes] Attributes.\n * @return {WebGLRenderingContext|null} WebGL rendering context.\n */\nexport function getContext(canvas, attributes) {\n  attributes = Object.assign(\n    {\n      preserveDrawingBuffer: true,\n      antialias: SAFARI_BUG_237906 ? false : true, // https://bugs.webkit.org/show_bug.cgi?id=237906\n    },\n    attributes,\n  );\n  const ii = CONTEXT_IDS.length;\n  for (let i = 0; i < ii; ++i) {\n    try {\n      const context = canvas.getContext(CONTEXT_IDS[i], attributes);\n      if (context) {\n        return /** @type {!WebGLRenderingContext} */ (context);\n      }\n    } catch (e) {\n      // pass\n    }\n  }\n  return null;\n}\n\n/**\n * @type {Array<string>|null}\n */\nlet supportedExtensions = null;\n\n/**\n * @return {Array<string>|null} List of supported WebGL extensions.\n */\nexport function getSupportedExtensions() {\n  if (!supportedExtensions) {\n    const canvas = document.createElement('canvas');\n    const gl = getContext(canvas);\n    if (gl) {\n      supportedExtensions = gl.getSupportedExtensions();\n    }\n  }\n  return supportedExtensions;\n}\n"],"names":["COMMON_HEADER","DEFAULT_STYLE","ShaderBuilder","constructor","this","uniforms_","attributes_","varyings_","hasSymbol_","symbolSizeExpression_","symbolRotationExpression_","symbolOffsetExpression_","symbolColorExpression_","texCoordExpression_","discardExpression_","symbolRotateWithView_","hasStroke_","strokeWidthExpression_","strokeColorExpression_","strokeOffsetExpression_","strokeCapExpression_","strokeJoinExpression_","strokeMiterLimitExpression_","strokeDistanceFieldExpression_","hasFill_","fillColorExpression_","vertexShaderFunctions_","fragmentShaderFunctions_","addUniform","name","push","addAttribute","addVarying","type","expression","setSymbolSizeExpression","getSymbolSizeExpression","setSymbolRotationExpression","setSymbolOffsetExpression","getSymbolOffsetExpression","setSymbolColorExpression","getSymbolColorExpression","setTextureCoordinateExpression","setFragmentDiscardExpression","getFragmentDiscardExpression","setSymbolRotateWithView","rotateWithView","setStrokeWidthExpression","setStrokeColorExpression","getStrokeColorExpression","setStrokeOffsetExpression","setStrokeCapExpression","setStrokeJoinExpression","setStrokeMiterLimitExpression","setStrokeDistanceFieldExpression","setFillColorExpression","getFillColorExpression","addVertexShaderFunction","code","includes","addFragmentShaderFunction","getSymbolVertexShader","map","uniform","join","attribute","varying","getSymbolFragmentShader","getStrokeVertexShader","getStrokeFragmentShader","getFillVertexShader","getFillFragmentShader","BufferUsage","STATIC_DRAW","STREAM_DRAW","DYNAMIC_DRAW","WebGLArrayBuffer","usage","array_","type_","usage_","undefined","ofSize","size","getArrayClassForType","fromArray","array","from","fromArrayBuffer","buffer","getType","getArray","getUsage","getSize","length","Float32Array","Uint32Array","create","source","Worker","Blob","Buffer","toString","URL","createObjectURL","t","i","module","exports","r","e","a","h","n","o","s","l","Math","log","f","exp","u","sqrt","m","max","floor","c","min","p","d","x","_maxEntries","_minEntries","ceil","clear","indexOf","children","minX","minY","maxX","maxY","leaf","height","pop","prototype","all","_all","data","search","toBBox","collides","load","insert","_build","slice","_splitRoot","_insert","remove","splice","_condense","compareMinX","compareMinY","toJSON","fromJSON","apply","pow","_chooseSubtree","_split","_adjustParentBBoxes","_chooseSplitAxis","_chooseSplitIndex","v","M","_allDistMargin","sort","BaseTileRepresentation","options","super","tile","handleTileChange_","bind","gutter_","gutter","helper_","helper","loaded","ready","setTile","removeEventListener","EventType","CHANGE","getState","TileState","LOADED","uploadTile","ImageTile","image","getImage","Image","crossOrigin","addEventListener","setReady","dispatchEvent","disposeInternal","bindAndConfigure","gl","texture","interpolate","resampleFilter","LINEAR","NEAREST","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","uploadImageTexture","texImage2D","RGBA","UNSIGNED_BYTE","uploadDataTexture","bandCount","getGL","textureType","canInterpolate","FLOAT","getExtension","extension","bytesPerRow","byteLength","format","unpackAlignment","LUMINANCE","LUMINANCE_ALPHA","RGB","Error","oldUnpackAlignment","getParameter","UNPACK_ALIGNMENT","pixelStorei","pixelContext","createPixelContext","willReadFrequently","TileTexture","textures","renderSize_","grid","getTileSize","tileCoord","NaN","coords","flushBufferData","getData","createTexture","sourceTileSize","pixelSize","isFloat","pixelCount","DataType","Uint8Array","bytesPerElement","BYTES_PER_ELEMENT","textureCount","textureDataArrays","Array","textureIndex","dataIndex","rowOffset","colCount","rowIndex","colIndex","dataValue","pixelIndex","bandIndex","textureData","textureBandIndex","deleteBuffer","deleteTexture","getImagePixelData_","renderCol","renderRow","renderWidth","renderHeight","clearRect","sourceWidth","width","sourceHeight","sourceWidthWithoutGutter","sourceHeightWithoutGutter","sourceCol","sourceRow","drawImage","getImageData","err","getArrayPixelData_","sourceSize","DataView","bytesPerPixel","offset","getPixelData","DataTile","arrayData","PaletteTexture","texture_","getTexture","LOST","RESTORED","DEFAULT_VERTEX_SHADER","DEFAULT_FRAGMENT_SHADER","WebGLPostProcessingPass","gl_","webGlContext","scaleRatio_","scaleRatio","renderTargetTexture_","renderTargetTextureSize_","frameBuffer_","createFramebuffer","depthBuffer_","createRenderbuffer","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","renderTargetProgram_","createProgram","attachShader","linkProgram","renderTargetVerticesBuffer_","createBuffer","verticesArray","bindBuffer","ARRAY_BUFFER","bufferData","renderTargetAttribLocation_","getAttribLocation","renderTargetUniformLocation_","getUniformLocation","renderTargetOpacityLocation_","renderTargetTextureLocation_","uniforms","Object","keys","forEach","value","location","init","frameState","textureSize","drawingBufferWidth","drawingBufferHeight","bindFramebuffer","FRAMEBUFFER","getFrameBuffer","bindRenderbuffer","RENDERBUFFER","getDepthBuffer","viewport","level","internalFormat","border","framebufferTexture2D","COLOR_ATTACHMENT0","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","nextPass","preCompose","postCompose","activeTexture","TEXTURE0","canvasId","canvas","renderTargets","attributes","getContextAttributes","preserveDrawingBuffer","clearColor","clearDepth","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","disable","DEPTH_TEST","enable","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","useProgram","enableVertexAttribArray","vertexAttribPointer","uniform2f","uniform1i","opacity","layerStatesArray","layerIndex","uniform1f","applyUniforms","drawArrays","TRIANGLES","textureSlot","HTMLCanvasElement","ImageData","isArray","uniform3f","uniform4f","DefaultUniform","PROJECTION_MATRIX","SCREEN_TO_WORLD_MATRIX","TIME","ZOOM","RESOLUTION","ROTATION","VIEWPORT_SIZE_PX","PIXEL_RATIO","HIT_DETECTION","AttributeType","UNSIGNED_SHORT","UNSIGNED_INT","canvasCache","getSharedCanvasCacheKey","key","uniqueCanvasCacheKeyCount","getUniqueCanvasCacheKey","getOrCreateContext","cacheItem","document","createElement","style","position","left","context","users","releaseCanvas","loseContext","WebGLHelper","Disposable","boundHandleWebGLContextLost_","handleWebGLContextLost","boundHandleWebGLContextRestored_","handleWebGLContextRestored","canvasCacheKey_","canvasCacheKey","bufferCache_","extensionCache_","currentProgram_","needsToBeRecreated_","ContextEventType","offsetRotateMatrix_","offsetScaleMatrix_","tmpMat4_","uniformLocationsByProgram_","attribLocationsByProgram_","setUniforms","postProcessPasses_","postProcesses","shaderCompileErrors_","startTime_","Date","now","addUniforms","canvasCacheKeyMatches","bufferKey","bufferCache","webGlBuffer","buf","bufferCacheEntry","isContextLost","prepareDraw","disableAlphaBlend","enableDepth","getCanvas","pixelRatio","depthRange","ZERO","depthFunc","LEQUAL","slot","uniformName","prepareDrawToRenderTarget","renderTarget","getFramebuffer","getDepthbuffer","drawElements","start","end","elementType","elementSize","numItems","offsetInBytes","finalizeDraw","ii","applyFrameState","rotation","viewState","setUniformFloatValue","zoom","resolution","setUniformFloatVec2","applyHitDetectionUniform","enabled","loc","HTMLImageElement","WebGLTexture","prevValue","imageReady","complete","setUniformMatrixValue","program","shader","getProgram","fragmentShaderSource","vertexShaderSource","getShaderParameter","COMPILE_STATUS","message","getShaderInfoLog","deleteShader","getProgramParameter","LINK_STATUS","getProgramInfoLog","programUid","getAttributeLocation","makeProjectionTransform","transform","center","uniform2fv","setUniformFloatVec4","uniform4fv","uniformMatrix4fv","enableAttributeArray_","attribName","stride","enableAttributes","computeAttributesStride","attr","getByteSizeFromType","event","preventDefault","needsToBeRecreated","Uint16Array","fromTransform","mat4","tmpArray4","WebGLRenderTarget","framebuffer_","depthbuffer_","size_","data_","dataCacheDirty_","updateSize_","setSize","clearCachedData","readAll","readPixels","readPixel","y","index","ELEMENT_ARRAY_BUFFER","CONTEXT_IDS","getContext","assign","antialias"],"sourceRoot":""}