{"version":3,"file":"js/8022.371a219b.js","mappings":"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","sources":["webpack://@openeo/web-editor/./node_modules/ol/renderer/canvas/ImageLayer.js","webpack://@openeo/web-editor/./node_modules/ol/renderer/canvas/Layer.js","webpack://@openeo/web-editor/./node_modules/ol/renderer/canvas/TileLayer.js","webpack://@openeo/web-editor/./node_modules/ol/renderer/canvas/VectorLayer.js","webpack://@openeo/web-editor/./node_modules/ol/renderer/canvas/VectorTileLayer.js","webpack://@openeo/web-editor/./node_modules/ol/renderer/canvas/common.js","webpack://@openeo/web-editor/./node_modules/ol/renderer/vector.js","webpack://@openeo/web-editor/./node_modules/ol/renderer/webgl/Layer.js","webpack://@openeo/web-editor/./node_modules/ol/renderer/webgl/PointsLayer.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/renderer/canvas/ImageLayer\n */\nimport CanvasLayerRenderer from './Layer.js';\nimport ImageState from '../../ImageState.js';\nimport ViewHint from '../../ViewHint.js';\nimport { ENABLE_RASTER_REPROJECTION } from '../../reproj/common.js';\nimport { IMAGE_SMOOTHING_DISABLED, IMAGE_SMOOTHING_ENABLED } from './common.js';\nimport { apply as applyTransform, compose as composeTransform, makeInverse, toString as toTransformString, } from '../../transform.js';\nimport { assign } from '../../obj.js';\nimport { containsCoordinate, containsExtent, getHeight, getIntersection, getWidth, intersects as intersectsExtent, isEmpty, } from '../../extent.js';\nimport { fromUserExtent } from '../../proj.js';\n/**\n * @classdesc\n * Canvas renderer for image layers.\n * @api\n */\nvar CanvasImageLayerRenderer = /** @class */ (function (_super) {\n    __extends(CanvasImageLayerRenderer, _super);\n    /**\n     * @param {import(\"../../layer/Image.js\").default} imageLayer Image layer.\n     */\n    function CanvasImageLayerRenderer(imageLayer) {\n        var _this = _super.call(this, imageLayer) || this;\n        /**\n         * @protected\n         * @type {?import(\"../../ImageBase.js\").default}\n         */\n        _this.image_ = null;\n        return _this;\n    }\n    /**\n     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n     */\n    CanvasImageLayerRenderer.prototype.getImage = function () {\n        return !this.image_ ? null : this.image_.getImage();\n    };\n    /**\n     * Determine whether render should be called.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {boolean} Layer is ready to be rendered.\n     */\n    CanvasImageLayerRenderer.prototype.prepareFrame = function (frameState) {\n        var layerState = frameState.layerStatesArray[frameState.layerIndex];\n        var pixelRatio = frameState.pixelRatio;\n        var viewState = frameState.viewState;\n        var viewResolution = viewState.resolution;\n        var imageSource = this.getLayer().getSource();\n        var hints = frameState.viewHints;\n        var renderedExtent = frameState.extent;\n        if (layerState.extent !== undefined) {\n            renderedExtent = getIntersection(renderedExtent, fromUserExtent(layerState.extent, viewState.projection));\n        }\n        if (!hints[ViewHint.ANIMATING] &&\n            !hints[ViewHint.INTERACTING] &&\n            !isEmpty(renderedExtent)) {\n            if (imageSource) {\n                var projection = viewState.projection;\n                if (!ENABLE_RASTER_REPROJECTION) {\n                    var sourceProjection = imageSource.getProjection();\n                    if (sourceProjection) {\n                        projection = sourceProjection;\n                    }\n                }\n                var image = imageSource.getImage(renderedExtent, viewResolution, pixelRatio, projection);\n                if (image) {\n                    if (this.loadImage(image)) {\n                        this.image_ = image;\n                    }\n                    else if (image.getState() === ImageState.EMPTY) {\n                        this.image_ = null;\n                    }\n                }\n            }\n            else {\n                this.image_ = null;\n            }\n        }\n        return !!this.image_;\n    };\n    /**\n     * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n     * @return {Uint8ClampedArray} Data at the pixel location.\n     */\n    CanvasImageLayerRenderer.prototype.getData = function (pixel) {\n        var frameState = this.frameState;\n        if (!frameState) {\n            return null;\n        }\n        var layer = this.getLayer();\n        var coordinate = applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n        var layerExtent = layer.getExtent();\n        if (layerExtent) {\n            if (!containsCoordinate(layerExtent, coordinate)) {\n                return null;\n            }\n        }\n        var imageExtent = this.image_.getExtent();\n        var img = this.image_.getImage();\n        var imageMapWidth = getWidth(imageExtent);\n        var col = Math.floor(img.width * ((coordinate[0] - imageExtent[0]) / imageMapWidth));\n        if (col < 0 || col >= img.width) {\n            return null;\n        }\n        var imageMapHeight = getHeight(imageExtent);\n        var row = Math.floor(img.height * ((imageExtent[3] - coordinate[1]) / imageMapHeight));\n        if (row < 0 || row >= img.height) {\n            return null;\n        }\n        return this.getImageData(img, col, row);\n    };\n    /**\n     * Render the layer.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {HTMLElement} target Target that may be used to render content to.\n     * @return {HTMLElement} The rendered element.\n     */\n    CanvasImageLayerRenderer.prototype.renderFrame = function (frameState, target) {\n        var image = this.image_;\n        var imageExtent = image.getExtent();\n        var imageResolution = image.getResolution();\n        var imagePixelRatio = image.getPixelRatio();\n        var layerState = frameState.layerStatesArray[frameState.layerIndex];\n        var pixelRatio = frameState.pixelRatio;\n        var viewState = frameState.viewState;\n        var viewCenter = viewState.center;\n        var viewResolution = viewState.resolution;\n        var size = frameState.size;\n        var scale = (pixelRatio * imageResolution) / (viewResolution * imagePixelRatio);\n        var width = Math.round(size[0] * pixelRatio);\n        var height = Math.round(size[1] * pixelRatio);\n        var rotation = viewState.rotation;\n        if (rotation) {\n            var size_1 = Math.round(Math.sqrt(width * width + height * height));\n            width = size_1;\n            height = size_1;\n        }\n        // set forward and inverse pixel transforms\n        composeTransform(this.pixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / pixelRatio, 1 / pixelRatio, rotation, -width / 2, -height / 2);\n        makeInverse(this.inversePixelTransform, this.pixelTransform);\n        var canvasTransform = toTransformString(this.pixelTransform);\n        this.useContainer(target, canvasTransform, layerState.opacity, this.getBackground(frameState));\n        var context = this.context;\n        var canvas = context.canvas;\n        if (canvas.width != width || canvas.height != height) {\n            canvas.width = width;\n            canvas.height = height;\n        }\n        else if (!this.containerReused) {\n            context.clearRect(0, 0, width, height);\n        }\n        // clipped rendering if layer extent is set\n        var clipped = false;\n        var render = true;\n        if (layerState.extent) {\n            var layerExtent = fromUserExtent(layerState.extent, viewState.projection);\n            render = intersectsExtent(layerExtent, frameState.extent);\n            clipped = render && !containsExtent(layerExtent, frameState.extent);\n            if (clipped) {\n                this.clipUnrotated(context, frameState, layerExtent);\n            }\n        }\n        var img = image.getImage();\n        var transform = composeTransform(this.tempTransform, width / 2, height / 2, scale, scale, 0, (imagePixelRatio * (imageExtent[0] - viewCenter[0])) / imageResolution, (imagePixelRatio * (viewCenter[1] - imageExtent[3])) / imageResolution);\n        this.renderedResolution = (imageResolution * pixelRatio) / imagePixelRatio;\n        var dw = img.width * transform[0];\n        var dh = img.height * transform[3];\n        if (!this.getLayer().getSource().getInterpolate()) {\n            assign(context, IMAGE_SMOOTHING_DISABLED);\n        }\n        this.preRender(context, frameState);\n        if (render && dw >= 0.5 && dh >= 0.5) {\n            var dx = transform[4];\n            var dy = transform[5];\n            var opacity = layerState.opacity;\n            var previousAlpha = void 0;\n            if (opacity !== 1) {\n                previousAlpha = context.globalAlpha;\n                context.globalAlpha = opacity;\n            }\n            context.drawImage(img, 0, 0, +img.width, +img.height, Math.round(dx), Math.round(dy), Math.round(dw), Math.round(dh));\n            if (opacity !== 1) {\n                context.globalAlpha = previousAlpha;\n            }\n        }\n        this.postRender(context, frameState);\n        if (clipped) {\n            context.restore();\n        }\n        assign(context, IMAGE_SMOOTHING_ENABLED);\n        if (canvasTransform !== canvas.style.transform) {\n            canvas.style.transform = canvasTransform;\n        }\n        return this.container;\n    };\n    return CanvasImageLayerRenderer;\n}(CanvasLayerRenderer));\nexport default CanvasImageLayerRenderer;\n//# sourceMappingURL=ImageLayer.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/renderer/canvas/Layer\n */\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport { apply as applyTransform, compose as composeTransform, create as createTransform, } from '../../transform.js';\nimport { asArray } from '../../color.js';\nimport { containsCoordinate, getBottomLeft, getBottomRight, getTopLeft, getTopRight, } from '../../extent.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { equals } from '../../array.js';\n/**\n * @type {CanvasRenderingContext2D}\n */\nvar pixelContext = null;\nfunction createPixelContext() {\n    var canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    pixelContext = canvas.getContext('2d');\n}\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nvar CanvasLayerRenderer = /** @class */ (function (_super) {\n    __extends(CanvasLayerRenderer, _super);\n    /**\n     * @param {LayerType} layer Layer.\n     */\n    function CanvasLayerRenderer(layer) {\n        var _this = _super.call(this, layer) || this;\n        /**\n         * @protected\n         * @type {HTMLElement}\n         */\n        _this.container = null;\n        /**\n         * @protected\n         * @type {number}\n         */\n        _this.renderedResolution;\n        /**\n         * A temporary transform.  The values in this transform should only be used in a\n         * function that sets the values.\n         * @protected\n         * @type {import(\"../../transform.js\").Transform}\n         */\n        _this.tempTransform = createTransform();\n        /**\n         * The transform for rendered pixels to viewport CSS pixels.  This transform must\n         * be set when rendering a frame and may be used by other functions after rendering.\n         * @protected\n         * @type {import(\"../../transform.js\").Transform}\n         */\n        _this.pixelTransform = createTransform();\n        /**\n         * The transform for viewport CSS pixels to rendered pixels.  This transform must\n         * be set when rendering a frame and may be used by other functions after rendering.\n         * @protected\n         * @type {import(\"../../transform.js\").Transform}\n         */\n        _this.inversePixelTransform = createTransform();\n        /**\n         * @type {CanvasRenderingContext2D}\n         */\n        _this.context = null;\n        /**\n         * @type {boolean}\n         */\n        _this.containerReused = false;\n        /**\n         * @private\n         * @type {CanvasRenderingContext2D}\n         */\n        _this.pixelContext_ = null;\n        /**\n         * @protected\n         * @type {import(\"../../PluggableMap.js\").FrameState|null}\n         */\n        _this.frameState = null;\n        return _this;\n    }\n    /**\n     * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n     * @param {number} col The column index.\n     * @param {number} row The row index.\n     * @return {Uint8ClampedArray|null} The image data.\n     */\n    CanvasLayerRenderer.prototype.getImageData = function (image, col, row) {\n        if (!pixelContext) {\n            createPixelContext();\n        }\n        pixelContext.clearRect(0, 0, 1, 1);\n        var data;\n        try {\n            pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);\n            data = pixelContext.getImageData(0, 0, 1, 1).data;\n        }\n        catch (err) {\n            return null;\n        }\n        return data;\n    };\n    /**\n     * @param {import('../../PluggableMap.js').FrameState} frameState Frame state.\n     * @return {string} Background color.\n     */\n    CanvasLayerRenderer.prototype.getBackground = function (frameState) {\n        var layer = this.getLayer();\n        var background = layer.getBackground();\n        if (typeof background === 'function') {\n            background = background(frameState.viewState.resolution);\n        }\n        return background || undefined;\n    };\n    /**\n     * Get a rendering container from an existing target, if compatible.\n     * @param {HTMLElement} target Potential render target.\n     * @param {string} transform CSS Transform.\n     * @param {number} opacity Opacity.\n     * @param {string} [opt_backgroundColor] Background color.\n     */\n    CanvasLayerRenderer.prototype.useContainer = function (target, transform, opacity, opt_backgroundColor) {\n        var layerClassName = this.getLayer().getClassName();\n        var container, context;\n        if (target &&\n            target.className === layerClassName &&\n            target.style.opacity === '' &&\n            opacity === 1 &&\n            (!opt_backgroundColor ||\n                (target.style.backgroundColor &&\n                    equals(asArray(target.style.backgroundColor), asArray(opt_backgroundColor))))) {\n            var canvas = target.firstElementChild;\n            if (canvas instanceof HTMLCanvasElement) {\n                context = canvas.getContext('2d');\n            }\n        }\n        if (context && context.canvas.style.transform === transform) {\n            // Container of the previous layer renderer can be used.\n            this.container = target;\n            this.context = context;\n            this.containerReused = true;\n        }\n        else if (this.containerReused) {\n            // Previously reused container cannot be used any more.\n            this.container = null;\n            this.context = null;\n            this.containerReused = false;\n        }\n        if (!this.container) {\n            container = document.createElement('div');\n            container.className = layerClassName;\n            var style = container.style;\n            style.position = 'absolute';\n            style.width = '100%';\n            style.height = '100%';\n            if (opt_backgroundColor) {\n                style.backgroundColor = opt_backgroundColor;\n            }\n            context = createCanvasContext2D();\n            var canvas = context.canvas;\n            container.appendChild(canvas);\n            style = canvas.style;\n            style.position = 'absolute';\n            style.left = '0';\n            style.transformOrigin = 'top left';\n            this.container = container;\n            this.context = context;\n        }\n    };\n    /**\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n     * @protected\n     */\n    CanvasLayerRenderer.prototype.clipUnrotated = function (context, frameState, extent) {\n        var topLeft = getTopLeft(extent);\n        var topRight = getTopRight(extent);\n        var bottomRight = getBottomRight(extent);\n        var bottomLeft = getBottomLeft(extent);\n        applyTransform(frameState.coordinateToPixelTransform, topLeft);\n        applyTransform(frameState.coordinateToPixelTransform, topRight);\n        applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n        applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n        var inverted = this.inversePixelTransform;\n        applyTransform(inverted, topLeft);\n        applyTransform(inverted, topRight);\n        applyTransform(inverted, bottomRight);\n        applyTransform(inverted, bottomLeft);\n        context.save();\n        context.beginPath();\n        context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n        context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n        context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n        context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n        context.clip();\n    };\n    /**\n     * @param {import(\"../../render/EventType.js\").default} type Event type.\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @private\n     */\n    CanvasLayerRenderer.prototype.dispatchRenderEvent_ = function (type, context, frameState) {\n        var layer = this.getLayer();\n        if (layer.hasListener(type)) {\n            var event_1 = new RenderEvent(type, this.inversePixelTransform, frameState, context);\n            layer.dispatchEvent(event_1);\n        }\n    };\n    /**\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n    CanvasLayerRenderer.prototype.preRender = function (context, frameState) {\n        this.frameState = frameState;\n        this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n    };\n    /**\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n    CanvasLayerRenderer.prototype.postRender = function (context, frameState) {\n        this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n    };\n    /**\n     * Creates a transform for rendering to an element that will be rotated after rendering.\n     * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n     * @param {number} resolution Resolution.\n     * @param {number} rotation Rotation.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {number} width Width of the rendered element (in pixels).\n     * @param {number} height Height of the rendered element (in pixels).\n     * @param {number} offsetX Offset on the x-axis in view coordinates.\n     * @protected\n     * @return {!import(\"../../transform.js\").Transform} Transform.\n     */\n    CanvasLayerRenderer.prototype.getRenderTransform = function (center, resolution, rotation, pixelRatio, width, height, offsetX) {\n        var dx1 = width / 2;\n        var dy1 = height / 2;\n        var sx = pixelRatio / resolution;\n        var sy = -sx;\n        var dx2 = -center[0] + offsetX;\n        var dy2 = -center[1];\n        return composeTransform(this.tempTransform, dx1, dy1, sx, sy, -rotation, dx2, dy2);\n    };\n    /**\n     * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState FrameState.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel\n     *    location, null will be returned.  If there is data, but pixel values cannot be\n     *    returned, and empty array will be returned.\n     */\n    CanvasLayerRenderer.prototype.getDataAtPixel = function (pixel, frameState, hitTolerance) {\n        var renderPixel = applyTransform(this.inversePixelTransform, pixel.slice());\n        var context = this.context;\n        var layer = this.getLayer();\n        var layerExtent = layer.getExtent();\n        if (layerExtent) {\n            var renderCoordinate = applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n            /** get only data inside of the layer extent */\n            if (!containsCoordinate(layerExtent, renderCoordinate)) {\n                return null;\n            }\n        }\n        var x = Math.round(renderPixel[0]);\n        var y = Math.round(renderPixel[1]);\n        var pixelContext = this.pixelContext_;\n        if (!pixelContext) {\n            var pixelCanvas = document.createElement('canvas');\n            pixelCanvas.width = 1;\n            pixelCanvas.height = 1;\n            pixelContext = pixelCanvas.getContext('2d');\n            this.pixelContext_ = pixelContext;\n        }\n        pixelContext.clearRect(0, 0, 1, 1);\n        var data;\n        try {\n            pixelContext.drawImage(context.canvas, x, y, 1, 1, 0, 0, 1, 1);\n            data = pixelContext.getImageData(0, 0, 1, 1).data;\n        }\n        catch (err) {\n            if (err.name === 'SecurityError') {\n                // tainted canvas, we assume there is data at the given pixel (although there might not be)\n                this.pixelContext_ = null;\n                return new Uint8Array();\n            }\n            return data;\n        }\n        if (data[3] === 0) {\n            return null;\n        }\n        return data;\n    };\n    /**\n     * Clean up.\n     */\n    CanvasLayerRenderer.prototype.disposeInternal = function () {\n        delete this.frameState;\n        _super.prototype.disposeInternal.call(this);\n    };\n    return CanvasLayerRenderer;\n}(LayerRenderer));\nexport default CanvasLayerRenderer;\n//# sourceMappingURL=Layer.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/renderer/canvas/TileLayer\n */\nimport CanvasLayerRenderer from './Layer.js';\nimport ImageTile from '../../ImageTile.js';\nimport ReprojTile from '../../reproj/Tile.js';\nimport TileRange from '../../TileRange.js';\nimport TileState from '../../TileState.js';\nimport { IMAGE_SMOOTHING_DISABLED, IMAGE_SMOOTHING_ENABLED } from './common.js';\nimport { apply as applyTransform, compose as composeTransform, makeInverse, toString as toTransformString, } from '../../transform.js';\nimport { assign } from '../../obj.js';\nimport { containsCoordinate, createEmpty, equals, getIntersection, getTopLeft, intersects, } from '../../extent.js';\nimport { cssOpacity } from '../../css.js';\nimport { fromUserExtent } from '../../proj.js';\nimport { getUid } from '../../util.js';\nimport { numberSafeCompareFunction } from '../../array.js';\nimport { toSize } from '../../size.js';\n/**\n * @classdesc\n * Canvas renderer for tile layers.\n * @api\n * @template {import(\"../../layer/Tile.js\").default<import(\"../../source/Tile.js\").default>|import(\"../../layer/VectorTile.js\").default} [LayerType=import(\"../../layer/Tile.js\").default<import(\"../../source/Tile.js\").default>|import(\"../../layer/VectorTile.js\").default]\n * @extends {CanvasLayerRenderer<LayerType>}\n */\nvar CanvasTileLayerRenderer = /** @class */ (function (_super) {\n    __extends(CanvasTileLayerRenderer, _super);\n    /**\n     * @param {LayerType} tileLayer Tile layer.\n     */\n    function CanvasTileLayerRenderer(tileLayer) {\n        var _this = _super.call(this, tileLayer) || this;\n        /**\n         * Rendered extent has changed since the previous `renderFrame()` call\n         * @type {boolean}\n         */\n        _this.extentChanged = true;\n        /**\n         * @private\n         * @type {?import(\"../../extent.js\").Extent}\n         */\n        _this.renderedExtent_ = null;\n        /**\n         * @protected\n         * @type {number}\n         */\n        _this.renderedPixelRatio;\n        /**\n         * @protected\n         * @type {import(\"../../proj/Projection.js\").default}\n         */\n        _this.renderedProjection = null;\n        /**\n         * @protected\n         * @type {number}\n         */\n        _this.renderedRevision;\n        /**\n         * @protected\n         * @type {!Array<import(\"../../Tile.js\").default>}\n         */\n        _this.renderedTiles = [];\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.newTiles_ = false;\n        /**\n         * @protected\n         * @type {import(\"../../extent.js\").Extent}\n         */\n        _this.tmpExtent = createEmpty();\n        /**\n         * @private\n         * @type {import(\"../../TileRange.js\").default}\n         */\n        _this.tmpTileRange_ = new TileRange(0, 0, 0, 0);\n        return _this;\n    }\n    /**\n     * @protected\n     * @param {import(\"../../Tile.js\").default} tile Tile.\n     * @return {boolean} Tile is drawable.\n     */\n    CanvasTileLayerRenderer.prototype.isDrawableTile = function (tile) {\n        var tileLayer = this.getLayer();\n        var tileState = tile.getState();\n        var useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();\n        return (tileState == TileState.LOADED ||\n            tileState == TileState.EMPTY ||\n            (tileState == TileState.ERROR && !useInterimTilesOnError));\n    };\n    /**\n     * @param {number} z Tile coordinate z.\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {!import(\"../../Tile.js\").default} Tile.\n     */\n    CanvasTileLayerRenderer.prototype.getTile = function (z, x, y, frameState) {\n        var pixelRatio = frameState.pixelRatio;\n        var projection = frameState.viewState.projection;\n        var tileLayer = this.getLayer();\n        var tileSource = tileLayer.getSource();\n        var tile = tileSource.getTile(z, x, y, pixelRatio, projection);\n        if (tile.getState() == TileState.ERROR) {\n            if (!tileLayer.getUseInterimTilesOnError()) {\n                // When useInterimTilesOnError is false, we consider the error tile as loaded.\n                tile.setState(TileState.LOADED);\n            }\n            else if (tileLayer.getPreload() > 0) {\n                // Preloaded tiles for lower resolutions might have finished loading.\n                this.newTiles_ = true;\n            }\n        }\n        if (!this.isDrawableTile(tile)) {\n            tile = tile.getInterimTile();\n        }\n        return tile;\n    };\n    /**\n     * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n     * @return {Uint8ClampedArray} Data at the pixel location.\n     */\n    CanvasTileLayerRenderer.prototype.getData = function (pixel) {\n        var frameState = this.frameState;\n        if (!frameState) {\n            return null;\n        }\n        var layer = this.getLayer();\n        var coordinate = applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n        var layerExtent = layer.getExtent();\n        if (layerExtent) {\n            if (!containsCoordinate(layerExtent, coordinate)) {\n                return null;\n            }\n        }\n        var pixelRatio = frameState.pixelRatio;\n        var projection = frameState.viewState.projection;\n        var viewState = frameState.viewState;\n        var source = layer.getRenderSource();\n        var tileGrid = source.getTileGridForProjection(viewState.projection);\n        var tilePixelRatio = source.getTilePixelRatio(frameState.pixelRatio);\n        for (var z = tileGrid.getZForResolution(viewState.resolution); z >= tileGrid.getMinZoom(); --z) {\n            var tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n            var tile = source.getTile(z, tileCoord[1], tileCoord[2], pixelRatio, projection);\n            if (!(tile instanceof ImageTile || tile instanceof ReprojTile)) {\n                return null;\n            }\n            if (tile.getState() !== TileState.LOADED) {\n                continue;\n            }\n            var tileOrigin = tileGrid.getOrigin(z);\n            var tileSize = toSize(tileGrid.getTileSize(z));\n            var tileResolution = tileGrid.getResolution(z);\n            var col = Math.floor(tilePixelRatio *\n                ((coordinate[0] - tileOrigin[0]) / tileResolution -\n                    tileCoord[1] * tileSize[0]));\n            var row = Math.floor(tilePixelRatio *\n                ((tileOrigin[1] - coordinate[1]) / tileResolution -\n                    tileCoord[2] * tileSize[1]));\n            return this.getImageData(tile.getImage(), col, row);\n        }\n        return null;\n    };\n    /**\n     * @param {Object<number, Object<string, import(\"../../Tile.js\").default>>} tiles Lookup of loaded tiles by zoom level.\n     * @param {number} zoom Zoom level.\n     * @param {import(\"../../Tile.js\").default} tile Tile.\n     * @return {boolean|void} If `false`, the tile will not be considered loaded.\n     */\n    CanvasTileLayerRenderer.prototype.loadedTileCallback = function (tiles, zoom, tile) {\n        if (this.isDrawableTile(tile)) {\n            return _super.prototype.loadedTileCallback.call(this, tiles, zoom, tile);\n        }\n        return false;\n    };\n    /**\n     * Determine whether render should be called.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {boolean} Layer is ready to be rendered.\n     */\n    CanvasTileLayerRenderer.prototype.prepareFrame = function (frameState) {\n        return !!this.getLayer().getSource();\n    };\n    /**\n     * Render the layer.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {HTMLElement} target Target that may be used to render content to.\n     * @return {HTMLElement} The rendered element.\n     */\n    CanvasTileLayerRenderer.prototype.renderFrame = function (frameState, target) {\n        var layerState = frameState.layerStatesArray[frameState.layerIndex];\n        var viewState = frameState.viewState;\n        var projection = viewState.projection;\n        var viewResolution = viewState.resolution;\n        var viewCenter = viewState.center;\n        var rotation = viewState.rotation;\n        var pixelRatio = frameState.pixelRatio;\n        var tileLayer = this.getLayer();\n        var tileSource = tileLayer.getSource();\n        var sourceRevision = tileSource.getRevision();\n        var tileGrid = tileSource.getTileGridForProjection(projection);\n        var z = tileGrid.getZForResolution(viewResolution, tileSource.zDirection);\n        var tileResolution = tileGrid.getResolution(z);\n        var extent = frameState.extent;\n        var layerExtent = layerState.extent && fromUserExtent(layerState.extent, projection);\n        if (layerExtent) {\n            extent = getIntersection(extent, fromUserExtent(layerState.extent, projection));\n        }\n        var tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);\n        // desired dimensions of the canvas in pixels\n        var width = Math.round(frameState.size[0] * tilePixelRatio);\n        var height = Math.round(frameState.size[1] * tilePixelRatio);\n        if (rotation) {\n            var size = Math.round(Math.sqrt(width * width + height * height));\n            width = size;\n            height = size;\n        }\n        var dx = (tileResolution * width) / 2 / tilePixelRatio;\n        var dy = (tileResolution * height) / 2 / tilePixelRatio;\n        var canvasExtent = [\n            viewCenter[0] - dx,\n            viewCenter[1] - dy,\n            viewCenter[0] + dx,\n            viewCenter[1] + dy,\n        ];\n        var tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n        /**\n         * @type {Object<number, Object<string, import(\"../../Tile.js\").default>>}\n         */\n        var tilesToDrawByZ = {};\n        tilesToDrawByZ[z] = {};\n        var findLoadedTiles = this.createLoadedTileFinder(tileSource, projection, tilesToDrawByZ);\n        var tmpExtent = this.tmpExtent;\n        var tmpTileRange = this.tmpTileRange_;\n        this.newTiles_ = false;\n        for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {\n            for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {\n                var tile = this.getTile(z, x, y, frameState);\n                if (this.isDrawableTile(tile)) {\n                    var uid = getUid(this);\n                    if (tile.getState() == TileState.LOADED) {\n                        tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;\n                        var inTransition = tile.inTransition(uid);\n                        if (!this.newTiles_ &&\n                            (inTransition || this.renderedTiles.indexOf(tile) === -1)) {\n                            this.newTiles_ = true;\n                        }\n                    }\n                    if (tile.getAlpha(uid, frameState.time) === 1) {\n                        // don't look for alt tiles if alpha is 1\n                        continue;\n                    }\n                }\n                var childTileRange = tileGrid.getTileCoordChildTileRange(tile.tileCoord, tmpTileRange, tmpExtent);\n                var covered = false;\n                if (childTileRange) {\n                    covered = findLoadedTiles(z + 1, childTileRange);\n                }\n                if (!covered) {\n                    tileGrid.forEachTileCoordParentTileRange(tile.tileCoord, findLoadedTiles, tmpTileRange, tmpExtent);\n                }\n            }\n        }\n        var canvasScale = tileResolution / viewResolution;\n        // set forward and inverse pixel transforms\n        composeTransform(this.pixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / tilePixelRatio, 1 / tilePixelRatio, rotation, -width / 2, -height / 2);\n        var canvasTransform = toTransformString(this.pixelTransform);\n        this.useContainer(target, canvasTransform, layerState.opacity, this.getBackground(frameState));\n        var context = this.context;\n        var canvas = context.canvas;\n        makeInverse(this.inversePixelTransform, this.pixelTransform);\n        // set scale transform for calculating tile positions on the canvas\n        composeTransform(this.tempTransform, width / 2, height / 2, canvasScale, canvasScale, 0, -width / 2, -height / 2);\n        if (canvas.width != width || canvas.height != height) {\n            canvas.width = width;\n            canvas.height = height;\n        }\n        else if (!this.containerReused) {\n            context.clearRect(0, 0, width, height);\n        }\n        if (layerExtent) {\n            this.clipUnrotated(context, frameState, layerExtent);\n        }\n        if (!tileSource.getInterpolate()) {\n            assign(context, IMAGE_SMOOTHING_DISABLED);\n        }\n        this.preRender(context, frameState);\n        this.renderedTiles.length = 0;\n        /** @type {Array<number>} */\n        var zs = Object.keys(tilesToDrawByZ).map(Number);\n        zs.sort(numberSafeCompareFunction);\n        var clips, clipZs, currentClip;\n        if (layerState.opacity === 1 &&\n            (!this.containerReused ||\n                tileSource.getOpaque(frameState.viewState.projection))) {\n            zs = zs.reverse();\n        }\n        else {\n            clips = [];\n            clipZs = [];\n        }\n        for (var i = zs.length - 1; i >= 0; --i) {\n            var currentZ = zs[i];\n            var currentTilePixelSize = tileSource.getTilePixelSize(currentZ, pixelRatio, projection);\n            var currentResolution = tileGrid.getResolution(currentZ);\n            var currentScale = currentResolution / tileResolution;\n            var dx_1 = currentTilePixelSize[0] * currentScale * canvasScale;\n            var dy_1 = currentTilePixelSize[1] * currentScale * canvasScale;\n            var originTileCoord = tileGrid.getTileCoordForCoordAndZ(getTopLeft(canvasExtent), currentZ);\n            var originTileExtent = tileGrid.getTileCoordExtent(originTileCoord);\n            var origin_1 = applyTransform(this.tempTransform, [\n                (tilePixelRatio * (originTileExtent[0] - canvasExtent[0])) /\n                    tileResolution,\n                (tilePixelRatio * (canvasExtent[3] - originTileExtent[3])) /\n                    tileResolution,\n            ]);\n            var tileGutter = tilePixelRatio * tileSource.getGutterForProjection(projection);\n            var tilesToDraw = tilesToDrawByZ[currentZ];\n            for (var tileCoordKey in tilesToDraw) {\n                var tile = /** @type {import(\"../../ImageTile.js\").default} */ (tilesToDraw[tileCoordKey]);\n                var tileCoord = tile.tileCoord;\n                // Calculate integer positions and sizes so that tiles align\n                var xIndex = originTileCoord[1] - tileCoord[1];\n                var nextX = Math.round(origin_1[0] - (xIndex - 1) * dx_1);\n                var yIndex = originTileCoord[2] - tileCoord[2];\n                var nextY = Math.round(origin_1[1] - (yIndex - 1) * dy_1);\n                var x = Math.round(origin_1[0] - xIndex * dx_1);\n                var y = Math.round(origin_1[1] - yIndex * dy_1);\n                var w = nextX - x;\n                var h = nextY - y;\n                var transition = z === currentZ;\n                var inTransition = transition && tile.getAlpha(getUid(this), frameState.time) !== 1;\n                var contextSaved = false;\n                if (!inTransition) {\n                    if (clips) {\n                        // Clip mask for regions in this tile that already filled by a higher z tile\n                        currentClip = [x, y, x + w, y, x + w, y + h, x, y + h];\n                        for (var i_1 = 0, ii = clips.length; i_1 < ii; ++i_1) {\n                            if (z !== currentZ && currentZ < clipZs[i_1]) {\n                                var clip = clips[i_1];\n                                if (intersects([x, y, x + w, y + h], [clip[0], clip[3], clip[4], clip[7]])) {\n                                    if (!contextSaved) {\n                                        context.save();\n                                        contextSaved = true;\n                                    }\n                                    context.beginPath();\n                                    // counter-clockwise (outer ring) for current tile\n                                    context.moveTo(currentClip[0], currentClip[1]);\n                                    context.lineTo(currentClip[2], currentClip[3]);\n                                    context.lineTo(currentClip[4], currentClip[5]);\n                                    context.lineTo(currentClip[6], currentClip[7]);\n                                    // clockwise (inner ring) for higher z tile\n                                    context.moveTo(clip[6], clip[7]);\n                                    context.lineTo(clip[4], clip[5]);\n                                    context.lineTo(clip[2], clip[3]);\n                                    context.lineTo(clip[0], clip[1]);\n                                    context.clip();\n                                }\n                            }\n                        }\n                        clips.push(currentClip);\n                        clipZs.push(currentZ);\n                    }\n                    else {\n                        context.clearRect(x, y, w, h);\n                    }\n                }\n                this.drawTileImage(tile, frameState, x, y, w, h, tileGutter, transition);\n                if (clips && !inTransition) {\n                    if (contextSaved) {\n                        context.restore();\n                    }\n                    this.renderedTiles.unshift(tile);\n                }\n                else {\n                    this.renderedTiles.push(tile);\n                }\n                this.updateUsedTiles(frameState.usedTiles, tileSource, tile);\n            }\n        }\n        this.renderedRevision = sourceRevision;\n        this.renderedResolution = tileResolution;\n        this.extentChanged =\n            !this.renderedExtent_ || !equals(this.renderedExtent_, canvasExtent);\n        this.renderedExtent_ = canvasExtent;\n        this.renderedPixelRatio = pixelRatio;\n        this.renderedProjection = projection;\n        this.manageTilePyramid(frameState, tileSource, tileGrid, pixelRatio, projection, extent, z, tileLayer.getPreload());\n        this.scheduleExpireCache(frameState, tileSource);\n        this.postRender(context, frameState);\n        if (layerState.extent) {\n            context.restore();\n        }\n        assign(context, IMAGE_SMOOTHING_ENABLED);\n        if (canvasTransform !== canvas.style.transform) {\n            canvas.style.transform = canvasTransform;\n        }\n        var opacity = cssOpacity(layerState.opacity);\n        var container = this.container;\n        if (opacity !== container.style.opacity) {\n            container.style.opacity = opacity;\n        }\n        return this.container;\n    };\n    /**\n     * @param {import(\"../../ImageTile.js\").default} tile Tile.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {number} x Left of the tile.\n     * @param {number} y Top of the tile.\n     * @param {number} w Width of the tile.\n     * @param {number} h Height of the tile.\n     * @param {number} gutter Tile gutter.\n     * @param {boolean} transition Apply an alpha transition.\n     */\n    CanvasTileLayerRenderer.prototype.drawTileImage = function (tile, frameState, x, y, w, h, gutter, transition) {\n        var image = this.getTileImage(tile);\n        if (!image) {\n            return;\n        }\n        var uid = getUid(this);\n        var alpha = transition ? tile.getAlpha(uid, frameState.time) : 1;\n        var alphaChanged = alpha !== this.context.globalAlpha;\n        if (alphaChanged) {\n            this.context.save();\n            this.context.globalAlpha = alpha;\n        }\n        this.context.drawImage(image, gutter, gutter, image.width - 2 * gutter, image.height - 2 * gutter, x, y, w, h);\n        if (alphaChanged) {\n            this.context.restore();\n        }\n        if (alpha !== 1) {\n            frameState.animate = true;\n        }\n        else if (transition) {\n            tile.endTransition(uid);\n        }\n    };\n    /**\n     * @return {HTMLCanvasElement} Image\n     */\n    CanvasTileLayerRenderer.prototype.getImage = function () {\n        var context = this.context;\n        return context ? context.canvas : null;\n    };\n    /**\n     * Get the image from a tile.\n     * @param {import(\"../../ImageTile.js\").default} tile Tile.\n     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n     * @protected\n     */\n    CanvasTileLayerRenderer.prototype.getTileImage = function (tile) {\n        return tile.getImage();\n    };\n    /**\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n     * @protected\n     */\n    CanvasTileLayerRenderer.prototype.scheduleExpireCache = function (frameState, tileSource) {\n        if (tileSource.canExpireCache()) {\n            /**\n             * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n             * @param {import(\"../../PluggableMap.js\").default} map Map.\n             * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n             */\n            var postRenderFunction = function (tileSource, map, frameState) {\n                var tileSourceKey = getUid(tileSource);\n                if (tileSourceKey in frameState.usedTiles) {\n                    tileSource.expireCache(frameState.viewState.projection, frameState.usedTiles[tileSourceKey]);\n                }\n            }.bind(null, tileSource);\n            frameState.postRenderFunctions.push(\n            /** @type {import(\"../../PluggableMap.js\").PostRenderFunction} */ (postRenderFunction));\n        }\n    };\n    /**\n     * @param {!Object<string, !Object<string, boolean>>} usedTiles Used tiles.\n     * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n     * @param {import('../../Tile.js').default} tile Tile.\n     * @protected\n     */\n    CanvasTileLayerRenderer.prototype.updateUsedTiles = function (usedTiles, tileSource, tile) {\n        // FIXME should we use tilesToDrawByZ instead?\n        var tileSourceKey = getUid(tileSource);\n        if (!(tileSourceKey in usedTiles)) {\n            usedTiles[tileSourceKey] = {};\n        }\n        usedTiles[tileSourceKey][tile.getKey()] = true;\n    };\n    /**\n     * Manage tile pyramid.\n     * This function performs a number of functions related to the tiles at the\n     * current zoom and lower zoom levels:\n     * - registers idle tiles in frameState.wantedTiles so that they are not\n     *   discarded by the tile queue\n     * - enqueues missing tiles\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n     * @param {import(\"../../tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../../proj/Projection.js\").default} projection Projection.\n     * @param {import(\"../../extent.js\").Extent} extent Extent.\n     * @param {number} currentZ Current Z.\n     * @param {number} preload Load low resolution tiles up to `preload` levels.\n     * @param {function(import(\"../../Tile.js\").default):void} [opt_tileCallback] Tile callback.\n     * @protected\n     */\n    CanvasTileLayerRenderer.prototype.manageTilePyramid = function (frameState, tileSource, tileGrid, pixelRatio, projection, extent, currentZ, preload, opt_tileCallback) {\n        var tileSourceKey = getUid(tileSource);\n        if (!(tileSourceKey in frameState.wantedTiles)) {\n            frameState.wantedTiles[tileSourceKey] = {};\n        }\n        var wantedTiles = frameState.wantedTiles[tileSourceKey];\n        var tileQueue = frameState.tileQueue;\n        var minZoom = tileGrid.getMinZoom();\n        var tileCount = 0;\n        var tile, tileRange, tileResolution, x, y, z;\n        for (z = minZoom; z <= currentZ; ++z) {\n            tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, tileRange);\n            tileResolution = tileGrid.getResolution(z);\n            for (x = tileRange.minX; x <= tileRange.maxX; ++x) {\n                for (y = tileRange.minY; y <= tileRange.maxY; ++y) {\n                    if (currentZ - z <= preload) {\n                        ++tileCount;\n                        tile = tileSource.getTile(z, x, y, pixelRatio, projection);\n                        if (tile.getState() == TileState.IDLE) {\n                            wantedTiles[tile.getKey()] = true;\n                            if (!tileQueue.isKeyQueued(tile.getKey())) {\n                                tileQueue.enqueue([\n                                    tile,\n                                    tileSourceKey,\n                                    tileGrid.getTileCoordCenter(tile.tileCoord),\n                                    tileResolution,\n                                ]);\n                            }\n                        }\n                        if (opt_tileCallback !== undefined) {\n                            opt_tileCallback(tile);\n                        }\n                    }\n                    else {\n                        tileSource.useTile(z, x, y, projection);\n                    }\n                }\n            }\n        }\n        tileSource.updateCacheSize(tileCount, projection);\n    };\n    return CanvasTileLayerRenderer;\n}(CanvasLayerRenderer));\nexport default CanvasTileLayerRenderer;\n//# sourceMappingURL=TileLayer.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/renderer/canvas/VectorLayer\n */\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasLayerRenderer from './Layer.js';\nimport ExecutorGroup from '../../render/canvas/ExecutorGroup.js';\nimport ViewHint from '../../ViewHint.js';\nimport { HIT_DETECT_RESOLUTION, createHitDetectionImageData, hitDetect, } from '../../render/canvas/hitdetect.js';\nimport { apply, makeInverse, makeScale, toString as transformToString, } from '../../transform.js';\nimport { buffer, containsExtent, createEmpty, getWidth, intersects as intersectsExtent, wrapX as wrapExtentX, } from '../../extent.js';\nimport { cssOpacity } from '../../css.js';\nimport { defaultOrder as defaultRenderOrder, getTolerance as getRenderTolerance, getSquaredTolerance as getSquaredRenderTolerance, renderFeature, } from '../vector.js';\nimport { equals } from '../../array.js';\nimport { fromUserExtent, getTransformFromProjections, getUserProjection, toUserExtent, toUserResolution, } from '../../proj.js';\nimport { getUid } from '../../util.js';\nimport { wrapX as wrapCoordinateX } from '../../coordinate.js';\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\nvar CanvasVectorLayerRenderer = /** @class */ (function (_super) {\n    __extends(CanvasVectorLayerRenderer, _super);\n    /**\n     * @param {import(\"../../layer/BaseVector.js\").default} vectorLayer Vector layer.\n     */\n    function CanvasVectorLayerRenderer(vectorLayer) {\n        var _this = _super.call(this, vectorLayer) || this;\n        /** @private */\n        _this.boundHandleStyleImageChange_ = _this.handleStyleImageChange_.bind(_this);\n        /**\n         * @type {boolean}\n         */\n        _this.animatingOrInteracting_;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.dirty_ = false;\n        /**\n         * @type {ImageData}\n         */\n        _this.hitDetectionImageData_ = null;\n        /**\n         * @type {Array<import(\"../../Feature.js\").default>}\n         */\n        _this.renderedFeatures_ = null;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.renderedRevision_ = -1;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.renderedResolution_ = NaN;\n        /**\n         * @private\n         * @type {import(\"../../extent.js\").Extent}\n         */\n        _this.renderedExtent_ = createEmpty();\n        /**\n         * @private\n         * @type {import(\"../../extent.js\").Extent}\n         */\n        _this.wrappedRenderedExtent_ = createEmpty();\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.renderedRotation_;\n        /**\n         * @private\n         * @type {import(\"../../coordinate\").Coordinate}\n         */\n        _this.renderedCenter_ = null;\n        /**\n         * @private\n         * @type {import(\"../../proj/Projection\").default}\n         */\n        _this.renderedProjection_ = null;\n        /**\n         * @private\n         * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\n         */\n        _this.renderedRenderOrder_ = null;\n        /**\n         * @private\n         * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n         */\n        _this.replayGroup_ = null;\n        /**\n         * A new replay group had to be created by `prepareFrame()`\n         * @type {boolean}\n         */\n        _this.replayGroupChanged = true;\n        /**\n         * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n         */\n        _this.declutterExecutorGroup = null;\n        /**\n         * Clipping to be performed by `renderFrame()`\n         * @type {boolean}\n         */\n        _this.clipping = true;\n        return _this;\n    }\n    /**\n     * @param {ExecutorGroup} executorGroup Executor group.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {import(\"rbush\").default} [opt_declutterTree] Declutter tree.\n     */\n    CanvasVectorLayerRenderer.prototype.renderWorlds = function (executorGroup, frameState, opt_declutterTree) {\n        var extent = frameState.extent;\n        var viewState = frameState.viewState;\n        var center = viewState.center;\n        var resolution = viewState.resolution;\n        var projection = viewState.projection;\n        var rotation = viewState.rotation;\n        var projectionExtent = projection.getExtent();\n        var vectorSource = this.getLayer().getSource();\n        var pixelRatio = frameState.pixelRatio;\n        var viewHints = frameState.viewHints;\n        var snapToPixel = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n        var context = this.context;\n        var width = Math.round(frameState.size[0] * pixelRatio);\n        var height = Math.round(frameState.size[1] * pixelRatio);\n        var multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n        var worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n        var endWorld = multiWorld\n            ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1\n            : 1;\n        var world = multiWorld\n            ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth)\n            : 0;\n        do {\n            var transform = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, world * worldWidth);\n            executorGroup.execute(context, 1, transform, rotation, snapToPixel, undefined, opt_declutterTree);\n        } while (++world < endWorld);\n    };\n    /**\n     * Render declutter items for this layer\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     */\n    CanvasVectorLayerRenderer.prototype.renderDeclutter = function (frameState) {\n        if (this.declutterExecutorGroup) {\n            this.renderWorlds(this.declutterExecutorGroup, frameState, frameState.declutterTree);\n        }\n    };\n    /**\n     * Render the layer.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {HTMLElement} target Target that may be used to render content to.\n     * @return {HTMLElement} The rendered element.\n     */\n    CanvasVectorLayerRenderer.prototype.renderFrame = function (frameState, target) {\n        var pixelRatio = frameState.pixelRatio;\n        var layerState = frameState.layerStatesArray[frameState.layerIndex];\n        // set forward and inverse pixel transforms\n        makeScale(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);\n        makeInverse(this.inversePixelTransform, this.pixelTransform);\n        var canvasTransform = transformToString(this.pixelTransform);\n        this.useContainer(target, canvasTransform, layerState.opacity, this.getBackground(frameState));\n        var context = this.context;\n        var canvas = context.canvas;\n        var replayGroup = this.replayGroup_;\n        var declutterExecutorGroup = this.declutterExecutorGroup;\n        if ((!replayGroup || replayGroup.isEmpty()) &&\n            (!declutterExecutorGroup || declutterExecutorGroup.isEmpty())) {\n            return null;\n        }\n        // resize and clear\n        var width = Math.round(frameState.size[0] * pixelRatio);\n        var height = Math.round(frameState.size[1] * pixelRatio);\n        if (canvas.width != width || canvas.height != height) {\n            canvas.width = width;\n            canvas.height = height;\n            if (canvas.style.transform !== canvasTransform) {\n                canvas.style.transform = canvasTransform;\n            }\n        }\n        else if (!this.containerReused) {\n            context.clearRect(0, 0, width, height);\n        }\n        this.preRender(context, frameState);\n        var viewState = frameState.viewState;\n        var projection = viewState.projection;\n        // clipped rendering if layer extent is set\n        var clipped = false;\n        var render = true;\n        if (layerState.extent && this.clipping) {\n            var layerExtent = fromUserExtent(layerState.extent, projection);\n            render = intersectsExtent(layerExtent, frameState.extent);\n            clipped = render && !containsExtent(layerExtent, frameState.extent);\n            if (clipped) {\n                this.clipUnrotated(context, frameState, layerExtent);\n            }\n        }\n        if (render) {\n            this.renderWorlds(replayGroup, frameState);\n        }\n        if (clipped) {\n            context.restore();\n        }\n        this.postRender(context, frameState);\n        var opacity = cssOpacity(layerState.opacity);\n        var container = this.container;\n        if (opacity !== container.style.opacity) {\n            container.style.opacity = opacity;\n        }\n        if (this.renderedRotation_ !== viewState.rotation) {\n            this.renderedRotation_ = viewState.rotation;\n            this.hitDetectionImageData_ = null;\n        }\n        return this.container;\n    };\n    /**\n     * Asynchronous layer level hit detection.\n     * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n     * @return {Promise<Array<import(\"../../Feature\").default>>} Promise that resolves with an array of features.\n     */\n    CanvasVectorLayerRenderer.prototype.getFeatures = function (pixel) {\n        return new Promise(\n        /**\n         * @param {function(Array<import(\"../../Feature\").default|import(\"../../render/Feature\").default>): void} resolve Resolver function.\n         * @this {CanvasVectorLayerRenderer}\n         */\n        function (resolve) {\n            if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {\n                var size = [this.context.canvas.width, this.context.canvas.height];\n                apply(this.pixelTransform, size);\n                var center = this.renderedCenter_;\n                var resolution = this.renderedResolution_;\n                var rotation = this.renderedRotation_;\n                var projection = this.renderedProjection_;\n                var extent = this.wrappedRenderedExtent_;\n                var layer = this.getLayer();\n                var transforms = [];\n                var width = size[0] * HIT_DETECT_RESOLUTION;\n                var height = size[1] * HIT_DETECT_RESOLUTION;\n                transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, 0).slice());\n                var source = layer.getSource();\n                var projectionExtent = projection.getExtent();\n                if (source.getWrapX() &&\n                    projection.canWrapX() &&\n                    !containsExtent(projectionExtent, extent)) {\n                    var startX = extent[0];\n                    var worldWidth = getWidth(projectionExtent);\n                    var world = 0;\n                    var offsetX = void 0;\n                    while (startX < projectionExtent[0]) {\n                        --world;\n                        offsetX = worldWidth * world;\n                        transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n                        startX += worldWidth;\n                    }\n                    world = 0;\n                    startX = extent[2];\n                    while (startX > projectionExtent[2]) {\n                        ++world;\n                        offsetX = worldWidth * world;\n                        transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n                        startX -= worldWidth;\n                    }\n                }\n                this.hitDetectionImageData_ = createHitDetectionImageData(size, transforms, this.renderedFeatures_, layer.getStyleFunction(), extent, resolution, rotation);\n            }\n            resolve(hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_));\n        }.bind(this));\n    };\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n     * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n     * @return {T|undefined} Callback result.\n     * @template T\n     */\n    CanvasVectorLayerRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, matches) {\n        var _this = this;\n        if (!this.replayGroup_) {\n            return undefined;\n        }\n        var resolution = frameState.viewState.resolution;\n        var rotation = frameState.viewState.rotation;\n        var layer = this.getLayer();\n        /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n        var features = {};\n        /**\n         * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n         * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n         * @param {number} distanceSq The squared distance to the click position\n         * @return {T|undefined} Callback result.\n         */\n        var featureCallback = function (feature, geometry, distanceSq) {\n            var key = getUid(feature);\n            var match = features[key];\n            if (!match) {\n                if (distanceSq === 0) {\n                    features[key] = true;\n                    return callback(feature, layer, geometry);\n                }\n                matches.push((features[key] = {\n                    feature: feature,\n                    layer: layer,\n                    geometry: geometry,\n                    distanceSq: distanceSq,\n                    callback: callback,\n                }));\n            }\n            else if (match !== true && distanceSq < match.distanceSq) {\n                if (distanceSq === 0) {\n                    features[key] = true;\n                    matches.splice(matches.lastIndexOf(match), 1);\n                    return callback(feature, layer, geometry);\n                }\n                match.geometry = geometry;\n                match.distanceSq = distanceSq;\n            }\n            return undefined;\n        };\n        var result;\n        var executorGroups = [this.replayGroup_];\n        if (this.declutterExecutorGroup) {\n            executorGroups.push(this.declutterExecutorGroup);\n        }\n        executorGroups.some(function (executorGroup) {\n            return (result = executorGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, featureCallback, executorGroup === _this.declutterExecutorGroup &&\n                frameState.declutterTree\n                ? frameState.declutterTree.all().map(function (item) { return item.value; })\n                : null));\n        });\n        return result;\n    };\n    /**\n     * Perform action necessary to get the layer rendered after new fonts have loaded\n     */\n    CanvasVectorLayerRenderer.prototype.handleFontsChanged = function () {\n        var layer = this.getLayer();\n        if (layer.getVisible() && this.replayGroup_) {\n            layer.changed();\n        }\n    };\n    /**\n     * Handle changes in image style state.\n     * @param {import(\"../../events/Event.js\").default} event Image style change event.\n     * @private\n     */\n    CanvasVectorLayerRenderer.prototype.handleStyleImageChange_ = function (event) {\n        this.renderIfReadyAndVisible();\n    };\n    /**\n     * Determine whether render should be called.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {boolean} Layer is ready to be rendered.\n     */\n    CanvasVectorLayerRenderer.prototype.prepareFrame = function (frameState) {\n        var vectorLayer = this.getLayer();\n        var vectorSource = vectorLayer.getSource();\n        if (!vectorSource) {\n            return false;\n        }\n        var animating = frameState.viewHints[ViewHint.ANIMATING];\n        var interacting = frameState.viewHints[ViewHint.INTERACTING];\n        var updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n        var updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n        if ((!this.dirty_ && !updateWhileAnimating && animating) ||\n            (!updateWhileInteracting && interacting)) {\n            this.animatingOrInteracting_ = true;\n            return true;\n        }\n        this.animatingOrInteracting_ = false;\n        var frameStateExtent = frameState.extent;\n        var viewState = frameState.viewState;\n        var projection = viewState.projection;\n        var resolution = viewState.resolution;\n        var pixelRatio = frameState.pixelRatio;\n        var vectorLayerRevision = vectorLayer.getRevision();\n        var vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n        var vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n        if (vectorLayerRenderOrder === undefined) {\n            vectorLayerRenderOrder = defaultRenderOrder;\n        }\n        var center = viewState.center.slice();\n        var extent = buffer(frameStateExtent, vectorLayerRenderBuffer * resolution);\n        var renderedExtent = extent.slice();\n        var loadExtents = [extent.slice()];\n        var projectionExtent = projection.getExtent();\n        if (vectorSource.getWrapX() &&\n            projection.canWrapX() &&\n            !containsExtent(projectionExtent, frameState.extent)) {\n            // For the replay group, we need an extent that intersects the real world\n            // (-180° to +180°). To support geometries in a coordinate range from -540°\n            // to +540°, we add at least 1 world width on each side of the projection\n            // extent. If the viewport is wider than the world, we need to add half of\n            // the viewport width to make sure we cover the whole viewport.\n            var worldWidth = getWidth(projectionExtent);\n            var gutter = Math.max(getWidth(extent) / 2, worldWidth);\n            extent[0] = projectionExtent[0] - gutter;\n            extent[2] = projectionExtent[2] + gutter;\n            wrapCoordinateX(center, projection);\n            var loadExtent = wrapExtentX(loadExtents[0], projection);\n            // If the extent crosses the date line, we load data for both edges of the worlds\n            if (loadExtent[0] < projectionExtent[0] &&\n                loadExtent[2] < projectionExtent[2]) {\n                loadExtents.push([\n                    loadExtent[0] + worldWidth,\n                    loadExtent[1],\n                    loadExtent[2] + worldWidth,\n                    loadExtent[3],\n                ]);\n            }\n            else if (loadExtent[0] > projectionExtent[0] &&\n                loadExtent[2] > projectionExtent[2]) {\n                loadExtents.push([\n                    loadExtent[0] - worldWidth,\n                    loadExtent[1],\n                    loadExtent[2] - worldWidth,\n                    loadExtent[3],\n                ]);\n            }\n        }\n        if (!this.dirty_ &&\n            this.renderedResolution_ == resolution &&\n            this.renderedRevision_ == vectorLayerRevision &&\n            this.renderedRenderOrder_ == vectorLayerRenderOrder &&\n            containsExtent(this.wrappedRenderedExtent_, extent)) {\n            if (!equals(this.renderedExtent_, renderedExtent)) {\n                this.hitDetectionImageData_ = null;\n                this.renderedExtent_ = renderedExtent;\n            }\n            this.renderedCenter_ = center;\n            this.replayGroupChanged = false;\n            return true;\n        }\n        this.replayGroup_ = null;\n        this.dirty_ = false;\n        var replayGroup = new CanvasBuilderGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);\n        var declutterBuilderGroup;\n        if (this.getLayer().getDeclutter()) {\n            declutterBuilderGroup = new CanvasBuilderGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);\n        }\n        var userProjection = getUserProjection();\n        var userTransform;\n        if (userProjection) {\n            for (var i = 0, ii = loadExtents.length; i < ii; ++i) {\n                var extent_1 = loadExtents[i];\n                var userExtent_1 = toUserExtent(extent_1, projection);\n                vectorSource.loadFeatures(userExtent_1, toUserResolution(resolution, projection), userProjection);\n            }\n            userTransform = getTransformFromProjections(userProjection, projection);\n        }\n        else {\n            for (var i = 0, ii = loadExtents.length; i < ii; ++i) {\n                vectorSource.loadFeatures(loadExtents[i], resolution, projection);\n            }\n        }\n        var squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n        var render = \n        /**\n         * @param {import(\"../../Feature.js\").default} feature Feature.\n         * @this {CanvasVectorLayerRenderer}\n         */\n        function (feature) {\n            var styles;\n            var styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();\n            if (styleFunction) {\n                styles = styleFunction(feature, resolution);\n            }\n            if (styles) {\n                var dirty = this.renderFeature(feature, squaredTolerance, styles, replayGroup, userTransform, declutterBuilderGroup);\n                this.dirty_ = this.dirty_ || dirty;\n            }\n        }.bind(this);\n        var userExtent = toUserExtent(extent, projection);\n        /** @type {Array<import(\"../../Feature.js\").default>} */\n        var features = vectorSource.getFeaturesInExtent(userExtent);\n        if (vectorLayerRenderOrder) {\n            features.sort(vectorLayerRenderOrder);\n        }\n        for (var i = 0, ii = features.length; i < ii; ++i) {\n            render(features[i]);\n        }\n        this.renderedFeatures_ = features;\n        var replayGroupInstructions = replayGroup.finish();\n        var executorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), replayGroupInstructions, vectorLayer.getRenderBuffer());\n        if (declutterBuilderGroup) {\n            this.declutterExecutorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), declutterBuilderGroup.finish(), vectorLayer.getRenderBuffer());\n        }\n        this.renderedResolution_ = resolution;\n        this.renderedRevision_ = vectorLayerRevision;\n        this.renderedRenderOrder_ = vectorLayerRenderOrder;\n        this.renderedExtent_ = renderedExtent;\n        this.wrappedRenderedExtent_ = extent;\n        this.renderedCenter_ = center;\n        this.renderedProjection_ = projection;\n        this.replayGroup_ = executorGroup;\n        this.hitDetectionImageData_ = null;\n        this.replayGroupChanged = true;\n        return true;\n    };\n    /**\n     * @param {import(\"../../Feature.js\").default} feature Feature.\n     * @param {number} squaredTolerance Squared render tolerance.\n     * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n     * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n     * @param {import(\"../../proj.js\").TransformFunction} [opt_transform] Transform from user to view projection.\n     * @param {import(\"../../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n     * @return {boolean} `true` if an image is loading.\n     */\n    CanvasVectorLayerRenderer.prototype.renderFeature = function (feature, squaredTolerance, styles, builderGroup, opt_transform, opt_declutterBuilderGroup) {\n        if (!styles) {\n            return false;\n        }\n        var loading = false;\n        if (Array.isArray(styles)) {\n            for (var i = 0, ii = styles.length; i < ii; ++i) {\n                loading =\n                    renderFeature(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, opt_transform, opt_declutterBuilderGroup) || loading;\n            }\n        }\n        else {\n            loading = renderFeature(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, opt_transform, opt_declutterBuilderGroup);\n        }\n        return loading;\n    };\n    return CanvasVectorLayerRenderer;\n}(CanvasLayerRenderer));\nexport default CanvasVectorLayerRenderer;\n//# sourceMappingURL=VectorLayer.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/renderer/canvas/VectorTileLayer\n */\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasExecutorGroup from '../../render/canvas/ExecutorGroup.js';\nimport CanvasTileLayerRenderer from './TileLayer.js';\nimport ReplayType from '../../render/canvas/BuilderType.js';\nimport TileState from '../../TileState.js';\nimport VectorTileRenderType from '../../layer/VectorTileRenderType.js';\nimport ViewHint from '../../ViewHint.js';\nimport { HIT_DETECT_RESOLUTION, createHitDetectionImageData, hitDetect, } from '../../render/canvas/hitdetect.js';\nimport { apply as applyTransform, create as createTransform, multiply, reset as resetTransform, scale, scale as scaleTransform, translate as translateTransform, } from '../../transform.js';\nimport { boundingExtent, buffer, containsExtent, equals, getIntersection, getTopLeft, intersects, } from '../../extent.js';\nimport { getSquaredTolerance as getSquaredRenderTolerance, renderFeature, } from '../vector.js';\nimport { getUid } from '../../util.js';\nimport { toSize } from '../../size.js';\nimport { wrapX } from '../../coordinate.js';\n/**\n * @type {!Object<string, Array<import(\"../../render/canvas/BuilderType.js\").default>>}\n */\nvar IMAGE_REPLAYS = {\n    'image': [\n        ReplayType.POLYGON,\n        ReplayType.CIRCLE,\n        ReplayType.LINE_STRING,\n        ReplayType.IMAGE,\n        ReplayType.TEXT,\n    ],\n    'hybrid': [ReplayType.POLYGON, ReplayType.LINE_STRING],\n    'vector': [],\n};\n/**\n * @type {!Object<string, Array<import(\"../../render/canvas/BuilderType.js\").default>>}\n */\nvar VECTOR_REPLAYS = {\n    'hybrid': [ReplayType.IMAGE, ReplayType.TEXT, ReplayType.DEFAULT],\n    'vector': [\n        ReplayType.POLYGON,\n        ReplayType.CIRCLE,\n        ReplayType.LINE_STRING,\n        ReplayType.IMAGE,\n        ReplayType.TEXT,\n        ReplayType.DEFAULT,\n    ],\n};\n/**\n * @classdesc\n * Canvas renderer for vector tile layers.\n * @api\n * @extends {CanvasTileLayerRenderer<import(\"../../layer/VectorTile.js\").default>}\n */\nvar CanvasVectorTileLayerRenderer = /** @class */ (function (_super) {\n    __extends(CanvasVectorTileLayerRenderer, _super);\n    /**\n     * @param {import(\"../../layer/VectorTile.js\").default} layer VectorTile layer.\n     */\n    function CanvasVectorTileLayerRenderer(layer) {\n        var _this = _super.call(this, layer) || this;\n        /** @private */\n        _this.boundHandleStyleImageChange_ = _this.handleStyleImageChange_.bind(_this);\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.dirty_ = false;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.renderedLayerRevision_;\n        /**\n         * @private\n         * @type {import(\"../../transform\").Transform}\n         */\n        _this.renderedPixelToCoordinateTransform_ = null;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.renderedRotation_;\n        /**\n         * @private\n         * @type {import(\"../../transform.js\").Transform}\n         */\n        _this.tmpTransform_ = createTransform();\n        return _this;\n    }\n    /**\n     * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../../proj/Projection\").default} projection Projection.\n     * @return {boolean|undefined} Tile needs to be rendered.\n     */\n    CanvasVectorTileLayerRenderer.prototype.prepareTile = function (tile, pixelRatio, projection) {\n        var render;\n        var state = tile.getState();\n        if (state === TileState.LOADED || state === TileState.ERROR) {\n            this.updateExecutorGroup_(tile, pixelRatio, projection);\n            if (this.tileImageNeedsRender_(tile)) {\n                render = true;\n            }\n        }\n        return render;\n    };\n    /**\n     * @param {number} z Tile coordinate z.\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {!import(\"../../Tile.js\").default} Tile.\n     */\n    CanvasVectorTileLayerRenderer.prototype.getTile = function (z, x, y, frameState) {\n        var pixelRatio = frameState.pixelRatio;\n        var viewState = frameState.viewState;\n        var resolution = viewState.resolution;\n        var projection = viewState.projection;\n        var layer = this.getLayer();\n        var tile = layer.getSource().getTile(z, x, y, pixelRatio, projection);\n        var viewHints = frameState.viewHints;\n        var hifi = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n        if (hifi || !tile.wantedResolution) {\n            tile.wantedResolution = resolution;\n        }\n        var render = this.prepareTile(tile, pixelRatio, projection);\n        if (render &&\n            (hifi || Date.now() - frameState.time < 8) &&\n            layer.getRenderMode() !== VectorTileRenderType.VECTOR) {\n            this.renderTileImage_(tile, frameState);\n        }\n        return _super.prototype.getTile.call(this, z, x, y, frameState);\n    };\n    /**\n     * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n     * @return {boolean} Tile is drawable.\n     */\n    CanvasVectorTileLayerRenderer.prototype.isDrawableTile = function (tile) {\n        var layer = this.getLayer();\n        return (_super.prototype.isDrawableTile.call(this, tile) &&\n            (layer.getRenderMode() === VectorTileRenderType.VECTOR\n                ? getUid(layer) in tile.executorGroups\n                : tile.hasContext(layer)));\n    };\n    /**\n     * @inheritDoc\n     */\n    CanvasVectorTileLayerRenderer.prototype.getTileImage = function (tile) {\n        return tile.getImage(this.getLayer());\n    };\n    /**\n     * Determine whether render should be called.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {boolean} Layer is ready to be rendered.\n     */\n    CanvasVectorTileLayerRenderer.prototype.prepareFrame = function (frameState) {\n        var layerRevision = this.getLayer().getRevision();\n        if (this.renderedLayerRevision_ != layerRevision) {\n            this.renderedTiles.length = 0;\n        }\n        this.renderedLayerRevision_ = layerRevision;\n        return _super.prototype.prepareFrame.call(this, frameState);\n    };\n    /**\n     * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../../proj/Projection.js\").default} projection Projection.\n     * @private\n     */\n    CanvasVectorTileLayerRenderer.prototype.updateExecutorGroup_ = function (tile, pixelRatio, projection) {\n        var layer = /** @type {import(\"../../layer/VectorTile.js\").default} */ (this.getLayer());\n        var revision = layer.getRevision();\n        var renderOrder = layer.getRenderOrder() || null;\n        var resolution = tile.wantedResolution;\n        var builderState = tile.getReplayState(layer);\n        if (!builderState.dirty &&\n            builderState.renderedResolution === resolution &&\n            builderState.renderedRevision == revision &&\n            builderState.renderedRenderOrder == renderOrder) {\n            return;\n        }\n        var source = layer.getSource();\n        var declutter = layer.getDeclutter();\n        var sourceTileGrid = source.getTileGrid();\n        var tileGrid = source.getTileGridForProjection(projection);\n        var tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\n        var sourceTiles = source.getSourceTiles(pixelRatio, projection, tile);\n        var layerUid = getUid(layer);\n        delete tile.hitDetectionImageData[layerUid];\n        tile.executorGroups[layerUid] = [];\n        if (declutter) {\n            tile.declutterExecutorGroups[layerUid] = [];\n        }\n        var _loop_1 = function (t, tt) {\n            var sourceTile = sourceTiles[t];\n            if (sourceTile.getState() != TileState.LOADED) {\n                return \"continue\";\n            }\n            var sourceTileCoord = sourceTile.tileCoord;\n            var sourceTileExtent = sourceTileGrid.getTileCoordExtent(sourceTileCoord);\n            var sharedExtent = getIntersection(tileExtent, sourceTileExtent);\n            var builderExtent = buffer(sharedExtent, layer.getRenderBuffer() * resolution, this_1.tmpExtent);\n            var bufferedExtent = equals(sourceTileExtent, sharedExtent)\n                ? null\n                : builderExtent;\n            builderState.dirty = false;\n            var builderGroup = new CanvasBuilderGroup(0, builderExtent, resolution, pixelRatio);\n            var declutterBuilderGroup = declutter\n                ? new CanvasBuilderGroup(0, sharedExtent, resolution, pixelRatio)\n                : undefined;\n            var squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n            /**\n             * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n             * @this {CanvasVectorTileLayerRenderer}\n             */\n            var render = function (feature) {\n                var styles;\n                var styleFunction = feature.getStyleFunction() || layer.getStyleFunction();\n                if (styleFunction) {\n                    styles = styleFunction(feature, resolution);\n                }\n                if (styles) {\n                    var dirty = this.renderFeature(feature, squaredTolerance, styles, builderGroup, declutterBuilderGroup);\n                    this.dirty_ = this.dirty_ || dirty;\n                    builderState.dirty = builderState.dirty || dirty;\n                }\n            };\n            var features = sourceTile.getFeatures();\n            if (renderOrder && renderOrder !== builderState.renderedRenderOrder) {\n                features.sort(renderOrder);\n            }\n            for (var i = 0, ii = features.length; i < ii; ++i) {\n                var feature = features[i];\n                if (!bufferedExtent ||\n                    intersects(bufferedExtent, feature.getGeometry().getExtent())) {\n                    render.call(this_1, feature);\n                }\n            }\n            var executorGroupInstructions = builderGroup.finish();\n            // no need to clip when the render tile is covered by a single source tile\n            var replayExtent = layer.getRenderMode() !== VectorTileRenderType.VECTOR &&\n                declutter &&\n                sourceTiles.length === 1\n                ? null\n                : sharedExtent;\n            var renderingReplayGroup = new CanvasExecutorGroup(replayExtent, resolution, pixelRatio, source.getOverlaps(), executorGroupInstructions, layer.getRenderBuffer());\n            tile.executorGroups[layerUid].push(renderingReplayGroup);\n            if (declutterBuilderGroup) {\n                var declutterExecutorGroup = new CanvasExecutorGroup(null, resolution, pixelRatio, source.getOverlaps(), declutterBuilderGroup.finish(), layer.getRenderBuffer());\n                tile.declutterExecutorGroups[layerUid].push(declutterExecutorGroup);\n            }\n        };\n        var this_1 = this;\n        for (var t = 0, tt = sourceTiles.length; t < tt; ++t) {\n            _loop_1(t, tt);\n        }\n        builderState.renderedRevision = revision;\n        builderState.renderedRenderOrder = renderOrder;\n        builderState.renderedResolution = resolution;\n    };\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n     * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n     * @return {T|undefined} Callback result.\n     * @template T\n     */\n    CanvasVectorTileLayerRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, matches) {\n        var resolution = frameState.viewState.resolution;\n        var rotation = frameState.viewState.rotation;\n        hitTolerance = hitTolerance == undefined ? 0 : hitTolerance;\n        var layer = this.getLayer();\n        var source = layer.getSource();\n        var tileGrid = source.getTileGridForProjection(frameState.viewState.projection);\n        var hitExtent = boundingExtent([coordinate]);\n        buffer(hitExtent, resolution * hitTolerance, hitExtent);\n        /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n        var features = {};\n        /**\n         * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n         * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n         * @param {number} distanceSq The squared distance to the click position.\n         * @return {T|undefined} Callback result.\n         */\n        var featureCallback = function (feature, geometry, distanceSq) {\n            var key = feature.getId();\n            if (key === undefined) {\n                key = getUid(feature);\n            }\n            var match = features[key];\n            if (!match) {\n                if (distanceSq === 0) {\n                    features[key] = true;\n                    return callback(feature, layer, geometry);\n                }\n                matches.push((features[key] = {\n                    feature: feature,\n                    layer: layer,\n                    geometry: geometry,\n                    distanceSq: distanceSq,\n                    callback: callback,\n                }));\n            }\n            else if (match !== true && distanceSq < match.distanceSq) {\n                if (distanceSq === 0) {\n                    features[key] = true;\n                    matches.splice(matches.lastIndexOf(match), 1);\n                    return callback(feature, layer, geometry);\n                }\n                match.geometry = geometry;\n                match.distanceSq = distanceSq;\n            }\n            return undefined;\n        };\n        var renderedTiles = \n        /** @type {Array<import(\"../../VectorRenderTile.js\").default>} */ (this.renderedTiles);\n        var found;\n        var _loop_2 = function (i, ii) {\n            var tile = renderedTiles[i];\n            var tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\n            if (!intersects(tileExtent, hitExtent)) {\n                return \"continue\";\n            }\n            var layerUid = getUid(layer);\n            var executorGroups = [tile.executorGroups[layerUid]];\n            var declutterExecutorGroups = tile.declutterExecutorGroups[layerUid];\n            if (declutterExecutorGroups) {\n                executorGroups.push(declutterExecutorGroups);\n            }\n            executorGroups.some(function (executorGroups) {\n                var declutteredFeatures = executorGroups === declutterExecutorGroups\n                    ? frameState.declutterTree.all().map(function (item) { return item.value; })\n                    : null;\n                for (var t = 0, tt = executorGroups.length; t < tt; ++t) {\n                    var executorGroup = executorGroups[t];\n                    found = executorGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, featureCallback, declutteredFeatures);\n                    if (found) {\n                        return true;\n                    }\n                }\n            });\n        };\n        for (var i = 0, ii = renderedTiles.length; !found && i < ii; ++i) {\n            _loop_2(i, ii);\n        }\n        return found;\n    };\n    /**\n     * Asynchronous layer level hit detection.\n     * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n     * @return {Promise<Array<import(\"../../Feature\").default>>} Promise that resolves with an array of features.\n     */\n    CanvasVectorTileLayerRenderer.prototype.getFeatures = function (pixel) {\n        return new Promise(function (resolve, reject) {\n            var layer = \n            /** @type {import(\"../../layer/VectorTile.js\").default} */ (this.getLayer());\n            var layerUid = getUid(layer);\n            var source = layer.getSource();\n            var projection = this.renderedProjection;\n            var projectionExtent = projection.getExtent();\n            var resolution = this.renderedResolution;\n            var tileGrid = source.getTileGridForProjection(projection);\n            var coordinate = applyTransform(this.renderedPixelToCoordinateTransform_, pixel.slice());\n            var tileCoord = tileGrid.getTileCoordForCoordAndResolution(coordinate, resolution);\n            var tile;\n            for (var i = 0, ii = this.renderedTiles.length; i < ii; ++i) {\n                if (tileCoord.toString() === this.renderedTiles[i].tileCoord.toString()) {\n                    tile = this.renderedTiles[i];\n                    if (tile.getState() === TileState.LOADED) {\n                        var extent_1 = tileGrid.getTileCoordExtent(tile.tileCoord);\n                        if (source.getWrapX() &&\n                            projection.canWrapX() &&\n                            !containsExtent(projectionExtent, extent_1)) {\n                            wrapX(coordinate, projection);\n                        }\n                        break;\n                    }\n                    tile = undefined;\n                }\n            }\n            if (!tile || tile.loadingSourceTiles > 0) {\n                resolve([]);\n                return;\n            }\n            var extent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\n            var corner = getTopLeft(extent);\n            var tilePixel = [\n                (coordinate[0] - corner[0]) / resolution,\n                (corner[1] - coordinate[1]) / resolution,\n            ];\n            var features = tile\n                .getSourceTiles()\n                .reduce(function (accumulator, sourceTile) {\n                return accumulator.concat(sourceTile.getFeatures());\n            }, []);\n            var hitDetectionImageData = tile.hitDetectionImageData[layerUid];\n            if (!hitDetectionImageData && !this.animatingOrInteracting_) {\n                var tileSize = toSize(tileGrid.getTileSize(tileGrid.getZForResolution(resolution)));\n                var rotation = this.renderedRotation_;\n                var transforms = [\n                    this.getRenderTransform(tileGrid.getTileCoordCenter(tile.wrappedTileCoord), resolution, 0, HIT_DETECT_RESOLUTION, tileSize[0] * HIT_DETECT_RESOLUTION, tileSize[1] * HIT_DETECT_RESOLUTION, 0),\n                ];\n                hitDetectionImageData = createHitDetectionImageData(tileSize, transforms, features, layer.getStyleFunction(), tileGrid.getTileCoordExtent(tile.wrappedTileCoord), tile.getReplayState(layer).renderedResolution, rotation);\n                tile.hitDetectionImageData[layerUid] = hitDetectionImageData;\n            }\n            resolve(hitDetect(tilePixel, features, hitDetectionImageData));\n        }.bind(this));\n    };\n    /**\n     * Perform action necessary to get the layer rendered after new fonts have loaded\n     */\n    CanvasVectorTileLayerRenderer.prototype.handleFontsChanged = function () {\n        var layer = this.getLayer();\n        if (layer.getVisible() && this.renderedLayerRevision_ !== undefined) {\n            layer.changed();\n        }\n    };\n    /**\n     * Handle changes in image style state.\n     * @param {import(\"../../events/Event.js\").default} event Image style change event.\n     * @private\n     */\n    CanvasVectorTileLayerRenderer.prototype.handleStyleImageChange_ = function (event) {\n        this.renderIfReadyAndVisible();\n    };\n    /**\n     * Render declutter items for this layer\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     */\n    CanvasVectorTileLayerRenderer.prototype.renderDeclutter = function (frameState) {\n        var context = this.context;\n        var alpha = context.globalAlpha;\n        context.globalAlpha = this.getLayer().getOpacity();\n        var viewHints = frameState.viewHints;\n        var hifi = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n        var tiles = \n        /** @type {Array<import(\"../../VectorRenderTile.js\").default>} */ (this.renderedTiles);\n        for (var i = 0, ii = tiles.length; i < ii; ++i) {\n            var tile = tiles[i];\n            var declutterExecutorGroups = tile.declutterExecutorGroups[getUid(this.getLayer())];\n            if (declutterExecutorGroups) {\n                for (var j = declutterExecutorGroups.length - 1; j >= 0; --j) {\n                    declutterExecutorGroups[j].execute(this.context, 1, this.getTileRenderTransform(tile, frameState), frameState.viewState.rotation, hifi, undefined, frameState.declutterTree);\n                }\n            }\n        }\n        context.globalAlpha = alpha;\n    };\n    CanvasVectorTileLayerRenderer.prototype.getTileRenderTransform = function (tile, frameState) {\n        var pixelRatio = frameState.pixelRatio;\n        var viewState = frameState.viewState;\n        var center = viewState.center;\n        var resolution = viewState.resolution;\n        var rotation = viewState.rotation;\n        var size = frameState.size;\n        var width = Math.round(size[0] * pixelRatio);\n        var height = Math.round(size[1] * pixelRatio);\n        var source = this.getLayer().getSource();\n        var tileGrid = source.getTileGridForProjection(frameState.viewState.projection);\n        var tileCoord = tile.tileCoord;\n        var tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\n        var worldOffset = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent)[0] - tileExtent[0];\n        var transform = multiply(scale(this.inversePixelTransform.slice(), 1 / pixelRatio, 1 / pixelRatio), this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, worldOffset));\n        return transform;\n    };\n    /**\n     * Render the layer.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {HTMLElement} target Target that may be used to render content to.\n     * @return {HTMLElement} The rendered element.\n     */\n    CanvasVectorTileLayerRenderer.prototype.renderFrame = function (frameState, target) {\n        var viewHints = frameState.viewHints;\n        var hifi = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n        _super.prototype.renderFrame.call(this, frameState, target);\n        this.renderedPixelToCoordinateTransform_ =\n            frameState.pixelToCoordinateTransform.slice();\n        this.renderedRotation_ = frameState.viewState.rotation;\n        var layer = /** @type {import(\"../../layer/VectorTile.js\").default} */ (this.getLayer());\n        var renderMode = layer.getRenderMode();\n        var context = this.context;\n        var alpha = context.globalAlpha;\n        context.globalAlpha = layer.getOpacity();\n        var replayTypes = VECTOR_REPLAYS[renderMode];\n        var viewState = frameState.viewState;\n        var rotation = viewState.rotation;\n        var tileSource = layer.getSource();\n        var tileGrid = tileSource.getTileGridForProjection(viewState.projection);\n        var z = tileGrid.getZForResolution(viewState.resolution, tileSource.zDirection);\n        var tiles = this.renderedTiles;\n        var clips = [];\n        var clipZs = [];\n        for (var i = tiles.length - 1; i >= 0; --i) {\n            var tile = /** @type {import(\"../../VectorRenderTile.js\").default} */ (tiles[i]);\n            var executorGroups = tile.executorGroups[getUid(layer)].filter(function (group) { return group.hasExecutors(replayTypes); });\n            if (executorGroups.length === 0) {\n                continue;\n            }\n            var transform = this.getTileRenderTransform(tile, frameState);\n            var currentZ = tile.tileCoord[0];\n            var contextSaved = false;\n            // Clip mask for regions in this tile that already filled by a higher z tile\n            var currentClip = executorGroups[0].getClipCoords(transform);\n            for (var j = 0, jj = clips.length; j < jj; ++j) {\n                if (z !== currentZ && currentZ < clipZs[j]) {\n                    var clip = clips[j];\n                    if (intersects([currentClip[0], currentClip[3], currentClip[4], currentClip[7]], [clip[0], clip[3], clip[4], clip[7]])) {\n                        if (!contextSaved) {\n                            context.save();\n                            contextSaved = true;\n                        }\n                        context.beginPath();\n                        // counter-clockwise (outer ring) for current tile\n                        context.moveTo(currentClip[0], currentClip[1]);\n                        context.lineTo(currentClip[2], currentClip[3]);\n                        context.lineTo(currentClip[4], currentClip[5]);\n                        context.lineTo(currentClip[6], currentClip[7]);\n                        // clockwise (inner ring) for higher z tile\n                        context.moveTo(clip[6], clip[7]);\n                        context.lineTo(clip[4], clip[5]);\n                        context.lineTo(clip[2], clip[3]);\n                        context.lineTo(clip[0], clip[1]);\n                        context.clip();\n                    }\n                }\n            }\n            clips.push(currentClip);\n            clipZs.push(currentZ);\n            for (var t = 0, tt = executorGroups.length; t < tt; ++t) {\n                var executorGroup = executorGroups[t];\n                executorGroup.execute(context, 1, transform, rotation, hifi, replayTypes);\n            }\n            if (contextSaved) {\n                context.restore();\n            }\n        }\n        context.globalAlpha = alpha;\n        return this.container;\n    };\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n     * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n     * @param {import(\"../../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder group for decluttering.\n     * @return {boolean} `true` if an image is loading.\n     */\n    CanvasVectorTileLayerRenderer.prototype.renderFeature = function (feature, squaredTolerance, styles, builderGroup, opt_declutterBuilderGroup) {\n        if (!styles) {\n            return false;\n        }\n        var loading = false;\n        if (Array.isArray(styles)) {\n            for (var i = 0, ii = styles.length; i < ii; ++i) {\n                loading =\n                    renderFeature(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, undefined, opt_declutterBuilderGroup) || loading;\n            }\n        }\n        else {\n            loading = renderFeature(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, undefined, opt_declutterBuilderGroup);\n        }\n        return loading;\n    };\n    /**\n     * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n     * @return {boolean} A new tile image was rendered.\n     * @private\n     */\n    CanvasVectorTileLayerRenderer.prototype.tileImageNeedsRender_ = function (tile) {\n        var layer = /** @type {import(\"../../layer/VectorTile.js\").default} */ (this.getLayer());\n        if (layer.getRenderMode() === VectorTileRenderType.VECTOR) {\n            return false;\n        }\n        var replayState = tile.getReplayState(layer);\n        var revision = layer.getRevision();\n        var resolution = tile.wantedResolution;\n        return (replayState.renderedTileResolution !== resolution ||\n            replayState.renderedTileRevision !== revision);\n    };\n    /**\n     * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n     * @param {import(\"../../PluggableMap\").FrameState} frameState Frame state.\n     * @private\n     */\n    CanvasVectorTileLayerRenderer.prototype.renderTileImage_ = function (tile, frameState) {\n        var layer = /** @type {import(\"../../layer/VectorTile.js\").default} */ (this.getLayer());\n        var replayState = tile.getReplayState(layer);\n        var revision = layer.getRevision();\n        var executorGroups = tile.executorGroups[getUid(layer)];\n        replayState.renderedTileRevision = revision;\n        var tileCoord = tile.wrappedTileCoord;\n        var z = tileCoord[0];\n        var source = layer.getSource();\n        var pixelRatio = frameState.pixelRatio;\n        var viewState = frameState.viewState;\n        var projection = viewState.projection;\n        var tileGrid = source.getTileGridForProjection(projection);\n        var tileResolution = tileGrid.getResolution(tile.tileCoord[0]);\n        var renderPixelRatio = (frameState.pixelRatio / tile.wantedResolution) * tileResolution;\n        var resolution = tileGrid.getResolution(z);\n        var context = tile.getContext(layer);\n        // Increase tile size when overzooming for low pixel ratio, to avoid blurry tiles\n        pixelRatio = Math.round(Math.max(pixelRatio, renderPixelRatio / pixelRatio));\n        var size = source.getTilePixelSize(z, pixelRatio, projection);\n        context.canvas.width = size[0];\n        context.canvas.height = size[1];\n        var renderScale = pixelRatio / renderPixelRatio;\n        if (renderScale !== 1) {\n            var canvasTransform = resetTransform(this.tmpTransform_);\n            scaleTransform(canvasTransform, renderScale, renderScale);\n            context.setTransform.apply(context, canvasTransform);\n        }\n        var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent);\n        var pixelScale = renderPixelRatio / resolution;\n        var transform = resetTransform(this.tmpTransform_);\n        scaleTransform(transform, pixelScale, -pixelScale);\n        translateTransform(transform, -tileExtent[0], -tileExtent[3]);\n        for (var i = 0, ii = executorGroups.length; i < ii; ++i) {\n            var executorGroup = executorGroups[i];\n            executorGroup.execute(context, renderScale, transform, 0, true, IMAGE_REPLAYS[layer.getRenderMode()]);\n        }\n        replayState.renderedTileResolution = tile.wantedResolution;\n    };\n    return CanvasVectorTileLayerRenderer;\n}(CanvasTileLayerRenderer));\nexport default CanvasVectorTileLayerRenderer;\n//# sourceMappingURL=VectorTileLayer.js.map","/**\n * @module ol/renderer/canvas/common\n */\n/**\n * Context options to disable image smoothing.\n * @type {Object}\n */\nexport var IMAGE_SMOOTHING_DISABLED = {\n    imageSmoothingEnabled: false,\n    msImageSmoothingEnabled: false,\n};\n/**\n * Context options to enable image smoothing.\n * @type {Object}\n */\nexport var IMAGE_SMOOTHING_ENABLED = {\n    imageSmoothingEnabled: true,\n    msImageSmoothingEnabled: true,\n};\n//# sourceMappingURL=common.js.map","/**\n * @module ol/renderer/vector\n */\nimport BuilderType from '../render/canvas/BuilderType.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport ImageState from '../ImageState.js';\nimport { getUid } from '../util.js';\n/**\n * Feature callback. The callback will be called with three arguments. The first\n * argument is one {@link module:ol/Feature~Feature feature} or {@link module:ol/render/Feature~RenderFeature render feature}\n * at the pixel, the second is the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\n * unmanaged layers. The third is the {@link module:ol/geom/SimpleGeometry~SimpleGeometry} of the feature. For features\n * with a GeometryCollection geometry, it will be the first detected geometry from the collection.\n * @template T\n * @typedef {function(import(\"../Feature.js\").FeatureLike, import(\"../layer/Layer.js\").default<import(\"../source/Source\").default>, import(\"../geom/SimpleGeometry.js\").default): T} FeatureCallback\n */\n/**\n * Tolerance for geometry simplification in device pixels.\n * @type {number}\n */\nvar SIMPLIFY_TOLERANCE = 0.5;\n/**\n * @const\n * @type {Object<import(\"../geom/GeometryType.js\").default,\n *                function(import(\"../render/canvas/BuilderGroup.js\").default, import(\"../geom/Geometry.js\").default,\n *                         import(\"../style/Style.js\").default, Object): void>}\n */\nvar GEOMETRY_RENDERERS = {\n    'Point': renderPointGeometry,\n    'LineString': renderLineStringGeometry,\n    'Polygon': renderPolygonGeometry,\n    'MultiPoint': renderMultiPointGeometry,\n    'MultiLineString': renderMultiLineStringGeometry,\n    'MultiPolygon': renderMultiPolygonGeometry,\n    'GeometryCollection': renderGeometryCollectionGeometry,\n    'Circle': renderCircleGeometry,\n};\n/**\n * @param {import(\"../Feature.js\").FeatureLike} feature1 Feature 1.\n * @param {import(\"../Feature.js\").FeatureLike} feature2 Feature 2.\n * @return {number} Order.\n */\nexport function defaultOrder(feature1, feature2) {\n    return parseInt(getUid(feature1), 10) - parseInt(getUid(feature2), 10);\n}\n/**\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @return {number} Squared pixel tolerance.\n */\nexport function getSquaredTolerance(resolution, pixelRatio) {\n    var tolerance = getTolerance(resolution, pixelRatio);\n    return tolerance * tolerance;\n}\n/**\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @return {number} Pixel tolerance.\n */\nexport function getTolerance(resolution, pixelRatio) {\n    return (SIMPLIFY_TOLERANCE * resolution) / pixelRatio;\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderCircleGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n    var fillStyle = style.getFill();\n    var strokeStyle = style.getStroke();\n    if (fillStyle || strokeStyle) {\n        var circleReplay = builderGroup.getBuilder(style.getZIndex(), BuilderType.CIRCLE);\n        circleReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n        circleReplay.drawCircle(geometry, feature);\n    }\n    var textStyle = style.getText();\n    if (textStyle && textStyle.getText()) {\n        var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), BuilderType.TEXT);\n        textReplay.setTextStyle(textStyle);\n        textReplay.drawText(geometry, feature);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n * @param {import(\"../proj.js\").TransformFunction} [opt_transform] Transform from user to view projection.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n * @return {boolean} `true` if style is loading.\n */\nexport function renderFeature(replayGroup, feature, style, squaredTolerance, listener, opt_transform, opt_declutterBuilderGroup) {\n    var loading = false;\n    var imageStyle = style.getImage();\n    if (imageStyle) {\n        var imageState = imageStyle.getImageState();\n        if (imageState == ImageState.LOADED || imageState == ImageState.ERROR) {\n            imageStyle.unlistenImageChange(listener);\n        }\n        else {\n            if (imageState == ImageState.IDLE) {\n                imageStyle.load();\n            }\n            imageState = imageStyle.getImageState();\n            imageStyle.listenImageChange(listener);\n            loading = true;\n        }\n    }\n    renderFeatureInternal(replayGroup, feature, style, squaredTolerance, opt_transform, opt_declutterBuilderGroup);\n    return loading;\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {import(\"../proj.js\").TransformFunction} [opt_transform] Optional transform function.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderFeatureInternal(replayGroup, feature, style, squaredTolerance, opt_transform, opt_declutterBuilderGroup) {\n    var geometry = style.getGeometryFunction()(feature);\n    if (!geometry) {\n        return;\n    }\n    var simplifiedGeometry = geometry.simplifyTransformed(squaredTolerance, opt_transform);\n    var renderer = style.getRenderer();\n    if (renderer) {\n        renderGeometry(replayGroup, simplifiedGeometry, style, feature);\n    }\n    else {\n        var geometryRenderer = GEOMETRY_RENDERERS[simplifiedGeometry.getType()];\n        geometryRenderer(replayGroup, simplifiedGeometry, style, feature, opt_declutterBuilderGroup);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n */\nfunction renderGeometry(replayGroup, geometry, style, feature) {\n    if (geometry.getType() == GeometryType.GEOMETRY_COLLECTION) {\n        var geometries = \n        /** @type {import(\"../geom/GeometryCollection.js\").default} */ (geometry).getGeometries();\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            renderGeometry(replayGroup, geometries[i], style, feature);\n        }\n        return;\n    }\n    var replay = replayGroup.getBuilder(style.getZIndex(), BuilderType.DEFAULT);\n    replay.drawCustom(\n    /** @type {import(\"../geom/SimpleGeometry.js\").default} */ (geometry), feature, style.getRenderer(), style.getHitDetectionRenderer());\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderGeometryCollectionGeometry(replayGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n    var geometries = geometry.getGeometriesArray();\n    var i, ii;\n    for (i = 0, ii = geometries.length; i < ii; ++i) {\n        var geometryRenderer = GEOMETRY_RENDERERS[geometries[i].getType()];\n        geometryRenderer(replayGroup, geometries[i], style, feature, opt_declutterBuilderGroup);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/LineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderLineStringGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n    var strokeStyle = style.getStroke();\n    if (strokeStyle) {\n        var lineStringReplay = builderGroup.getBuilder(style.getZIndex(), BuilderType.LINE_STRING);\n        lineStringReplay.setFillStrokeStyle(null, strokeStyle);\n        lineStringReplay.drawLineString(geometry, feature);\n    }\n    var textStyle = style.getText();\n    if (textStyle && textStyle.getText()) {\n        var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), BuilderType.TEXT);\n        textReplay.setTextStyle(textStyle);\n        textReplay.drawText(geometry, feature);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/MultiLineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderMultiLineStringGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n    var strokeStyle = style.getStroke();\n    if (strokeStyle) {\n        var lineStringReplay = builderGroup.getBuilder(style.getZIndex(), BuilderType.LINE_STRING);\n        lineStringReplay.setFillStrokeStyle(null, strokeStyle);\n        lineStringReplay.drawMultiLineString(geometry, feature);\n    }\n    var textStyle = style.getText();\n    if (textStyle && textStyle.getText()) {\n        var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), BuilderType.TEXT);\n        textReplay.setTextStyle(textStyle);\n        textReplay.drawText(geometry, feature);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderMultiPolygonGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n    var fillStyle = style.getFill();\n    var strokeStyle = style.getStroke();\n    if (strokeStyle || fillStyle) {\n        var polygonReplay = builderGroup.getBuilder(style.getZIndex(), BuilderType.POLYGON);\n        polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n        polygonReplay.drawMultiPolygon(geometry, feature);\n    }\n    var textStyle = style.getText();\n    if (textStyle && textStyle.getText()) {\n        var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), BuilderType.TEXT);\n        textReplay.setTextStyle(textStyle);\n        textReplay.drawText(geometry, feature);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/Point.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderPointGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n    var imageStyle = style.getImage();\n    var textStyle = style.getText();\n    /** @type {import(\"../render/canvas.js\").DeclutterImageWithText} */\n    var declutterImageWithText;\n    if (opt_declutterBuilderGroup) {\n        builderGroup = opt_declutterBuilderGroup;\n        declutterImageWithText =\n            imageStyle && textStyle && textStyle.getText() ? {} : undefined;\n    }\n    if (imageStyle) {\n        if (imageStyle.getImageState() != ImageState.LOADED) {\n            return;\n        }\n        var imageReplay = builderGroup.getBuilder(style.getZIndex(), BuilderType.IMAGE);\n        imageReplay.setImageStyle(imageStyle, declutterImageWithText);\n        imageReplay.drawPoint(geometry, feature);\n    }\n    if (textStyle && textStyle.getText()) {\n        var textReplay = builderGroup.getBuilder(style.getZIndex(), BuilderType.TEXT);\n        textReplay.setTextStyle(textStyle, declutterImageWithText);\n        textReplay.drawText(geometry, feature);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/MultiPoint.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderMultiPointGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n    var imageStyle = style.getImage();\n    var textStyle = style.getText();\n    /** @type {import(\"../render/canvas.js\").DeclutterImageWithText} */\n    var declutterImageWithText;\n    if (opt_declutterBuilderGroup) {\n        builderGroup = opt_declutterBuilderGroup;\n        declutterImageWithText =\n            imageStyle && textStyle && textStyle.getText() ? {} : undefined;\n    }\n    if (imageStyle) {\n        if (imageStyle.getImageState() != ImageState.LOADED) {\n            return;\n        }\n        var imageReplay = builderGroup.getBuilder(style.getZIndex(), BuilderType.IMAGE);\n        imageReplay.setImageStyle(imageStyle, declutterImageWithText);\n        imageReplay.drawMultiPoint(geometry, feature);\n    }\n    if (textStyle && textStyle.getText()) {\n        var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), BuilderType.TEXT);\n        textReplay.setTextStyle(textStyle, declutterImageWithText);\n        textReplay.drawText(geometry, feature);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/Polygon.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderPolygonGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n    var fillStyle = style.getFill();\n    var strokeStyle = style.getStroke();\n    if (fillStyle || strokeStyle) {\n        var polygonReplay = builderGroup.getBuilder(style.getZIndex(), BuilderType.POLYGON);\n        polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n        polygonReplay.drawPolygon(geometry, feature);\n    }\n    var textStyle = style.getText();\n    if (textStyle && textStyle.getText()) {\n        var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), BuilderType.TEXT);\n        textReplay.setTextStyle(textStyle);\n        textReplay.drawText(geometry, feature);\n    }\n}\n//# sourceMappingURL=vector.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/renderer/webgl/Layer\n */\nimport LayerProperty from '../../layer/Property.js';\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport WebGLHelper from '../../webgl/Helper.js';\nimport { apply as applyTransform, compose as composeTransform, create as createTransform, } from '../../transform.js';\nimport { containsCoordinate } from '../../extent.js';\n/**\n * @enum {string}\n */\nexport var WebGLWorkerMessageType = {\n    GENERATE_BUFFERS: 'GENERATE_BUFFERS',\n};\n/**\n * @typedef {Object} WebGLWorkerGenerateBuffersMessage\n * This message will trigger the generation of a vertex and an index buffer based on the given render instructions.\n * When the buffers are generated, the worked will send a message of the same type to the main thread, with\n * the generated buffers in it.\n * Note that any addition properties present in the message *will* be sent back to the main thread.\n * @property {WebGLWorkerMessageType} type Message type\n * @property {ArrayBuffer} renderInstructions Render instructions raw binary buffer.\n * @property {ArrayBuffer} [vertexBuffer] Vertices array raw binary buffer (sent by the worker).\n * @property {ArrayBuffer} [indexBuffer] Indices array raw binary buffer (sent by the worker).\n * @property {number} [customAttributesCount] Amount of custom attributes count in the render instructions.\n */\n/**\n * @typedef {Object} PostProcessesOptions\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n/**\n * @typedef {Object} Options\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process steps\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\n */\n/**\n * @classdesc\n * Base WebGL renderer class.\n * Holds all logic related to data manipulation & some common rendering logic\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nvar WebGLLayerRenderer = /** @class */ (function (_super) {\n    __extends(WebGLLayerRenderer, _super);\n    /**\n     * @param {LayerType} layer Layer.\n     * @param {Options} [opt_options] Options.\n     */\n    function WebGLLayerRenderer(layer, opt_options) {\n        var _this = _super.call(this, layer) || this;\n        var options = opt_options || {};\n        /**\n         * The transform for viewport CSS pixels to rendered pixels.  This transform is only\n         * set before dispatching rendering events.\n         * @private\n         * @type {import(\"../../transform.js\").Transform}\n         */\n        _this.inversePixelTransform_ = createTransform();\n        /**\n         * @private\n         * @type {CanvasRenderingContext2D}\n         */\n        _this.pixelContext_ = null;\n        /**\n         * @private\n         */\n        _this.postProcesses_ = options.postProcesses;\n        /**\n         * @private\n         */\n        _this.uniforms_ = options.uniforms;\n        /**\n         * @type {WebGLHelper}\n         * @protected\n         */\n        _this.helper;\n        layer.addChangeListener(LayerProperty.MAP, _this.removeHelper.bind(_this));\n        _this.dispatchPreComposeEvent = _this.dispatchPreComposeEvent.bind(_this);\n        _this.dispatchPostComposeEvent = _this.dispatchPostComposeEvent.bind(_this);\n        return _this;\n    }\n    /**\n     * @param {WebGLRenderingContext} context The WebGL rendering context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n    WebGLLayerRenderer.prototype.dispatchPreComposeEvent = function (context, frameState) {\n        var layer = this.getLayer();\n        if (layer.hasListener(RenderEventType.PRECOMPOSE)) {\n            var event_1 = new RenderEvent(RenderEventType.PRECOMPOSE, undefined, frameState, context);\n            layer.dispatchEvent(event_1);\n        }\n    };\n    /**\n     * @param {WebGLRenderingContext} context The WebGL rendering context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n    WebGLLayerRenderer.prototype.dispatchPostComposeEvent = function (context, frameState) {\n        var layer = this.getLayer();\n        if (layer.hasListener(RenderEventType.POSTCOMPOSE)) {\n            var event_2 = new RenderEvent(RenderEventType.POSTCOMPOSE, undefined, frameState, context);\n            layer.dispatchEvent(event_2);\n        }\n    };\n    /**\n     * Reset options (only handles uniforms).\n     * @param {Options} options Options.\n     */\n    WebGLLayerRenderer.prototype.reset = function (options) {\n        this.uniforms_ = options.uniforms;\n        if (this.helper) {\n            this.helper.setUniforms(this.uniforms_);\n        }\n    };\n    /**\n     * @protected\n     */\n    WebGLLayerRenderer.prototype.removeHelper = function () {\n        if (this.helper) {\n            this.helper.dispose();\n            delete this.helper;\n        }\n    };\n    /**\n     * Determine whether renderFrame should be called.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {boolean} Layer is ready to be rendered.\n     */\n    WebGLLayerRenderer.prototype.prepareFrame = function (frameState) {\n        if (this.getLayer().getRenderSource()) {\n            var incrementGroup = true;\n            var groupNumber = -1;\n            var className = void 0;\n            for (var i = 0, ii = frameState.layerStatesArray.length; i < ii; i++) {\n                var layer = frameState.layerStatesArray[i].layer;\n                var renderer = layer.getRenderer();\n                if (!(renderer instanceof WebGLLayerRenderer)) {\n                    incrementGroup = true;\n                    continue;\n                }\n                var layerClassName = layer.getClassName();\n                if (incrementGroup || layerClassName !== className) {\n                    groupNumber += 1;\n                    incrementGroup = false;\n                }\n                className = layerClassName;\n                if (renderer === this) {\n                    break;\n                }\n            }\n            var canvasCacheKey = 'map/' + frameState.mapId + '/group/' + groupNumber;\n            if (!this.helper || !this.helper.canvasCacheKeyMatches(canvasCacheKey)) {\n                this.removeHelper();\n                this.helper = new WebGLHelper({\n                    postProcesses: this.postProcesses_,\n                    uniforms: this.uniforms_,\n                    canvasCacheKey: canvasCacheKey,\n                });\n                if (className) {\n                    this.helper.getCanvas().className = className;\n                }\n                this.afterHelperCreated();\n            }\n        }\n        return this.prepareFrameInternal(frameState);\n    };\n    /**\n     * @protected\n     */\n    WebGLLayerRenderer.prototype.afterHelperCreated = function () { };\n    /**\n     * Determine whether renderFrame should be called.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {boolean} Layer is ready to be rendered.\n     * @protected\n     */\n    WebGLLayerRenderer.prototype.prepareFrameInternal = function (frameState) {\n        return true;\n    };\n    /**\n     * Clean up.\n     */\n    WebGLLayerRenderer.prototype.disposeInternal = function () {\n        this.removeHelper();\n        _super.prototype.disposeInternal.call(this);\n    };\n    /**\n     * @param {import(\"../../render/EventType.js\").default} type Event type.\n     * @param {WebGLRenderingContext} context The rendering context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @private\n     */\n    WebGLLayerRenderer.prototype.dispatchRenderEvent_ = function (type, context, frameState) {\n        var layer = this.getLayer();\n        if (layer.hasListener(type)) {\n            composeTransform(this.inversePixelTransform_, 0, 0, frameState.pixelRatio, -frameState.pixelRatio, 0, 0, -frameState.size[1]);\n            var event_3 = new RenderEvent(type, this.inversePixelTransform_, frameState, context);\n            layer.dispatchEvent(event_3);\n        }\n    };\n    /**\n     * @param {WebGLRenderingContext} context The rendering context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n    WebGLLayerRenderer.prototype.preRender = function (context, frameState) {\n        this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n    };\n    /**\n     * @param {WebGLRenderingContext} context The rendering context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n    WebGLLayerRenderer.prototype.postRender = function (context, frameState) {\n        this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n    };\n    /**\n     * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState FrameState.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel\n     *    location, null will be returned.  If there is data, but pixel values cannot be\n     *    returned, and empty array will be returned.\n     */\n    WebGLLayerRenderer.prototype.getDataAtPixel = function (pixel, frameState, hitTolerance) {\n        var renderPixel = applyTransform([frameState.pixelRatio, 0, 0, frameState.pixelRatio, 0, 0], pixel.slice());\n        var gl = this.helper.getGL();\n        if (!gl) {\n            return null;\n        }\n        var layer = this.getLayer();\n        var layerExtent = layer.getExtent();\n        if (layerExtent) {\n            var renderCoordinate = applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n            /** get only data inside of the layer extent */\n            if (!containsCoordinate(layerExtent, renderCoordinate)) {\n                return null;\n            }\n        }\n        var attributes = gl.getContextAttributes();\n        if (!attributes || !attributes.preserveDrawingBuffer) {\n            // we assume there is data at the given pixel (although there might not be)\n            return new Uint8Array();\n        }\n        var x = Math.round(renderPixel[0]);\n        var y = Math.round(renderPixel[1]);\n        var pixelContext = this.pixelContext_;\n        if (!pixelContext) {\n            var pixelCanvas = document.createElement('canvas');\n            pixelCanvas.width = 1;\n            pixelCanvas.height = 1;\n            pixelContext = pixelCanvas.getContext('2d');\n            this.pixelContext_ = pixelContext;\n        }\n        pixelContext.clearRect(0, 0, 1, 1);\n        var data;\n        try {\n            pixelContext.drawImage(gl.canvas, x, y, 1, 1, 0, 0, 1, 1);\n            data = pixelContext.getImageData(0, 0, 1, 1).data;\n        }\n        catch (err) {\n            return data;\n        }\n        if (data[3] === 0) {\n            return null;\n        }\n        return data;\n    };\n    return WebGLLayerRenderer;\n}(LayerRenderer));\nvar tmpArray_ = [];\nvar bufferPositions_ = { vertexPosition: 0, indexPosition: 0 };\nfunction writePointVertex(buffer, pos, x, y, index) {\n    buffer[pos + 0] = x;\n    buffer[pos + 1] = y;\n    buffer[pos + 2] = index;\n}\n/**\n * An object holding positions both in an index and a vertex buffer.\n * @typedef {Object} BufferPositions\n * @property {number} vertexPosition Position in the vertex buffer\n * @property {number} indexPosition Position in the index buffer\n */\n/**\n * Pushes a quad (two triangles) based on a point geometry\n * @param {Float32Array} instructions Array of render instructions for points.\n * @param {number} elementIndex Index from which render instructions will be read.\n * @param {Float32Array} vertexBuffer Buffer in the form of a typed array.\n * @param {Uint32Array} indexBuffer Buffer in the form of a typed array.\n * @param {number} customAttributesCount Amount of custom attributes for each element.\n * @param {BufferPositions} [bufferPositions] Buffer write positions; if not specified, positions will be set at 0.\n * @return {BufferPositions} New buffer positions where to write next\n * @property {number} vertexPosition New position in the vertex buffer where future writes should start.\n * @property {number} indexPosition New position in the index buffer where future writes should start.\n * @private\n */\nexport function writePointFeatureToBuffers(instructions, elementIndex, vertexBuffer, indexBuffer, customAttributesCount, bufferPositions) {\n    // This is for x, y and index\n    var baseVertexAttrsCount = 3;\n    var baseInstructionsCount = 2;\n    var stride = baseVertexAttrsCount + customAttributesCount;\n    var x = instructions[elementIndex + 0];\n    var y = instructions[elementIndex + 1];\n    // read custom numerical attributes on the feature\n    var customAttrs = tmpArray_;\n    customAttrs.length = customAttributesCount;\n    for (var i = 0; i < customAttrs.length; i++) {\n        customAttrs[i] = instructions[elementIndex + baseInstructionsCount + i];\n    }\n    var vPos = bufferPositions ? bufferPositions.vertexPosition : 0;\n    var iPos = bufferPositions ? bufferPositions.indexPosition : 0;\n    var baseIndex = vPos / stride;\n    // push vertices for each of the four quad corners (first standard then custom attributes)\n    writePointVertex(vertexBuffer, vPos, x, y, 0);\n    customAttrs.length &&\n        vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n    vPos += stride;\n    writePointVertex(vertexBuffer, vPos, x, y, 1);\n    customAttrs.length &&\n        vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n    vPos += stride;\n    writePointVertex(vertexBuffer, vPos, x, y, 2);\n    customAttrs.length &&\n        vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n    vPos += stride;\n    writePointVertex(vertexBuffer, vPos, x, y, 3);\n    customAttrs.length &&\n        vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n    vPos += stride;\n    indexBuffer[iPos++] = baseIndex;\n    indexBuffer[iPos++] = baseIndex + 1;\n    indexBuffer[iPos++] = baseIndex + 3;\n    indexBuffer[iPos++] = baseIndex + 1;\n    indexBuffer[iPos++] = baseIndex + 2;\n    indexBuffer[iPos++] = baseIndex + 3;\n    bufferPositions_.vertexPosition = vPos;\n    bufferPositions_.indexPosition = iPos;\n    return bufferPositions_;\n}\n/**\n * Returns a texture of 1x1 pixel, white\n * @private\n * @return {ImageData} Image data.\n */\nexport function getBlankImageData() {\n    var canvas = document.createElement('canvas');\n    var image = canvas.getContext('2d').createImageData(1, 1);\n    image.data[0] = 255;\n    image.data[1] = 255;\n    image.data[2] = 255;\n    image.data[3] = 255;\n    return image;\n}\n/**\n * Generates a color array based on a numerical id\n * Note: the range for each component is 0 to 1 with 256 steps\n * @param {number} id Id\n * @param {Array<number>} [opt_array] Reusable array\n * @return {Array<number>} Color array containing the encoded id\n */\nexport function colorEncodeId(id, opt_array) {\n    var array = opt_array || [];\n    var radix = 256;\n    var divide = radix - 1;\n    array[0] = Math.floor(id / radix / radix / radix) / divide;\n    array[1] = (Math.floor(id / radix / radix) % radix) / divide;\n    array[2] = (Math.floor(id / radix) % radix) / divide;\n    array[3] = (id % radix) / divide;\n    return array;\n}\n/**\n * Reads an id from a color-encoded array\n * Note: the expected range for each component is 0 to 1 with 256 steps.\n * @param {Array<number>} color Color array containing the encoded id\n * @return {number} Decoded id\n */\nexport function colorDecodeId(color) {\n    var id = 0;\n    var radix = 256;\n    var mult = radix - 1;\n    id += Math.round(color[0] * radix * radix * radix * mult);\n    id += Math.round(color[1] * radix * radix * mult);\n    id += Math.round(color[2] * radix * mult);\n    id += Math.round(color[3] * mult);\n    return id;\n}\nexport default WebGLLayerRenderer;\n//# sourceMappingURL=Layer.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/renderer/webgl/PointsLayer\n */\nimport BaseVector from '../../layer/BaseVector.js';\nimport GeometryType from '../../geom/GeometryType.js';\nimport VectorEventType from '../../source/VectorEventType.js';\nimport ViewHint from '../../ViewHint.js';\nimport WebGLArrayBuffer from '../../webgl/Buffer.js';\nimport WebGLLayerRenderer, { WebGLWorkerMessageType, colorDecodeId, colorEncodeId, } from './Layer.js';\nimport WebGLRenderTarget from '../../webgl/RenderTarget.js';\nimport { ARRAY_BUFFER, DYNAMIC_DRAW, ELEMENT_ARRAY_BUFFER } from '../../webgl.js';\nimport { AttributeType, DefaultUniform } from '../../webgl/Helper.js';\nimport { apply as applyTransform, create as createTransform, makeInverse as makeInverseTransform, multiply as multiplyTransform, } from '../../transform.js';\nimport { assert } from '../../asserts.js';\nimport { buffer, createEmpty, equals } from '../../extent.js';\nimport { create as createWebGLWorker } from '../../worker/webgl.js';\nimport { getUid } from '../../util.js';\nimport { listen, unlistenByKey } from '../../events.js';\n/**\n * @typedef {Object} CustomAttribute A description of a custom attribute to be passed on to the GPU, with a value different\n * for each feature.\n * @property {string} name Attribute name.\n * @property {function(import(\"../../Feature\").default, Object<string, *>):number} callback This callback computes the numerical value of the\n * attribute for a given feature (properties are available as 2nd arg for quicker access).\n */\n/**\n * @typedef {Object} FeatureCacheItem Object that holds a reference to a feature, its geometry and properties. Used to optimize\n * rebuildBuffers by accessing these objects quicker.\n * @property {import(\"../../Feature\").default} feature Feature\n * @property {Object<string, *>} properties Feature properties\n * @property {import(\"../../geom\").Geometry} geometry Feature geometry\n */\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the canvas element.\n * @property {Array<CustomAttribute>} [attributes] These attributes will be read from the features in the source and then\n * passed to the GPU. The `name` property of each attribute will serve as its identifier:\n *  * In the vertex shader as an `attribute` by prefixing it with `a_`\n *  * In the fragment shader as a `varying` by prefixing it with `v_`\n * Please note that these can only be numerical values.\n * @property {string} vertexShader Vertex shader source, mandatory.\n * @property {string} fragmentShader Fragment shader source, mandatory.\n * @property {string} [hitVertexShader] Vertex shader source for hit detection rendering.\n * @property {string} [hitFragmentShader] Fragment shader source for hit detection rendering.\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process steps\n * Please note that `u_texture` is reserved for the main texture slot and `u_opacity` is reserved for the layer opacity.\n * @property {Array<import(\"./Layer\").PostProcessesOptions>} [postProcesses] Post-processes definitions\n */\n/**\n * @classdesc\n * WebGL vector renderer optimized for points.\n * All features will be rendered as quads (two triangles forming a square). New data will be flushed to the GPU\n * every time the vector source changes.\n *\n * You need to provide vertex and fragment shaders for rendering. This can be done using\n * {@link module:ol/webgl/ShaderBuilder~ShaderBuilder} utilities. These shaders shall expect a `a_position` attribute\n * containing the screen-space projected center of the quad, as well as a `a_index` attribute\n * whose value (0, 1, 2 or 3) indicates which quad vertex is currently getting processed (see structure below).\n *\n * To include variable attributes in the shaders, you need to declare them using the `attributes` property of\n * the options object like so:\n * ```js\n * new WebGLPointsLayerRenderer(layer, {\n *   attributes: [\n *     {\n *       name: 'size',\n *       callback: function(feature) {\n *         // compute something with the feature\n *       }\n *     },\n *     {\n *       name: 'weight',\n *       callback: function(feature) {\n *         // compute something with the feature\n *       }\n *     },\n *   ],\n *   vertexShader:\n *     // shader using attribute a_weight and a_size\n *   fragmentShader:\n *     // shader using varying v_weight and v_size\n * ```\n *\n * To enable hit detection, you must as well provide dedicated shaders using the `hitVertexShader`\n * and `hitFragmentShader` properties. These shall expect the `a_hitColor` attribute to contain\n * the final color that will have to be output for hit detection to work.\n *\n * The following uniform is used for the main texture: `u_texture`.\n * The following uniform is used for the layer opacity: `u_opacity`.\n *\n * Please note that the main shader output should have premultiplied alpha, otherwise visual anomalies may occur.\n *\n * Points are rendered as quads with the following structure:\n *\n * ```\n *   (u0, v1)      (u1, v1)\n *  [3]----------[2]\n *   |`           |\n *   |  `         |\n *   |    `       |\n *   |      `     |\n *   |        `   |\n *   |          ` |\n *  [0]----------[1]\n *   (u0, v0)      (u1, v0)\n *  ```\n *\n * This uses {@link module:ol/webgl/Helper~WebGLHelper} internally.\n *\n * @api\n */\nvar WebGLPointsLayerRenderer = /** @class */ (function (_super) {\n    __extends(WebGLPointsLayerRenderer, _super);\n    /**\n     * @param {import(\"../../layer/Layer.js\").default} layer Layer.\n     * @param {Options} options Options.\n     */\n    function WebGLPointsLayerRenderer(layer, options) {\n        var _this = this;\n        var uniforms = options.uniforms || {};\n        var projectionMatrixTransform = createTransform();\n        uniforms[DefaultUniform.PROJECTION_MATRIX] = projectionMatrixTransform;\n        _this = _super.call(this, layer, {\n            uniforms: uniforms,\n            postProcesses: options.postProcesses,\n        }) || this;\n        _this.ready = false;\n        _this.sourceRevision_ = -1;\n        _this.verticesBuffer_ = new WebGLArrayBuffer(ARRAY_BUFFER, DYNAMIC_DRAW);\n        _this.hitVerticesBuffer_ = new WebGLArrayBuffer(ARRAY_BUFFER, DYNAMIC_DRAW);\n        _this.indicesBuffer_ = new WebGLArrayBuffer(ELEMENT_ARRAY_BUFFER, DYNAMIC_DRAW);\n        /**\n         * @private\n         */\n        _this.vertexShader_ = options.vertexShader;\n        /**\n         * @private\n         */\n        _this.fragmentShader_ = options.fragmentShader;\n        /**\n         * @type {WebGLProgram}\n         * @private\n         */\n        _this.program_;\n        /**\n         * @type {boolean}\n         * @private\n         */\n        _this.hitDetectionEnabled_ =\n            options.hitFragmentShader && options.hitVertexShader ? true : false;\n        /**\n         * @private\n         */\n        _this.hitVertexShader_ = options.hitVertexShader;\n        /**\n         * @private\n         */\n        _this.hitFragmentShader_ = options.hitFragmentShader;\n        /**\n         * @type {WebGLProgram}\n         * @private\n         */\n        _this.hitProgram_;\n        var customAttributes = options.attributes\n            ? options.attributes.map(function (attribute) {\n                return {\n                    name: 'a_' + attribute.name,\n                    size: 1,\n                    type: AttributeType.FLOAT,\n                };\n            })\n            : [];\n        /**\n         * A list of attributes used by the renderer. By default only the position and\n         * index of the vertex (0 to 3) are required.\n         * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n         */\n        _this.attributes = [\n            {\n                name: 'a_position',\n                size: 2,\n                type: AttributeType.FLOAT,\n            },\n            {\n                name: 'a_index',\n                size: 1,\n                type: AttributeType.FLOAT,\n            },\n        ].concat(customAttributes);\n        /**\n         * A list of attributes used for hit detection.\n         * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n         */\n        _this.hitDetectionAttributes = [\n            {\n                name: 'a_position',\n                size: 2,\n                type: AttributeType.FLOAT,\n            },\n            {\n                name: 'a_index',\n                size: 1,\n                type: AttributeType.FLOAT,\n            },\n            {\n                name: 'a_hitColor',\n                size: 4,\n                type: AttributeType.FLOAT,\n            },\n            {\n                name: 'a_featureUid',\n                size: 1,\n                type: AttributeType.FLOAT,\n            },\n        ].concat(customAttributes);\n        _this.customAttributes = options.attributes ? options.attributes : [];\n        _this.previousExtent_ = createEmpty();\n        /**\n         * This transform is updated on every frame and is the composition of:\n         * - invert of the world->screen transform that was used when rebuilding buffers (see `this.renderTransform_`)\n         * - current world->screen transform\n         * @type {import(\"../../transform.js\").Transform}\n         * @private\n         */\n        _this.currentTransform_ = projectionMatrixTransform;\n        /**\n         * This transform is updated when buffers are rebuilt and converts world space coordinates to screen space\n         * @type {import(\"../../transform.js\").Transform}\n         * @private\n         */\n        _this.renderTransform_ = createTransform();\n        /**\n         * @type {import(\"../../transform.js\").Transform}\n         * @private\n         */\n        _this.invertRenderTransform_ = createTransform();\n        /**\n         * @type {Float32Array}\n         * @private\n         */\n        _this.renderInstructions_ = new Float32Array(0);\n        /**\n         * These instructions are used for hit detection\n         * @type {Float32Array}\n         * @private\n         */\n        _this.hitRenderInstructions_ = new Float32Array(0);\n        /**\n         * @type {WebGLRenderTarget}\n         * @private\n         */\n        _this.hitRenderTarget_;\n        /**\n         * Keep track of latest message sent to worker\n         * @type {number}\n         * @private\n         */\n        _this.generateBuffersRun_ = 0;\n        _this.worker_ = createWebGLWorker();\n        _this.worker_.addEventListener('message', \n        /**\n         * @param {*} event Event.\n         * @this {WebGLPointsLayerRenderer}\n         */\n        function (event) {\n            var received = event.data;\n            if (received.type === WebGLWorkerMessageType.GENERATE_BUFFERS) {\n                var projectionTransform = received.projectionTransform;\n                if (received.hitDetection) {\n                    this.hitVerticesBuffer_.fromArrayBuffer(received.vertexBuffer);\n                    this.helper.flushBufferData(this.hitVerticesBuffer_);\n                }\n                else {\n                    this.verticesBuffer_.fromArrayBuffer(received.vertexBuffer);\n                    this.helper.flushBufferData(this.verticesBuffer_);\n                }\n                this.indicesBuffer_.fromArrayBuffer(received.indexBuffer);\n                this.helper.flushBufferData(this.indicesBuffer_);\n                this.renderTransform_ = projectionTransform;\n                makeInverseTransform(this.invertRenderTransform_, this.renderTransform_);\n                if (received.hitDetection) {\n                    this.hitRenderInstructions_ = new Float32Array(event.data.renderInstructions);\n                }\n                else {\n                    this.renderInstructions_ = new Float32Array(event.data.renderInstructions);\n                    if (received.generateBuffersRun === this.generateBuffersRun_) {\n                        this.ready = true;\n                    }\n                }\n                this.getLayer().changed();\n            }\n        }.bind(_this));\n        /**\n         * This object will be updated when the source changes. Key is uid.\n         * @type {Object<string, FeatureCacheItem>}\n         * @private\n         */\n        _this.featureCache_ = {};\n        /**\n         * Amount of features in the cache.\n         * @type {number}\n         * @private\n         */\n        _this.featureCount_ = 0;\n        var source = _this.getLayer().getSource();\n        _this.sourceListenKeys_ = [\n            listen(source, VectorEventType.ADDFEATURE, _this.handleSourceFeatureAdded_, _this),\n            listen(source, VectorEventType.CHANGEFEATURE, _this.handleSourceFeatureChanged_, _this),\n            listen(source, VectorEventType.REMOVEFEATURE, _this.handleSourceFeatureDelete_, _this),\n            listen(source, VectorEventType.CLEAR, _this.handleSourceFeatureClear_, _this),\n        ];\n        source.forEachFeature(function (feature) {\n            this.featureCache_[getUid(feature)] = {\n                feature: feature,\n                properties: feature.getProperties(),\n                geometry: feature.getGeometry(),\n            };\n            this.featureCount_++;\n        }.bind(_this));\n        return _this;\n    }\n    WebGLPointsLayerRenderer.prototype.afterHelperCreated = function () {\n        this.program_ = this.helper.getProgram(this.fragmentShader_, this.vertexShader_);\n        if (this.hitDetectionEnabled_) {\n            this.hitProgram_ = this.helper.getProgram(this.hitFragmentShader_, this.hitVertexShader_);\n            this.hitRenderTarget_ = new WebGLRenderTarget(this.helper);\n        }\n    };\n    /**\n     * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n     * @private\n     */\n    WebGLPointsLayerRenderer.prototype.handleSourceFeatureAdded_ = function (event) {\n        var feature = event.feature;\n        this.featureCache_[getUid(feature)] = {\n            feature: feature,\n            properties: feature.getProperties(),\n            geometry: feature.getGeometry(),\n        };\n        this.featureCount_++;\n    };\n    /**\n     * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n     * @private\n     */\n    WebGLPointsLayerRenderer.prototype.handleSourceFeatureChanged_ = function (event) {\n        var feature = event.feature;\n        this.featureCache_[getUid(feature)] = {\n            feature: feature,\n            properties: feature.getProperties(),\n            geometry: feature.getGeometry(),\n        };\n    };\n    /**\n     * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n     * @private\n     */\n    WebGLPointsLayerRenderer.prototype.handleSourceFeatureDelete_ = function (event) {\n        var feature = event.feature;\n        delete this.featureCache_[getUid(feature)];\n        this.featureCount_--;\n    };\n    /**\n     * @private\n     */\n    WebGLPointsLayerRenderer.prototype.handleSourceFeatureClear_ = function () {\n        this.featureCache_ = {};\n        this.featureCount_ = 0;\n    };\n    /**\n     * Render the layer.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {HTMLElement} The rendered element.\n     */\n    WebGLPointsLayerRenderer.prototype.renderFrame = function (frameState) {\n        var gl = this.helper.getGL();\n        this.preRender(gl, frameState);\n        var renderCount = this.indicesBuffer_.getSize();\n        this.helper.drawElements(0, renderCount);\n        this.helper.finalizeDraw(frameState, this.dispatchPreComposeEvent, this.dispatchPostComposeEvent);\n        var canvas = this.helper.getCanvas();\n        if (this.hitDetectionEnabled_) {\n            this.renderHitDetection(frameState);\n            this.hitRenderTarget_.clearCachedData();\n        }\n        this.postRender(gl, frameState);\n        return canvas;\n    };\n    /**\n     * Determine whether renderFrame should be called.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {boolean} Layer is ready to be rendered.\n     */\n    WebGLPointsLayerRenderer.prototype.prepareFrameInternal = function (frameState) {\n        var layer = this.getLayer();\n        var vectorSource = layer.getSource();\n        var viewState = frameState.viewState;\n        var viewNotMoving = !frameState.viewHints[ViewHint.ANIMATING] &&\n            !frameState.viewHints[ViewHint.INTERACTING];\n        var extentChanged = !equals(this.previousExtent_, frameState.extent);\n        var sourceChanged = this.sourceRevision_ < vectorSource.getRevision();\n        if (sourceChanged) {\n            this.sourceRevision_ = vectorSource.getRevision();\n        }\n        if (viewNotMoving && (extentChanged || sourceChanged)) {\n            var projection = viewState.projection;\n            var resolution = viewState.resolution;\n            var renderBuffer = layer instanceof BaseVector ? layer.getRenderBuffer() : 0;\n            var extent = buffer(frameState.extent, renderBuffer * resolution);\n            vectorSource.loadFeatures(extent, resolution, projection);\n            this.rebuildBuffers_(frameState);\n            this.previousExtent_ = frameState.extent.slice();\n        }\n        // apply the current projection transform with the invert of the one used to fill buffers\n        this.helper.makeProjectionTransform(frameState, this.currentTransform_);\n        multiplyTransform(this.currentTransform_, this.invertRenderTransform_);\n        this.helper.useProgram(this.program_);\n        this.helper.prepareDraw(frameState);\n        // write new data\n        this.helper.bindBuffer(this.verticesBuffer_);\n        this.helper.bindBuffer(this.indicesBuffer_);\n        this.helper.enableAttributes(this.attributes);\n        return true;\n    };\n    /**\n     * Rebuild internal webgl buffers based on current view extent; costly, should not be called too much\n     * @param {import(\"../../PluggableMap\").FrameState} frameState Frame state.\n     * @private\n     */\n    WebGLPointsLayerRenderer.prototype.rebuildBuffers_ = function (frameState) {\n        // saves the projection transform for the current frame state\n        var projectionTransform = createTransform();\n        this.helper.makeProjectionTransform(frameState, projectionTransform);\n        // here we anticipate the amount of render instructions that we well generate\n        // this can be done since we know that for normal render we only have x, y as base instructions,\n        // and x, y, r, g, b, a and featureUid for hit render instructions\n        // and we also know the amount of custom attributes to append to these\n        var totalInstructionsCount = (2 + this.customAttributes.length) * this.featureCount_;\n        if (!this.renderInstructions_ ||\n            this.renderInstructions_.length !== totalInstructionsCount) {\n            this.renderInstructions_ = new Float32Array(totalInstructionsCount);\n        }\n        if (this.hitDetectionEnabled_) {\n            var totalHitInstructionsCount = (7 + this.customAttributes.length) * this.featureCount_;\n            if (!this.hitRenderInstructions_ ||\n                this.hitRenderInstructions_.length !== totalHitInstructionsCount) {\n                this.hitRenderInstructions_ = new Float32Array(totalHitInstructionsCount);\n            }\n        }\n        // loop on features to fill the buffer\n        var featureCache, geometry;\n        var tmpCoords = [];\n        var tmpColor = [];\n        var renderIndex = 0;\n        var hitIndex = 0;\n        var hitColor;\n        for (var featureUid in this.featureCache_) {\n            featureCache = this.featureCache_[featureUid];\n            geometry = /** @type {import(\"../../geom\").Point} */ (featureCache.geometry);\n            if (!geometry || geometry.getType() !== GeometryType.POINT) {\n                continue;\n            }\n            tmpCoords[0] = geometry.getFlatCoordinates()[0];\n            tmpCoords[1] = geometry.getFlatCoordinates()[1];\n            applyTransform(projectionTransform, tmpCoords);\n            hitColor = colorEncodeId(hitIndex + 6, tmpColor);\n            this.renderInstructions_[renderIndex++] = tmpCoords[0];\n            this.renderInstructions_[renderIndex++] = tmpCoords[1];\n            // for hit detection, the feature uid is saved in the opacity value\n            // and the index of the opacity value is encoded in the color values\n            if (this.hitDetectionEnabled_) {\n                this.hitRenderInstructions_[hitIndex++] = tmpCoords[0];\n                this.hitRenderInstructions_[hitIndex++] = tmpCoords[1];\n                this.hitRenderInstructions_[hitIndex++] = hitColor[0];\n                this.hitRenderInstructions_[hitIndex++] = hitColor[1];\n                this.hitRenderInstructions_[hitIndex++] = hitColor[2];\n                this.hitRenderInstructions_[hitIndex++] = hitColor[3];\n                this.hitRenderInstructions_[hitIndex++] = Number(featureUid);\n            }\n            // pushing custom attributes\n            var value = void 0;\n            for (var j = 0; j < this.customAttributes.length; j++) {\n                value = this.customAttributes[j].callback(featureCache.feature, featureCache.properties);\n                this.renderInstructions_[renderIndex++] = value;\n                if (this.hitDetectionEnabled_) {\n                    this.hitRenderInstructions_[hitIndex++] = value;\n                }\n            }\n        }\n        /** @type {import('./Layer').WebGLWorkerGenerateBuffersMessage} */\n        var message = {\n            type: WebGLWorkerMessageType.GENERATE_BUFFERS,\n            renderInstructions: this.renderInstructions_.buffer,\n            customAttributesCount: this.customAttributes.length,\n        };\n        // additional properties will be sent back as-is by the worker\n        message['projectionTransform'] = projectionTransform;\n        message['generateBuffersRun'] = ++this.generateBuffersRun_;\n        this.ready = false;\n        this.worker_.postMessage(message, [this.renderInstructions_.buffer]);\n        this.renderInstructions_ = null;\n        /** @type {import('./Layer').WebGLWorkerGenerateBuffersMessage} */\n        if (this.hitDetectionEnabled_) {\n            var hitMessage = {\n                type: WebGLWorkerMessageType.GENERATE_BUFFERS,\n                renderInstructions: this.hitRenderInstructions_.buffer,\n                customAttributesCount: 5 + this.customAttributes.length,\n            };\n            hitMessage['projectionTransform'] = projectionTransform;\n            hitMessage['hitDetection'] = true;\n            this.worker_.postMessage(hitMessage, [\n                this.hitRenderInstructions_.buffer,\n            ]);\n            this.hitRenderInstructions_ = null;\n        }\n    };\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n     * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n     * @return {T|undefined} Callback result.\n     * @template T\n     */\n    WebGLPointsLayerRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, matches) {\n        assert(this.hitDetectionEnabled_, 66);\n        if (!this.hitRenderInstructions_) {\n            return undefined;\n        }\n        var pixel = applyTransform(frameState.coordinateToPixelTransform, coordinate.slice());\n        var data = this.hitRenderTarget_.readPixel(pixel[0] / 2, pixel[1] / 2);\n        var color = [data[0] / 255, data[1] / 255, data[2] / 255, data[3] / 255];\n        var index = colorDecodeId(color);\n        var opacity = this.hitRenderInstructions_[index];\n        var uid = Math.floor(opacity).toString();\n        var source = this.getLayer().getSource();\n        var feature = source.getFeatureByUid(uid);\n        if (feature) {\n            return callback(feature, this.getLayer(), null);\n        }\n        return undefined;\n    };\n    /**\n     * Render the hit detection data to the corresponding render target\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState current frame state\n     */\n    WebGLPointsLayerRenderer.prototype.renderHitDetection = function (frameState) {\n        // skip render entirely if vertex buffers not ready/generated yet\n        if (!this.hitVerticesBuffer_.getSize()) {\n            return;\n        }\n        this.hitRenderTarget_.setSize([\n            Math.floor(frameState.size[0] / 2),\n            Math.floor(frameState.size[1] / 2),\n        ]);\n        this.helper.useProgram(this.hitProgram_);\n        this.helper.prepareDrawToRenderTarget(frameState, this.hitRenderTarget_, true);\n        this.helper.bindBuffer(this.hitVerticesBuffer_);\n        this.helper.bindBuffer(this.indicesBuffer_);\n        this.helper.enableAttributes(this.hitDetectionAttributes);\n        var renderCount = this.indicesBuffer_.getSize();\n        this.helper.drawElements(0, renderCount);\n    };\n    /**\n     * Clean up.\n     */\n    WebGLPointsLayerRenderer.prototype.disposeInternal = function () {\n        this.worker_.terminate();\n        this.layer_ = null;\n        this.sourceListenKeys_.forEach(function (key) {\n            unlistenByKey(key);\n        });\n        this.sourceListenKeys_ = null;\n        _super.prototype.disposeInternal.call(this);\n    };\n    return WebGLPointsLayerRenderer;\n}(WebGLLayerRenderer));\nexport default WebGLPointsLayerRenderer;\n//# sourceMappingURL=PointsLayer.js.map"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","this","constructor","create","CanvasImageLayerRenderer","_super","imageLayer","_this","image_","getImage","prepareFrame","frameState","layerState","layerStatesArray","layerIndex","pixelRatio","viewState","viewResolution","resolution","imageSource","getLayer","getSource","hints","viewHints","renderedExtent","extent","undefined","projection","sourceProjection","getProjection","image","loadImage","getState","getData","pixel","layer","coordinate","pixelToCoordinateTransform","slice","layerExtent","getExtent","imageExtent","img","imageMapWidth","col","Math","floor","width","imageMapHeight","row","height","getImageData","renderFrame","target","imageResolution","getResolution","imagePixelRatio","getPixelRatio","viewCenter","center","size","scale","round","rotation","size_1","sqrt","pixelTransform","inversePixelTransform","canvasTransform","useContainer","opacity","getBackground","context","canvas","containerReused","clearRect","clipped","render","clipUnrotated","transform","tempTransform","renderedResolution","dw","dh","getInterpolate","preRender","dx","dy","previousAlpha","globalAlpha","drawImage","postRender","restore","style","container","pixelContext","createPixelContext","document","createElement","getContext","CanvasLayerRenderer","pixelContext_","data","err","background","opt_backgroundColor","layerClassName","getClassName","className","backgroundColor","firstElementChild","HTMLCanvasElement","position","appendChild","left","transformOrigin","topLeft","topRight","bottomRight","bottomLeft","coordinateToPixelTransform","inverted","save","beginPath","moveTo","lineTo","clip","dispatchRenderEvent_","type","hasListener","event_1","dispatchEvent","getRenderTransform","offsetX","dx1","dy1","sx","sy","dx2","dy2","getDataAtPixel","hitTolerance","renderPixel","renderCoordinate","x","y","pixelCanvas","name","Uint8Array","disposeInternal","CanvasTileLayerRenderer","tileLayer","extentChanged","renderedExtent_","renderedPixelRatio","renderedProjection","renderedRevision","renderedTiles","newTiles_","tmpExtent","tmpTileRange_","isDrawableTile","tile","tileState","useInterimTilesOnError","getUseInterimTilesOnError","getTile","z","tileSource","getPreload","setState","getInterimTile","source","getRenderSource","tileGrid","getTileGridForProjection","tilePixelRatio","getTilePixelRatio","getZForResolution","getMinZoom","tileCoord","getTileCoordForCoordAndZ","tileOrigin","getOrigin","tileSize","getTileSize","tileResolution","loadedTileCallback","tiles","zoom","sourceRevision","getRevision","zDirection","canvasExtent","tileRange","getTileRangeForExtentAndZ","tilesToDrawByZ","findLoadedTiles","createLoadedTileFinder","tmpTileRange","minX","maxX","minY","maxY","uid","toString","inTransition","indexOf","getAlpha","time","childTileRange","getTileCoordChildTileRange","covered","forEachTileCoordParentTileRange","canvasScale","length","clips","clipZs","currentClip","zs","keys","map","Number","sort","getOpaque","reverse","i","currentZ","currentTilePixelSize","getTilePixelSize","currentResolution","currentScale","dx_1","dy_1","originTileCoord","originTileExtent","getTileCoordExtent","origin_1","tileGutter","getGutterForProjection","tilesToDraw","tileCoordKey","xIndex","nextX","yIndex","nextY","w","h","transition","contextSaved","i_1","ii","push","drawTileImage","unshift","updateUsedTiles","usedTiles","manageTilePyramid","scheduleExpireCache","gutter","getTileImage","alpha","alphaChanged","animate","endTransition","canExpireCache","postRenderFunction","tileSourceKey","expireCache","bind","postRenderFunctions","getKey","preload","opt_tileCallback","wantedTiles","tileQueue","minZoom","tileCount","isKeyQueued","enqueue","getTileCoordCenter","useTile","updateCacheSize","CanvasVectorLayerRenderer","vectorLayer","boundHandleStyleImageChange_","handleStyleImageChange_","animatingOrInteracting_","dirty_","hitDetectionImageData_","renderedFeatures_","renderedRevision_","renderedResolution_","NaN","wrappedRenderedExtent_","renderedRotation_","renderedCenter_","renderedProjection_","renderedRenderOrder_","replayGroup_","replayGroupChanged","declutterExecutorGroup","clipping","renderWorlds","executorGroup","opt_declutterTree","projectionExtent","vectorSource","snapToPixel","multiWorld","getWrapX","canWrapX","worldWidth","endWorld","ceil","world","execute","renderDeclutter","declutterTree","replayGroup","isEmpty","getFeatures","Promise","resolve","transforms","startX","getStyleFunction","forEachFeatureAtCoordinate","callback","matches","result","features","featureCallback","feature","geometry","distanceSq","key","match","splice","lastIndexOf","executorGroups","some","all","item","value","handleFontsChanged","getVisible","changed","event","renderIfReadyAndVisible","animating","interacting","updateWhileAnimating","getUpdateWhileAnimating","updateWhileInteracting","getUpdateWhileInteracting","frameStateExtent","vectorLayerRevision","vectorLayerRenderBuffer","getRenderBuffer","vectorLayerRenderOrder","getRenderOrder","loadExtents","max","loadExtent","declutterBuilderGroup","getDeclutter","userTransform","userProjection","extent_1","userExtent_1","loadFeatures","squaredTolerance","styles","styleFunction","dirty","renderFeature","userExtent","getFeaturesInExtent","replayGroupInstructions","finish","getOverlaps","builderGroup","opt_transform","opt_declutterBuilderGroup","loading","isArray","IMAGE_REPLAYS","VECTOR_REPLAYS","CanvasVectorTileLayerRenderer","renderedLayerRevision_","renderedPixelToCoordinateTransform_","tmpTransform_","prepareTile","state","updateExecutorGroup_","tileImageNeedsRender_","hifi","wantedResolution","Date","now","getRenderMode","renderTileImage_","hasContext","layerRevision","revision","renderOrder","builderState","getReplayState","renderedRenderOrder","declutter","sourceTileGrid","getTileGrid","tileExtent","wrappedTileCoord","sourceTiles","getSourceTiles","layerUid","hitDetectionImageData","declutterExecutorGroups","_loop_1","t","tt","sourceTile","sourceTileCoord","sourceTileExtent","sharedExtent","builderExtent","this_1","bufferedExtent","getGeometry","executorGroupInstructions","replayExtent","renderingReplayGroup","hitExtent","found","getId","_loop_2","declutteredFeatures","reject","getTileCoordForCoordAndResolution","loadingSourceTiles","corner","tilePixel","reduce","accumulator","concat","getOpacity","j","getTileRenderTransform","worldOffset","renderMode","replayTypes","filter","group","hasExecutors","getClipCoords","jj","replayState","renderedTileResolution","renderedTileRevision","renderPixelRatio","renderScale","setTransform","apply","pixelScale","IMAGE_SMOOTHING_DISABLED","imageSmoothingEnabled","msImageSmoothingEnabled","IMAGE_SMOOTHING_ENABLED","SIMPLIFY_TOLERANCE","GEOMETRY_RENDERERS","renderPointGeometry","renderLineStringGeometry","renderPolygonGeometry","renderMultiPointGeometry","renderMultiLineStringGeometry","renderMultiPolygonGeometry","renderGeometryCollectionGeometry","renderCircleGeometry","defaultOrder","feature1","feature2","parseInt","getSquaredTolerance","tolerance","getTolerance","fillStyle","getFill","strokeStyle","getStroke","circleReplay","getBuilder","getZIndex","setFillStrokeStyle","drawCircle","textStyle","getText","textReplay","setTextStyle","drawText","listener","imageStyle","imageState","getImageState","unlistenImageChange","load","listenImageChange","renderFeatureInternal","getGeometryFunction","simplifiedGeometry","simplifyTransformed","renderer","getRenderer","renderGeometry","geometryRenderer","getType","replay","drawCustom","getHitDetectionRenderer","geometries","getGeometries","getGeometriesArray","lineStringReplay","drawLineString","drawMultiLineString","polygonReplay","drawMultiPolygon","declutterImageWithText","imageReplay","setImageStyle","drawPoint","drawMultiPoint","drawPolygon","WebGLWorkerMessageType","GENERATE_BUFFERS","WebGLLayerRenderer","opt_options","options","inversePixelTransform_","postProcesses_","postProcesses","uniforms_","uniforms","helper","addChangeListener","removeHelper","dispatchPreComposeEvent","dispatchPostComposeEvent","event_2","reset","setUniforms","dispose","incrementGroup","groupNumber","canvasCacheKey","mapId","canvasCacheKeyMatches","getCanvas","afterHelperCreated","prepareFrameInternal","event_3","gl","getGL","attributes","getContextAttributes","preserveDrawingBuffer","colorEncodeId","id","opt_array","array","radix","divide","colorDecodeId","color","mult","WebGLPointsLayerRenderer","projectionMatrixTransform","ready","sourceRevision_","verticesBuffer_","hitVerticesBuffer_","indicesBuffer_","vertexShader_","vertexShader","fragmentShader_","fragmentShader","program_","hitDetectionEnabled_","hitFragmentShader","hitVertexShader","hitVertexShader_","hitFragmentShader_","hitProgram_","customAttributes","attribute","hitDetectionAttributes","previousExtent_","currentTransform_","renderTransform_","invertRenderTransform_","renderInstructions_","Float32Array","hitRenderInstructions_","hitRenderTarget_","generateBuffersRun_","worker_","addEventListener","received","projectionTransform","hitDetection","fromArrayBuffer","vertexBuffer","flushBufferData","indexBuffer","renderInstructions","generateBuffersRun","featureCache_","featureCount_","sourceListenKeys_","handleSourceFeatureAdded_","handleSourceFeatureChanged_","handleSourceFeatureDelete_","handleSourceFeatureClear_","forEachFeature","properties","getProperties","getProgram","renderCount","getSize","drawElements","finalizeDraw","renderHitDetection","clearCachedData","viewNotMoving","sourceChanged","renderBuffer","rebuildBuffers_","makeProjectionTransform","useProgram","prepareDraw","bindBuffer","enableAttributes","featureCache","totalInstructionsCount","totalHitInstructionsCount","hitColor","tmpCoords","tmpColor","renderIndex","hitIndex","featureUid","getFlatCoordinates","message","buffer","customAttributesCount","postMessage","hitMessage","readPixel","index","getFeatureByUid","setSize","prepareDrawToRenderTarget","terminate","layer_","forEach"],"sourceRoot":""}