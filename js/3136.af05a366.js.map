{"version":3,"file":"js/3136.af05a366.js","mappings":"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","sources":["webpack://@openeo/web-editor/./src/export/exporter.js","webpack://@openeo/web-editor/./src/export/javascript.js","webpack://@openeo/web-editor/./src/formats/csv.js","webpack://@openeo/web-editor/./src/formats/format.js","webpack://@openeo/web-editor/./src/formats/browserImage.js","webpack://@openeo/web-editor/./src/formats/native.js","webpack://@openeo/web-editor/./src/formats/tsv.js","webpack://@openeo/web-editor/./src/formats/formatRegistry.js","webpack://@openeo/web-editor/./src/formats/geotiff.js","webpack://@openeo/web-editor/./src/formats/json.js"],"sourcesContent":["import { BaseProcess, ProcessGraph } from '@openeo/js-processgraphs';\nimport Utils from \"../utils\";\n\nclass ProcessImpl extends BaseProcess {\n\tconstructor(process, exporter) {\n\t\tsuper(process);\n\t\tthis.exporter = exporter;\n\t}\n\tasync execute(node) {\n\t\tawait this.exporter.generateFunction(node);\n\t}\n}\n\nexport default class Exporter extends ProcessGraph {\n\n\tconstructor(process, registry, connection) {\n\t\tsuper(Utils.isObject(process) ? process : {}, registry);\n\t\tthis.connection = connection;\n\t\tthis.code = [];\n\t\tthis.fnCounter = 1;\n\t\tthis.allowEmpty();\n\t\tthis.fillUndefinedParameters();\n\t}\n\n\t// inherited from ProcessGraph\n\n\tcreateProcessGraphInstance(process) {\n\t\tlet pg = new Exporter(process, this.processRegistry, this.getJsonSchemaValidator());\n\t\treturn this.copyProcessGraphInstanceProperties(pg);\n\t}\n\n\tcopyProcessGraphInstanceProperties(pg) {\n\t\tpg = super.copyProcessGraphInstanceProperties(pg);\n\t\tpg.connection = this.connection;\n\t\treturn pg;\n\t}\n\n\tcreateProcessInstance(process) {\n\t\treturn new ProcessImpl(process, this);\n\t}\n\n\tisKeyword(keyword) {\n\t\treturn this.getKeywords().includes(keyword.toLowerCase());\n\t}\n\n\t// Methods to be implemented by sub-class\n\n\tgetKeywords() {\n\t\treturn [];\n\t}\n\n\tcomment(/*comment*/) {}\n\n\tgenerateImports() {}\n\n\tgenerateConnection() {}\n\n\tgenerateAuthentication() {}\n\n\tgenerateBuilder() {}\n\n\tgenerateMetadata(/*key, value*/) {}\n\n\tgenerateMissingParameter() {}\n\n\tasync generateFunction(/*node*/) {}\n\n\tgenerateFunctionParams(parameters) {\n\t\treturn parameters.map(p => {\n\t\t\tif (typeof p.default !== 'undefined') {\n\t\t\t\treturn `${p.name} = ${this.e(p.default)}`;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn p.name;\n\t\t\t}\n\t\t});\n\t}\n\n\tasync generateCallback(/*callback, parameters, variable*/) {}\n\n\tgenerateResult(/*resultNode, callback*/) {}\n\n\tmakeNull() {\n\t\treturn \"null\";\n\t}\n\tmakeBoolean(val) {\n\t\treturn val ? \"true\" : \"false\";\n\t}\n\tmakeArray(arr) {\n\t\treturn `[${arr.join(', ')}]`;\n\t}\n\tmakeObject(obj) {\n\t\tlet arr = Utils.mapObject(obj, (val, key) => `${this.makeString(key)}: ${val}`);\n\t\treturn `{${arr.join(', ')}}`;\n\t}\n\tmakeString(str) {\n\t\treturn JSON.stringify(str);\n\t}\n\tmakeNumber(num) {\n\t\treturn num;\n\t}\n\n\t// Helpers\n\n\te(value) {\n\t\tif (value === null) {\n\t\t\treturn this.makeNull();\n\t\t}\n\t\telse if (typeof value === 'boolean') {\n\t\t\treturn this.makeBoolean(value);\n\t\t}\n\t\telse if (typeof value === 'number') {\n\t\t\treturn this.makeNumber(value);\n\t\t}\n\t\telse if (typeof value === 'string') {\n\t\t\treturn this.makeString(value);\n\t\t}\n\t\telse if (Array.isArray(value)) {\n\t\t\treturn this.makeArray(value.map(val => this.e(val)));\n\t\t}\n\t\telse if (Utils.isObject(value)) {\n\t\t\treturn this.makeObject(Utils.mapObjectValues(value, val => this.e(val)));\n\t\t}\n\t\telse if (typeof value === 'function') {\n\t\t\treturn value();\n\t\t}\n\t\telse {\n\t\t\treturn this.makeNull();\n\t\t}\n\t}\n\n\tgenerateMetadata() {\n\t\tlet hasComment = false;\n\t\tfor(let key in this.process) {\n\t\t\tif (key === 'process_graph') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet val = this.process[key];\n\t\t\tif (Array.isArray(val) && val.length === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse if (typeof val === 'string' && val.length === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse if (typeof val === 'boolean' && !val) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!hasComment) {\n\t\t\t\tthis.newLine();\n\t\t\t\tthis.comment(`Set the metadata for the process`);\n\t\t\t\thasComment = true;\n\t\t\t}\n\t\t\tthis.generateMetadataEntry(key, val);\n\t\t}\n\t}\n\n\tasync resolveArguments(args, onExporter, filter) {\n\t\tlet newArgs = Array.isArray(args) ? [] : {};\n\t\tfor(let key in args) {\n\t\t\tlet value = args[key];\n\t\t\tif (filter && filter(key, value)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (Utils.isObject(value)) {\n\t\t\t\tif (value.from_node) {\n\t\t\t\t\tnewArgs[key] = () => this.var(value.from_node, this.varPrefix());\n\t\t\t\t\tcontinue; \n\t\t\t\t}\n\t\t\t\telse if (value.from_parameter) {\n\t\t\t\t\tnewArgs[key] = () => this.var(value.from_parameter);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if (value instanceof Exporter) {\n\t\t\t\t\tlet fnName = await onExporter(key);\n\t\t\t\t\tnewArgs[key] = () => fnName;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tnewArgs[key] = await this.resolveArguments(value, onExporter, filter);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (Array.isArray(value)) {\n\t\t\t\tnewArgs[key] = await this.resolveArguments(value, onExporter, filter);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnewArgs[key] = value;\n\t\t\t}\n\t\t}\n\t\treturn newArgs;\n\t}\n\n\tasync resolveCallback(node, key) {\n\t\tlet callback;\n\t\tif (node.process_id === 'load_collection') {\n\t\t\tlet properties = node.getArgument('properties');\n\t\t\tcallback = properties[key];\n\t\t}\n\t\telse {\n\t\t\tcallback = node.getArgument(key);\n\t\t}\n\t\tlet parameters = callback.getCallbackParameters();\n\t\tawait callback.execute(parameters);\n\t\tlet fnName = this.var(`${key}${this.fnCounter++}`, 'fn_');\n\t\tlet replacement = await this.generateCallback(callback, parameters, fnName);\n\t\treturn replacement ? replacement : fnName;\n\t}\n\n\tasync generateArguments(node, ordered = false, filter = null) {\n\t\tlet args = await this.resolveArguments(node.arguments, async key => await this.resolveCallback(node, key), filter);\n\t\tif (ordered) {\n\t\t\targs = this.orderArguments(node, args);\n\t\t}\n\t\treturn args;\n\t}\n\n\torderArguments(node, args) {\n\t\tlet process = node.getProcessGraph().getProcess(node);\n\t\tif (process && Array.isArray(process.parameters)) {\n\t\t\tlet orderedArgs = process.parameters.map(param => {\n\t\t\t\tif (typeof args[param.name] !== 'undefined') {\n\t\t\t\t\treturn args[param.name];\n\t\t\t\t}\n\t\t\t\telse if (!param.optional) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t});\n\t\t\tlet definedValueFound = false;\n\t\t\tfor(let i = orderedArgs.length-1; i >= 0; i--) {\n\t\t\t\tif (typeof orderedArgs[i] === 'undefined') {\n\t\t\t\t\tif (definedValueFound) {\n\t\t\t\t\t\torderedArgs[i] = null;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\torderedArgs.pop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdefinedValueFound = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn orderedArgs;\n\t\t}\n\t}\n\n\tvarPrefix() {\n\t\tif (!this.getParent()) {\n\t\t\treturn 'datacube';\n\t\t}\n\t\telse {\n\t\t\treturn 'data';\n\t\t}\n\t}\n\n\tvar(id, prefix = \"var\") {\n\t\tid = String(id);\n\t\tif (this.isKeyword(id)) {\n\t\t\treturn `${id}_`;\n\t\t}\n\t\tif (!id.match(/^[a-z_]\\w*$/)) {\n\t\t\treturn prefix + id.replace(/[^\\w]+/g, '_');\n\t\t}\n\t\telse {\n\t\t\treturn id;\n\t\t}\n\t}\n\n\tgetTab() {\n\t\treturn `\\t`;\n\t}\n\n\taddCode(code, prefix = '', level = 0) {\n\t\tif (typeof code !== 'string') {\n\t\t\treturn;\n\t\t}\n\t\tlet tabs = this.getTab().repeat(level);\n\t\tlet lines = code.trim().split(/\\r\\n|\\r|\\n/g);\n\t\tfor(let line of lines) {\n\t\t\tthis.code.push(`${tabs}${prefix}${line}\\n`);\n\t\t}\n\t}\n\n\tnewLine(count = 1) {\n\t\tfor(let i = 0; i < count; i++) {\n\t\t\tthis.addCode('');\n\t\t}\n\t}\n\n\tgetServerUrl() {\n\t\treturn this.connection.getUrl();\n\t}\n\n\tasync toCode(callback = false) {\n\t\tthis.code = [];\n\t\tif (!callback) {\n\t\t\tthis.comment(`Import required packages`);\n\t\t\tthis.generateImports();\n\t\t\tthis.newLine();\n\t\t\tthis.comment(`Connect to the back-end`);\n\t\t\tthis.generateConnection();\n\t\t\tthis.generateAuthentication();\n\t\t\tthis.newLine();\n\t\t\tthis.generateBuilder();\n\t\t\tthis.generateMetadata();\n\t\t\tthis.newLine();\n\t\t}\n\t\tlet params = this.getProcessParameters();\n\t\tif (params.length > 0) {\n\t\t\tthis.comment('ToDo: Here you need to set values for the parameters');\n\t\t\tfor(let param of params) {\n\t\t\t\tthis.generateMissingParameter(param);\n\t\t\t}\n\t\t\tthis.newLine();\n\t\t}\n\t\tawait this.execute();\n\t\tif (!callback) {\n\t\t\tthis.newLine();\n\t\t\tthis.comment(`The process can be executed synchronously (see below), as batch job or as web service now`);\n\t\t}\n\t\tthis.generateResult(this.getResultNode(), callback);\n\t\treturn this.code.join('').trim();\n\t}\n\n\tasync execute() {\n\t\tawait this.validate();\n\t\tthis.reset();\n\t\tawait this.executeNodes(this.getStartNodes());\n\t\treturn this.getResultNode();\n\t}\n\n\tisMath() {\n\t\tif (typeof this._isMath === 'undefined') {\n\t\t\t// Determine whether the process is just math\n\t\t\tthis._isMath = this.processRegistry.isMath(this);\n\t\t}\n\t\treturn this._isMath;\n\t}\n\n}","import Utils from \"../utils\";\nimport Exporter from \"./exporter\";\nimport { Formula } from '@openeo/js-client';\n\nconst KEYWORDS = [\n\t\"abstract\",\n\t\"arguments\",\n\t\"await\",\n\t\"boolean\",\n\t\"break\",\n\t\"byte\",\n\t\"case\",\n\t\"catch\",\n\t\"char\",\n\t\"class\",\n\t\"const\",\n\t\"continue\",\n\t\"debugger\",\n\t\"default\",\n\t\"delete\",\n\t\"do\",\n\t\"double\",\n\t\"else\",\n\t\"enum\",\n\t\"eval\",\n\t\"export\",\n\t\"extends\",\n\t\"false\",\n\t\"final\",\n\t\"finally\",\n\t\"float\",\n\t\"for\",\n\t\"function\",\n\t\"goto\",\n\t\"if\",\n\t\"implements\",\n\t\"import\",\n\t\"in\",\n\t\"instanceof\",\n\t\"int\",\n\t\"interface\",\n\t\"let\",\n\t\"long\",\n\t\"native\",\n\t\"new\",\n\t\"null\",\n\t\"package\",\n\t\"private\",\n\t\"protected\",\n\t\"public\",\n\t\"return\",\n\t\"short\",\n\t\"static\",\n\t\"super\",\n\t\"switch\",\n\t\"synchronized\",\n\t\"this\",\n\t\"throw\",\n\t\"throws\",\n\t\"transient\",\n\t\"true\",\n\t\"try\",\n\t\"typeof\",\n\t\"var\",\n\t\"void\",\n\t\"volatile\",\n\t\"while\",\n\t\"with\",\n\t\"yield\",\n\t// specific to this generator\n\t\"builder\",\n\t\"connection\",\n\t\"formula\",\n\t\"openeo\",\n\t\"result\"\n];\n\nexport default class JavaScript extends Exporter {\n\n\tconstructor(process, registry, connection, generateFormula = false) {\n\t\tsuper(process, registry, connection);\n\t\tthis.generateFormula = generateFormula;\n\t}\n\n\tcreateProcessGraphInstance(process) {\n\t\tlet pg = new JavaScript(process, this.processRegistry, this.getJsonSchemaValidator(), this.generateFormula);\n\t\treturn this.copyProcessGraphInstanceProperties(pg);\n\t}\n\n\tparse() {\n\t\tif (this.parsed) {\n\t\t\treturn;\n\t\t}\n\t\tsuper.parse();\n\t}\n\n\tgetKeywords() {\n\t\treturn KEYWORDS;\n\t}\n\n\tcomment(comment) {\n\t\tthis.addCode(comment, '// ');\n\t}\n\n\tgenerateImports() {\n\t\tthis.addCode(`import { OpenEO, Formula } from '@openeo/js-client';`);\n\t}\n\n\tgenerateConnection() {\n\t\tthis.addCode(`let connection = await OpenEO.connect('${this.getServerUrl()}');`);\n\t}\n\n\tgenerateAuthentication() {\n\t\tthis.comment(`ToDo: Here you need to add your authentication steps`);\n\t}\n\n\tgenerateBuilder() {\n\t\tthis.addCode(`let builder = await connection.buildProcess();`);\n\t}\n\n\tgenerateMetadataEntry(key, value) {\n\t\tthis.addCode(`builder.${key} = ${this.e(value)};`);\n\t}\n\n\tasync generateFunction(node) {\n\t\tlet builderName = node.getParent() ? 'this' : 'builder';\n\t\tlet variable = this.var(node.id, this.varPrefix());\n\t\tlet args = await this.generateArguments(node, !node.namespace);\n\n\t\tthis.comment(node.description);\n\t\tif (Utils.isObject(args)) {\n\t\t\tlet processId = node.namespace ? `${node.process_id}@${node.namespace}` : node.process_id;\n\t\t\tthis.addCode(`let ${variable} = ${builderName}.process(\"${processId}\", ${this.e(args)});`);\n\t\t}\n\t\telse {\n\t\t\tthis.addCode(`let ${variable} = ${builderName}.${node.process_id}(${args.map(arg => this.e(arg)).join(', ')});`);\n\t\t}\n\t}\n\n\tgenerateMissingParameter(parameter) {\n\t\tthis.comment(parameter.description);\n\t\tlet paramName = this.var(parameter.name, 'param');\n\t\tlet value = typeof parameter.default !== 'undefined' ? parameter.default : null;\n\t\tthis.addCode(`let ${paramName} = ${this.e(value)};`);\n\t}\n\n\tasync generateCallback(callback, parameters, variable) {\n\t\tif (this.generateFormula && callback && callback.isMath()) {\n\t\t\tlet formula = callback.toFormulaString();\n\t\t\tlet escaped = JSON.stringify(formula);\n\t\t\treturn `new Formula(${escaped})`;\n\t\t}\n\t\telse {\n\t\t\tlet params = this.generateFunctionParams(parameters);\n\t\t\tthis.newLine();\n\t\t\tthis.addCode(`let ${variable} = function(${params.join(', ')}) {`);\n\t\t\tthis.addCode(await callback.toCode(true), '', 1);\n\t\t\tthis.addCode(`}`);\n\t\t}\n\t}\n\n\tgenerateResult(resultNode, callback) {\n\t\tif (!resultNode) {\n\t\t\treturn;\n\t\t}\n\t\tlet variable = this.var(resultNode.id, this.varPrefix());\n\t\tif (callback) {\n\t\t\tthis.addCode(`return ${variable};`);\n\t\t}\n\t\telse {\n\t\t\tthis.addCode(`let result = await connection.computeResult(${variable});`);\n\t\t}\n\t}\n\n\ttoFormulaString() {\n\t\tif (this.isMath()) {\n\t\t\treturn this.nodeToFormula(this.getResultNode());\n\t\t}\n\t\telse {\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tgetArrayElementPlaceholder(node) {\n\t\tif (node.process_id === 'array_element') {\n\t\t\tif (node.getArgumentType('data') === 'parameter') {\n\t\t\t\tlet parameter = node.getRawArgument('data').from_parameter;\n\t\t\t\tlet index = this.getCallbackParameters().findIndex(param => param.name === parameter);\n\t\t\t\tif (index >= 0) {\n\t\t\t\t\treturn '$'.repeat(index+1) + (node.getArgument('label') || node.getArgument('index'));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tnodeToFormula(node, parentOperator = null) {\n\t\tif (node.process_id === 'array_element') {\n\t\t\tlet arrayElement = this.getArrayElementPlaceholder(node);\n\t\t\tif (arrayElement) {\n\t\t\t\treturn arrayElement;\n\t\t\t}\n\t\t}\n\n\t\tlet operator = Formula.reverseOperatorMapping[node.process_id];\n\t\tlet process = this.processRegistry.get(node.process_id);\n\t\tlet isArrayData = (typeof Formula.arrayOperatorMapping[node.process_id] !== 'undefined');\n\n\t\tlet convertValue = value => {\n\t\t\tif (Utils.isObject(value)) {\n\t\t\t\tif (value.from_node) {\n\t\t\t\t\tlet refNode = node.getProcessGraph().getNode(value.from_node);\n\t\t\t\t\tif (refNode) {\n\t\t\t\t\t\tvalue = this.nodeToFormula(refNode, operator);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tvalue = '#' + value.from_node;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (value.from_parameter) {\n\t\t\t\t\tvalue = value.from_parameter;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow new Error('Objects not allowed');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn value;\n\t\t};\n\n\t\t// Create the list of arguments\n\t\tlet argList = [];\n\t\tlet params = Array.isArray(process.parameters) ? process.parameters : [];\n\t\tfor(let parameter of params) {\n\t\t\tlet value = convertValue(node.getRawArgument(parameter.name));\n\n\t\t\tif (isArrayData && Array.isArray(value) && parameter.name === 'data') {\n\t\t\t\targList = value.map(v => convertValue(v));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(typeof value !== 'undefined') {\n\t\t\t\targList.push(value);\n\t\t\t}\n\t\t\telse if(typeof parameter.default !== 'undefined') {\n\t\t\t\targList.push(parameter.default);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new Error('Argument for parameter \"' + parameter.name + '\" missing');\n\t\t\t}\n\t\t}\n\t\t \n\t\t // Filter null values for array data to handle ignore_nodata\n\t\tif (isArrayData) {\n\t\t\targList = argList.filter(v => v !== null);\n\t\t}\n\n\t\tif (operator) {\n\t\t\tlet strongOps = ['/', '*']; // \"Punktrechnung\" vor\n\t\t\tlet weakOps = ['-', '+']; // \"Strichrechung\"\n\t\t\tlet formula = argList\n\t\t\t\t.map(v => v < 0 ? '(' + v + ')' : v) // Put negative values in brackets\n\t\t\t\t.join(operator); // Merge everything together\n\t\t\t\n\t\t\t// Check whether brackets are required\n\t\t\tif (\n\t\t\t\t// No brackets on top-level\n\t\t\t\t!parentOperator\n\t\t\t\t// If operators are both weak, no brackets required\n\t\t\t\t|| (weakOps.includes(parentOperator) && weakOps.includes(operator))\n\t\t\t\t// If operators are both strong, no brackets required -> not correct, x/(a*b) needs it, see https://github.com/Open-EO/openeo-web-editor/issues/235\n//\t\t\t\t|| (strongOps.includes(parentOperator) && strongOps.includes(operator))\n\t\t\t\t// No brackets required for power, it's the strongest operation\n\t\t\t\t|| operator === '^'\n\t\t\t\t// If the parent operation is a weak operation (+/-) and this is a strong operation, no brackets required\n\t\t\t\t|| (weakOps.includes(parentOperator) && strongOps.includes(operator))\n\t\t\t) {\n\t\t\t\treturn formula;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn '(' + formula + ')';\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn node.process_id + '(' + argList.join(', ') + ')';\n\t\t}\n\t}\n\n}","import { SupportedFormat } from './format';\n\nclass CSV extends SupportedFormat {\n\n\tconstructor(asset, delim = [',', ';']) {\n\t\tsuper(asset, 'TableViewer', 'fa-table');\n\t\tthis.delim = delim;\n\t}\n\n\tasync parseData(data) {\n\t\tif (typeof data === 'string') {\n\t\t\t// Parse CSV\n\t\t\tlet array = this.parseCSV(data.trim());\n\t\t\t// Convert values into numbers, if possible\n\t\t\treturn array.map(row => row.map(col => {\n\t\t\t\tcol = col.trim();\n\t\t\t\tif (col.length === 0) {\n\t\t\t\t\treturn NaN;\n\t\t\t\t}\n\t\t\t\telse if (!isNaN(col)) { // https://stackoverflow.com/a/35759874/9709414\n\t\t\t\t\treturn parseFloat(col);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn col;\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t\treturn data;\n\t}\n\n\t// From https://stackoverflow.com/questions/1293147/example-javascript-code-to-parse-csv-data\n\tparseCSV(str) {\n\t\tvar arr = [];\n\t\tvar quote = false;  // 'true' means we're inside a quoted field\n\t\n\t\t// Iterate over each character, keep track of current row and column (of the returned array)\n\t\tfor (var row = 0, col = 0, c = 0; c < str.length; c++) {\n\t\t\tvar cc = str[c], nc = str[c+1];        // Current character, next character\n\t\t\tarr[row] = arr[row] || [];             // Create a new row if necessary\n\t\t\tarr[row][col] = arr[row][col] || '';   // Create a new column (start with empty string) if necessary\n\t\n\t\t\t// If the current character is a quotation mark, and we're inside a\n\t\t\t// quoted field, and the next character is also a quotation mark,\n\t\t\t// add a quotation mark to the current column and skip the next character\n\t\t\tif (cc == '\"' && quote && nc == '\"') {\n\t\t\t\tarr[row][col] += cc; ++c;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// If it's just one quotation mark, begin/end quoted field\n\t\t\tif (cc == '\"') {\n\t\t\t\tquote = !quote;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// If it's a elimiter and we're not in a quoted field, move on to the next column\n\t\t\tif (this.delim.includes(cc) && !quote) {\n\t\t\t\t++col;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// If it's a newline (CRLF) and we're not in a quoted field, skip the next character\n\t\t\t// and move on to the next row and move to column 0 of that new row\n\t\t\tif (cc == '\\r' && nc == '\\n' && !quote) {\n\t\t\t\t++row; col = 0; ++c;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// If it's a newline (LF or CR) and we're not in a quoted field,\n\t\t\t// move on to the next row and move to column 0 of that new row\n\t\t\tif (cc == '\\n' && !quote) {\n\t\t\t\t++row; col = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (cc == '\\r' && !quote) {\n\t\t\t\t++row; col = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// Otherwise, append the current character to the current column\n\t\t\tarr[row][col] += cc;\n\t\t}\n\t\treturn arr;\n\t}\n\n}\n\nexport default CSV;","import Utils from '../utils.js';\n\nexport class Format {\n\n\tconstructor(asset) {\n\t\tObject.assign(this, asset);\n\t\tthis.context = null;\n\t}\n\n\tsetContext(context) {\n\t\tthis.context = context;\n\t}\n\n\tgetContext() {\n\t\treturn this.context;\n\t}\n\n\tgetUrl() {\n\t\treturn this.href;\n\t}\n\n\tcanGroup() {\n\t\treturn false;\n\t}\n\n\tisBinary() {\n\t\treturn true;\n\t}\n\n\tdownload(filename = null) {\n\t\tlet tempLink = document.createElement('a');\n\t\ttempLink.style.display = 'none';\n\t\ttempLink.href = this.getUrl();\n\t\ttempLink.setAttribute('download', filename ? filename :  Utils.makeFileName(\"result\", this.type));\n\t\ttempLink.setAttribute('target', '_blank');\n\t\tdocument.body.appendChild(tempLink);\n\t\ttempLink.click();\n\t\tdocument.body.removeChild(tempLink);\n\t}\n\n\tasync loadData(connection) {\n\t\tif (!this.loaded) {\n\t\t\tthis.data = await this.fetchData(connection);\n\t\t\tthis.loaded = true;\n\t\t}\n\t}\n\n\tgetData() {\n\t\tif (!this.loaded) {\n\t\t\tthrow new Error('Data must be loaded before');\n\t\t}\n\t\treturn this.data;\n\t}\n\n\tasync fetchData(connection) {\n\t\tlet blob;\n\t\tlet url = this.getUrl();\n\t\tif (url.startsWith('blob:')) {\n\t\t\tlet response = await fetch(url);\n\t\t\tblob = await response.blob();\n\t\t}\n\t\telse {\n\t\t\tlet auth = false;\n\t\t\ttry {\n\t\t\t\tlet apiUrl = new URL(connection.getUrl());\n\t\t\t\tlet requestUrl = new URL(url);\n\t\t\t\tauth = apiUrl.origin === requestUrl.origin;\n\t\t\t} catch (error) {}\n\n\t\t\tblob = await connection.download(url, auth);\n\t\t}\n\t\tlet promise = new Promise((resolve, reject) => {\n\t\t\tlet reader = new FileReader();\n\t\t\treader.onload = event => resolve(event.target.result);\n\t\t\treader.onerror = reject;\n\t\t\tif (this.isBinary()) {\n\t\t\t\treader.readAsBinaryString(blob);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treader.readAsText(blob);\n\t\t\t}\n\t\t});\n\t\tlet data = await promise;\n\t\treturn await this.parseData(data);\n\t}\n\n\tasync parseData(data) {\n\t\treturn data;\n\t}\n\n}\n\nexport class SupportedFormat extends Format {\n\n\tconstructor(asset, component = null, icon = 'fa-database', props = {}, events = {}) {\n\t\tsuper(asset);\n\t\tthis.loaded = false;\n\t\tthis.component = component;\n\t\tthis.props = props;\n\t\tif (!this.props.data) {\n\t\t\tthis.props.data = this;\n\t\t}\n\t\tthis.icon = icon;\n\t\tthis.events = events;\n\t}\n\n\tisBinary() {\n\t\treturn false;\n\t}\n\n}\n\nexport class UnsupportedFormat extends Format {\n\n\tconstructor(asset) {\n\t\tsuper(asset);\n\t}\n\n}\n\nexport class FormatCollection extends SupportedFormat {\n\n}","import { SupportedFormat } from './format';\n\nclass BrowserImage extends SupportedFormat {\n\n\tconstructor(asset) {\n\t\tsuper(asset, 'ImageViewer', 'fa-image');\n\t}\n\n\tisBinary() {\n\t\treturn true;\n\t}\n\n\tasync fetchData() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet img = new Image();\n\t\t\timg.crossOrigin = 'anonymous';\n\t\t\timg.onerror = () => reject(new Error('Failed to load the image'));\n\t\t\timg.onload = () => resolve(img);\n\t\t\timg.fetchPriotity = 'high';\n\t\t\timg.decoding = 'sync';\n\t\t\timg.src = this.getUrl();\n\t\t});\n\t}\n\n}\n\nexport default BrowserImage;","import { SupportedFormat } from './format';\n\nclass NativeType extends SupportedFormat {\n\n\tconstructor(asset) {\n\t\tsuper(asset, \"DataViewer\");\n\t}\n\n}\n\nexport default NativeType;","import CSV from './csv';\n\nclass TSV extends CSV {\n\n\tconstructor(asset) {\n\t\tsuper(asset, [\"\\t\"]);\n\t}\n\n}\n\nexport default TSV;","import contentType from 'content-type';\n\nimport BrowserImage from '../formats/browserImage';\nimport CSV from '../formats/csv';\nimport GeoTIFF from '../formats/geotiff';\nimport JSON_ from '../formats/json';\nimport NativeType from './native';\nimport TSV from '../formats/tsv';\nimport { UnsupportedFormat } from './format';\n\nexport default class FormatRegistry {\n\n\tconstructor() {\n\t}\n\n\tcreateFilesFromSTAC(stac, resource = null) {\n\t\tlet files = Object.values(stac.assets)\n\t\t\t.filter(asset => !Array.isArray(asset.roles) || !asset.roles.includes(\"metadata\"))\n\t\t\t.map(asset => this.createFileFromAsset(asset, stac));\n\t\tif (resource) {\n\t\t\tfiles.forEach(file => file.setContext(resource));\n\t\t}\n\t\treturn files;\n\t}\n\n\tcreateFilesFromBlob(data) {\n\t\tif (!(data instanceof Blob)) {\n\t\t\tthrow new Error(\"Given data is not a valid Blob\");\n\t\t}\n\t\treturn this.createFilesFromSTAC({\n\t\t\tstac_version: \"1.0.0\",\n\t\t\ttype: \"Feature\",\n\t\t\tgeometry: null,\n\t\t\tproperties: {},\n\t\t\tlinks: [],\n\t\t\tassets: {\n\t\t\t\tresult: {\n\t\t\t\t\thref: URL.createObjectURL(data),\n\t\t\t\t\tblob: data,\n\t\t\t\t\ttype: data.type\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tcreateFileFromAsset(asset, stac) {\n\t\ttry {\n\n\t\t\t// Detect by media type\n\t\t\tif (typeof asset.type === 'string') {\n\t\t\t\tlet mime = contentType.parse(asset.type.toLowerCase());\n\t\t\t\tswitch(mime.type) {\n\t\t\t\t\tcase 'image/png':\n\t\t\t\t\tcase 'image/jpg':\n\t\t\t\t\tcase 'image/jpeg':\n\t\t\t\t\tcase 'image/gif':\n\t\t\t\t\tcase 'image/webp':\n\t\t\t\t\t\treturn new BrowserImage(asset);\n\t\t\t\t\tcase 'application/json':\n\t\t\t\t\tcase 'text/json':\n\t\t\t\t\tcase 'application/geo+json':\n\t\t\t\t\t\treturn new JSON_(asset);\n\t\t\t\t\tcase 'text/plain':\n\t\t\t\t\t\treturn new NativeType(asset);\n\t\t\t\t\tcase 'text/csv':\n\t\t\t\t\t\treturn new CSV(asset);\n\t\t\t\t\tcase 'text/tab-separated-values':\n\t\t\t\t\t\treturn new TSV(asset);\n\t\t\t\t\tcase 'image/tiff':\n\t\t\t\t\t\treturn new GeoTIFF(asset, stac);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Fallback: Detect by file extension\n\t\t\tif (typeof asset.href === 'string') {\n\t\t\t\tlet extension = asset.href.split(/[#?]/)[0].split('.').pop().trim().toLowerCase();\n\t\t\t\tswitch(extension) {\n\t\t\t\t\tcase 'png':\n\t\t\t\t\tcase 'jpg':\n\t\t\t\t\tcase 'jpeg':\n\t\t\t\t\tcase 'gif':\n\t\t\t\t\tcase 'webp':\n\t\t\t\t\t\treturn new BrowserImage(asset);\n\t\t\t\t\tcase 'json':\n\t\t\t\t\tcase 'geojson':\n\t\t\t\t\t\treturn new JSON_(asset);\n\t\t\t\t\tcase 'txt':\n\t\t\t\t\t\treturn new NativeType(asset);\n\t\t\t\t\tcase 'csv':\n\t\t\t\t\t\treturn new CSV(asset);\n\t\t\t\t\tcase 'tsv':\n\t\t\t\t\t\treturn new TSV(asset);\n\t\t\t\t\tcase 'tif':\n\t\t\t\t\tcase 'tiff':\n\t\t\t\t\t\treturn new GeoTIFF(asset, stac);\n\t\t\t\t}\n\t\t\t}\n\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\n\t\treturn new UnsupportedFormat(asset);\n\t}\n\n}","import { SupportedFormat } from './format';\nimport Utils from '../utils';\nimport ProjManager from '../components/maps/projManager';\n\nimport { fromUrl as tiffFromUrl, fromBlob as tiffFromBlob, globals as _ } from 'geotiff';\n\nimport { toUserExtent } from 'ol/proj';\nimport Projection from 'ol/proj/Projection';\nimport { fromCode as unitsFromCode } from 'ol/proj/Units';\n\nconst GDAL_MIN = 'STATISTICS_MINIMUM';\nconst GDAL_MAX = 'STATISTICS_MAXIMUM';\nconst GDAL_NAME = 'DESCRIPTION';\n\nclass GeoTIFF extends SupportedFormat {\n\n\tconstructor(asset, stac) {\n\t\tsuper(asset, \"MapViewer\", 'fa-map', { removableLayers: true });\n\t\tthis.bands = [];\n\t\tthis.nodata = [];\n\t\tthis.img = null;\n\t\tthis.projection = null;\n\t\tthis.extent = null;\n\t\tthis.convertToRGB = false;\n\t\tthis.stac = stac;\n\t}\n\n\tisBinary() {\n\t\treturn true;\n\t}\n\n\tcanGroup() {\n\t\treturn true;\n\t}\n\n\tasync loadData(connection) {\n\t\tif (!this.loaded) {\n\t\t\tawait this.parseMetadata();\n\t\t\tthis.loaded = true;\n\t\t}\n\t\treturn this;\n\t}\n\n\tgetData() {\n\t\treturn this;\n\t}\n\n\tasync parseMetadata() {\n\t\tlet stacHasExtent = this.stac && (this.stac.geometry || this.stac.extent);\n\n\t\t// Get projection from STAC\n\t\tthis.projection = await ProjManager.addFromStac(this.stac);\n\n\t\t// Get nodata from STAC file:nodata\n\t\tif (Array.isArray(this['file:nodata']) && this['file:nodata'].length > 0) {\n\t\t\tthis.nodata = Utils.parseNodata(this['file:nodata']);\n\t\t}\n\n\t\t// Get band names from STAC eo:bands\n\t\tif (Array.isArray(this['eo:bands']) && this['eo:bands'].length > 0) {\n\t\t\tthis['eo:bands'].forEach((band, i) => this.setBandInfo(i, { name: band.name }));\n\t\t}\n\n\t\t// Get min/max/nodata from STAC raster:bands\n\t\tif (Array.isArray(this['raster:bands']) && this['raster:bands'].length > 0) {\n\t\t\tthis['raster:bands'].forEach((band, i) => {\n\t\t\t\t// Get name from band\n\t\t\t\tif (band.name) {\n\t\t\t\t\tthis.setBandInfo(i, {\n\t\t\t\t\t\tname: band.name\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Set min/max from statistics\n\t\t\t\tif (Utils.isObject(band.statistics)) {\n\t\t\t\t\tthis.setBandInfo(i, {\n\t\t\t\t\t\tmin: band.statistics.minimum,\n\t\t\t\t\t\tmax: band.statistics.maximum\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// per-band no-data values are not supported, simply read the no-data from the first occurance if not defined yet\n\t\t\t\tif (this.nodata.length === 0 && typeof band.nodata !== 'undefined') {\n\t\t\t\t\tthis.nodata.push(Utils.parseNodata(band.nodata));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Load example tiff image\n\t\tlet tiff;\n\t\tif (this.getBlob()) {\n\t\t\ttiff = await tiffFromBlob(this.getBlob());\n\t\t}\n\t\telse {\n\t\t\ttiff = await tiffFromUrl(this.getUrl());\n\t\t}\n\t\tthis.img = await tiff.getImage();\n\n\t\t// Get data for each band / sample\n\t\tfor (let i = 0; i < this.img.getSamplesPerPixel(); i++) {\n\t\t\tlet data = {};\n\n\t\t\t// Use min/max for data type (as fallback)\n\t\t\ttry {\n\t\t\t\tlet dummy = this.img.getArrayForSample(i);\n\t\t\t\tif (!Number.isFinite(this.bands[i].min)) {\n\t\t\t\t\tdata.min = this.getMinForDataType(dummy);\n\t\t\t\t}\n\t\t\t\tif (!Number.isFinite(this.bands[i].max)) {\n\t\t\t\t\tdata.max = this.getMaxForDataType(dummy);\n\t\t\t\t}\n\t\t\t} catch (error) {}\n\n\t\t\t// Set min/max/name from statistics, if available\n\t\t\tlet band = this.img.getGDALMetadata(i);\n\t\t\tif (Utils.isObject(band)) {\n\t\t\t\tif (GDAL_MIN in band) {\n\t\t\t\t\tdata.min = parseFloat(band[GDAL_MIN]);\n\t\t\t\t}\n\t\t\t\tif (GDAL_MAX in band) {\n\t\t\t\t\tdata.max = parseFloat(band[GDAL_MAX]);\n\t\t\t\t}\n\t\t\t\tif (GDAL_NAME in band) {\n\t\t\t\t\tdata.name = band[GDAL_NAME];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.setBandInfo(i, data);\n\n\t\t\t// get no-data values if needed\n\t\t\tlet nodata = this.img.getGDALNoData();\n\t\t\tif (this.nodata.length === 0 && nodata !== null) {\n\t\t\t\tthis.nodata.push(nodata);\n\t\t\t}\n\t\t}\n\n\t\t// Get projection from GeoTiff\n\t\tlet code;\n\t\tif (!this.projection && this.img.geoKeys) {\n\t\t\tlet { ProjectedCSTypeGeoKey, GeographicTypeGeoKey, ProjLinearUnitsGeoKey, GeogAngularUnitsGeoKey } = this.img.geoKeys;\n\t\t\tif (ProjectedCSTypeGeoKey) {\n\t\t\t\tcode = 'EPSG:' + ProjectedCSTypeGeoKey;\n\t\t\t\tthis.projection = await ProjManager.get(code);\n\t\t\t}\n\t\t\tif (!this.projection && GeographicTypeGeoKey) {\n\t\t\t\tcode = 'EPSG:' + GeographicTypeGeoKey;\n\t\t\t\tthis.projection = await ProjManager.get(code);\n\t\t\t}\n\n\t\t\tif (!this.projection && code) {\n\t\t\t\tconst units = (ProjLinearUnitsGeoKey && unitsFromCode(ProjLinearUnitsGeoKey)) || (GeogAngularUnitsGeoKey && unitsFromCode(GeogAngularUnitsGeoKey));\n\t\t\t\tif (units) {\n\t\t\t\t\tthis.projection = new Projection({ code, units });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Get extent from geotiff\n\t\tif (!stacHasExtent) {\n\t\t\ttry {\n\t\t\t\tlet bbox = this.img.getBoundingBox();\n\t\t\t\tthis.extent = toUserExtent(bbox, this.projection);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.warn(error);\n\t\t\t}\n\t\t}\n\n\t\t// Store color map as RGB\n\t\tif (this.img.fileDirectory.ColorMap) {\n\t\t\tconst map = Array.from(this.img.fileDirectory.ColorMap);\n\t\t\tconst greenOffset = map.length / 3;\n\t\t\tconst blueOffset = map.length / 3 * 2;\n\t\t\tthis.colorMap = [];\n\t\t\tfor (let i = 0; i < greenOffset; i++) {\n\t\t\t\tthis.colorMap.push([\n\t\t\t\t\tMath.trunc(map[i] / 65536 * 256),\n\t\t\t\t\tMath.trunc(map[i + greenOffset] / 65536 * 256),\n\t\t\t\t\tMath.trunc(map[i + blueOffset] / 65536 * 256),\n\t\t\t\t\tthis.nodata.includes(i) ? 0 : 1\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\n\t\t// Get photometric interpretation\n\t\tswitch (this.img.fileDirectory.PhotometricInterpretation) {\n\t\t\tcase _.photometricInterpretations.CMYK:\n\t\t\tcase _.photometricInterpretations.YCbCr:\n\t\t\tcase _.photometricInterpretations.CIELab:\n\t\t\t\tthis.convertToRGB = true;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// RGB and (Black/White)IsZero are handled via user control\n\t\t\t\t// Palette is handled directly by our styling\n\t\t\t\tthis.convertToRGB = false;\n\t\t}\n\t}\n\n\tsetBandInfo(i, data) {\n\t\tif (this.bands[i]) {\n\t\t\tObject.assign(this.bands[i], data);\n\t\t}\n\t\telse {\n\t\t\tthis.bands.push(Object.assign({ id: i + 1 }, data));\n\t\t}\n\t}\n\n\tgetBlob() {\n\t\treturn this.blob;\n\t}\n\n\tgetNoData() {\n\t\treturn this.nodata;\n\t}\n\n\tgetContext() {\n\t\treturn this.stac;\n\t}\n\n\tgetBands() {\n\t\treturn this.bands;\n\t}\n\n\tgetProjection() {\n\t\treturn this.projection;\n\t}\n\n\tgetExtent() {\n\t\treturn this.extent;\n\t}\n\n\tgetColorMap() {\n\t\treturn this.colorMap;\n\t}\n\n\tgetMinForDataType(array) {\n\t\tif (array instanceof Int8Array) {\n\t\t\treturn -128;\n\t\t}\n\t\tif (array instanceof Int16Array) {\n\t\t\treturn -32768;\n\t\t}\n\t\tif (array instanceof Int32Array) {\n\t\t\treturn -2147483648;\n\t\t}\n\t\tif (array instanceof Float32Array) {\n\t\t\treturn 1.2e-38;\n\t\t}\n\t\treturn 0;\n\t}\n\t\n\tgetMaxForDataType(array) {\n\t\tif (array instanceof Int8Array) {\n\t\t\treturn 127;\n\t\t}\n\t\tif (array instanceof Uint8Array) {\n\t\t\treturn 255;\n\t\t}\n\t\tif (array instanceof Uint8ClampedArray) {\n\t\t\treturn 255;\n\t\t}\n\t\tif (array instanceof Int16Array) {\n\t\t\treturn 32767;\n\t\t}\n\t\tif (array instanceof Uint16Array) {\n\t\t\treturn 65535;\n\t\t}\n\t\tif (array instanceof Int32Array) {\n\t\t\treturn 2147483647;\n\t\t}\n\t\tif (array instanceof Uint32Array) {\n\t\t\treturn 4294967295;\n\t\t}\n\t\tif (array instanceof Float32Array) {\n\t\t\treturn 3.4e38;\n\t\t}\n\t\treturn 255;\n\t}\n\n}\n\nexport default GeoTIFF;","import { isIterable } from 'core-js';\nimport Utils from '../utils';\nimport { SupportedFormat } from './format';\n\nclass JSON_ extends SupportedFormat {\n\n\tconstructor(asset, component = \"DataViewer\") {\n\t\tsuper(asset, component);\n\n\t\tthis.isGeoJson = false;\n\t\t// this.isCovJson = false;\n\t}\n\n\tasync parseData(data) {\n\t\tif (typeof data === 'string') {\n\t\t\ttry {\n\t\t\t\tdata = JSON.parse(data);\n\t\t\t}\n\t\t\tcatch (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t}\n\t\t}\n\t\tif (Utils.detectGeoJson(data)) {\n\t\t\tthis.isGeoJson = true;\n\t\t\tthis.component = 'MapViewer';\n\t\t\tthis.icon = 'fa-map';\n\t\t}\n\t\telse if (this.isTable(data)) {\n\t\t\tthis.component = 'TableViewer';\n\t\t\tthis.icon = 'fa-table';\n\t\t}\n\t\treturn data;\n\t}\n\n\tisTable(data) {\n\t\tif (!data || typeof data !== 'object' || Utils.size(data) === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tlet values = Object.values(data);\n\t\tlet keys = Object.keys(values[0]);\n\t\treturn !values.some(row => !row || typeof row !== 'object' || !Utils.equals(Object.keys(row), keys));\n\t}\n}\n\nexport default JSON_;"],"names":["ProcessImpl","BaseProcess","constructor","process","exporter","super","this","execute","node","generateFunction","Exporter","ProcessGraph","registry","connection","Utils","isObject","code","fnCounter","allowEmpty","fillUndefinedParameters","createProcessGraphInstance","pg","processRegistry","getJsonSchemaValidator","copyProcessGraphInstanceProperties","createProcessInstance","isKeyword","keyword","getKeywords","includes","toLowerCase","comment","generateImports","generateConnection","generateAuthentication","generateBuilder","generateMetadata","generateMissingParameter","generateFunctionParams","parameters","map","p","default","name","e","generateCallback","generateResult","makeNull","makeBoolean","val","makeArray","arr","join","makeObject","obj","mapObject","key","makeString","str","JSON","stringify","makeNumber","num","value","Array","isArray","mapObjectValues","hasComment","length","newLine","generateMetadataEntry","resolveArguments","args","onExporter","filter","newArgs","from_node","var","varPrefix","from_parameter","fnName","resolveCallback","callback","process_id","properties","getArgument","getCallbackParameters","replacement","generateArguments","ordered","arguments","async","orderArguments","getProcessGraph","getProcess","orderedArgs","param","optional","definedValueFound","i","pop","getParent","id","prefix","String","match","replace","getTab","addCode","level","tabs","repeat","lines","trim","split","line","push","count","getServerUrl","getUrl","toCode","params","getProcessParameters","getResultNode","validate","reset","executeNodes","getStartNodes","isMath","_isMath","KEYWORDS","JavaScript","generateFormula","parse","parsed","builderName","variable","namespace","description","processId","arg","parameter","paramName","formula","toFormulaString","escaped","resultNode","nodeToFormula","getArrayElementPlaceholder","getArgumentType","getRawArgument","index","findIndex","parentOperator","arrayElement","operator","Formula","reverseOperatorMapping","get","isArrayData","arrayOperatorMapping","convertValue","refNode","getNode","Error","argList","v","strongOps","weakOps","CSV","SupportedFormat","asset","delim","parseData","data","array","parseCSV","row","col","NaN","isNaN","parseFloat","quote","c","cc","nc","Format","Object","assign","context","setContext","getContext","href","canGroup","isBinary","download","filename","tempLink","document","createElement","style","display","setAttribute","makeFileName","type","body","appendChild","click","removeChild","loadData","loaded","fetchData","getData","blob","url","startsWith","response","fetch","auth","apiUrl","URL","requestUrl","origin","error","promise","Promise","resolve","reject","reader","FileReader","onload","event","target","result","onerror","readAsBinaryString","readAsText","component","icon","props","events","UnsupportedFormat","BrowserImage","img","Image","crossOrigin","fetchPriotity","decoding","src","NativeType","TSV","FormatRegistry","createFilesFromSTAC","stac","resource","files","values","assets","roles","createFileFromAsset","forEach","file","createFilesFromBlob","Blob","stac_version","geometry","links","createObjectURL","mime","contentType","JSON_","GeoTIFF","extension","console","log","GDAL_MIN","GDAL_MAX","GDAL_NAME","removableLayers","bands","nodata","projection","extent","convertToRGB","parseMetadata","tiff","stacHasExtent","ProjManager","addFromStac","parseNodata","band","setBandInfo","statistics","min","minimum","max","maximum","getBlob","tiffFromBlob","tiffFromUrl","getImage","getSamplesPerPixel","dummy","getArrayForSample","Number","isFinite","getMinForDataType","getMaxForDataType","getGDALMetadata","getGDALNoData","geoKeys","ProjectedCSTypeGeoKey","GeographicTypeGeoKey","ProjLinearUnitsGeoKey","GeogAngularUnitsGeoKey","units","unitsFromCode","Projection","bbox","getBoundingBox","toUserExtent","warn","fileDirectory","ColorMap","from","greenOffset","blueOffset","colorMap","Math","trunc","PhotometricInterpretation","_","CMYK","YCbCr","CIELab","getNoData","getBands","getProjection","getExtent","getColorMap","Int8Array","Int16Array","Int32Array","Float32Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","isGeoJson","detectGeoJson","isTable","size","keys","some","equals"],"sourceRoot":""}