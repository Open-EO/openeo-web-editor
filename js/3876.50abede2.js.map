{"version":3,"file":"js/3876.50abede2.js","mappings":"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","sources":["webpack://@openeo/web-editor/./node_modules/rbush/rbush.min.js","webpack://@openeo/web-editor/./node_modules/ol/vec/mat4.js","webpack://@openeo/web-editor/./node_modules/ol/webgl.js","webpack://@openeo/web-editor/./node_modules/ol/webgl/Buffer.js","webpack://@openeo/web-editor/./node_modules/ol/webgl/ContextEventType.js","webpack://@openeo/web-editor/./node_modules/ol/webgl/PostProcessingPass.js","webpack://@openeo/web-editor/./node_modules/ol/webgl/Helper.js","webpack://@openeo/web-editor/./node_modules/ol/webgl/PaletteTexture.js","webpack://@openeo/web-editor/./node_modules/ol/webgl/RenderTarget.js","webpack://@openeo/web-editor/./node_modules/ol/webgl/ShaderBuilder.js","webpack://@openeo/web-editor/./node_modules/ol/webgl/BaseTileRepresentation.js","webpack://@openeo/web-editor/./node_modules/ol/webgl/TileTexture.js","webpack://@openeo/web-editor/./node_modules/ol/worker/webgl.js"],"sourcesContent":["!function(t,i){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=i():\"function\"==typeof define&&define.amd?define(i):(t=t||self).RBush=i()}(this,function(){\"use strict\";function t(t,r,e,a,h){!function t(n,r,e,a,h){for(;a>e;){if(a-e>600){var o=a-e+1,s=r-e+1,l=Math.log(o),f=.5*Math.exp(2*l/3),u=.5*Math.sqrt(l*f*(o-f)/o)*(s-o/2<0?-1:1),m=Math.max(e,Math.floor(r-s*f/o+u)),c=Math.min(a,Math.floor(r+(o-s)*f/o+u));t(n,r,m,c,h)}var p=n[r],d=e,x=a;for(i(n,e,r),h(n[a],p)>0&&i(n,e,a);d<x;){for(i(n,d,x),d++,x--;h(n[d],p)<0;)d++;for(;h(n[x],p)>0;)x--}0===h(n[e],p)?i(n,e,x):i(n,++x,a),x<=r&&(e=x+1),r<=x&&(a=x-1)}}(t,r,e||0,a||t.length-1,h||n)}function i(t,i,n){var r=t[i];t[i]=t[n],t[n]=r}function n(t,i){return t<i?-1:t>i?1:0}var r=function(t){void 0===t&&(t=9),this._maxEntries=Math.max(4,t),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear()};function e(t,i,n){if(!n)return i.indexOf(t);for(var r=0;r<i.length;r++)if(n(t,i[r]))return r;return-1}function a(t,i){h(t,0,t.children.length,i,t)}function h(t,i,n,r,e){e||(e=p(null)),e.minX=1/0,e.minY=1/0,e.maxX=-1/0,e.maxY=-1/0;for(var a=i;a<n;a++){var h=t.children[a];o(e,t.leaf?r(h):h)}return e}function o(t,i){return t.minX=Math.min(t.minX,i.minX),t.minY=Math.min(t.minY,i.minY),t.maxX=Math.max(t.maxX,i.maxX),t.maxY=Math.max(t.maxY,i.maxY),t}function s(t,i){return t.minX-i.minX}function l(t,i){return t.minY-i.minY}function f(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}function u(t){return t.maxX-t.minX+(t.maxY-t.minY)}function m(t,i){return t.minX<=i.minX&&t.minY<=i.minY&&i.maxX<=t.maxX&&i.maxY<=t.maxY}function c(t,i){return i.minX<=t.maxX&&i.minY<=t.maxY&&i.maxX>=t.minX&&i.maxY>=t.minY}function p(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function d(i,n,r,e,a){for(var h=[n,r];h.length;)if(!((r=h.pop())-(n=h.pop())<=e)){var o=n+Math.ceil((r-n)/e/2)*e;t(i,o,n,r,a),h.push(n,o,o,r)}}return r.prototype.all=function(){return this._all(this.data,[])},r.prototype.search=function(t){var i=this.data,n=[];if(!c(t,i))return n;for(var r=this.toBBox,e=[];i;){for(var a=0;a<i.children.length;a++){var h=i.children[a],o=i.leaf?r(h):h;c(t,o)&&(i.leaf?n.push(h):m(t,o)?this._all(h,n):e.push(h))}i=e.pop()}return n},r.prototype.collides=function(t){var i=this.data;if(!c(t,i))return!1;for(var n=[];i;){for(var r=0;r<i.children.length;r++){var e=i.children[r],a=i.leaf?this.toBBox(e):e;if(c(t,a)){if(i.leaf||m(t,a))return!0;n.push(e)}}i=n.pop()}return!1},r.prototype.load=function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var i=0;i<t.length;i++)this.insert(t[i]);return this}var n=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else{if(this.data.height<n.height){var r=this.data;this.data=n,n=r}this._insert(n,this.data.height-n.height-1,!0)}else this.data=n;return this},r.prototype.insert=function(t){return t&&this._insert(t,this.data.height-1),this},r.prototype.clear=function(){return this.data=p([]),this},r.prototype.remove=function(t,i){if(!t)return this;for(var n,r,a,h=this.data,o=this.toBBox(t),s=[],l=[];h||s.length;){if(h||(h=s.pop(),r=s[s.length-1],n=l.pop(),a=!0),h.leaf){var f=e(t,h.children,i);if(-1!==f)return h.children.splice(f,1),s.push(h),this._condense(s),this}a||h.leaf||!m(h,o)?r?(n++,h=r.children[n],a=!1):h=null:(s.push(h),l.push(n),n=0,r=h,h=h.children[0])}return this},r.prototype.toBBox=function(t){return t},r.prototype.compareMinX=function(t,i){return t.minX-i.minX},r.prototype.compareMinY=function(t,i){return t.minY-i.minY},r.prototype.toJSON=function(){return this.data},r.prototype.fromJSON=function(t){return this.data=t,this},r.prototype._all=function(t,i){for(var n=[];t;)t.leaf?i.push.apply(i,t.children):n.push.apply(n,t.children),t=n.pop();return i},r.prototype._build=function(t,i,n,r){var e,h=n-i+1,o=this._maxEntries;if(h<=o)return a(e=p(t.slice(i,n+1)),this.toBBox),e;r||(r=Math.ceil(Math.log(h)/Math.log(o)),o=Math.ceil(h/Math.pow(o,r-1))),(e=p([])).leaf=!1,e.height=r;var s=Math.ceil(h/o),l=s*Math.ceil(Math.sqrt(o));d(t,i,n,l,this.compareMinX);for(var f=i;f<=n;f+=l){var u=Math.min(f+l-1,n);d(t,f,u,s,this.compareMinY);for(var m=f;m<=u;m+=s){var c=Math.min(m+s-1,u);e.children.push(this._build(t,m,c,r-1))}}return a(e,this.toBBox),e},r.prototype._chooseSubtree=function(t,i,n,r){for(;r.push(i),!i.leaf&&r.length-1!==n;){for(var e=1/0,a=1/0,h=void 0,o=0;o<i.children.length;o++){var s=i.children[o],l=f(s),u=(m=t,c=s,(Math.max(c.maxX,m.maxX)-Math.min(c.minX,m.minX))*(Math.max(c.maxY,m.maxY)-Math.min(c.minY,m.minY))-l);u<a?(a=u,e=l<e?l:e,h=s):u===a&&l<e&&(e=l,h=s)}i=h||i.children[0]}var m,c;return i},r.prototype._insert=function(t,i,n){var r=n?t:this.toBBox(t),e=[],a=this._chooseSubtree(r,this.data,i,e);for(a.children.push(t),o(a,r);i>=0&&e[i].children.length>this._maxEntries;)this._split(e,i),i--;this._adjustParentBBoxes(r,e,i)},r.prototype._split=function(t,i){var n=t[i],r=n.children.length,e=this._minEntries;this._chooseSplitAxis(n,e,r);var h=this._chooseSplitIndex(n,e,r),o=p(n.children.splice(h,n.children.length-h));o.height=n.height,o.leaf=n.leaf,a(n,this.toBBox),a(o,this.toBBox),i?t[i-1].children.push(o):this._splitRoot(n,o)},r.prototype._splitRoot=function(t,i){this.data=p([t,i]),this.data.height=t.height+1,this.data.leaf=!1,a(this.data,this.toBBox)},r.prototype._chooseSplitIndex=function(t,i,n){for(var r,e,a,o,s,l,u,m=1/0,c=1/0,p=i;p<=n-i;p++){var d=h(t,0,p,this.toBBox),x=h(t,p,n,this.toBBox),v=(e=d,a=x,o=void 0,s=void 0,l=void 0,u=void 0,o=Math.max(e.minX,a.minX),s=Math.max(e.minY,a.minY),l=Math.min(e.maxX,a.maxX),u=Math.min(e.maxY,a.maxY),Math.max(0,l-o)*Math.max(0,u-s)),M=f(d)+f(x);v<m?(m=v,r=p,c=M<c?M:c):v===m&&M<c&&(c=M,r=p)}return r||n-i},r.prototype._chooseSplitAxis=function(t,i,n){var r=t.leaf?this.compareMinX:s,e=t.leaf?this.compareMinY:l;this._allDistMargin(t,i,n,r)<this._allDistMargin(t,i,n,e)&&t.children.sort(r)},r.prototype._allDistMargin=function(t,i,n,r){t.children.sort(r);for(var e=this.toBBox,a=h(t,0,i,e),s=h(t,n-i,n,e),l=u(a)+u(s),f=i;f<n-i;f++){var m=t.children[f];o(a,t.leaf?e(m):m),l+=u(a)}for(var c=n-i-1;c>=i;c--){var p=t.children[c];o(s,t.leaf?e(p):p),l+=u(s)}return l},r.prototype._adjustParentBBoxes=function(t,i,n){for(var r=n;r>=0;r--)o(i[r],t)},r.prototype._condense=function(t){for(var i=t.length-1,n=void 0;i>=0;i--)0===t[i].children.length?i>0?(n=t[i-1].children).splice(n.indexOf(t[i]),1):this.clear():a(t[i],this.toBBox)},r});\n","/**\n * @module ol/vec/mat4\n */\n\n/**\n * @return {Array<number>} \"4x4 matrix representing a 3D identity transform.\"\n */\nexport function create() {\n  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n}\n\n/**\n * @param {Array<number>} mat4 Flattened 4x4 matrix receiving the result.\n * @param {import(\"../transform.js\").Transform} transform Transformation matrix.\n * @return {Array<number>} \"2D transformation matrix as flattened 4x4 matrix.\"\n */\nexport function fromTransform(mat4, transform) {\n  mat4[0] = transform[0];\n  mat4[1] = transform[1];\n  mat4[4] = transform[2];\n  mat4[5] = transform[3];\n  mat4[12] = transform[4];\n  mat4[13] = transform[5];\n  return mat4;\n}\n","/**\n * @module ol/webgl\n */\n\nimport {SAFARI_BUG_237906} from './has.js';\n\n/**\n * Constants taken from goog.webgl\n */\n\n/**\n * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing vertices data, such as\n * position, color, texture coordinate, etc. These vertices are then referenced by an index buffer\n * to be drawn on screen (see {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER}).\n * @const\n * @type {number}\n * @api\n */\nexport const ARRAY_BUFFER = 0x8892;\n\n/**\n * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing indices data.\n * Index buffers are essentially lists of references to vertices defined in a vertex buffer\n * (see {@link module:ol/webgl.ARRAY_BUFFER}), and define the primitives (triangles) to be drawn.\n * @const\n * @type {number}\n * @api\n */\nexport const ELEMENT_ARRAY_BUFFER = 0x8893;\n\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport const STREAM_DRAW = 0x88e0;\n\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport const STATIC_DRAW = 0x88e4;\n\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport const DYNAMIC_DRAW = 0x88e8;\n\n/**\n * @const\n * @type {number}\n */\nexport const UNSIGNED_BYTE = 0x1401;\n\n/**\n * @const\n * @type {number}\n */\nexport const UNSIGNED_SHORT = 0x1403;\n\n/**\n * @const\n * @type {number}\n */\nexport const UNSIGNED_INT = 0x1405;\n\n/**\n * @const\n * @type {number}\n */\nexport const FLOAT = 0x1406;\n\n/** end of goog.webgl constants\n */\n\n/**\n * @const\n * @type {Array<string>}\n */\nconst CONTEXT_IDS = ['experimental-webgl', 'webgl', 'webkit-3d', 'moz-webgl'];\n\n/**\n * @param {HTMLCanvasElement} canvas Canvas.\n * @param {Object} [attributes] Attributes.\n * @return {WebGLRenderingContext|null} WebGL rendering context.\n */\nexport function getContext(canvas, attributes) {\n  attributes = Object.assign(\n    {\n      preserveDrawingBuffer: true,\n      antialias: SAFARI_BUG_237906 ? false : true, // https://bugs.webkit.org/show_bug.cgi?id=237906\n    },\n    attributes,\n  );\n  const ii = CONTEXT_IDS.length;\n  for (let i = 0; i < ii; ++i) {\n    try {\n      const context = canvas.getContext(CONTEXT_IDS[i], attributes);\n      if (context) {\n        return /** @type {!WebGLRenderingContext} */ (context);\n      }\n    } catch (e) {\n      // pass\n    }\n  }\n  return null;\n}\n\n/**\n * @type {Array<string>|null}\n */\nlet supportedExtensions = null;\n\n/**\n * @return {Array<string>|null} List of supported WebGL extensions.\n */\nexport function getSupportedExtensions() {\n  if (!supportedExtensions) {\n    const canvas = document.createElement('canvas');\n    const gl = getContext(canvas);\n    if (gl) {\n      supportedExtensions = gl.getSupportedExtensions();\n    }\n  }\n  return supportedExtensions;\n}\n","/**\n * @module ol/webgl/Buffer\n */\nimport {\n  ARRAY_BUFFER,\n  DYNAMIC_DRAW,\n  ELEMENT_ARRAY_BUFFER,\n  STATIC_DRAW,\n  STREAM_DRAW,\n} from '../webgl.js';\nimport {assert} from '../asserts.js';\n\n/**\n * Used to describe the intended usage for the data: `STATIC_DRAW`, `STREAM_DRAW`\n * or `DYNAMIC_DRAW`.\n * @enum {number}\n */\nexport const BufferUsage = {\n  STATIC_DRAW: STATIC_DRAW,\n  STREAM_DRAW: STREAM_DRAW,\n  DYNAMIC_DRAW: DYNAMIC_DRAW,\n};\n\n/**\n * @classdesc\n * Object used to store an array of data as well as usage information for that data.\n * Stores typed arrays internally, either Float32Array or Uint16/32Array depending on\n * the buffer type (ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER) and available extensions.\n *\n * To populate the array, you can either use:\n * * A size using `#ofSize(buffer)`\n * * An `ArrayBuffer` object using `#fromArrayBuffer(buffer)`\n * * A plain array using `#fromArray(array)`\n *\n * Note:\n * See the documentation of [WebGLRenderingContext.bufferData](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)\n * for more info on buffer usage.\n */\nclass WebGLArrayBuffer {\n  /**\n   * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n   * @param {number} [usage] Intended usage, either `STATIC_DRAW`, `STREAM_DRAW` or `DYNAMIC_DRAW`.\n   * Default is `DYNAMIC_DRAW`.\n   */\n  constructor(type, usage) {\n    /**\n     * @private\n     * @type {Float32Array|Uint32Array|null}\n     */\n    this.array_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.type_ = type;\n\n    assert(\n      type === ARRAY_BUFFER || type === ELEMENT_ARRAY_BUFFER,\n      'A `WebGLArrayBuffer` must either be of type `ELEMENT_ARRAY_BUFFER` or `ARRAY_BUFFER`',\n    );\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.usage_ = usage !== undefined ? usage : BufferUsage.STATIC_DRAW;\n  }\n\n  /**\n   * Populates the buffer with an array of the given size (all values will be zeroes).\n   * @param {number} size Array size\n   * @return {WebGLArrayBuffer} This\n   */\n  ofSize(size) {\n    this.array_ = new (getArrayClassForType(this.type_))(size);\n    return this;\n  }\n\n  /**\n   * Populates the buffer with an array of the given size.\n   * @param {Array<number>} array Numerical array\n   * @return {WebGLArrayBuffer} This\n   */\n  fromArray(array) {\n    this.array_ = getArrayClassForType(this.type_).from(array);\n    return this;\n  }\n\n  /**\n   * Populates the buffer with a raw binary array buffer.\n   * @param {ArrayBuffer} buffer Raw binary buffer to populate the array with. Note that this buffer must have been\n   * initialized for the same typed array class.\n   * @return {WebGLArrayBuffer} This\n   */\n  fromArrayBuffer(buffer) {\n    this.array_ = new (getArrayClassForType(this.type_))(buffer);\n    return this;\n  }\n\n  /**\n   * @return {number} Buffer type.\n   */\n  getType() {\n    return this.type_;\n  }\n\n  /**\n   * Will return null if the buffer was not initialized\n   * @return {Float32Array|Uint32Array|null} Array.\n   */\n  getArray() {\n    return this.array_;\n  }\n\n  /**\n   * @return {number} Usage.\n   */\n  getUsage() {\n    return this.usage_;\n  }\n\n  /**\n   * Will return 0 if the buffer is not initialized\n   * @return {number} Array size\n   */\n  getSize() {\n    return this.array_ ? this.array_.length : 0;\n  }\n}\n\n/**\n * Returns a typed array constructor based on the given buffer type\n * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n * @return {Float32ArrayConstructor|Uint32ArrayConstructor} The typed array class to use for this buffer.\n */\nexport function getArrayClassForType(type) {\n  switch (type) {\n    case ARRAY_BUFFER:\n      return Float32Array;\n    case ELEMENT_ARRAY_BUFFER:\n      return Uint32Array;\n    default:\n      return Float32Array;\n  }\n}\n\nexport default WebGLArrayBuffer;\n","/**\n * @module ol/webgl/ContextEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  LOST: 'webglcontextlost',\n  RESTORED: 'webglcontextrestored',\n};\n","/**\n * @module ol/webgl/PostProcessingPass\n */\n\nimport {getUid} from '../util.js';\n\nconst DEFAULT_VERTEX_SHADER = `\n  precision mediump float;\n  \n  attribute vec2 a_position;\n  varying vec2 v_texCoord;\n  varying vec2 v_screenCoord;\n  \n  uniform vec2 u_screenSize;\n   \n  void main() {\n    v_texCoord = a_position * 0.5 + 0.5;\n    v_screenCoord = v_texCoord * u_screenSize;\n    gl_Position = vec4(a_position, 0.0, 1.0);\n  }\n`;\n\nconst DEFAULT_FRAGMENT_SHADER = `\n  precision mediump float;\n   \n  uniform sampler2D u_image;\n  uniform float u_opacity;\n   \n  varying vec2 v_texCoord;\n   \n  void main() {\n    gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n  }\n`;\n\n/**\n * @typedef {Object} Options\n * @property {WebGLRenderingContext} webGlContext WebGL context; mandatory.\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"./Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {import(\"./Helper\").UniformValue} value Value\n * @property {WebGLUniformLocation} location Location\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n\n/**\n * @classdesc\n * This class is used to define Post Processing passes with custom shaders and uniforms.\n * This is used internally by {@link module:ol/webgl/Helper~WebGLHelper}.\n *\n * Please note that the final output on the DOM canvas is expected to have premultiplied alpha, which means that\n * a pixel which is 100% red with an opacity of 50% must have a color of (r=0.5, g=0, b=0, a=0.5).\n * Failing to provide pixel colors with premultiplied alpha will result in render anomalies.\n *\n * The default post-processing pass does *not* multiply color values with alpha value, it expects color values to be\n * premultiplied.\n *\n * Default shaders are shown hereafter:\n *\n * * Vertex shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   attribute vec2 a_position;\n *   varying vec2 v_texCoord;\n *   varying vec2 v_screenCoord;\n *\n *   uniform vec2 u_screenSize;\n *\n *   void main() {\n *     v_texCoord = a_position * 0.5 + 0.5;\n *     v_screenCoord = v_texCoord * u_screenSize;\n *     gl_Position = vec4(a_position, 0.0, 1.0);\n *   }\n *   ```\n *\n * * Fragment shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   uniform sampler2D u_image;\n *   uniform float u_opacity;\n *\n *   varying vec2 v_texCoord;\n *\n *   void main() {\n *     gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n *   }\n *   ```\n */\nclass WebGLPostProcessingPass {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    this.gl_ = options.webGlContext;\n    const gl = this.gl_;\n\n    this.scaleRatio_ = options.scaleRatio || 1;\n\n    this.renderTargetTexture_ = gl.createTexture();\n    this.renderTargetTextureSize_ = null;\n\n    this.frameBuffer_ = gl.createFramebuffer();\n    this.depthBuffer_ = gl.createRenderbuffer();\n\n    // compile the program for the frame buffer\n    // TODO: make compilation errors show up\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(\n      vertexShader,\n      options.vertexShader || DEFAULT_VERTEX_SHADER,\n    );\n    gl.compileShader(vertexShader);\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(\n      fragmentShader,\n      options.fragmentShader || DEFAULT_FRAGMENT_SHADER,\n    );\n    gl.compileShader(fragmentShader);\n    this.renderTargetProgram_ = gl.createProgram();\n    gl.attachShader(this.renderTargetProgram_, vertexShader);\n    gl.attachShader(this.renderTargetProgram_, fragmentShader);\n    gl.linkProgram(this.renderTargetProgram_);\n\n    // bind the vertices buffer for the frame buffer\n    this.renderTargetVerticesBuffer_ = gl.createBuffer();\n    const verticesArray = [-1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1];\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n    gl.bufferData(\n      gl.ARRAY_BUFFER,\n      new Float32Array(verticesArray),\n      gl.STATIC_DRAW,\n    );\n\n    this.renderTargetAttribLocation_ = gl.getAttribLocation(\n      this.renderTargetProgram_,\n      'a_position',\n    );\n    this.renderTargetUniformLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_screenSize',\n    );\n    this.renderTargetOpacityLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_opacity',\n    );\n    this.renderTargetTextureLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_image',\n    );\n\n    /**\n     * Holds info about custom uniforms used in the post processing pass\n     * @type {Array<UniformInternalDescription>}\n     * @private\n     */\n    this.uniforms_ = [];\n    options.uniforms &&\n      Object.keys(options.uniforms).forEach((name) => {\n        this.uniforms_.push({\n          value: options.uniforms[name],\n          location: gl.getUniformLocation(this.renderTargetProgram_, name),\n        });\n      });\n  }\n\n  /**\n   * Get the WebGL rendering context\n   * @return {WebGLRenderingContext} The rendering context.\n   */\n  getGL() {\n    return this.gl_;\n  }\n\n  /**\n   * Initialize the render target texture of the post process, make sure it is at the\n   * right size and bind it as a render target for the next draw calls.\n   * The last step to be initialized will be the one where the primitives are rendered.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   */\n  init(frameState) {\n    const gl = this.getGL();\n    const textureSize = [\n      gl.drawingBufferWidth * this.scaleRatio_,\n      gl.drawingBufferHeight * this.scaleRatio_,\n    ];\n\n    // rendering goes to my buffer\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.getFrameBuffer());\n    gl.bindRenderbuffer(gl.RENDERBUFFER, this.getDepthBuffer());\n    gl.viewport(0, 0, textureSize[0], textureSize[1]);\n\n    // if size has changed: adjust canvas & render target texture\n    if (\n      !this.renderTargetTextureSize_ ||\n      this.renderTargetTextureSize_[0] !== textureSize[0] ||\n      this.renderTargetTextureSize_[1] !== textureSize[1]\n    ) {\n      this.renderTargetTextureSize_ = textureSize;\n\n      // create a new texture\n      const level = 0;\n      const internalFormat = gl.RGBA;\n      const border = 0;\n      const format = gl.RGBA;\n      const type = gl.UNSIGNED_BYTE;\n      const data = null;\n      gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        level,\n        internalFormat,\n        textureSize[0],\n        textureSize[1],\n        border,\n        format,\n        type,\n        data,\n      );\n\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n      // bind the texture to the framebuffer\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        this.renderTargetTexture_,\n        0,\n      );\n\n      gl.renderbufferStorage(\n        gl.RENDERBUFFER,\n        gl.DEPTH_COMPONENT16,\n        textureSize[0],\n        textureSize[1],\n      );\n      gl.framebufferRenderbuffer(\n        gl.FRAMEBUFFER,\n        gl.DEPTH_ATTACHMENT,\n        gl.RENDERBUFFER,\n        this.depthBuffer_,\n      );\n    }\n  }\n\n  /**\n   * Render to the next postprocessing pass (or to the canvas if final pass).\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {WebGLPostProcessingPass} [nextPass] Next pass, optional\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [preCompose] Called before composing.\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [postCompose] Called before composing.\n   */\n  apply(frameState, nextPass, preCompose, postCompose) {\n    const gl = this.getGL();\n    const size = frameState.size;\n\n    gl.bindFramebuffer(\n      gl.FRAMEBUFFER,\n      nextPass ? nextPass.getFrameBuffer() : null,\n    );\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n\n    if (!nextPass) {\n      // clear the canvas if we are the first to render to it\n      // and preserveDrawingBuffer is true\n      const canvasId = getUid(gl.canvas);\n      if (!frameState.renderTargets[canvasId]) {\n        const attributes = gl.getContextAttributes();\n        if (attributes && attributes.preserveDrawingBuffer) {\n          gl.clearColor(0.0, 0.0, 0.0, 0.0);\n          gl.clearDepth(1.0);\n          gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n\n        frameState.renderTargets[canvasId] = true;\n      }\n    }\n\n    gl.disable(gl.DEPTH_TEST);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n\n    gl.useProgram(this.renderTargetProgram_);\n    gl.enableVertexAttribArray(this.renderTargetAttribLocation_);\n    gl.vertexAttribPointer(\n      this.renderTargetAttribLocation_,\n      2,\n      gl.FLOAT,\n      false,\n      0,\n      0,\n    );\n    gl.uniform2f(this.renderTargetUniformLocation_, size[0], size[1]);\n    gl.uniform1i(this.renderTargetTextureLocation_, 0);\n\n    const opacity = frameState.layerStatesArray[frameState.layerIndex].opacity;\n    gl.uniform1f(this.renderTargetOpacityLocation_, opacity);\n\n    this.applyUniforms(frameState);\n\n    if (preCompose) {\n      preCompose(gl, frameState);\n    }\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    if (postCompose) {\n      postCompose(gl, frameState);\n    }\n  }\n\n  /**\n   * @return {WebGLFramebuffer} Frame buffer\n   */\n  getFrameBuffer() {\n    return this.frameBuffer_;\n  }\n\n  /**\n   * @return {WebGLRenderbuffer} Depth buffer\n   */\n  getDepthBuffer() {\n    return this.depthBuffer_;\n  }\n\n  /**\n   * Sets the custom uniforms based on what was given in the constructor.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  applyUniforms(frameState) {\n    const gl = this.getGL();\n\n    let value;\n    let textureSlot = 1;\n    this.uniforms_.forEach(function (uniform) {\n      value =\n        typeof uniform.value === 'function'\n          ? uniform.value(frameState)\n          : uniform.value;\n\n      // apply value based on type\n      if (value instanceof HTMLCanvasElement || value instanceof ImageData) {\n        // create a texture & put data\n        if (!uniform.texture) {\n          uniform.texture = gl.createTexture();\n        }\n        gl.activeTexture(gl[`TEXTURE${textureSlot}`]);\n        gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        if (value instanceof ImageData) {\n          gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            gl.RGBA,\n            value.width,\n            value.height,\n            0,\n            gl.UNSIGNED_BYTE,\n            new Uint8Array(value.data),\n          );\n        } else {\n          gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            value,\n          );\n        }\n\n        // fill texture slots\n        gl.uniform1i(uniform.location, textureSlot++);\n      } else if (Array.isArray(value)) {\n        switch (value.length) {\n          case 2:\n            gl.uniform2f(uniform.location, value[0], value[1]);\n            return;\n          case 3:\n            gl.uniform3f(uniform.location, value[0], value[1], value[2]);\n            return;\n          case 4:\n            gl.uniform4f(\n              uniform.location,\n              value[0],\n              value[1],\n              value[2],\n              value[3],\n            );\n            return;\n          default:\n            return;\n        }\n      } else if (typeof value === 'number') {\n        gl.uniform1f(uniform.location, value);\n      }\n    });\n  }\n}\n\nexport default WebGLPostProcessingPass;\n","/**\n * @module ol/webgl/Helper\n */\nimport ContextEventType from '../webgl/ContextEventType.js';\nimport Disposable from '../Disposable.js';\nimport WebGLPostProcessingPass from './PostProcessingPass.js';\nimport {\n  FLOAT,\n  UNSIGNED_BYTE,\n  UNSIGNED_INT,\n  UNSIGNED_SHORT,\n  getContext,\n} from '../webgl.js';\nimport {clear} from '../obj.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../transform.js';\nimport {create, fromTransform} from '../vec/mat4.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {Object} BufferCacheEntry\n * @property {import(\"./Buffer.js\").default} buffer Buffer.\n * @property {WebGLBuffer} webGlBuffer WebGlBuffer.\n */\n\n/**\n * Shader types, either `FRAGMENT_SHADER` or `VERTEX_SHADER`.\n * @enum {number}\n */\nexport const ShaderType = {\n  FRAGMENT_SHADER: 0x8b30,\n  VERTEX_SHADER: 0x8b31,\n};\n\n/**\n * Names of uniforms made available to all shaders.\n * Please note: changing these *will* break custom shaders!\n * @enum {string}\n */\nexport const DefaultUniform = {\n  PROJECTION_MATRIX: 'u_projectionMatrix',\n  SCREEN_TO_WORLD_MATRIX: 'u_screenToWorldMatrix',\n  TIME: 'u_time',\n  ZOOM: 'u_zoom',\n  RESOLUTION: 'u_resolution',\n  ROTATION: 'u_rotation',\n  VIEWPORT_SIZE_PX: 'u_viewportSizePx',\n  PIXEL_RATIO: 'u_pixelRatio',\n  HIT_DETECTION: 'u_hitDetection',\n};\n\n/**\n * Attribute types, either `UNSIGNED_BYTE`, `UNSIGNED_SHORT`, `UNSIGNED_INT` or `FLOAT`\n * Note: an attribute stored in a `Float32Array` should be of type `FLOAT`.\n * @enum {number}\n */\nexport const AttributeType = {\n  UNSIGNED_BYTE: UNSIGNED_BYTE,\n  UNSIGNED_SHORT: UNSIGNED_SHORT,\n  UNSIGNED_INT: UNSIGNED_INT,\n  FLOAT: FLOAT,\n};\n\n/**\n * Description of an attribute in a buffer\n * @typedef {Object} AttributeDescription\n * @property {string} name Attribute name to use in shaders\n * @property {number} size Number of components per attributes\n * @property {AttributeType} [type] Attribute type, i.e. number of bytes used to store the value. This is\n * determined by the class of typed array which the buffer uses (eg. `Float32Array` for a `FLOAT` attribute).\n * Default is `FLOAT`.\n */\n\n/**\n * @typedef {number|Array<number>|HTMLCanvasElement|HTMLImageElement|ImageData|WebGLTexture|import(\"../transform\").Transform} UniformLiteralValue\n */\n\n/**\n * Uniform value can be a number, array of numbers (2 to 4), canvas element or a callback returning\n * one of the previous types.\n * @typedef {UniformLiteralValue|function(import(\"../Map.js\").FrameState):UniformLiteralValue} UniformValue\n */\n\n/**\n * @typedef {Object} PostProcessesOptions\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas which will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} Options\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions; property names must match the uniform\n * names in the provided or default shaders.\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\n * @property {string} [canvasCacheKey] The cache key for the canvas.\n */\n\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {string} name Name\n * @property {UniformValue} [value] Value\n * @property {UniformValue} [prevValue] The previous value.\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n\n/**\n * @typedef {Object} CanvasCacheItem\n * @property {WebGLRenderingContext} context The context of this canvas.\n * @property {number} users The count of users of this canvas.\n */\n\n/**\n * @type {Object<string,CanvasCacheItem>}\n */\nconst canvasCache = {};\n\n/**\n * @param {string} key The cache key for the canvas.\n * @return {string} The shared cache key.\n */\nfunction getSharedCanvasCacheKey(key) {\n  return 'shared/' + key;\n}\n\nlet uniqueCanvasCacheKeyCount = 0;\n\n/**\n * @return {string} The unique cache key.\n */\nfunction getUniqueCanvasCacheKey() {\n  const key = 'unique/' + uniqueCanvasCacheKeyCount;\n  uniqueCanvasCacheKeyCount += 1;\n  return key;\n}\n\n/**\n * @param {string} key The cache key for the canvas.\n * @return {WebGLRenderingContext} The canvas.\n */\nfunction getOrCreateContext(key) {\n  let cacheItem = canvasCache[key];\n  if (!cacheItem) {\n    const canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    canvas.style.position = 'absolute';\n    canvas.style.left = '0';\n    const context = getContext(canvas);\n    cacheItem = {users: 0, context};\n    canvasCache[key] = cacheItem;\n  }\n\n  cacheItem.users += 1;\n  return cacheItem.context;\n}\n\n/**\n * @param {string} key The cache key for the canvas.\n */\nfunction releaseCanvas(key) {\n  const cacheItem = canvasCache[key];\n  if (!cacheItem) {\n    return;\n  }\n\n  cacheItem.users -= 1;\n  if (cacheItem.users > 0) {\n    return;\n  }\n\n  const gl = cacheItem.context;\n  const extension = gl.getExtension('WEBGL_lose_context');\n  if (extension) {\n    extension.loseContext();\n  }\n  const canvas = gl.canvas;\n  canvas.width = 1;\n  canvas.height = 1;\n\n  delete canvasCache[key];\n}\n\n/**\n * @classdesc\n * This class is intended to provide low-level functions related to WebGL rendering, so that accessing\n * directly the WebGL API should not be required anymore.\n *\n * Several operations are handled by the `WebGLHelper` class:\n *\n * ### Define custom shaders and uniforms\n *\n *   *Shaders* are low-level programs executed on the GPU and written in GLSL. There are two types of shaders:\n *\n *   Vertex shaders are used to manipulate the position and attribute of *vertices* of rendered primitives (ie. corners of a square).\n *   Outputs are:\n *\n *   * `gl_Position`: position of the vertex in screen space\n *\n *   * Varyings usually prefixed with `v_` are passed on to the fragment shader\n *\n *   Fragment shaders are used to control the actual color of the pixels drawn on screen. Their only output is `gl_FragColor`.\n *\n *   Both shaders can take *uniforms* or *attributes* as input. Attributes are explained later. Uniforms are common, read-only values that\n *   can be changed at every frame and can be of type float, arrays of float or images.\n *\n *   Shaders must be compiled and assembled into a program like so:\n *   ```js\n *   // here we simply create two shaders and assemble them in a program which is then used\n *   // for subsequent rendering calls; note how a frameState is required to set up a program,\n *   // as several default uniforms are computed from it (projection matrix, zoom level, etc.)\n *   const vertexShader = new WebGLVertex(VERTEX_SHADER);\n *   const fragmentShader = new WebGLFragment(FRAGMENT_SHADER);\n *   const program = this.context.getProgram(fragmentShader, vertexShader);\n *   helper.useProgram(this.program, frameState);\n *   ```\n *\n *   Uniforms are defined using the `uniforms` option and can either be explicit values or callbacks taking the frame state as argument.\n *   You can also change their value along the way like so:\n *   ```js\n *   helper.setUniformFloatValue('u_value', valueAsNumber);\n *   ```\n *\n * ### Defining post processing passes\n *\n *   *Post processing* describes the act of rendering primitives to a texture, and then rendering this texture to the final canvas\n *   while applying special effects in screen space.\n *   Typical uses are: blurring, color manipulation, depth of field, filtering...\n *\n *   The `WebGLHelper` class offers the possibility to define post processes at creation time using the `postProcesses` option.\n *   A post process step accepts the following options:\n *\n *   * `fragmentShader` and `vertexShader`: text literals in GLSL language that will be compiled and used in the post processing step.\n *   * `uniforms`: uniforms can be defined for the post processing steps just like for the main render.\n *   * `scaleRatio`: allows using an intermediate texture smaller or higher than the final canvas in the post processing step.\n *     This is typically used in blur steps to reduce the performance overhead by using an already downsampled texture as input.\n *\n *   The {@link module:ol/webgl/PostProcessingPass~WebGLPostProcessingPass} class is used internally, refer to its documentation for more info.\n *\n * ### Binding WebGL buffers and flushing data into them\n *\n *   Data that must be passed to the GPU has to be transferred using {@link module:ol/webgl/Buffer~WebGLArrayBuffer} objects.\n *   A buffer has to be created only once, but must be bound every time the buffer content will be used for rendering.\n *   This is done using {@link bindBuffer}.\n *   When the buffer's array content has changed, the new data has to be flushed to the GPU memory; this is done using\n *   {@link flushBufferData}. Note: this operation is expensive and should be done as infrequently as possible.\n *\n *   When binding an array buffer, a `target` parameter must be given: it should be either {@link module:ol/webgl.ARRAY_BUFFER}\n *   (if the buffer contains vertices data) or {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER} (if the buffer contains indices data).\n *\n *   Examples below:\n *   ```js\n *   // at initialization phase\n *   const verticesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\n *   const indicesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\n *\n *   // when array values have changed\n *   helper.flushBufferData(ARRAY_BUFFER, this.verticesBuffer);\n *   helper.flushBufferData(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n *\n *   // at rendering phase\n *   helper.bindBuffer(ARRAY_BUFFER, this.verticesBuffer);\n *   helper.bindBuffer(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n *   ```\n *\n * ### Specifying attributes\n *\n *   The GPU only receives the data as arrays of numbers. These numbers must be handled differently depending on what it describes (position, texture coordinate...).\n *   Attributes are used to specify these uses. Specify the attribute names with\n *   {@link module:ol/webgl/Helper~WebGLHelper#enableAttributes} (see code snippet below).\n *\n *   Please note that you will have to specify the type and offset of the attributes in the data array. You can refer to the documentation of [WebGLRenderingContext.vertexAttribPointer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer) for more explanation.\n *   ```js\n *   // here we indicate that the data array has the following structure:\n *   // [posX, posY, offsetX, offsetY, texCoordU, texCoordV, posX, posY, ...]\n *   helper.enableAttributes([\n *     {\n *        name: 'a_position',\n *        size: 2\n *     },\n *     {\n *       name: 'a_offset',\n *       size: 2\n *     },\n *     {\n *       name: 'a_texCoord',\n *       size: 2\n *     }\n *   ])\n *   ```\n *\n * ### Rendering primitives\n *\n *   Once all the steps above have been achieved, rendering primitives to the screen is done using {@link prepareDraw}, {@link drawElements} and {@link finalizeDraw}.\n *   ```js\n *   // frame preparation step\n *   helper.prepareDraw(frameState);\n *\n *   // call this for every data array that has to be rendered on screen\n *   helper.drawElements(0, this.indicesBuffer.getArray().length);\n *\n *   // finalize the rendering by applying post processes\n *   helper.finalizeDraw(frameState);\n *   ```\n *\n * For an example usage of this class, refer to {@link module:ol/renderer/webgl/PointsLayer~WebGLPointsLayerRenderer}.\n */\nclass WebGLHelper extends Disposable {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n    options = options || {};\n\n    /** @private */\n    this.boundHandleWebGLContextLost_ = this.handleWebGLContextLost.bind(this);\n\n    /** @private */\n    this.boundHandleWebGLContextRestored_ =\n      this.handleWebGLContextRestored.bind(this);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.canvasCacheKey_ = options.canvasCacheKey\n      ? getSharedCanvasCacheKey(options.canvasCacheKey)\n      : getUniqueCanvasCacheKey();\n\n    /**\n     * @private\n     * @type {WebGLRenderingContext}\n     */\n    this.gl_ = getOrCreateContext(this.canvasCacheKey_);\n\n    /**\n     * @private\n     * @type {!Object<string, BufferCacheEntry>}\n     */\n    this.bufferCache_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Object>}\n     */\n    this.extensionCache_ = {};\n\n    /**\n     * @private\n     * @type {WebGLProgram}\n     */\n    this.currentProgram_ = null;\n\n    /**\n     * @private\n     * @type boolean\n     */\n    this.needsToBeRecreated_ = false;\n\n    const canvas = this.gl_.canvas;\n\n    canvas.addEventListener(\n      ContextEventType.LOST,\n      this.boundHandleWebGLContextLost_,\n    );\n    canvas.addEventListener(\n      ContextEventType.RESTORED,\n      this.boundHandleWebGLContextRestored_,\n    );\n\n    /**\n     * @private\n     * @type {import(\"../transform.js\").Transform}\n     */\n    this.offsetRotateMatrix_ = createTransform();\n\n    /**\n     * @private\n     * @type {import(\"../transform.js\").Transform}\n     */\n    this.offsetScaleMatrix_ = createTransform();\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.tmpMat4_ = create();\n\n    /**\n     * @private\n     * @type {Object<string, Object<string, WebGLUniformLocation>>}\n     */\n    this.uniformLocationsByProgram_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Object<string, number>>}\n     */\n    this.attribLocationsByProgram_ = {};\n\n    /**\n     * Holds info about custom uniforms used in the post processing pass.\n     * If the uniform is a texture, the WebGL Texture object will be stored here.\n     * @type {Array<UniformInternalDescription>}\n     * @private\n     */\n    this.uniforms_ = [];\n    if (options.uniforms) {\n      this.setUniforms(options.uniforms);\n    }\n\n    /**\n     * An array of PostProcessingPass objects is kept in this variable, built from the steps provided in the\n     * options. If no post process was given, a default one is used (so as not to have to make an exception to\n     * the frame buffer logic).\n     * @type {Array<WebGLPostProcessingPass>}\n     * @private\n     */\n    this.postProcessPasses_ = options.postProcesses\n      ? options.postProcesses.map(\n          (options) =>\n            new WebGLPostProcessingPass({\n              webGlContext: this.gl_,\n              scaleRatio: options.scaleRatio,\n              vertexShader: options.vertexShader,\n              fragmentShader: options.fragmentShader,\n              uniforms: options.uniforms,\n            }),\n        )\n      : [new WebGLPostProcessingPass({webGlContext: this.gl_})];\n\n    /**\n     * @type {string|null}\n     * @private\n     */\n    this.shaderCompileErrors_ = null;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.startTime_ = Date.now();\n  }\n\n  /**\n   * @param {Object<string, UniformValue>} uniforms Uniform definitions.\n   */\n  setUniforms(uniforms) {\n    this.uniforms_ = [];\n    this.addUniforms(uniforms);\n  }\n\n  /**\n   * @param {Object<string, UniformValue>} uniforms Uniform definitions.\n   */\n  addUniforms(uniforms) {\n    for (const name in uniforms) {\n      this.uniforms_.push({\n        name: name,\n        value: uniforms[name],\n      });\n    }\n  }\n\n  /**\n   * @param {string} canvasCacheKey The canvas cache key.\n   * @return {boolean} The provided key matches the one this helper was constructed with.\n   */\n  canvasCacheKeyMatches(canvasCacheKey) {\n    return this.canvasCacheKey_ === getSharedCanvasCacheKey(canvasCacheKey);\n  }\n\n  /**\n   * Get a WebGL extension.  If the extension is not supported, null is returned.\n   * Extensions are cached after they are enabled for the first time.\n   * @param {string} name The extension name.\n   * @return {Object|null} The extension or null if not supported.\n   */\n  getExtension(name) {\n    if (name in this.extensionCache_) {\n      return this.extensionCache_[name];\n    }\n    const extension = this.gl_.getExtension(name);\n    this.extensionCache_[name] = extension;\n    return extension;\n  }\n\n  /**\n   * Just bind the buffer if it's in the cache. Otherwise create\n   * the WebGL buffer, bind it, populate it, and add an entry to\n   * the cache.\n   * @param {import(\"./Buffer\").default} buffer Buffer.\n   */\n  bindBuffer(buffer) {\n    const gl = this.gl_;\n    const bufferKey = getUid(buffer);\n    let bufferCache = this.bufferCache_[bufferKey];\n    if (!bufferCache) {\n      const webGlBuffer = gl.createBuffer();\n      bufferCache = {\n        buffer: buffer,\n        webGlBuffer: webGlBuffer,\n      };\n      this.bufferCache_[bufferKey] = bufferCache;\n    }\n    gl.bindBuffer(buffer.getType(), bufferCache.webGlBuffer);\n  }\n\n  /**\n   * Update the data contained in the buffer array; this is required for the\n   * new data to be rendered\n   * @param {import(\"./Buffer\").default} buffer Buffer.\n   */\n  flushBufferData(buffer) {\n    const gl = this.gl_;\n    this.bindBuffer(buffer);\n    gl.bufferData(buffer.getType(), buffer.getArray(), buffer.getUsage());\n  }\n\n  /**\n   * @param {import(\"./Buffer.js\").default} buf Buffer.\n   */\n  deleteBuffer(buf) {\n    const gl = this.gl_;\n    const bufferKey = getUid(buf);\n    const bufferCacheEntry = this.bufferCache_[bufferKey];\n    if (bufferCacheEntry && !gl.isContextLost()) {\n      gl.deleteBuffer(bufferCacheEntry.webGlBuffer);\n    }\n    delete this.bufferCache_[bufferKey];\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    const canvas = this.gl_.canvas;\n    canvas.removeEventListener(\n      ContextEventType.LOST,\n      this.boundHandleWebGLContextLost_,\n    );\n    canvas.removeEventListener(\n      ContextEventType.RESTORED,\n      this.boundHandleWebGLContextRestored_,\n    );\n\n    releaseCanvas(this.canvasCacheKey_);\n\n    delete this.gl_;\n  }\n\n  /**\n   * Clear the buffer & set the viewport to draw.\n   * Post process passes will be initialized here, the first one being bound as a render target for\n   * subsequent draw calls.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {boolean} [disableAlphaBlend] If true, no alpha blending will happen.\n   * @param {boolean} [enableDepth] If true, enables depth testing.\n   */\n  prepareDraw(frameState, disableAlphaBlend, enableDepth) {\n    const gl = this.gl_;\n    const canvas = this.getCanvas();\n    const size = frameState.size;\n    const pixelRatio = frameState.pixelRatio;\n\n    if (\n      canvas.width !== size[0] * pixelRatio ||\n      canvas.height !== size[1] * pixelRatio\n    ) {\n      canvas.width = size[0] * pixelRatio;\n      canvas.height = size[1] * pixelRatio;\n      canvas.style.width = size[0] + 'px';\n      canvas.style.height = size[1] + 'px';\n    }\n\n    // loop backwards in post processes list\n    for (let i = this.postProcessPasses_.length - 1; i >= 0; i--) {\n      this.postProcessPasses_[i].init(frameState);\n    }\n\n    gl.bindTexture(gl.TEXTURE_2D, null);\n\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    gl.depthRange(0.0, 1.0);\n    gl.clearDepth(1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\n    if (enableDepth) {\n      gl.enable(gl.DEPTH_TEST);\n      gl.depthFunc(gl.LEQUAL);\n    } else {\n      gl.disable(gl.DEPTH_TEST);\n    }\n  }\n\n  /**\n   * Prepare a program to use a texture.\n   * @param {WebGLTexture} texture The texture.\n   * @param {number} slot The texture slot.\n   * @param {string} uniformName The corresponding uniform name.\n   */\n  bindTexture(texture, slot, uniformName) {\n    const gl = this.gl_;\n    gl.activeTexture(gl.TEXTURE0 + slot);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.uniform1i(this.getUniformLocation(uniformName), slot);\n  }\n\n  /**\n   * Clear the render target & bind it for future draw operations.\n   * This is similar to `prepareDraw`, only post processes will not be applied.\n   * Note: the whole viewport will be drawn to the render target, regardless of its size.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {import(\"./RenderTarget.js\").default} renderTarget Render target to draw to\n   * @param {boolean} [disableAlphaBlend] If true, no alpha blending will happen.\n   * @param {boolean} [enableDepth] If true, enables depth testing.\n   */\n  prepareDrawToRenderTarget(\n    frameState,\n    renderTarget,\n    disableAlphaBlend,\n    enableDepth,\n  ) {\n    const gl = this.gl_;\n    const size = renderTarget.getSize();\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, renderTarget.getFramebuffer());\n    gl.bindRenderbuffer(gl.RENDERBUFFER, renderTarget.getDepthbuffer());\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.bindTexture(gl.TEXTURE_2D, renderTarget.getTexture());\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    gl.depthRange(0.0, 1.0);\n    gl.clearDepth(1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\n    if (enableDepth) {\n      gl.enable(gl.DEPTH_TEST);\n      gl.depthFunc(gl.LEQUAL);\n    } else {\n      gl.disable(gl.DEPTH_TEST);\n    }\n  }\n\n  /**\n   * Execute a draw call based on the currently bound program, texture, buffers, attributes.\n   * @param {number} start Start index.\n   * @param {number} end End index.\n   */\n  drawElements(start, end) {\n    const gl = this.gl_;\n    this.getExtension('OES_element_index_uint');\n\n    const elementType = gl.UNSIGNED_INT;\n    const elementSize = 4;\n\n    const numItems = end - start;\n    const offsetInBytes = start * elementSize;\n    gl.drawElements(gl.TRIANGLES, numItems, elementType, offsetInBytes);\n  }\n\n  /**\n   * Apply the successive post process passes which will eventually render to the actual canvas.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [preCompose] Called before composing.\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [postCompose] Called before composing.\n   */\n  finalizeDraw(frameState, preCompose, postCompose) {\n    // apply post processes using the next one as target\n    for (let i = 0, ii = this.postProcessPasses_.length; i < ii; i++) {\n      if (i === ii - 1) {\n        this.postProcessPasses_[i].apply(\n          frameState,\n          null,\n          preCompose,\n          postCompose,\n        );\n      } else {\n        this.postProcessPasses_[i].apply(\n          frameState,\n          this.postProcessPasses_[i + 1],\n        );\n      }\n    }\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Canvas.\n   */\n  getCanvas() {\n    return /** @type {HTMLCanvasElement} */ (this.gl_.canvas);\n  }\n\n  /**\n   * Get the WebGL rendering context\n   * @return {WebGLRenderingContext} The rendering context.\n   */\n  getGL() {\n    return this.gl_;\n  }\n\n  /**\n   * Sets the default matrix uniforms for a given frame state. This is called internally in `prepareDraw`.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  applyFrameState(frameState) {\n    const size = frameState.size;\n    const rotation = frameState.viewState.rotation;\n    const pixelRatio = frameState.pixelRatio;\n\n    this.setUniformFloatValue(\n      DefaultUniform.TIME,\n      (Date.now() - this.startTime_) * 0.001,\n    );\n    this.setUniformFloatValue(DefaultUniform.ZOOM, frameState.viewState.zoom);\n    this.setUniformFloatValue(\n      DefaultUniform.RESOLUTION,\n      frameState.viewState.resolution,\n    );\n    this.setUniformFloatValue(DefaultUniform.PIXEL_RATIO, pixelRatio);\n    this.setUniformFloatVec2(DefaultUniform.VIEWPORT_SIZE_PX, [\n      size[0],\n      size[1],\n    ]);\n    this.setUniformFloatValue(DefaultUniform.ROTATION, rotation);\n  }\n\n  /**\n   * Sets the `u_hitDetection` uniform.\n   * @param {boolean} enabled Whether to enable the hit detection code path\n   */\n  applyHitDetectionUniform(enabled) {\n    const loc = this.getUniformLocation(DefaultUniform.HIT_DETECTION);\n    this.getGL().uniform1i(loc, enabled ? 1 : 0);\n\n    // hit detection uses a fixed pixel ratio\n    if (enabled) {\n      this.setUniformFloatValue(DefaultUniform.PIXEL_RATIO, 0.5);\n    }\n  }\n\n  /**\n   * Sets the custom uniforms based on what was given in the constructor. This is called internally in `prepareDraw`.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  applyUniforms(frameState) {\n    const gl = this.gl_;\n\n    let value;\n    let textureSlot = 0;\n    this.uniforms_.forEach((uniform) => {\n      value =\n        typeof uniform.value === 'function'\n          ? uniform.value(frameState)\n          : uniform.value;\n\n      // apply value based on type\n      if (\n        value instanceof HTMLCanvasElement ||\n        value instanceof HTMLImageElement ||\n        value instanceof ImageData ||\n        value instanceof WebGLTexture\n      ) {\n        // create a texture & put data\n        if (value instanceof WebGLTexture && !uniform.texture) {\n          uniform.prevValue = undefined;\n          uniform.texture = value;\n        } else if (!uniform.texture) {\n          uniform.prevValue = undefined;\n          uniform.texture = gl.createTexture();\n        }\n        this.bindTexture(uniform.texture, textureSlot, uniform.name);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        const imageReady =\n          !(value instanceof HTMLImageElement) ||\n          /** @type {HTMLImageElement} */ (value).complete;\n        if (\n          !(value instanceof WebGLTexture) &&\n          imageReady &&\n          uniform.prevValue !== value\n        ) {\n          uniform.prevValue = value;\n          gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            value,\n          );\n        }\n        textureSlot++;\n      } else if (Array.isArray(value) && value.length === 6) {\n        this.setUniformMatrixValue(\n          uniform.name,\n          fromTransform(this.tmpMat4_, value),\n        );\n      } else if (Array.isArray(value) && value.length <= 4) {\n        switch (value.length) {\n          case 2:\n            gl.uniform2f(\n              this.getUniformLocation(uniform.name),\n              value[0],\n              value[1],\n            );\n            return;\n          case 3:\n            gl.uniform3f(\n              this.getUniformLocation(uniform.name),\n              value[0],\n              value[1],\n              value[2],\n            );\n            return;\n          case 4:\n            gl.uniform4f(\n              this.getUniformLocation(uniform.name),\n              value[0],\n              value[1],\n              value[2],\n              value[3],\n            );\n            return;\n          default:\n            return;\n        }\n      } else if (typeof value === 'number') {\n        gl.uniform1f(this.getUniformLocation(uniform.name), value);\n      }\n    });\n  }\n\n  /**\n   * Set up a program for use. The program will be set as the current one. Then, the uniforms used\n   * in the program will be set based on the current frame state and the helper configuration.\n   * @param {WebGLProgram} program Program.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  useProgram(program, frameState) {\n    const gl = this.gl_;\n    gl.useProgram(program);\n    this.currentProgram_ = program;\n    this.applyFrameState(frameState);\n    this.applyUniforms(frameState);\n  }\n\n  /**\n   * Will attempt to compile a vertex or fragment shader based on source\n   * On error, the shader will be returned but\n   * `gl.getShaderParameter(shader, gl.COMPILE_STATUS)` will return `true`\n   * Use `gl.getShaderInfoLog(shader)` to have details\n   * @param {string} source Shader source\n   * @param {ShaderType} type VERTEX_SHADER or FRAGMENT_SHADER\n   * @return {WebGLShader} Shader object\n   */\n  compileShader(source, type) {\n    const gl = this.gl_;\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    return shader;\n  }\n\n  /**\n   * Create a program for a vertex and fragment shader.  Throws if shader compilation fails.\n   * @param {string} fragmentShaderSource Fragment shader source.\n   * @param {string} vertexShaderSource Vertex shader source.\n   * @return {WebGLProgram} Program\n   */\n  getProgram(fragmentShaderSource, vertexShaderSource) {\n    const gl = this.gl_;\n\n    const fragmentShader = this.compileShader(\n      fragmentShaderSource,\n      gl.FRAGMENT_SHADER,\n    );\n\n    const vertexShader = this.compileShader(\n      vertexShaderSource,\n      gl.VERTEX_SHADER,\n    );\n\n    const program = gl.createProgram();\n    gl.attachShader(program, fragmentShader);\n    gl.attachShader(program, vertexShader);\n    gl.linkProgram(program);\n\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      const message = `Fragment shader compilation failed: ${gl.getShaderInfoLog(\n        fragmentShader,\n      )}`;\n      throw new Error(message);\n    }\n    gl.deleteShader(fragmentShader);\n\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      const message = `Vertex shader compilation failed: ${gl.getShaderInfoLog(\n        vertexShader,\n      )}`;\n      throw new Error(message);\n    }\n    gl.deleteShader(vertexShader);\n\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      const message = `GL program linking failed: ${gl.getProgramInfoLog(\n        program,\n      )}`;\n      throw new Error(message);\n    }\n\n    return program;\n  }\n\n  /**\n   * Will get the location from the shader or the cache\n   * @param {string} name Uniform name\n   * @return {WebGLUniformLocation} uniformLocation\n   */\n  getUniformLocation(name) {\n    const programUid = getUid(this.currentProgram_);\n    if (this.uniformLocationsByProgram_[programUid] === undefined) {\n      this.uniformLocationsByProgram_[programUid] = {};\n    }\n    if (this.uniformLocationsByProgram_[programUid][name] === undefined) {\n      this.uniformLocationsByProgram_[programUid][name] =\n        this.gl_.getUniformLocation(this.currentProgram_, name);\n    }\n    return this.uniformLocationsByProgram_[programUid][name];\n  }\n\n  /**\n   * Will get the location from the shader or the cache\n   * @param {string} name Attribute name\n   * @return {number} attribLocation\n   */\n  getAttributeLocation(name) {\n    const programUid = getUid(this.currentProgram_);\n    if (this.attribLocationsByProgram_[programUid] === undefined) {\n      this.attribLocationsByProgram_[programUid] = {};\n    }\n    if (this.attribLocationsByProgram_[programUid][name] === undefined) {\n      this.attribLocationsByProgram_[programUid][name] =\n        this.gl_.getAttribLocation(this.currentProgram_, name);\n    }\n    return this.attribLocationsByProgram_[programUid][name];\n  }\n\n  /**\n   * Sets the given transform to apply the rotation/translation/scaling of the given frame state.\n   * The resulting transform can be used to convert world space coordinates to view coordinates in the [-1, 1] range.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../transform\").Transform} transform Transform to update.\n   * @return {import(\"../transform\").Transform} The updated transform object.\n   */\n  makeProjectionTransform(frameState, transform) {\n    const size = frameState.size;\n    const rotation = frameState.viewState.rotation;\n    const resolution = frameState.viewState.resolution;\n    const center = frameState.viewState.center;\n    composeTransform(\n      transform,\n      0,\n      0,\n      2 / (resolution * size[0]),\n      2 / (resolution * size[1]),\n      -rotation,\n      -center[0],\n      -center[1],\n    );\n    return transform;\n  }\n\n  /**\n   * Give a value for a standard float uniform\n   * @param {string} uniform Uniform name\n   * @param {number} value Value\n   */\n  setUniformFloatValue(uniform, value) {\n    this.gl_.uniform1f(this.getUniformLocation(uniform), value);\n  }\n\n  /**\n   * Give a value for a vec2 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Array of length 4.\n   */\n  setUniformFloatVec2(uniform, value) {\n    this.gl_.uniform2fv(this.getUniformLocation(uniform), value);\n  }\n\n  /**\n   * Give a value for a vec4 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Array of length 4.\n   */\n  setUniformFloatVec4(uniform, value) {\n    this.gl_.uniform4fv(this.getUniformLocation(uniform), value);\n  }\n\n  /**\n   * Give a value for a standard matrix4 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Matrix value\n   */\n  setUniformMatrixValue(uniform, value) {\n    this.gl_.uniformMatrix4fv(this.getUniformLocation(uniform), false, value);\n  }\n\n  /**\n   * Will set the currently bound buffer to an attribute of the shader program. Used by `#enableAttributes`\n   * internally.\n   * @param {string} attribName Attribute name\n   * @param {number} size Number of components per attributes\n   * @param {number} type UNSIGNED_INT, UNSIGNED_BYTE, UNSIGNED_SHORT or FLOAT\n   * @param {number} stride Stride in bytes (0 means attribs are packed)\n   * @param {number} offset Offset in bytes\n   * @private\n   */\n  enableAttributeArray_(attribName, size, type, stride, offset) {\n    const location = this.getAttributeLocation(attribName);\n    // the attribute has not been found in the shaders or is not used; do not enable it\n    if (location < 0) {\n      return;\n    }\n    this.gl_.enableVertexAttribArray(location);\n    this.gl_.vertexAttribPointer(location, size, type, false, stride, offset);\n  }\n\n  /**\n   * Will enable the following attributes to be read from the currently bound buffer,\n   * i.e. tell the GPU where to read the different attributes in the buffer. An error in the\n   * size/type/order of attributes will most likely break the rendering and throw a WebGL exception.\n   * @param {Array<AttributeDescription>} attributes Ordered list of attributes to read from the buffer\n   */\n  enableAttributes(attributes) {\n    const stride = computeAttributesStride(attributes);\n    let offset = 0;\n    for (let i = 0; i < attributes.length; i++) {\n      const attr = attributes[i];\n      this.enableAttributeArray_(\n        attr.name,\n        attr.size,\n        attr.type || FLOAT,\n        stride,\n        offset,\n      );\n      offset += attr.size * getByteSizeFromType(attr.type);\n    }\n  }\n\n  /**\n   * WebGL context was lost\n   * @param {WebGLContextEvent} event The context loss event.\n   * @private\n   */\n  handleWebGLContextLost(event) {\n    clear(this.bufferCache_);\n    this.currentProgram_ = null;\n\n    event.preventDefault();\n  }\n\n  /**\n   * WebGL context was restored\n   * @private\n   */\n  handleWebGLContextRestored() {\n    this.needsToBeRecreated_ = true;\n  }\n\n  /**\n   * Returns whether this helper needs to be recreated, as the context was lost and then restored.\n   * @return {boolean} Whether this helper needs to be recreated.\n   */\n  needsToBeRecreated() {\n    return this.needsToBeRecreated_;\n  }\n\n  /**\n   * Will create or reuse a given webgl texture and apply the given size. If no image data\n   * specified, the texture will be empty, otherwise image data will be used and the `size`\n   * parameter will be ignored.\n   * Note: wrap parameters are set to clamp to edge, min filter is set to linear.\n   * @param {Array<number>} size Expected size of the texture\n   * @param {ImageData|HTMLImageElement|HTMLCanvasElement} [data] Image data/object to bind to the texture\n   * @param {WebGLTexture} [texture] Existing texture to reuse\n   * @return {WebGLTexture} The generated texture\n   */\n  createTexture(size, data, texture) {\n    const gl = this.gl_;\n    texture = texture || gl.createTexture();\n\n    // set params & size\n    const level = 0;\n    const internalFormat = gl.RGBA;\n    const border = 0;\n    const format = gl.RGBA;\n    const type = gl.UNSIGNED_BYTE;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    if (data) {\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, format, type, data);\n    } else {\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        level,\n        internalFormat,\n        size[0],\n        size[1],\n        border,\n        format,\n        type,\n        null,\n      );\n    }\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n    return texture;\n  }\n}\n\n/**\n * Compute a stride in bytes based on a list of attributes\n * @param {Array<AttributeDescription>} attributes Ordered list of attributes\n * @return {number} Stride, ie amount of values for each vertex in the vertex buffer\n */\nexport function computeAttributesStride(attributes) {\n  let stride = 0;\n  for (let i = 0; i < attributes.length; i++) {\n    const attr = attributes[i];\n    stride += attr.size * getByteSizeFromType(attr.type);\n  }\n  return stride;\n}\n\n/**\n * Computes the size in byte of an attribute type.\n * @param {AttributeType} type Attribute type\n * @return {number} The size in bytes\n */\nfunction getByteSizeFromType(type) {\n  switch (type) {\n    case AttributeType.UNSIGNED_BYTE:\n      return Uint8Array.BYTES_PER_ELEMENT;\n    case AttributeType.UNSIGNED_SHORT:\n      return Uint16Array.BYTES_PER_ELEMENT;\n    case AttributeType.UNSIGNED_INT:\n      return Uint32Array.BYTES_PER_ELEMENT;\n    case AttributeType.FLOAT:\n    default:\n      return Float32Array.BYTES_PER_ELEMENT;\n  }\n}\n\nexport default WebGLHelper;\n","/**\n * @module ol/webgl/PaletteTexture\n */\n\nclass PaletteTexture {\n  /**\n   * @param {string} name The name of the texture.\n   * @param {Uint8Array} data The texture data.\n   */\n  constructor(name, data) {\n    this.name = name;\n    this.data = data;\n\n    /**\n     * @type {WebGLTexture|null}\n     * @private\n     */\n    this.texture_ = null;\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl Rendering context.\n   * @return {WebGLTexture} The texture.\n   */\n  getTexture(gl) {\n    if (!this.texture_) {\n      const texture = gl.createTexture();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,\n        gl.RGBA,\n        this.data.length / 4,\n        1,\n        0,\n        gl.RGBA,\n        gl.UNSIGNED_BYTE,\n        this.data,\n      );\n      this.texture_ = texture;\n    }\n    return this.texture_;\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl Rendering context.\n   */\n  delete(gl) {\n    if (this.texture_) {\n      gl.deleteTexture(this.texture_);\n    }\n    this.texture_ = null;\n  }\n}\n\nexport default PaletteTexture;\n","/**\n * A wrapper class to simplify rendering to a texture instead of the final canvas\n * @module ol/webgl/RenderTarget\n */\nimport {equals} from '../array.js';\n\n// for pixel color reading\nconst tmpArray4 = new Uint8Array(4);\n\n/**\n * @classdesc\n * This class is a wrapper around the association of both a `WebGLTexture` and a `WebGLFramebuffer` instances,\n * simplifying initialization and binding for rendering.\n */\nclass WebGLRenderTarget {\n  /**\n   * @param {import(\"./Helper.js\").default} helper WebGL helper; mandatory.\n   * @param {Array<number>} [size] Expected size of the render target texture; note: this can be changed later on.\n   */\n  constructor(helper, size) {\n    /**\n     * @private\n     * @type {import(\"./Helper.js\").default}\n     */\n    this.helper_ = helper;\n    const gl = helper.getGL();\n\n    /**\n     * @private\n     * @type {WebGLTexture}\n     */\n    this.texture_ = gl.createTexture();\n\n    /**\n     * @private\n     * @type {WebGLFramebuffer}\n     */\n    this.framebuffer_ = gl.createFramebuffer();\n\n    /**\n     * @private\n     * @type {WebGLRenderbuffer}\n     */\n    this.depthbuffer_ = gl.createRenderbuffer();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.size_ = size || [1, 1];\n\n    /**\n     * @type {Uint8Array}\n     * @private\n     */\n    this.data_ = new Uint8Array(0);\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.dataCacheDirty_ = true;\n\n    this.updateSize_();\n  }\n\n  /**\n   * Changes the size of the render target texture. Note: will do nothing if the size\n   * is already the same.\n   * @param {Array<number>} size Expected size of the render target texture\n   */\n  setSize(size) {\n    if (equals(size, this.size_)) {\n      return;\n    }\n    this.size_[0] = size[0];\n    this.size_[1] = size[1];\n    this.updateSize_();\n  }\n\n  /**\n   * Returns the size of the render target texture\n   * @return {Array<number>} Size of the render target texture\n   */\n  getSize() {\n    return this.size_;\n  }\n\n  /**\n   * This will cause following calls to `#readAll` or `#readPixel` to download the content of the\n   * render target into memory, which is an expensive operation.\n   * This content will be kept in cache but should be cleared after each new render.\n   */\n  clearCachedData() {\n    this.dataCacheDirty_ = true;\n  }\n\n  /**\n   * Returns the full content of the frame buffer as a series of r, g, b, a components\n   * in the 0-255 range (unsigned byte).\n   * @return {Uint8Array} Integer array of color values\n   */\n  readAll() {\n    if (this.dataCacheDirty_) {\n      const size = this.size_;\n      const gl = this.helper_.getGL();\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n      gl.readPixels(\n        0,\n        0,\n        size[0],\n        size[1],\n        gl.RGBA,\n        gl.UNSIGNED_BYTE,\n        this.data_,\n      );\n      this.dataCacheDirty_ = false;\n    }\n    return this.data_;\n  }\n\n  /**\n   * Reads one pixel of the frame buffer as an array of r, g, b, a components\n   * in the 0-255 range (unsigned byte).\n   * If x and/or y are outside of existing data, an array filled with 0 is returned.\n   * @param {number} x Pixel coordinate\n   * @param {number} y Pixel coordinate\n   * @return {Uint8Array} Integer array with one color value (4 components)\n   */\n  readPixel(x, y) {\n    if (x < 0 || y < 0 || x > this.size_[0] || y >= this.size_[1]) {\n      tmpArray4[0] = 0;\n      tmpArray4[1] = 0;\n      tmpArray4[2] = 0;\n      tmpArray4[3] = 0;\n      return tmpArray4;\n    }\n\n    this.readAll();\n    const index =\n      Math.floor(x) + (this.size_[1] - Math.floor(y) - 1) * this.size_[0];\n    tmpArray4[0] = this.data_[index * 4];\n    tmpArray4[1] = this.data_[index * 4 + 1];\n    tmpArray4[2] = this.data_[index * 4 + 2];\n    tmpArray4[3] = this.data_[index * 4 + 3];\n    return tmpArray4;\n  }\n\n  /**\n   * @return {WebGLTexture} Texture to render to\n   */\n  getTexture() {\n    return this.texture_;\n  }\n\n  /**\n   * @return {WebGLFramebuffer} Frame buffer of the render target\n   */\n  getFramebuffer() {\n    return this.framebuffer_;\n  }\n\n  /**\n   * @return {WebGLRenderbuffer} Depth buffer of the render target\n   */\n  getDepthbuffer() {\n    return this.depthbuffer_;\n  }\n\n  /**\n   * @private\n   */\n  updateSize_() {\n    const size = this.size_;\n    const gl = this.helper_.getGL();\n\n    this.texture_ = this.helper_.createTexture(size, null, this.texture_);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      this.texture_,\n      0,\n    );\n\n    gl.bindRenderbuffer(gl.RENDERBUFFER, this.depthbuffer_);\n    gl.renderbufferStorage(\n      gl.RENDERBUFFER,\n      gl.DEPTH_COMPONENT16,\n      size[0],\n      size[1],\n    );\n    gl.framebufferRenderbuffer(\n      gl.FRAMEBUFFER,\n      gl.DEPTH_ATTACHMENT,\n      gl.RENDERBUFFER,\n      this.depthbuffer_,\n    );\n\n    this.data_ = new Uint8Array(size[0] * size[1] * 4);\n  }\n}\n\nexport default WebGLRenderTarget;\n","/**\n * Class for generating shaders from literal style objects\n * @module ol/webgl/ShaderBuilder\n */\nimport {LINESTRING_ANGLE_COSINE_CUTOFF} from '../render/webgl/utils.js';\nimport {colorToGlsl, numberToGlsl, stringToGlsl} from '../expr/gpu.js';\nimport {createDefaultStyle} from '../style/flat.js';\n\nexport const COMMON_HEADER = `#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_screenToWorldMatrix;\nuniform vec2 u_viewportSizePx;\nuniform float u_pixelRatio;\nuniform float u_globalAlpha;\nuniform float u_time;\nuniform float u_zoom;\nuniform float u_resolution;\nuniform float u_rotation;\nuniform vec4 u_renderExtent;\nuniform vec2 u_patternOrigin;\nuniform float u_depth;\nuniform mediump int u_hitDetection;\n\nconst float PI = 3.141592653589793238;\nconst float TWO_PI = 2.0 * PI;\n\n// this used to produce an alpha-premultiplied color from a texture\nvec4 samplePremultiplied(sampler2D sampler, vec2 texCoord) {\n  vec4 color = texture2D(sampler, texCoord);\n  return vec4(color.rgb * color.a, color.a);\n}\n`;\n\nconst DEFAULT_STYLE = createDefaultStyle();\n\n/**\n * @typedef {Object} VaryingDescription\n * @property {string} name Varying name, as will be declared in the header.\n * @property {string} type Varying type, either `float`, `vec2`, `vec4`...\n * @property {string} expression Expression which will be assigned to the varying in the vertex shader, and\n * passed on to the fragment shader.\n */\n\n/**\n * @classdesc\n * This class implements a classic builder pattern for generating many different types of shaders.\n * Methods can be chained, e. g.:\n *\n * ```js\n * const shader = new ShaderBuilder()\n *   .addVarying('v_width', 'float', 'a_width')\n *   .addUniform('u_time')\n *   .setColorExpression('...')\n *   .setSymbolSizeExpression('...')\n *   .getSymbolFragmentShader();\n * ```\n */\nexport class ShaderBuilder {\n  constructor() {\n    /**\n     * Uniforms; these will be declared in the header (should include the type).\n     * @type {Array<string>}\n     * @private\n     */\n    this.uniforms_ = [];\n\n    /**\n     * Attributes; these will be declared in the header (should include the type).\n     * @type {Array<string>}\n     * @private\n     */\n    this.attributes_ = [];\n\n    /**\n     * Varyings with a name, a type and an expression.\n     * @type {Array<VaryingDescription>}\n     * @private\n     */\n    this.varyings_ = [];\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hasSymbol_ = false;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.symbolSizeExpression_ = `vec2(${numberToGlsl(\n      DEFAULT_STYLE['circle-radius'],\n    )} + ${numberToGlsl(DEFAULT_STYLE['circle-stroke-width'] * 0.5)})`;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.symbolRotationExpression_ = '0.0';\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.symbolOffsetExpression_ = 'vec2(0.0)';\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.symbolColorExpression_ = colorToGlsl(\n      /** @type {string} */ (DEFAULT_STYLE['circle-fill-color']),\n    );\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.texCoordExpression_ = 'vec4(0.0, 0.0, 1.0, 1.0)';\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.discardExpression_ = 'false';\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.symbolRotateWithView_ = false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hasStroke_ = false;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.strokeWidthExpression_ = numberToGlsl(DEFAULT_STYLE['stroke-width']);\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.strokeColorExpression_ = colorToGlsl(\n      /** @type {string} */ (DEFAULT_STYLE['stroke-color']),\n    );\n\n    /**\n     * @private\n     */\n    this.strokeOffsetExpression_ = '0.';\n\n    /**\n     * @private\n     */\n    this.strokeCapExpression_ = stringToGlsl('round');\n\n    /**\n     * @private\n     */\n    this.strokeJoinExpression_ = stringToGlsl('round');\n\n    /**\n     * @private\n     */\n    this.strokeMiterLimitExpression_ = '10.';\n\n    /**\n     * @private\n     */\n    this.strokeDistanceFieldExpression_ = '-1000.';\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hasFill_ = false;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.fillColorExpression_ = colorToGlsl(\n      /** @type {string} */ (DEFAULT_STYLE['fill-color']),\n    );\n\n    /**\n     * @type {Array<string>}\n     * @private\n     */\n    this.vertexShaderFunctions_ = [];\n\n    /**\n     * @type {Array<string>}\n     * @private\n     */\n    this.fragmentShaderFunctions_ = [];\n  }\n\n  /**\n   * Adds a uniform accessible in both fragment and vertex shaders.\n   * The given name should include a type, such as `sampler2D u_texture`.\n   * @param {string} name Uniform name\n   * @return {ShaderBuilder} the builder object\n   */\n  addUniform(name) {\n    this.uniforms_.push(name);\n    return this;\n  }\n\n  /**\n   * Adds an attribute accessible in the vertex shader, read from the geometry buffer.\n   * The given name should include a type, such as `vec2 a_position`.\n   * @param {string} name Attribute name\n   * @return {ShaderBuilder} the builder object\n   */\n  addAttribute(name) {\n    this.attributes_.push(name);\n    return this;\n  }\n\n  /**\n   * Adds a varying defined in the vertex shader and accessible from the fragment shader.\n   * The type and expression of the varying have to be specified separately.\n   * @param {string} name Varying name\n   * @param {'float'|'vec2'|'vec3'|'vec4'} type Type\n   * @param {string} expression Expression used to assign a value to the varying.\n   * @return {ShaderBuilder} the builder object\n   */\n  addVarying(name, type, expression) {\n    this.varyings_.push({\n      name: name,\n      type: type,\n      expression: expression,\n    });\n    return this;\n  }\n\n  /**\n   * Sets an expression to compute the size of the shape.\n   * This expression can use all the uniforms and attributes available\n   * in the vertex shader, and should evaluate to a `vec2` value.\n   * @param {string} expression Size expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setSymbolSizeExpression(expression) {\n    this.hasSymbol_ = true;\n    this.symbolSizeExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current symbol size expression\n   */\n  getSymbolSizeExpression() {\n    return this.symbolSizeExpression_;\n  }\n\n  /**\n   * Sets an expression to compute the rotation of the shape.\n   * This expression can use all the uniforms and attributes available\n   * in the vertex shader, and should evaluate to a `float` value in radians.\n   * @param {string} expression Size expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setSymbolRotationExpression(expression) {\n    this.symbolRotationExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * Sets an expression to compute the offset of the symbol from the point center.\n   * This expression can use all the uniforms and attributes available\n   * in the vertex shader, and should evaluate to a `vec2` value.\n   * @param {string} expression Offset expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setSymbolOffsetExpression(expression) {\n    this.symbolOffsetExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current symbol offset expression\n   */\n  getSymbolOffsetExpression() {\n    return this.symbolOffsetExpression_;\n  }\n\n  /**\n   * Sets an expression to compute the color of the shape.\n   * This expression can use all the uniforms, varyings and attributes available\n   * in the fragment shader, and should evaluate to a `vec4` value.\n   * @param {string} expression Color expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setSymbolColorExpression(expression) {\n    this.hasSymbol_ = true;\n    this.symbolColorExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current symbol color expression\n   */\n  getSymbolColorExpression() {\n    return this.symbolColorExpression_;\n  }\n\n  /**\n   * Sets an expression to compute the texture coordinates of the vertices.\n   * This expression can use all the uniforms and attributes available\n   * in the vertex shader, and should evaluate to a `vec4` value.\n   * @param {string} expression Texture coordinate expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setTextureCoordinateExpression(expression) {\n    this.texCoordExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * Sets an expression to determine whether a fragment (pixel) should be discarded,\n   * i.e. not drawn at all.\n   * This expression can use all the uniforms, varyings and attributes available\n   * in the fragment shader, and should evaluate to a `bool` value (it will be\n   * used in an `if` statement)\n   * @param {string} expression Fragment discard expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setFragmentDiscardExpression(expression) {\n    this.discardExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current fragment discard expression\n   */\n  getFragmentDiscardExpression() {\n    return this.discardExpression_;\n  }\n\n  /**\n   * Sets whether the symbols should rotate with the view or stay aligned with the map.\n   * Note: will only be used for point geometry shaders.\n   * @param {boolean} rotateWithView Rotate with view\n   * @return {ShaderBuilder} the builder object\n   */\n  setSymbolRotateWithView(rotateWithView) {\n    this.symbolRotateWithView_ = rotateWithView;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke width expression, returning value in pixels\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeWidthExpression(expression) {\n    this.hasStroke_ = true;\n    this.strokeWidthExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke color expression, evaluate to `vec4`: can rely on currentLengthPx and currentRadiusPx\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeColorExpression(expression) {\n    this.hasStroke_ = true;\n    this.strokeColorExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current stroke color expression\n   */\n  getStrokeColorExpression() {\n    return this.strokeColorExpression_;\n  }\n\n  /**\n   * @param {string} expression Stroke color expression, evaluate to `float`\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeOffsetExpression(expression) {\n    this.strokeOffsetExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke line cap expression, evaluate to `float`\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeCapExpression(expression) {\n    this.strokeCapExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke line join expression, evaluate to `float`\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeJoinExpression(expression) {\n    this.strokeJoinExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke miter limit expression, evaluate to `float`\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeMiterLimitExpression(expression) {\n    this.strokeMiterLimitExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke distance field expression, evaluate to `float`\n   * This can override the default distance field; can rely on currentLengthPx and currentRadiusPx\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeDistanceFieldExpression(expression) {\n    this.strokeDistanceFieldExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Fill color expression, evaluate to `vec4`\n   * @return {ShaderBuilder} the builder object\n   */\n  setFillColorExpression(expression) {\n    this.hasFill_ = true;\n    this.fillColorExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current fill color expression\n   */\n  getFillColorExpression() {\n    return this.fillColorExpression_;\n  }\n\n  addVertexShaderFunction(code) {\n    if (this.vertexShaderFunctions_.includes(code)) {\n      return;\n    }\n    this.vertexShaderFunctions_.push(code);\n  }\n  addFragmentShaderFunction(code) {\n    if (this.fragmentShaderFunctions_.includes(code)) {\n      return;\n    }\n    this.fragmentShaderFunctions_.push(code);\n  }\n\n  /**\n   * Generates a symbol vertex shader from the builder parameters\n   * @return {string|null} The full shader as a string; null if no size or color specified\n   */\n  getSymbolVertexShader() {\n    if (!this.hasSymbol_) {\n      return null;\n    }\n\n    return `${COMMON_HEADER}\n${this.uniforms_\n  .map(function (uniform) {\n    return 'uniform ' + uniform + ';';\n  })\n  .join('\\n')}\nattribute vec2 a_position;\nattribute float a_index;\nattribute vec4 a_prop_hitColor;\n${this.attributes_\n  .map(function (attribute) {\n    return 'attribute ' + attribute + ';';\n  })\n  .join('\\n')}\nvarying vec2 v_texCoord;\nvarying vec2 v_quadCoord;\nvarying vec4 v_prop_hitColor;\nvarying vec2 v_centerPx;\nvarying float v_angle;\nvarying vec2 v_quadSizePx;\n${this.varyings_\n  .map(function (varying) {\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\n  })\n  .join('\\n')}\n${this.vertexShaderFunctions_.join('\\n')}\nvec2 pxToScreen(vec2 coordPx) {\n  vec2 scaled = coordPx / u_viewportSizePx / 0.5;\n  return scaled;\n}\n\nvec2 screenToPx(vec2 coordScreen) {\n  return (coordScreen * 0.5 + 0.5) * u_viewportSizePx;\n}\n\nvoid main(void) {\n  v_quadSizePx = ${this.symbolSizeExpression_};\n  vec2 halfSizePx = v_quadSizePx * 0.5;\n  vec2 centerOffsetPx = ${this.symbolOffsetExpression_};\n  vec2 offsetPx = centerOffsetPx;\n  if (a_index == 0.0) {\n    offsetPx -= halfSizePx;\n  } else if (a_index == 1.0) {\n    offsetPx += halfSizePx * vec2(1., -1.);\n  } else if (a_index == 2.0) {\n    offsetPx += halfSizePx;\n  } else {\n    offsetPx += halfSizePx * vec2(-1., 1.);\n  }\n  float angle = ${this.symbolRotationExpression_};\n  ${this.symbolRotateWithView_ ? 'angle += u_rotation;' : ''}\n  float c = cos(-angle);\n  float s = sin(-angle);\n  offsetPx = vec2(c * offsetPx.x - s * offsetPx.y, s * offsetPx.x + c * offsetPx.y);\n  vec4 center = u_projectionMatrix * vec4(a_position, 0.0, 1.0);\n  gl_Position = center + vec4(pxToScreen(offsetPx), u_depth, 0.);\n  vec4 texCoord = ${this.texCoordExpression_};\n  float u = a_index == 0.0 || a_index == 3.0 ? texCoord.s : texCoord.p;\n  float v = a_index == 2.0 || a_index == 3.0 ? texCoord.t : texCoord.q;\n  v_texCoord = vec2(u, v);\n  v_prop_hitColor = a_prop_hitColor;\n  v_angle = angle;\n  c = cos(-v_angle);\n  s = sin(-v_angle);\n  centerOffsetPx = vec2(c * centerOffsetPx.x - s * centerOffsetPx.y, s * centerOffsetPx.x + c * centerOffsetPx.y); \n  v_centerPx = screenToPx(center.xy) + centerOffsetPx;\n${this.varyings_\n  .map(function (varying) {\n    return '  ' + varying.name + ' = ' + varying.expression + ';';\n  })\n  .join('\\n')}\n}`;\n  }\n\n  /**\n   * Generates a symbol fragment shader from the builder parameters\n   * @return {string|null} The full shader as a string; null if no size or color specified\n   */\n  getSymbolFragmentShader() {\n    if (!this.hasSymbol_) {\n      return null;\n    }\n\n    return `${COMMON_HEADER}\n${this.uniforms_\n  .map(function (uniform) {\n    return 'uniform ' + uniform + ';';\n  })\n  .join('\\n')}\nvarying vec2 v_texCoord;\nvarying vec4 v_prop_hitColor;\nvarying vec2 v_centerPx;\nvarying float v_angle;\nvarying vec2 v_quadSizePx;\n${this.varyings_\n  .map(function (varying) {\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\n  })\n  .join('\\n')}\n${this.fragmentShaderFunctions_.join('\\n')}\n\nvoid main(void) {\n  if (${this.discardExpression_}) { discard; }\n  vec2 coordsPx = gl_FragCoord.xy / u_pixelRatio - v_centerPx; // relative to center\n  float c = cos(v_angle);\n  float s = sin(v_angle);\n  coordsPx = vec2(c * coordsPx.x - s * coordsPx.y, s * coordsPx.x + c * coordsPx.y);\n  gl_FragColor = ${this.symbolColorExpression_};\n  if (u_hitDetection > 0) {\n    if (gl_FragColor.a < 0.05) { discard; };\n    gl_FragColor = v_prop_hitColor;\n  }\n}`;\n  }\n\n  /**\n   * Generates a stroke vertex shader from the builder parameters\n   * @return {string|null} The full shader as a string; null if no size or color specified\n   */\n  getStrokeVertexShader() {\n    if (!this.hasStroke_) {\n      return null;\n    }\n\n    return `${COMMON_HEADER}\n${this.uniforms_\n  .map(function (uniform) {\n    return 'uniform ' + uniform + ';';\n  })\n  .join('\\n')}\nattribute vec2 a_position;\nattribute float a_index;\nattribute vec2 a_segmentStart;\nattribute vec2 a_segmentEnd;\nattribute float a_parameters;\nattribute float a_distance;\nattribute vec2 a_joinAngles;\nattribute vec4 a_prop_hitColor;\n${this.attributes_\n  .map(function (attribute) {\n    return 'attribute ' + attribute + ';';\n  })\n  .join('\\n')}\nvarying vec2 v_segmentStart;\nvarying vec2 v_segmentEnd;\nvarying float v_angleStart;\nvarying float v_angleEnd;\nvarying float v_width;\nvarying vec4 v_prop_hitColor;\nvarying float v_distanceOffsetPx;\n${this.varyings_\n  .map(function (varying) {\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\n  })\n  .join('\\n')}\n${this.vertexShaderFunctions_.join('\\n')}\nvec2 worldToPx(vec2 worldPos) {\n  vec4 screenPos = u_projectionMatrix * vec4(worldPos, 0.0, 1.0);\n  return (0.5 * screenPos.xy + 0.5) * u_viewportSizePx;\n}\n\nvec4 pxToScreen(vec2 pxPos) {\n  vec2 screenPos = 2.0 * pxPos / u_viewportSizePx - 1.0;\n  return vec4(screenPos, u_depth, 1.0);\n}\n\nbool isCap(float joinAngle) {\n  return joinAngle < -0.1;\n}\n\nvec2 getJoinOffsetDirection(vec2 normalPx, float joinAngle) {\n  float halfAngle = joinAngle / 2.0;\n  float c = cos(halfAngle);\n  float s = sin(halfAngle);\n  vec2 angleBisectorNormal = vec2(s * normalPx.x + c * normalPx.y, -c * normalPx.x + s * normalPx.y);\n  float length = 1.0 / s;\n  return angleBisectorNormal * length;\n}\n\nvec2 getOffsetPoint(vec2 point, vec2 normal, float joinAngle, float offsetPx) {\n  // if on a cap or the join angle is too high, offset the line along the segment normal\n  if (cos(joinAngle) > 0.998 || isCap(joinAngle)) {\n    return point - normal * offsetPx;\n  }\n  // offset is applied along the inverted normal (positive offset goes \"right\" relative to line direction)\n  return point - getJoinOffsetDirection(normal, joinAngle) * offsetPx;\n}\n\nvoid main(void) {\n  v_angleStart = a_joinAngles.x;\n  v_angleEnd = a_joinAngles.y;\n  float vertexNumber = floor(abs(a_parameters) / 10000. + 0.5);\n  // we're reading the fractional part while keeping the sign (so -4.12 gives -0.12, 3.45 gives 0.45)\n  float angleTangentSum = fract(abs(a_parameters) / 10000.) * 10000. * sign(a_parameters);\n\n  float lineWidth = ${this.strokeWidthExpression_};\n  float lineOffsetPx = ${this.strokeOffsetExpression_};\n\n  // compute segment start/end in px with offset\n  vec2 segmentStartPx = worldToPx(a_segmentStart);\n  vec2 segmentEndPx = worldToPx(a_segmentEnd);\n  vec2 tangentPx = normalize(segmentEndPx - segmentStartPx);\n  vec2 normalPx = vec2(-tangentPx.y, tangentPx.x);\n  segmentStartPx = getOffsetPoint(segmentStartPx, normalPx, v_angleStart, lineOffsetPx),\n  segmentEndPx = getOffsetPoint(segmentEndPx, normalPx, v_angleEnd, lineOffsetPx);\n  \n  // compute current vertex position\n  float normalDir = vertexNumber < 0.5 || (vertexNumber > 1.5 && vertexNumber < 2.5) ? 1.0 : -1.0;\n  float tangentDir = vertexNumber < 1.5 ? 1.0 : -1.0;\n  float angle = vertexNumber < 1.5 ? v_angleStart : v_angleEnd;\n  vec2 joinDirection;\n  vec2 positionPx = vertexNumber < 1.5 ? segmentStartPx : segmentEndPx;\n  // if angle is too high, do not make a proper join\n  if (cos(angle) > ${LINESTRING_ANGLE_COSINE_CUTOFF} || isCap(angle)) {\n    joinDirection = normalPx * normalDir - tangentPx * tangentDir;\n  } else {\n    joinDirection = getJoinOffsetDirection(normalPx * normalDir, angle);\n  }\n  positionPx = positionPx + joinDirection * (lineWidth * 0.5 + 1.); // adding 1 pixel for antialiasing\n  gl_Position = pxToScreen(positionPx);\n\n  v_segmentStart = segmentStartPx;\n  v_segmentEnd = segmentEndPx;\n  v_width = lineWidth;\n  v_prop_hitColor = a_prop_hitColor;\n  v_distanceOffsetPx = a_distance / u_resolution - (lineOffsetPx * angleTangentSum);\n${this.varyings_\n  .map(function (varying) {\n    return '  ' + varying.name + ' = ' + varying.expression + ';';\n  })\n  .join('\\n')}\n}`;\n  }\n\n  /**\n   * Generates a stroke fragment shader from the builder parameters\n   *\n   * @return {string|null} The full shader as a string; null if no size or color specified\n   */\n  getStrokeFragmentShader() {\n    if (!this.hasStroke_) {\n      return null;\n    }\n\n    return `${COMMON_HEADER}\n${this.uniforms_\n  .map(function (uniform) {\n    return 'uniform ' + uniform + ';';\n  })\n  .join('\\n')}\nvarying vec2 v_segmentStart;\nvarying vec2 v_segmentEnd;\nvarying float v_angleStart;\nvarying float v_angleEnd;\nvarying float v_width;\nvarying vec4 v_prop_hitColor;\nvarying float v_distanceOffsetPx;\n${this.varyings_\n  .map(function (varying) {\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\n  })\n  .join('\\n')}\n${this.fragmentShaderFunctions_.join('\\n')}\n\nvec2 pxToWorld(vec2 pxPos) {\n  vec2 screenPos = 2.0 * pxPos / u_viewportSizePx - 1.0;\n  return (u_screenToWorldMatrix * vec4(screenPos, 0.0, 1.0)).xy;\n}\n\nbool isCap(float joinAngle) {\n  return joinAngle < -0.1;\n}\n\nfloat segmentDistanceField(vec2 point, vec2 start, vec2 end, float width) {\n  vec2 tangent = normalize(end - start);\n  vec2 normal = vec2(-tangent.y, tangent.x);\n  vec2 startToPoint = point - start;\n  return abs(dot(startToPoint, normal)) - width * 0.5;\n}\n\nfloat buttCapDistanceField(vec2 point, vec2 start, vec2 end) {\n  vec2 startToPoint = point - start;\n  vec2 tangent = normalize(end - start);\n  return dot(startToPoint, -tangent);\n}\n\nfloat squareCapDistanceField(vec2 point, vec2 start, vec2 end, float width) {\n  return buttCapDistanceField(point, start, end) - width * 0.5;\n}\n\nfloat roundCapDistanceField(vec2 point, vec2 start, vec2 end, float width) {\n  float onSegment = max(0., 1000. * dot(point - start, end - start)); // this is very high when inside the segment\n  return length(point - start) - width * 0.5 - onSegment;\n}\n\nfloat roundJoinDistanceField(vec2 point, vec2 start, vec2 end, float width) {\n  return roundCapDistanceField(point, start, end, width);\n}\n\nfloat bevelJoinField(vec2 point, vec2 start, vec2 end, float width, float joinAngle) {\n  vec2 startToPoint = point - start;\n  vec2 tangent = normalize(end - start);\n  float c = cos(joinAngle * 0.5);\n  float s = sin(joinAngle * 0.5);\n  float direction = -sign(sin(joinAngle));\n  vec2 bisector = vec2(c * tangent.x - s * tangent.y, s * tangent.x + c * tangent.y);\n  float radius = width * 0.5 * s;\n  return dot(startToPoint, bisector * direction) - radius;\n}\n\nfloat miterJoinDistanceField(vec2 point, vec2 start, vec2 end, float width, float joinAngle) {\n  if (cos(joinAngle) > ${LINESTRING_ANGLE_COSINE_CUTOFF}) { // avoid risking a division by zero\n    return bevelJoinField(point, start, end, width, joinAngle);\n  }\n  float miterLength = 1. / sin(joinAngle * 0.5);\n  float miterLimit = ${this.strokeMiterLimitExpression_};\n  if (miterLength > miterLimit) {\n    return bevelJoinField(point, start, end, width, joinAngle);\n  }\n  return -1000.;\n}\n\nfloat capDistanceField(vec2 point, vec2 start, vec2 end, float width, float capType) {\n   if (capType == ${stringToGlsl('butt')}) {\n    return buttCapDistanceField(point, start, end);\n  } else if (capType == ${stringToGlsl('square')}) {\n    return squareCapDistanceField(point, start, end, width);\n  }\n  return roundCapDistanceField(point, start, end, width);\n}\n\nfloat joinDistanceField(vec2 point, vec2 start, vec2 end, float width, float joinAngle, float joinType) {\n  if (joinType == ${stringToGlsl('bevel')}) {\n    return bevelJoinField(point, start, end, width, joinAngle);\n  } else if (joinType == ${stringToGlsl('miter')}) {\n    return miterJoinDistanceField(point, start, end, width, joinAngle);\n  }\n  return roundJoinDistanceField(point, start, end, width);\n}\n\nfloat computeSegmentPointDistance(vec2 point, vec2 start, vec2 end, float width, float joinAngle, float capType, float joinType) {\n  if (isCap(joinAngle)) {\n    return capDistanceField(point, start, end, width, capType);\n  }\n  return joinDistanceField(point, start, end, width, joinAngle, joinType);\n}\n\nvoid main(void) {\n  vec2 currentPoint = gl_FragCoord.xy / u_pixelRatio;\n  #ifdef GL_FRAGMENT_PRECISION_HIGH\n  vec2 worldPos = pxToWorld(currentPoint);\n  if (\n    abs(u_renderExtent[0] - u_renderExtent[2]) > 0.0 && (\n      worldPos[0] < u_renderExtent[0] ||\n      worldPos[1] < u_renderExtent[1] ||\n      worldPos[0] > u_renderExtent[2] ||\n      worldPos[1] > u_renderExtent[3]\n    )\n  ) {\n    discard;\n  }\n  #endif\n  if (${this.discardExpression_}) { discard; }\n\n  float segmentLength = length(v_segmentEnd - v_segmentStart);\n  vec2 segmentTangent = (v_segmentEnd - v_segmentStart) / segmentLength;\n  vec2 segmentNormal = vec2(-segmentTangent.y, segmentTangent.x);\n  vec2 startToPoint = currentPoint - v_segmentStart;\n  float currentLengthPx = max(0., min(dot(segmentTangent, startToPoint), segmentLength)) + v_distanceOffsetPx; \n  float currentRadiusPx = abs(dot(segmentNormal, startToPoint));\n  float currentRadiusRatio = dot(segmentNormal, startToPoint) * 2. / v_width;\n  vec4 color = ${this.strokeColorExpression_} * u_globalAlpha;\n  float capType = ${this.strokeCapExpression_};\n  float joinType = ${this.strokeJoinExpression_};\n  float segmentStartDistance = computeSegmentPointDistance(currentPoint, v_segmentStart, v_segmentEnd, v_width, v_angleStart, capType, joinType);\n  float segmentEndDistance = computeSegmentPointDistance(currentPoint, v_segmentEnd, v_segmentStart, v_width, v_angleEnd, capType, joinType);\n  float distance = max(\n    segmentDistanceField(currentPoint, v_segmentStart, v_segmentEnd, v_width),\n    max(segmentStartDistance, segmentEndDistance)\n  );\n  distance = max(distance, ${this.strokeDistanceFieldExpression_});\n  gl_FragColor = color * smoothstep(0.5, -0.5, distance);\n  if (u_hitDetection > 0) {\n    if (gl_FragColor.a < 0.1) { discard; };\n    gl_FragColor = v_prop_hitColor;\n  }\n}`;\n  }\n\n  /**\n   * Generates a fill vertex shader from the builder parameters\n   *\n   * @return {string|null} The full shader as a string; null if no color specified\n   */\n  getFillVertexShader() {\n    if (!this.hasFill_) {\n      return null;\n    }\n\n    return `${COMMON_HEADER}\n${this.uniforms_\n  .map(function (uniform) {\n    return 'uniform ' + uniform + ';';\n  })\n  .join('\\n')}\nattribute vec2 a_position;\nattribute vec4 a_prop_hitColor;\n${this.attributes_\n  .map(function (attribute) {\n    return 'attribute ' + attribute + ';';\n  })\n  .join('\\n')}\nvarying vec4 v_prop_hitColor;\n${this.varyings_\n  .map(function (varying) {\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\n  })\n  .join('\\n')}\n${this.vertexShaderFunctions_.join('\\n')}\nvoid main(void) {\n  gl_Position = u_projectionMatrix * vec4(a_position, u_depth, 1.0);\n  v_prop_hitColor = a_prop_hitColor;\n${this.varyings_\n  .map(function (varying) {\n    return '  ' + varying.name + ' = ' + varying.expression + ';';\n  })\n  .join('\\n')}\n}`;\n  }\n\n  /**\n   * Generates a fill fragment shader from the builder parameters\n   * @return {string|null} The full shader as a string; null if no color specified\n   */\n  getFillFragmentShader() {\n    if (!this.hasFill_) {\n      return null;\n    }\n\n    return `${COMMON_HEADER}\n${this.uniforms_\n  .map(function (uniform) {\n    return 'uniform ' + uniform + ';';\n  })\n  .join('\\n')}\nvarying vec4 v_prop_hitColor;\n${this.varyings_\n  .map(function (varying) {\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\n  })\n  .join('\\n')}\n${this.fragmentShaderFunctions_.join('\\n')}\nvec2 pxToWorld(vec2 pxPos) {\n  vec2 screenPos = 2.0 * pxPos / u_viewportSizePx - 1.0;\n  return (u_screenToWorldMatrix * vec4(screenPos, 0.0, 1.0)).xy;\n}\n\nvec2 worldToPx(vec2 worldPos) {\n  vec4 screenPos = u_projectionMatrix * vec4(worldPos, 0.0, 1.0);\n  return (0.5 * screenPos.xy + 0.5) * u_viewportSizePx;\n}\n\nvoid main(void) {\n  vec2 pxPos = gl_FragCoord.xy / u_pixelRatio;\n  vec2 pxOrigin = worldToPx(u_patternOrigin);\n  #ifdef GL_FRAGMENT_PRECISION_HIGH\n  vec2 worldPos = pxToWorld(pxPos);\n  if (\n    abs(u_renderExtent[0] - u_renderExtent[2]) > 0.0 && (\n      worldPos[0] < u_renderExtent[0] ||\n      worldPos[1] < u_renderExtent[1] ||\n      worldPos[0] > u_renderExtent[2] ||\n      worldPos[1] > u_renderExtent[3]\n    )\n  ) {\n    discard;\n  }\n  #endif\n  if (${this.discardExpression_}) { discard; }\n  gl_FragColor = ${this.fillColorExpression_} * u_globalAlpha;\n  if (u_hitDetection > 0) {\n    if (gl_FragColor.a < 0.1) { discard; };\n    gl_FragColor = v_prop_hitColor;\n  }\n}`;\n  }\n}\n","/**\n * @module ol/webgl/BaseTileRepresentation\n */\n\nimport EventTarget from '../events/Target.js';\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport TileState from '../TileState.js';\nimport {abstract} from '../util.js';\n\n/**\n * @typedef {import(\"../Tile.js\").default} BaseTileType\n */\n\n/**\n * @template {BaseTileType} TileType\n * @typedef {Object} TileRepresentationOptions\n * @property {TileType} tile The tile.\n * @property {import(\"../tilegrid/TileGrid.js\").default} grid Tile grid.\n * @property {import(\"../webgl/Helper.js\").default} helper WebGL helper.\n * @property {number} [gutter=0] The size in pixels of the gutter around image tiles to ignore.\n */\n\n/**\n * @classdesc\n * Base class for representing a tile in a webgl context\n * @template {import(\"../Tile.js\").default} TileType\n * @abstract\n */\nclass BaseTileRepresentation extends EventTarget {\n  /**\n   * @param {TileRepresentationOptions<TileType>} options The tile representation options.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * @type {TileType}\n     */\n    this.tile;\n    this.handleTileChange_ = this.handleTileChange_.bind(this);\n\n    /**\n     * @type {number}\n     * @protected\n     */\n    this.gutter_ = options.gutter || 0;\n\n    /**\n     * @type {import(\"../webgl/Helper.js\").default}\n     * @protected\n     */\n    this.helper_ = options.helper;\n\n    this.loaded = false;\n    this.ready = false;\n  }\n\n  /**\n   * @param {TileType} tile Tile.\n   */\n  setTile(tile) {\n    if (tile !== this.tile) {\n      if (this.tile) {\n        this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n      }\n      this.tile = tile;\n      this.loaded = tile.getState() === TileState.LOADED;\n      if (this.loaded) {\n        this.uploadTile();\n      } else {\n        if (tile instanceof ImageTile) {\n          const image = tile.getImage();\n          if (image instanceof Image && !image.crossOrigin) {\n            image.crossOrigin = 'anonymous';\n          }\n        }\n        tile.addEventListener(EventType.CHANGE, this.handleTileChange_);\n      }\n    }\n  }\n\n  /**\n   * @abstract\n   * @protected\n   */\n  uploadTile() {\n    abstract();\n  }\n\n  setReady() {\n    this.ready = true;\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  handleTileChange_() {\n    if (this.tile.getState() === TileState.LOADED) {\n      this.loaded = true;\n      this.uploadTile();\n    }\n  }\n\n  disposeInternal() {\n    this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n  }\n}\n\nexport default BaseTileRepresentation;\n","/**\n * @module ol/webgl/TileTexture\n */\n\nimport BaseTileRepresentation from './BaseTileRepresentation.js';\nimport DataTile, {asArrayLike, asImageLike} from '../DataTile.js';\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport WebGLArrayBuffer from './Buffer.js';\nimport {ARRAY_BUFFER, STATIC_DRAW} from '../webgl.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {toSize} from '../size.js';\n\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction bindAndConfigure(gl, texture, interpolate) {\n  const resampleFilter = interpolate ? gl.LINEAR : gl.NEAREST;\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, resampleFilter);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, resampleFilter);\n}\n\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {import(\"../DataTile.js\").ImageLike} image The image.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction uploadImageTexture(gl, texture, image, interpolate) {\n  bindAndConfigure(gl, texture, interpolate);\n\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n}\n\n/**\n * @param {import(\"./Helper.js\").default} helper The WebGL helper.\n * @param {WebGLTexture} texture The texture.\n * @param {import(\"../DataTile.js\").ArrayLike} data The pixel data.\n * @param {import(\"../size.js\").Size} size The pixel size.\n * @param {number} bandCount The band count.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction uploadDataTexture(\n  helper,\n  texture,\n  data,\n  size,\n  bandCount,\n  interpolate,\n) {\n  const gl = helper.getGL();\n  let textureType;\n  let canInterpolate;\n  if (data instanceof Float32Array) {\n    textureType = gl.FLOAT;\n    helper.getExtension('OES_texture_float');\n    const extension = helper.getExtension('OES_texture_float_linear');\n    canInterpolate = extension !== null;\n  } else {\n    textureType = gl.UNSIGNED_BYTE;\n    canInterpolate = true;\n  }\n  bindAndConfigure(gl, texture, interpolate && canInterpolate);\n\n  const bytesPerRow = data.byteLength / size[1];\n  let unpackAlignment = 1;\n  if (bytesPerRow % 8 === 0) {\n    unpackAlignment = 8;\n  } else if (bytesPerRow % 4 === 0) {\n    unpackAlignment = 4;\n  } else if (bytesPerRow % 2 === 0) {\n    unpackAlignment = 2;\n  }\n\n  let format;\n  switch (bandCount) {\n    case 1: {\n      format = gl.LUMINANCE;\n      break;\n    }\n    case 2: {\n      format = gl.LUMINANCE_ALPHA;\n      break;\n    }\n    case 3: {\n      format = gl.RGB;\n      break;\n    }\n    case 4: {\n      format = gl.RGBA;\n      break;\n    }\n    default: {\n      throw new Error(`Unsupported number of bands: ${bandCount}`);\n    }\n  }\n\n  const oldUnpackAlignment = gl.getParameter(gl.UNPACK_ALIGNMENT);\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, unpackAlignment);\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    0,\n    format,\n    size[0],\n    size[1],\n    0,\n    format,\n    textureType,\n    data,\n  );\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, oldUnpackAlignment);\n}\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet pixelContext = null;\n\nfunction createPixelContext() {\n  pixelContext = createCanvasContext2D(1, 1, undefined, {\n    willReadFrequently: true,\n  });\n}\n\n/**\n * @typedef {import(\"../DataTile.js\").default|ImageTile|ReprojTile} TileType\n */\n\n/**\n * @extends {BaseTileRepresentation<TileType>}\n */\nclass TileTexture extends BaseTileRepresentation {\n  /**\n   * @param {import(\"./BaseTileRepresentation.js\").TileRepresentationOptions<TileType>} options The tile texture options.\n   */\n  constructor(options) {\n    super(options);\n\n    /**\n     * @type {Array<WebGLTexture>}\n     */\n    this.textures = [];\n\n    /**\n     * @type {import(\"../size.js\").Size}\n     * @private\n     */\n    this.renderSize_ = toSize(\n      options.grid.getTileSize(options.tile.tileCoord[0]),\n    );\n\n    /**\n     * @type {number}\n     */\n    this.bandCount = NaN;\n\n    const coords = new WebGLArrayBuffer(ARRAY_BUFFER, STATIC_DRAW);\n    coords.fromArray([\n      0, // P0\n      1,\n      1, // P1\n      1,\n      1, // P2\n      0,\n      0, // P3\n      0,\n    ]);\n    this.helper_.flushBufferData(coords);\n\n    /**\n     * @type {WebGLArrayBuffer}\n     */\n    this.coords = coords;\n\n    this.setTile(options.tile);\n  }\n\n  uploadTile() {\n    const helper = this.helper_;\n    const gl = helper.getGL();\n    const tile = this.tile;\n\n    this.textures.length = 0;\n\n    /**\n     * @type {import(\"../DataTile.js\").Data}\n     */\n    let data;\n\n    if (tile instanceof ImageTile || tile instanceof ReprojTile) {\n      data = tile.getImage();\n    } else {\n      data = tile.getData();\n    }\n\n    const image = asImageLike(data);\n    if (image) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n      this.bandCount = 4;\n      uploadImageTexture(gl, texture, image, tile.interpolate);\n      this.setReady();\n      return;\n    }\n\n    data = asArrayLike(data);\n\n    const sourceTileSize = /** @type {DataTile} */ (tile).getSize();\n    const pixelSize = [\n      sourceTileSize[0] + 2 * this.gutter_,\n      sourceTileSize[1] + 2 * this.gutter_,\n    ];\n    const isFloat = data instanceof Float32Array;\n    const pixelCount = pixelSize[0] * pixelSize[1];\n    const DataType = isFloat ? Float32Array : Uint8Array;\n    const bytesPerElement = DataType.BYTES_PER_ELEMENT;\n    const bytesPerRow = data.byteLength / pixelSize[1];\n\n    this.bandCount = Math.floor(bytesPerRow / bytesPerElement / pixelSize[0]);\n    const textureCount = Math.ceil(this.bandCount / 4);\n\n    if (textureCount === 1) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n      uploadDataTexture(\n        helper,\n        texture,\n        data,\n        pixelSize,\n        this.bandCount,\n        tile.interpolate,\n      );\n      this.setReady();\n      return;\n    }\n\n    const textureDataArrays = new Array(textureCount);\n    for (let textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n\n      const bandCount =\n        textureIndex < textureCount - 1 ? 4 : ((this.bandCount - 1) % 4) + 1;\n      textureDataArrays[textureIndex] = new DataType(pixelCount * bandCount);\n    }\n\n    let dataIndex = 0;\n    let rowOffset = 0;\n    const colCount = pixelSize[0] * this.bandCount;\n    for (let rowIndex = 0; rowIndex < pixelSize[1]; ++rowIndex) {\n      for (let colIndex = 0; colIndex < colCount; ++colIndex) {\n        const dataValue = data[rowOffset + colIndex];\n\n        const pixelIndex = Math.floor(dataIndex / this.bandCount);\n        const bandIndex = colIndex % this.bandCount;\n        const textureIndex = Math.floor(bandIndex / 4);\n        const textureData = textureDataArrays[textureIndex];\n        const bandCount = textureData.length / pixelCount;\n        const textureBandIndex = bandIndex % 4;\n        textureData[pixelIndex * bandCount + textureBandIndex] = dataValue;\n\n        ++dataIndex;\n      }\n      rowOffset += bytesPerRow / bytesPerElement;\n    }\n\n    for (let textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n      const texture = this.textures[textureIndex];\n      const textureData = textureDataArrays[textureIndex];\n      const bandCount = textureData.length / pixelCount;\n      uploadDataTexture(\n        helper,\n        texture,\n        textureData,\n        pixelSize,\n        bandCount,\n        tile.interpolate,\n      );\n    }\n\n    this.setReady();\n  }\n\n  disposeInternal() {\n    const gl = this.helper_.getGL();\n    this.helper_.deleteBuffer(this.coords);\n    for (let i = 0; i < this.textures.length; ++i) {\n      gl.deleteTexture(this.textures[i]);\n    }\n    this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n  }\n\n  /**\n   * @param {import(\"../DataTile.js\").ImageLike} image The image.\n   * @param {number} renderCol The column index (in rendered tile space).\n   * @param {number} renderRow The row index (in rendered tile space).\n   * @return {Uint8ClampedArray|null} The data.\n   * @private\n   */\n  getImagePixelData_(image, renderCol, renderRow) {\n    const gutter = this.gutter_;\n    const renderWidth = this.renderSize_[0];\n    const renderHeight = this.renderSize_[1];\n\n    if (!pixelContext) {\n      createPixelContext();\n    }\n    pixelContext.clearRect(0, 0, 1, 1);\n\n    const sourceWidth = image.width;\n    const sourceHeight = image.height;\n\n    const sourceWidthWithoutGutter = sourceWidth - 2 * gutter;\n    const sourceHeightWithoutGutter = sourceHeight - 2 * gutter;\n\n    const sourceCol =\n      gutter + Math.floor(sourceWidthWithoutGutter * (renderCol / renderWidth));\n\n    const sourceRow =\n      gutter +\n      Math.floor(sourceHeightWithoutGutter * (renderRow / renderHeight));\n\n    let data;\n    try {\n      pixelContext.drawImage(image, sourceCol, sourceRow, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      pixelContext = null;\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * @param {import(\"../DataTile.js\").ArrayLike} data The data.\n   * @param {import(\"../size.js\").Size} sourceSize The size.\n   * @param {number} renderCol The column index (in rendered tile space).\n   * @param {number} renderRow The row index (in rendered tile space).\n   * @return {import(\"../DataTile.js\").ArrayLike|null} The data.\n   * @private\n   */\n  getArrayPixelData_(data, sourceSize, renderCol, renderRow) {\n    const gutter = this.gutter_;\n    const renderWidth = this.renderSize_[0];\n    const renderHeight = this.renderSize_[1];\n\n    const sourceWidthWithoutGutter = sourceSize[0];\n    const sourceHeightWithoutGutter = sourceSize[1];\n    const sourceWidth = sourceWidthWithoutGutter + 2 * gutter;\n    const sourceHeight = sourceHeightWithoutGutter + 2 * gutter;\n\n    const sourceCol =\n      gutter + Math.floor(sourceWidthWithoutGutter * (renderCol / renderWidth));\n\n    const sourceRow =\n      gutter +\n      Math.floor(sourceHeightWithoutGutter * (renderRow / renderHeight));\n\n    if (data instanceof DataView) {\n      const bytesPerPixel = data.byteLength / (sourceWidth * sourceHeight);\n      const offset = bytesPerPixel * (sourceRow * sourceWidth + sourceCol);\n      const buffer = data.buffer.slice(offset, offset + bytesPerPixel);\n      return new DataView(buffer);\n    }\n\n    const offset = this.bandCount * (sourceRow * sourceWidth + sourceCol);\n    return data.slice(offset, offset + this.bandCount);\n  }\n\n  /**\n   * Get data for a pixel.  If the tile is not loaded, null is returned.\n   * @param {number} renderCol The column index (in rendered tile space).\n   * @param {number} renderRow The row index (in rendered tile space).\n   * @return {import(\"../DataTile.js\").ArrayLike|null} The data.\n   */\n  getPixelData(renderCol, renderRow) {\n    if (!this.loaded) {\n      return null;\n    }\n\n    if (this.tile instanceof DataTile) {\n      const data = this.tile.getData();\n      const arrayData = asArrayLike(data);\n      if (arrayData) {\n        const sourceSize = this.tile.getSize();\n        return this.getArrayPixelData_(\n          arrayData,\n          sourceSize,\n          renderCol,\n          renderRow,\n        );\n      }\n      return this.getImagePixelData_(asImageLike(data), renderCol, renderRow);\n    }\n\n    return this.getImagePixelData_(this.tile.getImage(), renderCol, renderRow);\n  }\n}\n\nexport default TileTexture;\n","\n        export function create() {\n          const source = \"const e=\\\"GENERATE_POLYGON_BUFFERS\\\",t=\\\"GENERATE_POINT_BUFFERS\\\",n=\\\"GENERATE_LINE_STRING_BUFFERS\\\";function r(e,t){const n=t[0],r=t[1];return t[0]=e[0]*n+e[2]*r+e[4],t[1]=e[1]*n+e[3]*r+e[5],t}function x(e,t){const n=(r=t)[0]*r[3]-r[1]*r[2];var r;!function(e,t){if(!e)throw new Error(t)}(0!==n,\\\"Transformation matrix cannot be inverted\\\");const x=t[0],i=t[1],u=t[2],o=t[3],f=t[4],s=t[5];return e[0]=o/n,e[1]=-i/n,e[2]=-u/n,e[3]=x/n,e[4]=(u*s-o*f)/n,e[5]=-(x*s-i*f)/n,e}function i(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,\\\"default\\\")?e.default:e}new Array(6);var u={exports:{}};function o(e,t,n){n=n||2;var r,x,i,u,o,s,l,v=t&&t.length,h=v?t[0]*n:e.length,c=f(e,0,h,n,!0),g=[];if(!c||c.next===c.prev)return g;if(v&&(c=function(e,t,n,r){var x,i,u,o=[];for(x=0,i=t.length;x<i;x++)(u=f(e,t[x]*r,x<i-1?t[x+1]*r:e.length,r,!1))===u.next&&(u.steiner=!0),o.push(d(u));for(o.sort(p),x=0;x<o.length;x++)n=y(o[x],n);return n}(e,t,c,n)),e.length>80*n){r=i=e[0],x=u=e[1];for(var b=n;b<h;b+=n)(o=e[b])<r&&(r=o),(s=e[b+1])<x&&(x=s),o>i&&(i=o),s>u&&(u=s);l=0!==(l=Math.max(i-r,u-x))?32767/l:0}return a(c,g,n,r,x,l,0),g}function f(e,t,n,r,x){var i,u;if(x===O(e,t,n,r)>0)for(i=t;i<n;i+=r)u=P(i,e[i],e[i+1],u);else for(i=n-r;i>=t;i-=r)u=P(i,e[i],e[i+1],u);return u&&m(u,u.next)&&(B(u),u=u.next),u}function s(e,t){if(!e)return e;t||(t=e);var n,r=e;do{if(n=!1,r.steiner||!m(r,r.next)&&0!==w(r.prev,r,r.next))r=r.next;else{if(B(r),(r=t=r.prev)===r.next)break;n=!0}}while(n||r!==t);return t}function a(e,t,n,r,x,i,u){if(e){!u&&i&&function(e,t,n,r){var x=e;do{0===x.z&&(x.z=b(x.x,x.y,t,n,r)),x.prevZ=x.prev,x.nextZ=x.next,x=x.next}while(x!==e);x.prevZ.nextZ=null,x.prevZ=null,function(e){var t,n,r,x,i,u,o,f,s=1;do{for(n=e,e=null,i=null,u=0;n;){for(u++,r=n,o=0,t=0;t<s&&(o++,r=r.nextZ);t++);for(f=s;o>0||f>0&&r;)0!==o&&(0===f||!r||n.z<=r.z)?(x=n,n=n.nextZ,o--):(x=r,r=r.nextZ,f--),i?i.nextZ=x:e=x,x.prevZ=i,i=x;n=r}i.nextZ=null,s*=2}while(u>1)}(x)}(e,r,x,i);for(var o,f,p=e;e.prev!==e.next;)if(o=e.prev,f=e.next,i?v(e,r,x,i):l(e))t.push(o.i/n|0),t.push(e.i/n|0),t.push(f.i/n|0),B(e),e=f.next,p=f.next;else if((e=f)===p){u?1===u?a(e=h(s(e),t,n),t,n,r,x,i,2):2===u&&c(e,t,n,r,x,i):a(s(e),t,n,r,x,i,1);break}}}function l(e){var t=e.prev,n=e,r=e.next;if(w(t,n,r)>=0)return!1;for(var x=t.x,i=n.x,u=r.x,o=t.y,f=n.y,s=r.y,a=x<i?x<u?x:u:i<u?i:u,l=o<f?o<s?o:s:f<s?f:s,v=x>i?x>u?x:u:i>u?i:u,h=o>f?o>s?o:s:f>s?f:s,c=r.next;c!==t;){if(c.x>=a&&c.x<=v&&c.y>=l&&c.y<=h&&M(x,o,i,f,u,s,c.x,c.y)&&w(c.prev,c,c.next)>=0)return!1;c=c.next}return!0}function v(e,t,n,r){var x=e.prev,i=e,u=e.next;if(w(x,i,u)>=0)return!1;for(var o=x.x,f=i.x,s=u.x,a=x.y,l=i.y,v=u.y,h=o<f?o<s?o:s:f<s?f:s,c=a<l?a<v?a:v:l<v?l:v,p=o>f?o>s?o:s:f>s?f:s,y=a>l?a>v?a:v:l>v?l:v,g=b(h,c,t,n,r),d=b(p,y,t,n,r),Z=e.prevZ,m=e.nextZ;Z&&Z.z>=g&&m&&m.z<=d;){if(Z.x>=h&&Z.x<=p&&Z.y>=c&&Z.y<=y&&Z!==x&&Z!==u&&M(o,a,f,l,s,v,Z.x,Z.y)&&w(Z.prev,Z,Z.next)>=0)return!1;if(Z=Z.prevZ,m.x>=h&&m.x<=p&&m.y>=c&&m.y<=y&&m!==x&&m!==u&&M(o,a,f,l,s,v,m.x,m.y)&&w(m.prev,m,m.next)>=0)return!1;m=m.nextZ}for(;Z&&Z.z>=g;){if(Z.x>=h&&Z.x<=p&&Z.y>=c&&Z.y<=y&&Z!==x&&Z!==u&&M(o,a,f,l,s,v,Z.x,Z.y)&&w(Z.prev,Z,Z.next)>=0)return!1;Z=Z.prevZ}for(;m&&m.z<=d;){if(m.x>=h&&m.x<=p&&m.y>=c&&m.y<=y&&m!==x&&m!==u&&M(o,a,f,l,s,v,m.x,m.y)&&w(m.prev,m,m.next)>=0)return!1;m=m.nextZ}return!0}function h(e,t,n){var r=e;do{var x=r.prev,i=r.next.next;!m(x,i)&&A(x,r,r.next,i)&&z(x,i)&&z(i,x)&&(t.push(x.i/n|0),t.push(r.i/n|0),t.push(i.i/n|0),B(r),B(r.next),r=e=i),r=r.next}while(r!==e);return s(r)}function c(e,t,n,r,x,i){var u=e;do{for(var o=u.next.next;o!==u.prev;){if(u.i!==o.i&&Z(u,o)){var f=F(u,o);return u=s(u,u.next),f=s(f,f.next),a(u,t,n,r,x,i,0),void a(f,t,n,r,x,i,0)}o=o.next}u=u.next}while(u!==e)}function p(e,t){return e.x-t.x}function y(e,t){var n=function(e,t){var n,r=t,x=e.x,i=e.y,u=-1/0;do{if(i<=r.y&&i>=r.next.y&&r.next.y!==r.y){var o=r.x+(i-r.y)*(r.next.x-r.x)/(r.next.y-r.y);if(o<=x&&o>u&&(u=o,n=r.x<r.next.x?r:r.next,o===x))return n}r=r.next}while(r!==t);if(!n)return null;var f,s=n,a=n.x,l=n.y,v=1/0;r=n;do{x>=r.x&&r.x>=a&&x!==r.x&&M(i<l?x:u,i,a,l,i<l?u:x,i,r.x,r.y)&&(f=Math.abs(i-r.y)/(x-r.x),z(r,e)&&(f<v||f===v&&(r.x>n.x||r.x===n.x&&g(n,r)))&&(n=r,v=f)),r=r.next}while(r!==s);return n}(e,t);if(!n)return t;var r=F(n,e);return s(r,r.next),s(n,n.next)}function g(e,t){return w(e.prev,e,t.prev)<0&&w(t.next,e,e.next)<0}function b(e,t,n,r,x){return(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=(e-n)*x|0)|e<<8))|e<<4))|e<<2))|e<<1))|(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=(t-r)*x|0)|t<<8))|t<<4))|t<<2))|t<<1))<<1}function d(e){var t=e,n=e;do{(t.x<n.x||t.x===n.x&&t.y<n.y)&&(n=t),t=t.next}while(t!==e);return n}function M(e,t,n,r,x,i,u,o){return(x-u)*(t-o)>=(e-u)*(i-o)&&(e-u)*(r-o)>=(n-u)*(t-o)&&(n-u)*(i-o)>=(x-u)*(r-o)}function Z(e,t){return e.next.i!==t.i&&e.prev.i!==t.i&&!function(e,t){var n=e;do{if(n.i!==e.i&&n.next.i!==e.i&&n.i!==t.i&&n.next.i!==t.i&&A(n,n.next,e,t))return!0;n=n.next}while(n!==e);return!1}(e,t)&&(z(e,t)&&z(t,e)&&function(e,t){var n=e,r=!1,x=(e.x+t.x)/2,i=(e.y+t.y)/2;do{n.y>i!=n.next.y>i&&n.next.y!==n.y&&x<(n.next.x-n.x)*(i-n.y)/(n.next.y-n.y)+n.x&&(r=!r),n=n.next}while(n!==e);return r}(e,t)&&(w(e.prev,e,t.prev)||w(e,t.prev,t))||m(e,t)&&w(e.prev,e,e.next)>0&&w(t.prev,t,t.next)>0)}function w(e,t,n){return(t.y-e.y)*(n.x-t.x)-(t.x-e.x)*(n.y-t.y)}function m(e,t){return e.x===t.x&&e.y===t.y}function A(e,t,n,r){var x=I(w(e,t,n)),i=I(w(e,t,r)),u=I(w(n,r,e)),o=I(w(n,r,t));return x!==i&&u!==o||(!(0!==x||!E(e,n,t))||(!(0!==i||!E(e,r,t))||(!(0!==u||!E(n,e,r))||!(0!==o||!E(n,t,r)))))}function E(e,t,n){return t.x<=Math.max(e.x,n.x)&&t.x>=Math.min(e.x,n.x)&&t.y<=Math.max(e.y,n.y)&&t.y>=Math.min(e.y,n.y)}function I(e){return e>0?1:e<0?-1:0}function z(e,t){return w(e.prev,e,e.next)<0?w(e,t,e.next)>=0&&w(e,e.prev,t)>=0:w(e,t,e.prev)<0||w(e,e.next,t)<0}function F(e,t){var n=new _(e.i,e.x,e.y),r=new _(t.i,t.x,t.y),x=e.next,i=t.prev;return e.next=t,t.prev=e,n.next=x,x.prev=n,r.next=n,n.prev=r,i.next=r,r.prev=i,r}function P(e,t,n,r){var x=new _(e,t,n);return r?(x.next=r.next,x.prev=r,r.next.prev=x,r.next=x):(x.prev=x,x.next=x),x}function B(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function _(e,t,n){this.i=e,this.x=t,this.y=n,this.prev=null,this.next=null,this.z=0,this.prevZ=null,this.nextZ=null,this.steiner=!1}function O(e,t,n,r){for(var x=0,i=t,u=n-r;i<n;i+=r)x+=(e[u]-e[i])*(e[i+1]+e[u+1]),u=i;return x}u.exports=o,u.exports.default=o,o.deviation=function(e,t,n,r){var x=t&&t.length,i=x?t[0]*n:e.length,u=Math.abs(O(e,0,i,n));if(x)for(var o=0,f=t.length;o<f;o++){var s=t[o]*n,a=o<f-1?t[o+1]*n:e.length;u-=Math.abs(O(e,s,a,n))}var l=0;for(o=0;o<r.length;o+=3){var v=r[o]*n,h=r[o+1]*n,c=r[o+2]*n;l+=Math.abs((e[v]-e[c])*(e[h+1]-e[v+1])-(e[v]-e[h])*(e[c+1]-e[v+1]))}return 0===u&&0===l?0:Math.abs((l-u)/u)},o.flatten=function(e){for(var t=e[0][0].length,n={vertices:[],holes:[],dimensions:t},r=0,x=0;x<e.length;x++){for(var i=0;i<e[x].length;i++)for(var u=0;u<t;u++)n.vertices.push(e[x][i][u]);x>0&&(r+=e[x-1].length,n.holes.push(r))}return n};var N=i(u.exports);const R=[],S={vertexPosition:0,indexPosition:0};function T(e,t,n,r,x){e[t+0]=n,e[t+1]=r,e[t+2]=x}function U(e,t,n,r,x,i){const u=3+x,o=e[t+0],f=e[t+1],s=R;s.length=x;for(let n=0;n<s.length;n++)s[n]=e[t+2+n];let a=i?i.vertexPosition:0,l=i?i.indexPosition:0;const v=a/u;return T(n,a,o,f,0),s.length&&n.set(s,a+3),a+=u,T(n,a,o,f,1),s.length&&n.set(s,a+3),a+=u,T(n,a,o,f,2),s.length&&n.set(s,a+3),a+=u,T(n,a,o,f,3),s.length&&n.set(s,a+3),a+=u,r[l++]=v,r[l++]=v+1,r[l++]=v+3,r[l++]=v+1,r[l++]=v+2,r[l++]=v+3,S.vertexPosition=a,S.indexPosition=l,S}function k(e,t,n,x,i,u,o,f,s,a,l){const v=8+f.length,h=u.length/v,c=[e[t+0],e[t+1]],p=[e[n],e[n+1]],y=r(s,[...c]),g=r(s,[...p]);function b(e,t,n){const r=Math.sqrt((t[0]-e[0])*(t[0]-e[0])+(t[1]-e[1])*(t[1]-e[1])),x=[(t[0]-e[0])/r,(t[1]-e[1])/r],i=[-x[1],x[0]],u=Math.sqrt((n[0]-e[0])*(n[0]-e[0])+(n[1]-e[1])*(n[1]-e[1])),o=[(n[0]-e[0])/u,(n[1]-e[1])/u],f=0===r||0===u?0:Math.acos((s=o[0]*x[0]+o[1]*x[1],a=-1,l=1,Math.min(Math.max(s,a),l)));var s,a,l;return o[0]*i[0]+o[1]*i[1]>0?f:2*Math.PI-f}let d=-1,M=-1,Z=l;const w=null!==i;if(null!==x){d=b(y,g,r(s,[...[e[x],e[x+1]]])),Math.cos(d)<=.985&&(Z+=Math.tan((d-Math.PI)/2))}if(w){M=b(g,y,r(s,[...[e[i],e[i+1]]])),Math.cos(M)<=.985&&(Z+=Math.tan((Math.PI-M)/2))}function m(e,t){return 0===t?1e4*e:Math.sign(t)*(1e4*e+Math.abs(t))}return u.push(c[0],c[1],p[0],p[1],d,M,a,m(0,l)),u.push(...f),u.push(c[0],c[1],p[0],p[1],d,M,a,m(1,l)),u.push(...f),u.push(c[0],c[1],p[0],p[1],d,M,a,m(2,l)),u.push(...f),u.push(c[0],c[1],p[0],p[1],d,M,a,m(3,l)),u.push(...f),o.push(h,h+1,h+2,h+1,h+3,h+2),{length:a+Math.sqrt((g[0]-y[0])*(g[0]-y[0])+(g[1]-y[1])*(g[1]-y[1])),angle:Z}}function G(e,t,n,r,x){const i=2+x;let u=t;const o=e.slice(u,u+x);u+=x;const f=e[u++];let s=0;const a=new Array(f-1);for(let t=0;t<f;t++)s+=e[u++],t<f-1&&(a[t]=s);const l=e.slice(u,u+2*s),v=N(l,a,2);for(let e=0;e<v.length;e++)r.push(v[e]+n.length/i);for(let e=0;e<l.length;e+=2)n.push(l[e],l[e+1],...o);return u+2*s}const j=self;j.onmessage=r=>{const i=r.data;switch(i.type){case t:{const e=3,t=2,n=i.customAttributesSize,r=t+n,x=new Float32Array(i.renderInstructions),u=x.length/r,o=4*u*(n+e),f=new Uint32Array(6*u),s=new Float32Array(o);let a;for(let e=0;e<x.length;e+=r)a=U(x,e,s,f,n,a);const l=Object.assign({vertexBuffer:s.buffer,indexBuffer:f.buffer,renderInstructions:x.buffer},i);j.postMessage(l,[s.buffer,f.buffer,x.buffer]);break}case n:{const e=[],t=[],n=i.customAttributesSize,r=2,u=new Float32Array(i.renderInstructions);let o=0;const f=[1,0,0,1,0,0];let s,a;for(x(f,i.renderInstructionsTransform);o<u.length;){a=Array.from(u.slice(o,o+n)),o+=n,s=u[o++];const x=o,i=o+(s-1)*r,l=u[x]===u[i]&&u[x+1]===u[i+1];let v=0,h=0;for(let n=0;n<s-1;n++){let c=null;n>0?c=o+(n-1)*r:l&&(c=i-r);let p=null;n<s-2?p=o+(n+2)*r:l&&(p=x+r);const y=k(u,o+n*r,o+(n+1)*r,c,p,e,t,a,f,v,h);v=y.length,h=y.angle}o+=s*r}const l=Uint32Array.from(t),v=Float32Array.from(e),h=Object.assign({vertexBuffer:v.buffer,indexBuffer:l.buffer,renderInstructions:u.buffer},i);j.postMessage(h,[v.buffer,l.buffer,u.buffer]);break}case e:{const e=[],t=[],n=i.customAttributesSize,r=new Float32Array(i.renderInstructions);let x=0;for(;x<r.length;)x=G(r,x,e,t,n);const u=Uint32Array.from(t),o=Float32Array.from(e),f=Object.assign({vertexBuffer:o.buffer,indexBuffer:u.buffer,renderInstructions:r.buffer},i);j.postMessage(f,[o.buffer,u.buffer,r.buffer]);break}}};\";\n          return new Worker(typeof Blob === 'undefined'\n            ? 'data:application/javascript;base64,' + Buffer.from(source, 'binary').toString('base64')\n            : URL.createObjectURL(new Blob([source], {type: 'application/javascript'})));\n        }\n      \n"],"names":["t","i","module","exports","this","r","e","a","h","n","o","s","l","Math","log","f","exp","u","sqrt","m","max","floor","c","min","p","d","x","length","_maxEntries","_minEntries","ceil","clear","indexOf","children","minX","minY","maxX","maxY","leaf","height","pop","push","prototype","all","_all","data","search","toBBox","collides","load","insert","_build","slice","_splitRoot","_insert","remove","splice","_condense","compareMinX","compareMinY","toJSON","fromJSON","apply","pow","_chooseSubtree","_split","_adjustParentBBoxes","_chooseSplitAxis","_chooseSplitIndex","v","M","_allDistMargin","sort","create","fromTransform","mat4","transform","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","STREAM_DRAW","STATIC_DRAW","DYNAMIC_DRAW","UNSIGNED_BYTE","UNSIGNED_SHORT","UNSIGNED_INT","FLOAT","CONTEXT_IDS","getContext","canvas","attributes","Object","assign","preserveDrawingBuffer","antialias","ii","context","BufferUsage","WebGLArrayBuffer","constructor","type","usage","array_","type_","usage_","undefined","ofSize","size","getArrayClassForType","fromArray","array","from","fromArrayBuffer","buffer","getType","getArray","getUsage","getSize","Float32Array","Uint32Array","LOST","RESTORED","DEFAULT_VERTEX_SHADER","DEFAULT_FRAGMENT_SHADER","WebGLPostProcessingPass","options","gl_","webGlContext","gl","scaleRatio_","scaleRatio","renderTargetTexture_","createTexture","renderTargetTextureSize_","frameBuffer_","createFramebuffer","depthBuffer_","createRenderbuffer","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","renderTargetProgram_","createProgram","attachShader","linkProgram","renderTargetVerticesBuffer_","createBuffer","verticesArray","bindBuffer","bufferData","renderTargetAttribLocation_","getAttribLocation","renderTargetUniformLocation_","getUniformLocation","renderTargetOpacityLocation_","renderTargetTextureLocation_","uniforms_","uniforms","keys","forEach","name","value","location","getGL","init","frameState","textureSize","drawingBufferWidth","drawingBufferHeight","bindFramebuffer","FRAMEBUFFER","getFrameBuffer","bindRenderbuffer","RENDERBUFFER","getDepthBuffer","viewport","level","internalFormat","RGBA","border","format","bindTexture","TEXTURE_2D","texImage2D","texParameteri","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","framebufferTexture2D","COLOR_ATTACHMENT0","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","nextPass","preCompose","postCompose","activeTexture","TEXTURE0","canvasId","renderTargets","getContextAttributes","clearColor","clearDepth","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","disable","DEPTH_TEST","enable","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","useProgram","enableVertexAttribArray","vertexAttribPointer","uniform2f","uniform1i","opacity","layerStatesArray","layerIndex","uniform1f","applyUniforms","drawArrays","TRIANGLES","textureSlot","uniform","HTMLCanvasElement","ImageData","texture","width","Uint8Array","Array","isArray","uniform3f","uniform4f","DefaultUniform","PROJECTION_MATRIX","SCREEN_TO_WORLD_MATRIX","TIME","ZOOM","RESOLUTION","ROTATION","VIEWPORT_SIZE_PX","PIXEL_RATIO","HIT_DETECTION","AttributeType","canvasCache","getSharedCanvasCacheKey","key","uniqueCanvasCacheKeyCount","getUniqueCanvasCacheKey","getOrCreateContext","cacheItem","document","createElement","style","position","left","users","releaseCanvas","extension","getExtension","loseContext","WebGLHelper","Disposable","super","boundHandleWebGLContextLost_","handleWebGLContextLost","bind","boundHandleWebGLContextRestored_","handleWebGLContextRestored","canvasCacheKey_","canvasCacheKey","bufferCache_","extensionCache_","currentProgram_","needsToBeRecreated_","addEventListener","ContextEventType","offsetRotateMatrix_","offsetScaleMatrix_","tmpMat4_","uniformLocationsByProgram_","attribLocationsByProgram_","setUniforms","postProcessPasses_","postProcesses","map","shaderCompileErrors_","startTime_","Date","now","addUniforms","canvasCacheKeyMatches","bufferKey","bufferCache","webGlBuffer","flushBufferData","deleteBuffer","buf","bufferCacheEntry","isContextLost","disposeInternal","removeEventListener","prepareDraw","disableAlphaBlend","enableDepth","getCanvas","pixelRatio","depthRange","ZERO","depthFunc","LEQUAL","slot","uniformName","prepareDrawToRenderTarget","renderTarget","getFramebuffer","getDepthbuffer","getTexture","drawElements","start","end","elementType","elementSize","numItems","offsetInBytes","finalizeDraw","applyFrameState","rotation","viewState","setUniformFloatValue","zoom","resolution","setUniformFloatVec2","applyHitDetectionUniform","enabled","loc","HTMLImageElement","WebGLTexture","prevValue","imageReady","complete","setUniformMatrixValue","program","source","shader","getProgram","fragmentShaderSource","vertexShaderSource","getShaderParameter","COMPILE_STATUS","message","getShaderInfoLog","Error","deleteShader","getProgramParameter","LINK_STATUS","getProgramInfoLog","programUid","getAttributeLocation","makeProjectionTransform","center","uniform2fv","setUniformFloatVec4","uniform4fv","uniformMatrix4fv","enableAttributeArray_","attribName","stride","offset","enableAttributes","computeAttributesStride","attr","getByteSizeFromType","event","preventDefault","needsToBeRecreated","BYTES_PER_ELEMENT","Uint16Array","PaletteTexture","texture_","NEAREST","TEXTURE_MAG_FILTER","deleteTexture","tmpArray4","WebGLRenderTarget","helper","helper_","framebuffer_","depthbuffer_","size_","data_","dataCacheDirty_","updateSize_","setSize","clearCachedData","readAll","readPixels","readPixel","y","index","COMMON_HEADER","DEFAULT_STYLE","ShaderBuilder","attributes_","varyings_","hasSymbol_","symbolSizeExpression_","symbolRotationExpression_","symbolOffsetExpression_","symbolColorExpression_","texCoordExpression_","discardExpression_","symbolRotateWithView_","hasStroke_","strokeWidthExpression_","strokeColorExpression_","strokeOffsetExpression_","strokeCapExpression_","strokeJoinExpression_","strokeMiterLimitExpression_","strokeDistanceFieldExpression_","hasFill_","fillColorExpression_","vertexShaderFunctions_","fragmentShaderFunctions_","addUniform","addAttribute","addVarying","expression","setSymbolSizeExpression","getSymbolSizeExpression","setSymbolRotationExpression","setSymbolOffsetExpression","getSymbolOffsetExpression","setSymbolColorExpression","getSymbolColorExpression","setTextureCoordinateExpression","setFragmentDiscardExpression","getFragmentDiscardExpression","setSymbolRotateWithView","rotateWithView","setStrokeWidthExpression","setStrokeColorExpression","getStrokeColorExpression","setStrokeOffsetExpression","setStrokeCapExpression","setStrokeJoinExpression","setStrokeMiterLimitExpression","setStrokeDistanceFieldExpression","setFillColorExpression","getFillColorExpression","addVertexShaderFunction","code","includes","addFragmentShaderFunction","getSymbolVertexShader","join","attribute","varying","getSymbolFragmentShader","getStrokeVertexShader","getStrokeFragmentShader","getFillVertexShader","getFillFragmentShader","BaseTileRepresentation","tile","handleTileChange_","gutter_","gutter","loaded","ready","setTile","EventType","CHANGE","getState","TileState","LOADED","uploadTile","ImageTile","image","getImage","Image","crossOrigin","setReady","dispatchEvent","bindAndConfigure","interpolate","resampleFilter","uploadImageTexture","uploadDataTexture","bandCount","textureType","canInterpolate","bytesPerRow","byteLength","unpackAlignment","LUMINANCE","LUMINANCE_ALPHA","RGB","oldUnpackAlignment","getParameter","UNPACK_ALIGNMENT","pixelStorei","pixelContext","createPixelContext","willReadFrequently","TileTexture","textures","renderSize_","grid","getTileSize","tileCoord","NaN","coords","getData","sourceTileSize","pixelSize","isFloat","pixelCount","DataType","bytesPerElement","textureCount","textureDataArrays","textureIndex","dataIndex","rowOffset","colCount","rowIndex","colIndex","dataValue","pixelIndex","bandIndex","textureData","textureBandIndex","getImagePixelData_","renderCol","renderRow","renderWidth","renderHeight","clearRect","sourceWidth","sourceHeight","sourceWidthWithoutGutter","sourceHeightWithoutGutter","sourceCol","sourceRow","drawImage","getImageData","err","getArrayPixelData_","sourceSize","DataView","bytesPerPixel","getPixelData","DataTile","arrayData","Worker","Blob","Buffer","toString","URL","createObjectURL"],"sourceRoot":""}