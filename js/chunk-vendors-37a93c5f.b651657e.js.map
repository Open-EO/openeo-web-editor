{"version":3,"file":"js/chunk-vendors-37a93c5f.b651657e.js","mappings":"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","sources":["webpack://@openeo/web-editor/./node_modules/gopd/gOPD.js","webpack://@openeo/web-editor/./node_modules/hasown/index.js","webpack://@openeo/web-editor/./node_modules/has-property-descriptors/index.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/dataview64.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/dataslice.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/httputils.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/basesource.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/utils.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/blockedsource.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/client/base.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/client/fetch.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/client/xhr.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/client/http.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/remote.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/filereader.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/geotiff.js","webpack://@openeo/web-editor/./node_modules/has-symbols/shams.js","webpack://@openeo/web-editor/./node_modules/get-proto/Reflect.getPrototypeOf.js","webpack://@openeo/web-editor/./node_modules/has-tostringtag/shams.js","webpack://@openeo/web-editor/./node_modules/has-symbols/index.js","webpack://@openeo/web-editor/./node_modules/function-bind/index.js","webpack://@openeo/web-editor/./node_modules/get-intrinsic/index.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/compression/index.js","webpack://@openeo/web-editor/./node_modules/get-proto/Object.getPrototypeOf.js","webpack://@openeo/web-editor/./node_modules/gopd/index.js","webpack://@openeo/web-editor/./node_modules/for-each/index.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/rgb.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/resample.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/geotiffimage.js","webpack://@openeo/web-editor/./node_modules/function-bind/implementation.js","webpack://@openeo/web-editor/./node_modules/get-proto/index.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/globals.js"],"sourcesContent":["'use strict';\n\n/** @type {import('./gOPD')} */\nmodule.exports = Object.getOwnPropertyDescriptor;\n","'use strict';\n\nvar call = Function.prototype.call;\nvar $hasOwn = Object.prototype.hasOwnProperty;\nvar bind = require('function-bind');\n\n/** @type {import('.')} */\nmodule.exports = bind.call(call, $hasOwn);\n","'use strict';\n\nvar $defineProperty = require('es-define-property');\n\nvar hasPropertyDescriptors = function hasPropertyDescriptors() {\n\treturn !!$defineProperty;\n};\n\nhasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {\n\t// node v0.6 has a bug where array lengths can be Set but not Defined\n\tif (!$defineProperty) {\n\t\treturn null;\n\t}\n\ttry {\n\t\treturn $defineProperty([], 'length', { value: 1 }).length !== 1;\n\t} catch (e) {\n\t\t// In Firefox 4-22, defining length on an array throws an exception.\n\t\treturn true;\n\t}\n};\n\nmodule.exports = hasPropertyDescriptors;\n","import { getFloat16 } from '@petamoriken/float16';\n\nexport default class DataView64 {\n  constructor(arrayBuffer) {\n    this._dataView = new DataView(arrayBuffer);\n  }\n\n  get buffer() {\n    return this._dataView.buffer;\n  }\n\n  getUint64(offset, littleEndian) {\n    const left = this.getUint32(offset, littleEndian);\n    const right = this.getUint32(offset + 4, littleEndian);\n    let combined;\n    if (littleEndian) {\n      combined = left + ((2 ** 32) * right);\n      if (!Number.isSafeInteger(combined)) {\n        throw new Error(\n          `${combined} exceeds MAX_SAFE_INTEGER. `\n          + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n        );\n      }\n      return combined;\n    }\n    combined = ((2 ** 32) * left) + right;\n    if (!Number.isSafeInteger(combined)) {\n      throw new Error(\n        `${combined} exceeds MAX_SAFE_INTEGER. `\n        + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n      );\n    }\n\n    return combined;\n  }\n\n  // adapted from https://stackoverflow.com/a/55338384/8060591\n  getInt64(offset, littleEndian) {\n    let value = 0;\n    const isNegative = (this._dataView.getUint8(offset + (littleEndian ? 7 : 0)) & 0x80) > 0;\n    let carrying = true;\n    for (let i = 0; i < 8; i++) {\n      let byte = this._dataView.getUint8(offset + (littleEndian ? i : 7 - i));\n      if (isNegative) {\n        if (carrying) {\n          if (byte !== 0x00) {\n            byte = ~(byte - 1) & 0xff;\n            carrying = false;\n          }\n        } else {\n          byte = ~byte & 0xff;\n        }\n      }\n      value += byte * (256 ** i);\n    }\n    if (isNegative) {\n      value = -value;\n    }\n    return value;\n  }\n\n  getUint8(offset, littleEndian) {\n    return this._dataView.getUint8(offset, littleEndian);\n  }\n\n  getInt8(offset, littleEndian) {\n    return this._dataView.getInt8(offset, littleEndian);\n  }\n\n  getUint16(offset, littleEndian) {\n    return this._dataView.getUint16(offset, littleEndian);\n  }\n\n  getInt16(offset, littleEndian) {\n    return this._dataView.getInt16(offset, littleEndian);\n  }\n\n  getUint32(offset, littleEndian) {\n    return this._dataView.getUint32(offset, littleEndian);\n  }\n\n  getInt32(offset, littleEndian) {\n    return this._dataView.getInt32(offset, littleEndian);\n  }\n\n  getFloat16(offset, littleEndian) {\n    return getFloat16(this._dataView, offset, littleEndian);\n  }\n\n  getFloat32(offset, littleEndian) {\n    return this._dataView.getFloat32(offset, littleEndian);\n  }\n\n  getFloat64(offset, littleEndian) {\n    return this._dataView.getFloat64(offset, littleEndian);\n  }\n}\n","export default class DataSlice {\n  constructor(arrayBuffer, sliceOffset, littleEndian, bigTiff) {\n    this._dataView = new DataView(arrayBuffer);\n    this._sliceOffset = sliceOffset;\n    this._littleEndian = littleEndian;\n    this._bigTiff = bigTiff;\n  }\n\n  get sliceOffset() {\n    return this._sliceOffset;\n  }\n\n  get sliceTop() {\n    return this._sliceOffset + this.buffer.byteLength;\n  }\n\n  get littleEndian() {\n    return this._littleEndian;\n  }\n\n  get bigTiff() {\n    return this._bigTiff;\n  }\n\n  get buffer() {\n    return this._dataView.buffer;\n  }\n\n  covers(offset, length) {\n    return this.sliceOffset <= offset && this.sliceTop >= offset + length;\n  }\n\n  readUint8(offset) {\n    return this._dataView.getUint8(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readInt8(offset) {\n    return this._dataView.getInt8(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readUint16(offset) {\n    return this._dataView.getUint16(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readInt16(offset) {\n    return this._dataView.getInt16(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readUint32(offset) {\n    return this._dataView.getUint32(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readInt32(offset) {\n    return this._dataView.getInt32(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readFloat32(offset) {\n    return this._dataView.getFloat32(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readFloat64(offset) {\n    return this._dataView.getFloat64(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readUint64(offset) {\n    const left = this.readUint32(offset);\n    const right = this.readUint32(offset + 4);\n    let combined;\n    if (this._littleEndian) {\n      combined = left + ((2 ** 32) * right);\n      if (!Number.isSafeInteger(combined)) {\n        throw new Error(\n          `${combined} exceeds MAX_SAFE_INTEGER. `\n          + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n        );\n      }\n      return combined;\n    }\n    combined = ((2 ** 32) * left) + right;\n    if (!Number.isSafeInteger(combined)) {\n      throw new Error(\n        `${combined} exceeds MAX_SAFE_INTEGER. `\n        + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n      );\n    }\n\n    return combined;\n  }\n\n  // adapted from https://stackoverflow.com/a/55338384/8060591\n  readInt64(offset) {\n    let value = 0;\n    const isNegative = (this._dataView.getUint8(offset + (this._littleEndian ? 7 : 0)) & 0x80)\n      > 0;\n    let carrying = true;\n    for (let i = 0; i < 8; i++) {\n      let byte = this._dataView.getUint8(\n        offset + (this._littleEndian ? i : 7 - i),\n      );\n      if (isNegative) {\n        if (carrying) {\n          if (byte !== 0x00) {\n            byte = ~(byte - 1) & 0xff;\n            carrying = false;\n          }\n        } else {\n          byte = ~byte & 0xff;\n        }\n      }\n      value += byte * (256 ** i);\n    }\n    if (isNegative) {\n      value = -value;\n    }\n    return value;\n  }\n\n  readOffset(offset) {\n    if (this._bigTiff) {\n      return this.readUint64(offset);\n    }\n    return this.readUint32(offset);\n  }\n}\n","const CRLFCRLF = '\\r\\n\\r\\n';\n\n/*\n * Shim for 'Object.fromEntries'\n */\nfunction itemsToObject(items) {\n  if (typeof Object.fromEntries !== 'undefined') {\n    return Object.fromEntries(items);\n  }\n  const obj = {};\n  for (const [key, value] of items) {\n    obj[key.toLowerCase()] = value;\n  }\n  return obj;\n}\n\n/**\n * Parse HTTP headers from a given string.\n * @param {String} text the text to parse the headers from\n * @returns {Object} the parsed headers with lowercase keys\n */\nfunction parseHeaders(text) {\n  const items = text\n    .split('\\r\\n')\n    .map((line) => {\n      const kv = line.split(':').map((str) => str.trim());\n      kv[0] = kv[0].toLowerCase();\n      return kv;\n    });\n\n  return itemsToObject(items);\n}\n\n/**\n * Parse a 'Content-Type' header value to the content-type and parameters\n * @param {String} rawContentType the raw string to parse from\n * @returns {Object} the parsed content type with the fields: type and params\n */\nexport function parseContentType(rawContentType) {\n  const [type, ...rawParams] = rawContentType.split(';').map((s) => s.trim());\n  const paramsItems = rawParams.map((param) => param.split('='));\n  return { type, params: itemsToObject(paramsItems) };\n}\n\n/**\n * Parse a 'Content-Range' header value to its start, end, and total parts\n * @param {String} rawContentRange the raw string to parse from\n * @returns {Object} the parsed parts\n */\nexport function parseContentRange(rawContentRange) {\n  let start;\n  let end;\n  let total;\n\n  if (rawContentRange) {\n    [, start, end, total] = rawContentRange.match(/bytes (\\d+)-(\\d+)\\/(\\d+)/);\n    start = parseInt(start, 10);\n    end = parseInt(end, 10);\n    total = parseInt(total, 10);\n  }\n\n  return { start, end, total };\n}\n\n/**\n * Parses a list of byteranges from the given 'multipart/byteranges' HTTP response.\n * Each item in the list has the following properties:\n * - headers: the HTTP headers\n * - data: the sliced ArrayBuffer for that specific part\n * - offset: the offset of the byterange within its originating file\n * - length: the length of the byterange\n * @param {ArrayBuffer} responseArrayBuffer the response to be parsed and split\n * @param {String} boundary the boundary string used to split the sections\n * @returns {Object[]} the parsed byteranges\n */\nexport function parseByteRanges(responseArrayBuffer, boundary) {\n  let offset = null;\n  const decoder = new TextDecoder('ascii');\n  const out = [];\n\n  const startBoundary = `--${boundary}`;\n  const endBoundary = `${startBoundary}--`;\n\n  // search for the initial boundary, may be offset by some bytes\n  // TODO: more efficient to check for `--` in bytes directly\n  for (let i = 0; i < 10; ++i) {\n    const text = decoder.decode(\n      new Uint8Array(responseArrayBuffer, i, startBoundary.length),\n    );\n    if (text === startBoundary) {\n      offset = i;\n    }\n  }\n\n  if (offset === null) {\n    throw new Error('Could not find initial boundary');\n  }\n\n  while (offset < responseArrayBuffer.byteLength) {\n    const text = decoder.decode(\n      new Uint8Array(responseArrayBuffer, offset,\n        Math.min(startBoundary.length + 1024, responseArrayBuffer.byteLength - offset),\n      ),\n    );\n\n    // break if we arrived at the end\n    if (text.length === 0 || text.startsWith(endBoundary)) {\n      break;\n    }\n\n    // assert that we are actually dealing with a byterange and are at the correct offset\n    if (!text.startsWith(startBoundary)) {\n      throw new Error('Part does not start with boundary');\n    }\n\n    // get a substring from where we read the headers\n    const innerText = text.substr(startBoundary.length + 2);\n\n    if (innerText.length === 0) {\n      break;\n    }\n\n    // find the double linebreak that denotes the end of the headers\n    const endOfHeaders = innerText.indexOf(CRLFCRLF);\n\n    // parse the headers to get the content range size\n    const headers = parseHeaders(innerText.substr(0, endOfHeaders));\n    const { start, end, total } = parseContentRange(headers['content-range']);\n\n    // calculate the length of the slice and the next offset\n    const startOfData = offset + startBoundary.length + endOfHeaders + CRLFCRLF.length;\n    const length = parseInt(end, 10) + 1 - parseInt(start, 10);\n    out.push({\n      headers,\n      data: responseArrayBuffer.slice(startOfData, startOfData + length),\n      offset: start,\n      length,\n      fileSize: total,\n    });\n\n    offset = startOfData + length + 4;\n  }\n\n  return out;\n}\n","/**\n * @typedef Slice\n * @property {number} offset\n * @property {number} length\n */\n\nexport class BaseSource {\n  /**\n   *\n   * @param {Slice[]} slices\n   * @returns {ArrayBuffer[]}\n   */\n  async fetch(slices, signal = undefined) {\n    return Promise.all(\n      slices.map((slice) => this.fetchSlice(slice, signal)),\n    );\n  }\n\n  /**\n   *\n   * @param {Slice} slice\n   * @returns {ArrayBuffer}\n   */\n  async fetchSlice(slice) {\n    throw new Error(`fetching of slice ${slice} not possible, not implemented`);\n  }\n\n  /**\n   * Returns the filesize if already determined and null otherwise\n   */\n  get fileSize() {\n    return null;\n  }\n\n  async close() {\n    // no-op by default\n  }\n}\n","export function assign(target, source) {\n  for (const key in source) {\n    if (source.hasOwnProperty(key)) {\n      target[key] = source[key];\n    }\n  }\n}\n\nexport function chunk(iterable, length) {\n  const results = [];\n  const lengthOfIterable = iterable.length;\n  for (let i = 0; i < lengthOfIterable; i += length) {\n    const chunked = [];\n    for (let ci = i; ci < i + length; ci++) {\n      chunked.push(iterable[ci]);\n    }\n    results.push(chunked);\n  }\n  return results;\n}\n\nexport function endsWith(string, expectedEnding) {\n  if (string.length < expectedEnding.length) {\n    return false;\n  }\n  const actualEnding = string.substr(string.length - expectedEnding.length);\n  return actualEnding === expectedEnding;\n}\n\nexport function forEach(iterable, func) {\n  const { length } = iterable;\n  for (let i = 0; i < length; i++) {\n    func(iterable[i], i);\n  }\n}\n\nexport function invert(oldObj) {\n  const newObj = {};\n  for (const key in oldObj) {\n    if (oldObj.hasOwnProperty(key)) {\n      const value = oldObj[key];\n      newObj[value] = key;\n    }\n  }\n  return newObj;\n}\n\nexport function range(n) {\n  const results = [];\n  for (let i = 0; i < n; i++) {\n    results.push(i);\n  }\n  return results;\n}\n\nexport function times(numTimes, func) {\n  const results = [];\n  for (let i = 0; i < numTimes; i++) {\n    results.push(func(i));\n  }\n  return results;\n}\n\nexport function toArray(iterable) {\n  const results = [];\n  const { length } = iterable;\n  for (let i = 0; i < length; i++) {\n    results.push(iterable[i]);\n  }\n  return results;\n}\n\nexport function toArrayRecursively(input) {\n  if (input.length) {\n    return toArray(input).map(toArrayRecursively);\n  }\n  return input;\n}\n\n// copied from https://github.com/academia-de-codigo/parse-content-range-header/blob/master/index.js\nexport function parseContentRange(headerValue) {\n  if (!headerValue) {\n    return null;\n  }\n\n  if (typeof headerValue !== 'string') {\n    throw new Error('invalid argument');\n  }\n\n  const parseInt = (number) => Number.parseInt(number, 10);\n\n  // Check for presence of unit\n  let matches = headerValue.match(/^(\\w*) /);\n  const unit = matches && matches[1];\n\n  // check for start-end/size header format\n  matches = headerValue.match(/(\\d+)-(\\d+)\\/(\\d+|\\*)/);\n  if (matches) {\n    return {\n      unit,\n      first: parseInt(matches[1]),\n      last: parseInt(matches[2]),\n      length: matches[3] === '*' ? null : parseInt(matches[3]),\n    };\n  }\n\n  // check for size header format\n  matches = headerValue.match(/(\\d+|\\*)/);\n  if (matches) {\n    return {\n      unit,\n      first: null,\n      last: null,\n      length: matches[1] === '*' ? null : parseInt(matches[1]),\n    };\n  }\n\n  return null;\n}\n\n/*\n * Promisified wrapper around 'setTimeout' to allow 'await'\n */\nexport async function wait(milliseconds) {\n  return new Promise((resolve) => setTimeout(resolve, milliseconds));\n}\n\nexport function zip(a, b) {\n  const A = Array.isArray(a) ? a : Array.from(a);\n  const B = Array.isArray(b) ? b : Array.from(b);\n  return A.map((k, i) => [k, B[i]]);\n}\n\n// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\nexport class AbortError extends Error {\n  constructor(params) {\n    // Pass remaining arguments (including vendor specific ones) to parent constructor\n    super(params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, AbortError);\n    }\n\n    this.name = 'AbortError';\n  }\n}\n\nexport class CustomAggregateError extends Error {\n  constructor(errors, message) {\n    super(message);\n    this.errors = errors;\n    this.message = message;\n    this.name = 'AggregateError';\n  }\n}\n\nexport const AggregateError = CustomAggregateError;\n","import QuickLRU from 'quick-lru';\nimport { BaseSource } from './basesource.js';\nimport { AbortError, AggregateError, wait, zip } from '../utils.js';\n\nclass Block {\n  /**\n   *\n   * @param {number} offset\n   * @param {number} length\n   * @param {ArrayBuffer} [data]\n   */\n  constructor(offset, length, data = null) {\n    this.offset = offset;\n    this.length = length;\n    this.data = data;\n  }\n\n  /**\n   * @returns {number} the top byte border\n   */\n  get top() {\n    return this.offset + this.length;\n  }\n}\n\nclass BlockGroup {\n  /**\n   *\n   * @param {number} offset\n   * @param {number} length\n   * @param {number[]} blockIds\n   */\n  constructor(offset, length, blockIds) {\n    this.offset = offset;\n    this.length = length;\n    this.blockIds = blockIds;\n  }\n}\n\nexport class BlockedSource extends BaseSource {\n  /**\n   *\n   * @param {BaseSource} source The underlying source that shall be blocked and cached\n   * @param {object} options\n   * @param {number} [options.blockSize]\n   * @param {number} [options.cacheSize]\n   */\n  constructor(source, { blockSize = 65536, cacheSize = 100 } = {}) {\n    super();\n    this.source = source;\n    this.blockSize = blockSize;\n\n    this.blockCache = new QuickLRU({\n      maxSize: cacheSize,\n      onEviction: (blockId, block) => {\n        this.evictedBlocks.set(blockId, block);\n      },\n    });\n\n    /** @type {Map<number, Block>} */\n    this.evictedBlocks = new Map();\n\n    // mapping blockId -> Block instance\n    this.blockRequests = new Map();\n\n    // set of blockIds missing for the current requests\n    this.blockIdsToFetch = new Set();\n\n    this.abortedBlockIds = new Set();\n  }\n\n  get fileSize() {\n    return this.source.fileSize;\n  }\n\n  /**\n   *\n   * @param {import(\"./basesource\").Slice[]} slices\n   */\n  async fetch(slices, signal) {\n    const blockRequests = [];\n    const missingBlockIds = [];\n    const allBlockIds = [];\n    this.evictedBlocks.clear();\n\n    for (const { offset, length } of slices) {\n      let top = offset + length;\n\n      const { fileSize } = this;\n      if (fileSize !== null) {\n        top = Math.min(top, fileSize);\n      }\n\n      const firstBlockOffset = Math.floor(offset / this.blockSize) * this.blockSize;\n\n      for (let current = firstBlockOffset; current < top; current += this.blockSize) {\n        const blockId = Math.floor(current / this.blockSize);\n        if (!this.blockCache.has(blockId) && !this.blockRequests.has(blockId)) {\n          this.blockIdsToFetch.add(blockId);\n          missingBlockIds.push(blockId);\n        }\n        if (this.blockRequests.has(blockId)) {\n          blockRequests.push(this.blockRequests.get(blockId));\n        }\n        allBlockIds.push(blockId);\n      }\n    }\n\n    // allow additional block requests to accumulate\n    await wait();\n    this.fetchBlocks(signal);\n\n    // Gather all of the new requests that this fetch call is contributing to `fetch`.\n    const missingRequests = [];\n    for (const blockId of missingBlockIds) {\n      // The requested missing block could already be in the cache\n      // instead of having its request still be outstanding.\n      if (this.blockRequests.has(blockId)) {\n        missingRequests.push(this.blockRequests.get(blockId));\n      }\n    }\n\n    // Actually await all pending requests that are needed for this `fetch`.\n    await Promise.allSettled(blockRequests);\n    await Promise.allSettled(missingRequests);\n\n    // Perform retries if a block was interrupted by a previous signal\n    const abortedBlockRequests = [];\n    const abortedBlockIds = allBlockIds\n      .filter((id) => this.abortedBlockIds.has(id) || !this.blockCache.has(id));\n    abortedBlockIds.forEach((id) => this.blockIdsToFetch.add(id));\n    // start the retry of some blocks if required\n    if (abortedBlockIds.length > 0 && signal && !signal.aborted) {\n      this.fetchBlocks(null);\n      for (const blockId of abortedBlockIds) {\n        const block = this.blockRequests.get(blockId);\n        if (!block) {\n          throw new Error(`Block ${blockId} is not in the block requests`);\n        }\n        abortedBlockRequests.push(block);\n      }\n      await Promise.allSettled(abortedBlockRequests);\n    }\n\n    // throw an  abort error\n    if (signal && signal.aborted) {\n      throw new AbortError('Request was aborted');\n    }\n\n    const blocks = allBlockIds.map((id) => this.blockCache.get(id) || this.evictedBlocks.get(id));\n    const failedBlocks = blocks.filter((i) => !i);\n    if (failedBlocks.length) {\n      throw new AggregateError(failedBlocks, 'Request failed');\n    }\n\n    // create a final Map, with all required blocks for this request to satisfy\n    const requiredBlocks = new Map(zip(allBlockIds, blocks));\n\n    // TODO: satisfy each slice\n    return this.readSliceData(slices, requiredBlocks);\n  }\n\n  /**\n   *\n   * @param {AbortSignal} signal\n   */\n  fetchBlocks(signal) {\n    // check if we still need to\n    if (this.blockIdsToFetch.size > 0) {\n      const groups = this.groupBlocks(this.blockIdsToFetch);\n\n      // start requesting slices of data\n      const groupRequests = this.source.fetch(groups, signal);\n\n      for (let groupIndex = 0; groupIndex < groups.length; ++groupIndex) {\n        const group = groups[groupIndex];\n\n        for (const blockId of group.blockIds) {\n          // make an async IIFE for each block\n          this.blockRequests.set(blockId, (async () => {\n            try {\n              const response = (await groupRequests)[groupIndex];\n              const blockOffset = blockId * this.blockSize;\n              const o = blockOffset - response.offset;\n              const t = Math.min(o + this.blockSize, response.data.byteLength);\n              const data = response.data.slice(o, t);\n              const block = new Block(\n                blockOffset,\n                data.byteLength,\n                data,\n                blockId,\n              );\n              this.blockCache.set(blockId, block);\n              this.abortedBlockIds.delete(blockId);\n            } catch (err) {\n              if (err.name === 'AbortError') {\n                // store the signal here, we need it to determine later if an\n                // error was caused by this signal\n                err.signal = signal;\n                this.blockCache.delete(blockId);\n                this.abortedBlockIds.add(blockId);\n              } else {\n                throw err;\n              }\n            } finally {\n              this.blockRequests.delete(blockId);\n            }\n          })());\n        }\n      }\n      this.blockIdsToFetch.clear();\n    }\n  }\n\n  /**\n   *\n   * @param {Set} blockIds\n   * @returns {BlockGroup[]}\n   */\n  groupBlocks(blockIds) {\n    const sortedBlockIds = Array.from(blockIds).sort((a, b) => a - b);\n    if (sortedBlockIds.length === 0) {\n      return [];\n    }\n    let current = [];\n    let lastBlockId = null;\n    const groups = [];\n\n    for (const blockId of sortedBlockIds) {\n      if (lastBlockId === null || lastBlockId + 1 === blockId) {\n        current.push(blockId);\n        lastBlockId = blockId;\n      } else {\n        groups.push(new BlockGroup(\n          current[0] * this.blockSize,\n          current.length * this.blockSize,\n          current,\n        ));\n        current = [blockId];\n        lastBlockId = blockId;\n      }\n    }\n\n    groups.push(new BlockGroup(\n      current[0] * this.blockSize,\n      current.length * this.blockSize,\n      current,\n    ));\n\n    return groups;\n  }\n\n  /**\n   *\n   * @param {import(\"./basesource\").Slice[]} slices\n   * @param {Map} blocks\n   */\n  readSliceData(slices, blocks) {\n    return slices.map((slice) => {\n      let top = slice.offset + slice.length;\n      if (this.fileSize !== null) {\n        top = Math.min(this.fileSize, top);\n      }\n      const blockIdLow = Math.floor(slice.offset / this.blockSize);\n      const blockIdHigh = Math.floor(top / this.blockSize);\n      const sliceData = new ArrayBuffer(slice.length);\n      const sliceView = new Uint8Array(sliceData);\n\n      for (let blockId = blockIdLow; blockId <= blockIdHigh; ++blockId) {\n        const block = blocks.get(blockId);\n        const delta = block.offset - slice.offset;\n        const topDelta = block.top - top;\n        let blockInnerOffset = 0;\n        let rangeInnerOffset = 0;\n        let usedBlockLength;\n\n        if (delta < 0) {\n          blockInnerOffset = -delta;\n        } else if (delta > 0) {\n          rangeInnerOffset = delta;\n        }\n\n        if (topDelta < 0) {\n          usedBlockLength = block.length - blockInnerOffset;\n        } else {\n          usedBlockLength = top - block.offset - blockInnerOffset;\n        }\n\n        const blockView = new Uint8Array(block.data, blockInnerOffset, usedBlockLength);\n        sliceView.set(blockView, rangeInnerOffset);\n      }\n\n      return sliceData;\n    });\n  }\n}\n","export class BaseResponse {\n  /**\n   * Returns whether the response has an ok'ish status code\n   */\n  get ok() {\n    return this.status >= 200 && this.status <= 299;\n  }\n\n  /**\n   * Returns the status code of the response\n   */\n  get status() {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * Returns the value of the specified header\n   * @param {string} headerName the header name\n   * @returns {string} the header value\n   */\n  getHeader(headerName) { // eslint-disable-line no-unused-vars\n    throw new Error('not implemented');\n  }\n\n  /**\n   * @returns {ArrayBuffer} the response data of the request\n   */\n  async getData() {\n    throw new Error('not implemented');\n  }\n}\n\nexport class BaseClient {\n  constructor(url) {\n    this.url = url;\n  }\n\n  /**\n   * Send a request with the options\n   * @param {{headers: HeadersInit, signal: AbortSignal}} [options={}]\n   * @returns {Promise<BaseResponse>}\n   */\n  async request({ headers, signal } = {}) { // eslint-disable-line no-unused-vars\n    throw new Error('request is not implemented');\n  }\n}\n","import { BaseClient, BaseResponse } from './base.js';\n\nclass FetchResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for fetch API Response\n   * @param {Response} response\n   */\n  constructor(response) {\n    super();\n    this.response = response;\n  }\n\n  get status() {\n    return this.response.status;\n  }\n\n  getHeader(name) {\n    return this.response.headers.get(name);\n  }\n\n  async getData() {\n    const data = this.response.arrayBuffer\n      ? await this.response.arrayBuffer()\n      : (await this.response.buffer()).buffer;\n    return data;\n  }\n}\n\nexport class FetchClient extends BaseClient {\n  constructor(url, credentials) {\n    super(url);\n    this.credentials = credentials;\n  }\n\n  /**\n   * @param {{headers: HeadersInit, signal: AbortSignal}} [options={}]\n   * @returns {Promise<FetchResponse>}\n   */\n  async request({ headers, signal } = {}) {\n    const response = await fetch(this.url, {\n      headers, credentials: this.credentials, signal,\n    });\n    return new FetchResponse(response);\n  }\n}\n","import { BaseClient, BaseResponse } from './base.js';\nimport { AbortError } from '../../utils.js';\n\nclass XHRResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for XMLHttpRequest\n   * @param {XMLHttpRequest} xhr\n   * @param {ArrayBuffer} data\n   */\n  constructor(xhr, data) {\n    super();\n    this.xhr = xhr;\n    this.data = data;\n  }\n\n  get status() {\n    return this.xhr.status;\n  }\n\n  getHeader(name) {\n    return this.xhr.getResponseHeader(name);\n  }\n\n  async getData() {\n    return this.data;\n  }\n}\n\nexport class XHRClient extends BaseClient {\n  constructRequest(headers, signal) {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.open('GET', this.url);\n      xhr.responseType = 'arraybuffer';\n      for (const [key, value] of Object.entries(headers)) {\n        xhr.setRequestHeader(key, value);\n      }\n\n      // hook signals\n      xhr.onload = () => {\n        const data = xhr.response;\n        resolve(new XHRResponse(xhr, data));\n      };\n      xhr.onerror = reject;\n      xhr.onabort = () => reject(new AbortError('Request aborted'));\n      xhr.send();\n\n      if (signal) {\n        if (signal.aborted) {\n          xhr.abort();\n        }\n        signal.addEventListener('abort', () => xhr.abort());\n      }\n    });\n  }\n\n  async request({ headers, signal } = {}) {\n    const response = await this.constructRequest(headers, signal);\n    return response;\n  }\n}\n","import http from 'http';\nimport https from 'https';\nimport urlMod from 'url';\n\nimport { BaseClient, BaseResponse } from './base.js';\nimport { AbortError } from '../../utils.js';\n\nclass HttpResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for node HTTP/HTTPS API Response\n   * @param {http.ServerResponse} response\n   */\n  constructor(response, dataPromise) {\n    super();\n    this.response = response;\n    this.dataPromise = dataPromise;\n  }\n\n  get status() {\n    return this.response.statusCode;\n  }\n\n  getHeader(name) {\n    return this.response.headers[name];\n  }\n\n  async getData() {\n    const data = await this.dataPromise;\n    return data;\n  }\n}\n\nexport class HttpClient extends BaseClient {\n  constructor(url) {\n    super(url);\n    this.parsedUrl = urlMod.parse(this.url);\n    this.httpApi = (this.parsedUrl.protocol === 'http:' ? http : https);\n  }\n\n  constructRequest(headers, signal) {\n    return new Promise((resolve, reject) => {\n      const request = this.httpApi.get(\n        {\n          ...this.parsedUrl,\n          headers,\n        },\n        (response) => {\n          const dataPromise = new Promise((resolveData) => {\n            const chunks = [];\n\n            // collect chunks\n            response.on('data', (chunk) => {\n              chunks.push(chunk);\n            });\n\n            // concatenate all chunks and resolve the promise with the resulting buffer\n            response.on('end', () => {\n              const data = Buffer.concat(chunks).buffer;\n              resolveData(data);\n            });\n            response.on('error', reject);\n          });\n          resolve(new HttpResponse(response, dataPromise));\n        },\n      );\n      request.on('error', reject);\n\n      if (signal) {\n        if (signal.aborted) {\n          request.destroy(new AbortError('Request aborted'));\n        }\n        signal.addEventListener('abort', () => request.destroy(new AbortError('Request aborted')));\n      }\n    });\n  }\n\n  async request({ headers, signal } = {}) {\n    const response = await this.constructRequest(headers, signal);\n    return response;\n  }\n}\n","import { parseByteRanges, parseContentRange, parseContentType } from './httputils.js';\nimport { BaseSource } from './basesource.js';\nimport { BlockedSource } from './blockedsource.js';\n\nimport { FetchClient } from './client/fetch.js';\nimport { XHRClient } from './client/xhr.js';\nimport { HttpClient } from './client/http.js';\n\nclass RemoteSource extends BaseSource {\n  /**\n   *\n   * @param {BaseClient} client\n   * @param {object} headers\n   * @param {numbers} maxRanges\n   * @param {boolean} allowFullFile\n   */\n  constructor(client, headers, maxRanges, allowFullFile) {\n    super();\n    this.client = client;\n    this.headers = headers;\n    this.maxRanges = maxRanges;\n    this.allowFullFile = allowFullFile;\n    this._fileSize = null;\n  }\n\n  /**\n   *\n   * @param {Slice[]} slices\n   */\n  async fetch(slices, signal) {\n    // if we allow multi-ranges, split the incoming request into that many sub-requests\n    // and join them afterwards\n    if (this.maxRanges >= slices.length) {\n      return this.fetchSlices(slices, signal);\n    } else if (this.maxRanges > 0 && slices.length > 1) {\n      // TODO: split into multiple multi-range requests\n\n      // const subSlicesRequests = [];\n      // for (let i = 0; i < slices.length; i += this.maxRanges) {\n      //   subSlicesRequests.push(\n      //     this.fetchSlices(slices.slice(i, i + this.maxRanges), signal),\n      //   );\n      // }\n      // return (await Promise.all(subSlicesRequests)).flat();\n    }\n\n    // otherwise make a single request for each slice\n    return Promise.all(\n      slices.map((slice) => this.fetchSlice(slice, signal)),\n    );\n  }\n\n  async fetchSlices(slices, signal) {\n    const response = await this.client.request({\n      headers: {\n        ...this.headers,\n        Range: `bytes=${slices\n          .map(({ offset, length }) => `${offset}-${offset + length}`)\n          .join(',')\n        }`,\n      },\n      signal,\n    });\n\n    if (!response.ok) {\n      throw new Error('Error fetching data.');\n    } else if (response.status === 206) {\n      const { type, params } = parseContentType(response.getHeader('content-type'));\n      if (type === 'multipart/byteranges') {\n        const byteRanges = parseByteRanges(await response.getData(), params.boundary);\n        this._fileSize = byteRanges[0].fileSize || null;\n        return byteRanges;\n      }\n\n      const data = await response.getData();\n\n      const { start, end, total } = parseContentRange(response.getHeader('content-range'));\n      this._fileSize = total || null;\n      const first = [{\n        data,\n        offset: start,\n        length: end - start,\n      }];\n\n      if (slices.length > 1) {\n        // we requested more than one slice, but got only the first\n        // unfortunately, some HTTP Servers don't support multi-ranges\n        // and return only the first\n\n        // get the rest of the slices and fetch them iteratively\n        const others = await Promise.all(slices.slice(1).map((slice) => this.fetchSlice(slice, signal)));\n        return first.concat(others);\n      }\n      return first;\n    } else {\n      if (!this.allowFullFile) {\n        throw new Error('Server responded with full file');\n      }\n      const data = await response.getData();\n      this._fileSize = data.byteLength;\n      return [{\n        data,\n        offset: 0,\n        length: data.byteLength,\n      }];\n    }\n  }\n\n  async fetchSlice(slice, signal) {\n    const { offset, length } = slice;\n    const response = await this.client.request({\n      headers: {\n        ...this.headers,\n        Range: `bytes=${offset}-${offset + length}`,\n      },\n      signal,\n    });\n\n    // check the response was okay and if the server actually understands range requests\n    if (!response.ok) {\n      throw new Error('Error fetching data.');\n    } else if (response.status === 206) {\n      const data = await response.getData();\n\n      const { total } = parseContentRange(response.getHeader('content-range'));\n      this._fileSize = total || null;\n      return {\n        data,\n        offset,\n        length,\n      };\n    } else {\n      if (!this.allowFullFile) {\n        throw new Error('Server responded with full file');\n      }\n\n      const data = await response.getData();\n\n      this._fileSize = data.byteLength;\n      return {\n        data,\n        offset: 0,\n        length: data.byteLength,\n      };\n    }\n  }\n\n  get fileSize() {\n    return this._fileSize;\n  }\n}\n\nfunction maybeWrapInBlockedSource(source, { blockSize, cacheSize }) {\n  if (blockSize === null) {\n    return source;\n  }\n  return new BlockedSource(source, { blockSize, cacheSize });\n}\n\nexport function makeFetchSource(url, { headers = {}, credentials, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\n  const client = new FetchClient(url, credentials);\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\n\nexport function makeXHRSource(url, { headers = {}, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\n  const client = new XHRClient(url);\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\n\nexport function makeHttpSource(url, { headers = {}, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\n  const client = new HttpClient(url);\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\n\nexport function makeCustomSource(client, { headers = {}, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\n\n/**\n *\n * @param {string} url\n * @param {object} options\n */\nexport function makeRemoteSource(url, { forceXHR = false, ...clientOptions } = {}) {\n  if (typeof fetch === 'function' && !forceXHR) {\n    return makeFetchSource(url, clientOptions);\n  }\n  if (typeof XMLHttpRequest !== 'undefined') {\n    return makeXHRSource(url, clientOptions);\n  }\n  return makeHttpSource(url, clientOptions);\n}\n","import { BaseSource } from './basesource.js';\n\nclass FileReaderSource extends BaseSource {\n  constructor(file) {\n    super();\n    this.file = file;\n  }\n\n  async fetchSlice(slice, signal) {\n    return new Promise((resolve, reject) => {\n      const blob = this.file.slice(slice.offset, slice.offset + slice.length);\n      const reader = new FileReader();\n      reader.onload = (event) => resolve(event.target.result);\n      reader.onerror = reject;\n      reader.onabort = reject;\n      reader.readAsArrayBuffer(blob);\n\n      if (signal) {\n        signal.addEventListener('abort', () => reader.abort());\n      }\n    });\n  }\n}\n\n/**\n * Create a new source from a given file/blob.\n * @param {Blob} file The file or blob to read from.\n * @returns The constructed source\n */\nexport function makeFileReaderSource(file) {\n  return new FileReaderSource(file);\n}\n","/** @module geotiff */\nimport GeoTIFFImage from './geotiffimage.js';\nimport DataView64 from './dataview64.js';\nimport DataSlice from './dataslice.js';\nimport Pool from './pool.js';\n\nimport { makeRemoteSource, makeCustomSource } from './source/remote.js';\nimport { makeBufferSource } from './source/arraybuffer.js';\nimport { makeFileReaderSource } from './source/filereader.js';\nimport { makeFileSource } from './source/file.js';\nimport { BaseClient, BaseResponse } from './source/client/base.js';\n\nimport { fieldTypes, fieldTagNames, arrayFields, geoKeyNames } from './globals.js';\nimport { writeGeotiff } from './geotiffwriter.js';\nimport * as globals from './globals.js';\nimport * as rgb from './rgb.js';\nimport { getDecoder, addDecoder } from './compression/index.js';\nimport { setLogger } from './logging.js';\n\nexport { globals };\nexport { rgb };\nexport { default as BaseDecoder } from './compression/basedecoder.js';\nexport { getDecoder, addDecoder };\nexport { setLogger };\n\n/**\n * @typedef {Uint8Array | Int8Array | Uint16Array | Int16Array | Uint32Array | Int32Array | Float32Array | Float64Array}\n * TypedArray\n */\n\n/**\n * @typedef {{ height:number, width: number }} Dimensions\n */\n\n/**\n * The autogenerated docs are a little confusing here. The effective type is:\n *\n * `TypedArray & { height: number; width: number}`\n * @typedef {TypedArray & Dimensions} TypedArrayWithDimensions\n */\n\n/**\n * The autogenerated docs are a little confusing here. The effective type is:\n *\n * `TypedArray[] & { height: number; width: number}`\n * @typedef {TypedArray[] & Dimensions} TypedArrayArrayWithDimensions\n */\n\n/**\n *  The autogenerated docs are a little confusing here. The effective type is:\n *\n * `(TypedArray | TypedArray[]) & { height: number; width: number}`\n * @typedef {TypedArrayWithDimensions | TypedArrayArrayWithDimensions} ReadRasterResult\n */\n\nfunction getFieldTypeLength(fieldType) {\n  switch (fieldType) {\n    case fieldTypes.BYTE: case fieldTypes.ASCII: case fieldTypes.SBYTE: case fieldTypes.UNDEFINED:\n      return 1;\n    case fieldTypes.SHORT: case fieldTypes.SSHORT:\n      return 2;\n    case fieldTypes.LONG: case fieldTypes.SLONG: case fieldTypes.FLOAT: case fieldTypes.IFD:\n      return 4;\n    case fieldTypes.RATIONAL: case fieldTypes.SRATIONAL: case fieldTypes.DOUBLE:\n    case fieldTypes.LONG8: case fieldTypes.SLONG8: case fieldTypes.IFD8:\n      return 8;\n    default:\n      throw new RangeError(`Invalid field type: ${fieldType}`);\n  }\n}\n\nfunction parseGeoKeyDirectory(fileDirectory) {\n  const rawGeoKeyDirectory = fileDirectory.GeoKeyDirectory;\n  if (!rawGeoKeyDirectory) {\n    return null;\n  }\n\n  const geoKeyDirectory = {};\n  for (let i = 4; i <= rawGeoKeyDirectory[3] * 4; i += 4) {\n    const key = geoKeyNames[rawGeoKeyDirectory[i]];\n    const location = (rawGeoKeyDirectory[i + 1])\n      ? (fieldTagNames[rawGeoKeyDirectory[i + 1]]) : null;\n    const count = rawGeoKeyDirectory[i + 2];\n    const offset = rawGeoKeyDirectory[i + 3];\n\n    let value = null;\n    if (!location) {\n      value = offset;\n    } else {\n      value = fileDirectory[location];\n      if (typeof value === 'undefined' || value === null) {\n        throw new Error(`Could not get value of geoKey '${key}'.`);\n      } else if (typeof value === 'string') {\n        value = value.substring(offset, offset + count - 1);\n      } else if (value.subarray) {\n        value = value.subarray(offset, offset + count);\n        if (count === 1) {\n          value = value[0];\n        }\n      }\n    }\n    geoKeyDirectory[key] = value;\n  }\n  return geoKeyDirectory;\n}\n\nfunction getValues(dataSlice, fieldType, count, offset) {\n  let values = null;\n  let readMethod = null;\n  const fieldTypeLength = getFieldTypeLength(fieldType);\n\n  switch (fieldType) {\n    case fieldTypes.BYTE: case fieldTypes.ASCII: case fieldTypes.UNDEFINED:\n      values = new Uint8Array(count); readMethod = dataSlice.readUint8;\n      break;\n    case fieldTypes.SBYTE:\n      values = new Int8Array(count); readMethod = dataSlice.readInt8;\n      break;\n    case fieldTypes.SHORT:\n      values = new Uint16Array(count); readMethod = dataSlice.readUint16;\n      break;\n    case fieldTypes.SSHORT:\n      values = new Int16Array(count); readMethod = dataSlice.readInt16;\n      break;\n    case fieldTypes.LONG: case fieldTypes.IFD:\n      values = new Uint32Array(count); readMethod = dataSlice.readUint32;\n      break;\n    case fieldTypes.SLONG:\n      values = new Int32Array(count); readMethod = dataSlice.readInt32;\n      break;\n    case fieldTypes.LONG8: case fieldTypes.IFD8:\n      values = new Array(count); readMethod = dataSlice.readUint64;\n      break;\n    case fieldTypes.SLONG8:\n      values = new Array(count); readMethod = dataSlice.readInt64;\n      break;\n    case fieldTypes.RATIONAL:\n      values = new Uint32Array(count * 2); readMethod = dataSlice.readUint32;\n      break;\n    case fieldTypes.SRATIONAL:\n      values = new Int32Array(count * 2); readMethod = dataSlice.readInt32;\n      break;\n    case fieldTypes.FLOAT:\n      values = new Float32Array(count); readMethod = dataSlice.readFloat32;\n      break;\n    case fieldTypes.DOUBLE:\n      values = new Float64Array(count); readMethod = dataSlice.readFloat64;\n      break;\n    default:\n      throw new RangeError(`Invalid field type: ${fieldType}`);\n  }\n\n  // normal fields\n  if (!(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {\n    for (let i = 0; i < count; ++i) {\n      values[i] = readMethod.call(\n        dataSlice, offset + (i * fieldTypeLength),\n      );\n    }\n  } else { // RATIONAL or SRATIONAL\n    for (let i = 0; i < count; i += 2) {\n      values[i] = readMethod.call(\n        dataSlice, offset + (i * fieldTypeLength),\n      );\n      values[i + 1] = readMethod.call(\n        dataSlice, offset + ((i * fieldTypeLength) + 4),\n      );\n    }\n  }\n\n  if (fieldType === fieldTypes.ASCII) {\n    return new TextDecoder('utf-8').decode(values);\n  }\n  return values;\n}\n\n/**\n * Data class to store the parsed file directory, geo key directory and\n * offset to the next IFD\n */\nclass ImageFileDirectory {\n  constructor(fileDirectory, geoKeyDirectory, nextIFDByteOffset) {\n    this.fileDirectory = fileDirectory;\n    this.geoKeyDirectory = geoKeyDirectory;\n    this.nextIFDByteOffset = nextIFDByteOffset;\n  }\n}\n\n/**\n * Error class for cases when an IFD index was requested, that does not exist\n * in the file.\n */\nclass GeoTIFFImageIndexError extends Error {\n  constructor(index) {\n    super(`No image at index ${index}`);\n    this.index = index;\n  }\n}\n\nclass GeoTIFFBase {\n  /**\n   * (experimental) Reads raster data from the best fitting image. This function uses\n   * the image with the lowest resolution that is still a higher resolution than the\n   * requested resolution.\n   * When specified, the `bbox` option is translated to the `window` option and the\n   * `resX` and `resY` to `width` and `height` respectively.\n   * Then, the [readRasters]{@link GeoTIFFImage#readRasters} method of the selected\n   * image is called and the result returned.\n   * @see GeoTIFFImage.readRasters\n   * @param {import('./geotiffimage').ReadRasterOptions} [options={}] optional parameters\n   * @returns {Promise<ReadRasterResult>} the decoded array(s), with `height` and `width`, as a promise\n   */\n  async readRasters(options = {}) {\n    const { window: imageWindow, width, height } = options;\n    let { resX, resY, bbox } = options;\n\n    const firstImage = await this.getImage();\n    let usedImage = firstImage;\n    const imageCount = await this.getImageCount();\n    const imgBBox = firstImage.getBoundingBox();\n\n    if (imageWindow && bbox) {\n      throw new Error('Both \"bbox\" and \"window\" passed.');\n    }\n\n    // if width/height is passed, transform it to resolution\n    if (width || height) {\n      // if we have an image window (pixel coordinates), transform it to a BBox\n      // using the origin/resolution of the first image.\n      if (imageWindow) {\n        const [oX, oY] = firstImage.getOrigin();\n        const [rX, rY] = firstImage.getResolution();\n\n        bbox = [\n          oX + (imageWindow[0] * rX),\n          oY + (imageWindow[1] * rY),\n          oX + (imageWindow[2] * rX),\n          oY + (imageWindow[3] * rY),\n        ];\n      }\n\n      // if we have a bbox (or calculated one)\n\n      const usedBBox = bbox || imgBBox;\n\n      if (width) {\n        if (resX) {\n          throw new Error('Both width and resX passed');\n        }\n        resX = (usedBBox[2] - usedBBox[0]) / width;\n      }\n      if (height) {\n        if (resY) {\n          throw new Error('Both width and resY passed');\n        }\n        resY = (usedBBox[3] - usedBBox[1]) / height;\n      }\n    }\n\n    // if resolution is set or calculated, try to get the image with the worst acceptable resolution\n    if (resX || resY) {\n      const allImages = [];\n      for (let i = 0; i < imageCount; ++i) {\n        const image = await this.getImage(i);\n        const { SubfileType: subfileType, NewSubfileType: newSubfileType } = image.fileDirectory;\n        if (i === 0 || subfileType === 2 || newSubfileType & 1) {\n          allImages.push(image);\n        }\n      }\n\n      allImages.sort((a, b) => a.getWidth() - b.getWidth());\n      for (let i = 0; i < allImages.length; ++i) {\n        const image = allImages[i];\n        const imgResX = (imgBBox[2] - imgBBox[0]) / image.getWidth();\n        const imgResY = (imgBBox[3] - imgBBox[1]) / image.getHeight();\n\n        usedImage = image;\n        if ((resX && resX > imgResX) || (resY && resY > imgResY)) {\n          break;\n        }\n      }\n    }\n\n    let wnd = imageWindow;\n    if (bbox) {\n      const [oX, oY] = firstImage.getOrigin();\n      const [imageResX, imageResY] = usedImage.getResolution(firstImage);\n\n      wnd = [\n        Math.round((bbox[0] - oX) / imageResX),\n        Math.round((bbox[1] - oY) / imageResY),\n        Math.round((bbox[2] - oX) / imageResX),\n        Math.round((bbox[3] - oY) / imageResY),\n      ];\n      wnd = [\n        Math.min(wnd[0], wnd[2]),\n        Math.min(wnd[1], wnd[3]),\n        Math.max(wnd[0], wnd[2]),\n        Math.max(wnd[1], wnd[3]),\n      ];\n    }\n\n    return usedImage.readRasters({ ...options, window: wnd });\n  }\n}\n\n/**\n * @typedef {Object} GeoTIFFOptions\n * @property {boolean} [cache=false] whether or not decoded tiles shall be cached.\n */\n\n/**\n * The abstraction for a whole GeoTIFF file.\n * @augments GeoTIFFBase\n */\nclass GeoTIFF extends GeoTIFFBase {\n  /**\n   * @constructor\n   * @param {*} source The datasource to read from.\n   * @param {boolean} littleEndian Whether the image uses little endian.\n   * @param {boolean} bigTiff Whether the image uses bigTIFF conventions.\n   * @param {number} firstIFDOffset The numeric byte-offset from the start of the image\n   *                                to the first IFD.\n   * @param {GeoTIFFOptions} [options] further options.\n   */\n  constructor(source, littleEndian, bigTiff, firstIFDOffset, options = {}) {\n    super();\n    this.source = source;\n    this.littleEndian = littleEndian;\n    this.bigTiff = bigTiff;\n    this.firstIFDOffset = firstIFDOffset;\n    this.cache = options.cache || false;\n    this.ifdRequests = [];\n    this.ghostValues = null;\n  }\n\n  async getSlice(offset, size) {\n    const fallbackSize = this.bigTiff ? 4048 : 1024;\n    return new DataSlice(\n      (await this.source.fetch([{\n        offset,\n        length: typeof size !== 'undefined' ? size : fallbackSize,\n      }]))[0],\n      offset,\n      this.littleEndian,\n      this.bigTiff,\n    );\n  }\n\n  /**\n   * Instructs to parse an image file directory at the given file offset.\n   * As there is no way to ensure that a location is indeed the start of an IFD,\n   * this function must be called with caution (e.g only using the IFD offsets from\n   * the headers or other IFDs).\n   * @param {number} offset the offset to parse the IFD at\n   * @returns {Promise<ImageFileDirectory>} the parsed IFD\n   */\n  async parseFileDirectoryAt(offset) {\n    const entrySize = this.bigTiff ? 20 : 12;\n    const offsetSize = this.bigTiff ? 8 : 2;\n\n    let dataSlice = await this.getSlice(offset);\n    const numDirEntries = this.bigTiff\n      ? dataSlice.readUint64(offset)\n      : dataSlice.readUint16(offset);\n\n    // if the slice does not cover the whole IFD, request a bigger slice, where the\n    // whole IFD fits: num of entries + n x tag length + offset to next IFD\n    const byteSize = (numDirEntries * entrySize) + (this.bigTiff ? 16 : 6);\n    if (!dataSlice.covers(offset, byteSize)) {\n      dataSlice = await this.getSlice(offset, byteSize);\n    }\n\n    const fileDirectory = {};\n\n    // loop over the IFD and create a file directory object\n    let i = offset + (this.bigTiff ? 8 : 2);\n    for (let entryCount = 0; entryCount < numDirEntries; i += entrySize, ++entryCount) {\n      const fieldTag = dataSlice.readUint16(i);\n      const fieldType = dataSlice.readUint16(i + 2);\n      const typeCount = this.bigTiff\n        ? dataSlice.readUint64(i + 4)\n        : dataSlice.readUint32(i + 4);\n\n      let fieldValues;\n      let value;\n      const fieldTypeLength = getFieldTypeLength(fieldType);\n      const valueOffset = i + (this.bigTiff ? 12 : 8);\n\n      // check whether the value is directly encoded in the tag or refers to a\n      // different external byte range\n      if (fieldTypeLength * typeCount <= (this.bigTiff ? 8 : 4)) {\n        fieldValues = getValues(dataSlice, fieldType, typeCount, valueOffset);\n      } else {\n        // resolve the reference to the actual byte range\n        const actualOffset = dataSlice.readOffset(valueOffset);\n        const length = getFieldTypeLength(fieldType) * typeCount;\n\n        // check, whether we actually cover the referenced byte range; if not,\n        // request a new slice of bytes to read from it\n        if (dataSlice.covers(actualOffset, length)) {\n          fieldValues = getValues(dataSlice, fieldType, typeCount, actualOffset);\n        } else {\n          const fieldDataSlice = await this.getSlice(actualOffset, length);\n          fieldValues = getValues(fieldDataSlice, fieldType, typeCount, actualOffset);\n        }\n      }\n\n      // unpack single values from the array\n      if (typeCount === 1 && arrayFields.indexOf(fieldTag) === -1\n        && !(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {\n        value = fieldValues[0];\n      } else {\n        value = fieldValues;\n      }\n\n      // write the tags value to the file directly\n      fileDirectory[fieldTagNames[fieldTag]] = value;\n    }\n    const geoKeyDirectory = parseGeoKeyDirectory(fileDirectory);\n    const nextIFDByteOffset = dataSlice.readOffset(\n      offset + offsetSize + (entrySize * numDirEntries),\n    );\n\n    return new ImageFileDirectory(\n      fileDirectory,\n      geoKeyDirectory,\n      nextIFDByteOffset,\n    );\n  }\n\n  async requestIFD(index) {\n    // see if we already have that IFD index requested.\n    if (this.ifdRequests[index]) {\n      // attach to an already requested IFD\n      return this.ifdRequests[index];\n    } else if (index === 0) {\n      // special case for index 0\n      this.ifdRequests[index] = this.parseFileDirectoryAt(this.firstIFDOffset);\n      return this.ifdRequests[index];\n    } else if (!this.ifdRequests[index - 1]) {\n      // if the previous IFD was not yet loaded, load that one first\n      // this is the recursive call.\n      try {\n        this.ifdRequests[index - 1] = this.requestIFD(index - 1);\n      } catch (e) {\n        // if the previous one already was an index error, rethrow\n        // with the current index\n        if (e instanceof GeoTIFFImageIndexError) {\n          throw new GeoTIFFImageIndexError(index);\n        }\n        // rethrow anything else\n        throw e;\n      }\n    }\n    // if the previous IFD was loaded, we can finally fetch the one we are interested in.\n    // we need to wrap this in an IIFE, otherwise this.ifdRequests[index] would be delayed\n    this.ifdRequests[index] = (async () => {\n      const previousIfd = await this.ifdRequests[index - 1];\n      if (previousIfd.nextIFDByteOffset === 0) {\n        throw new GeoTIFFImageIndexError(index);\n      }\n      return this.parseFileDirectoryAt(previousIfd.nextIFDByteOffset);\n    })();\n    return this.ifdRequests[index];\n  }\n\n  /**\n   * Get the n-th internal subfile of an image. By default, the first is returned.\n   *\n   * @param {number} [index=0] the index of the image to return.\n   * @returns {Promise<GeoTIFFImage>} the image at the given index\n   */\n  async getImage(index = 0) {\n    const ifd = await this.requestIFD(index);\n    return new GeoTIFFImage(\n      ifd.fileDirectory, ifd.geoKeyDirectory,\n      this.dataView, this.littleEndian, this.cache, this.source,\n    );\n  }\n\n  /**\n   * Returns the count of the internal subfiles.\n   *\n   * @returns {Promise<number>} the number of internal subfile images\n   */\n  async getImageCount() {\n    let index = 0;\n    // loop until we run out of IFDs\n    let hasNext = true;\n    while (hasNext) {\n      try {\n        await this.requestIFD(index);\n        ++index;\n      } catch (e) {\n        if (e instanceof GeoTIFFImageIndexError) {\n          hasNext = false;\n        } else {\n          throw e;\n        }\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Get the values of the COG ghost area as a parsed map.\n   * See https://gdal.org/drivers/raster/cog.html#header-ghost-area for reference\n   * @returns {Promise<Object>} the parsed ghost area or null, if no such area was found\n   */\n  async getGhostValues() {\n    const offset = this.bigTiff ? 16 : 8;\n    if (this.ghostValues) {\n      return this.ghostValues;\n    }\n    const detectionString = 'GDAL_STRUCTURAL_METADATA_SIZE=';\n    const heuristicAreaSize = detectionString.length + 100;\n    let slice = await this.getSlice(offset, heuristicAreaSize);\n    if (detectionString === getValues(slice, fieldTypes.ASCII, detectionString.length, offset)) {\n      const valuesString = getValues(slice, fieldTypes.ASCII, heuristicAreaSize, offset);\n      const firstLine = valuesString.split('\\n')[0];\n      const metadataSize = Number(firstLine.split('=')[1].split(' ')[0]) + firstLine.length;\n      if (metadataSize > heuristicAreaSize) {\n        slice = await this.getSlice(offset, metadataSize);\n      }\n      const fullString = getValues(slice, fieldTypes.ASCII, metadataSize, offset);\n      this.ghostValues = {};\n      fullString\n        .split('\\n')\n        .filter((line) => line.length > 0)\n        .map((line) => line.split('='))\n        .forEach(([key, value]) => {\n          this.ghostValues[key] = value;\n        });\n    }\n    return this.ghostValues;\n  }\n\n  /**\n   * Parse a (Geo)TIFF file from the given source.\n   *\n   * @param {*} source The source of data to parse from.\n   * @param {GeoTIFFOptions} [options] Additional options.\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   */\n  static async fromSource(source, options, signal) {\n    const headerData = (await source.fetch([{ offset: 0, length: 1024 }], signal))[0];\n    const dataView = new DataView64(headerData);\n\n    const BOM = dataView.getUint16(0, 0);\n    let littleEndian;\n    if (BOM === 0x4949) {\n      littleEndian = true;\n    } else if (BOM === 0x4D4D) {\n      littleEndian = false;\n    } else {\n      throw new TypeError('Invalid byte order value.');\n    }\n\n    const magicNumber = dataView.getUint16(2, littleEndian);\n    let bigTiff;\n    if (magicNumber === 42) {\n      bigTiff = false;\n    } else if (magicNumber === 43) {\n      bigTiff = true;\n      const offsetByteSize = dataView.getUint16(4, littleEndian);\n      if (offsetByteSize !== 8) {\n        throw new Error('Unsupported offset byte-size.');\n      }\n    } else {\n      throw new TypeError('Invalid magic number.');\n    }\n\n    const firstIFDOffset = bigTiff\n      ? dataView.getUint64(8, littleEndian)\n      : dataView.getUint32(4, littleEndian);\n    return new GeoTIFF(source, littleEndian, bigTiff, firstIFDOffset, options);\n  }\n\n  /**\n   * Closes the underlying file buffer\n   * N.B. After the GeoTIFF has been completely processed it needs\n   * to be closed but only if it has been constructed from a file.\n   */\n  close() {\n    if (typeof this.source.close === 'function') {\n      return this.source.close();\n    }\n    return false;\n  }\n}\n\nexport { GeoTIFF };\nexport default GeoTIFF;\n\n/**\n * Wrapper for GeoTIFF files that have external overviews.\n * @augments GeoTIFFBase\n */\nclass MultiGeoTIFF extends GeoTIFFBase {\n  /**\n   * Construct a new MultiGeoTIFF from a main and several overview files.\n   * @param {GeoTIFF} mainFile The main GeoTIFF file.\n   * @param {GeoTIFF[]} overviewFiles An array of overview files.\n   */\n  constructor(mainFile, overviewFiles) {\n    super();\n    this.mainFile = mainFile;\n    this.overviewFiles = overviewFiles;\n    this.imageFiles = [mainFile].concat(overviewFiles);\n\n    this.fileDirectoriesPerFile = null;\n    this.fileDirectoriesPerFileParsing = null;\n    this.imageCount = null;\n  }\n\n  async parseFileDirectoriesPerFile() {\n    const requests = [this.mainFile.parseFileDirectoryAt(this.mainFile.firstIFDOffset)]\n      .concat(this.overviewFiles.map((file) => file.parseFileDirectoryAt(file.firstIFDOffset)));\n\n    this.fileDirectoriesPerFile = await Promise.all(requests);\n    return this.fileDirectoriesPerFile;\n  }\n\n  /**\n   * Get the n-th internal subfile of an image. By default, the first is returned.\n   *\n   * @param {number} [index=0] the index of the image to return.\n   * @returns {Promise<GeoTIFFImage>} the image at the given index\n   */\n  async getImage(index = 0) {\n    await this.getImageCount();\n    await this.parseFileDirectoriesPerFile();\n    let visited = 0;\n    let relativeIndex = 0;\n    for (let i = 0; i < this.imageFiles.length; i++) {\n      const imageFile = this.imageFiles[i];\n      for (let ii = 0; ii < this.imageCounts[i]; ii++) {\n        if (index === visited) {\n          const ifd = await imageFile.requestIFD(relativeIndex);\n          return new GeoTIFFImage(\n            ifd.fileDirectory, ifd.geoKeyDirectory,\n            imageFile.dataView, imageFile.littleEndian, imageFile.cache, imageFile.source,\n          );\n        }\n        visited++;\n        relativeIndex++;\n      }\n      relativeIndex = 0;\n    }\n\n    throw new RangeError('Invalid image index');\n  }\n\n  /**\n   * Returns the count of the internal subfiles.\n   *\n   * @returns {Promise<number>} the number of internal subfile images\n   */\n  async getImageCount() {\n    if (this.imageCount !== null) {\n      return this.imageCount;\n    }\n    const requests = [this.mainFile.getImageCount()]\n      .concat(this.overviewFiles.map((file) => file.getImageCount()));\n    this.imageCounts = await Promise.all(requests);\n    this.imageCount = this.imageCounts.reduce((count, ifds) => count + ifds, 0);\n    return this.imageCount;\n  }\n}\n\nexport { MultiGeoTIFF };\n\n/**\n * Creates a new GeoTIFF from a remote URL.\n * @param {string} url The URL to access the image from\n * @param {object} [options] Additional options to pass to the source.\n *                           See {@link makeRemoteSource} for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromUrl(url, options = {}, signal) {\n  return GeoTIFF.fromSource(makeRemoteSource(url, options), signal);\n}\n\n/**\n * Creates a new GeoTIFF from a custom {@link BaseClient}.\n * @param {BaseClient} client The client.\n * @param {object} [options] Additional options to pass to the source.\n *                           See {@link makeRemoteSource} for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromCustomClient(client, options = {}, signal) {\n  return GeoTIFF.fromSource(makeCustomSource(client, options), signal);\n}\n\n/**\n * Construct a new GeoTIFF from an\n * [ArrayBuffer]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer}.\n * @param {ArrayBuffer} arrayBuffer The data to read the file from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromArrayBuffer(arrayBuffer, signal) {\n  return GeoTIFF.fromSource(makeBufferSource(arrayBuffer), signal);\n}\n\n/**\n * Construct a GeoTIFF from a local file path. This uses the node\n * [filesystem API]{@link https://nodejs.org/api/fs.html} and is\n * not available on browsers.\n *\n * N.B. After the GeoTIFF has been completely processed it needs\n * to be closed but only if it has been constructed from a file.\n * @param {string} path The file path to read from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromFile(path, signal) {\n  return GeoTIFF.fromSource(makeFileSource(path), signal);\n}\n\n/**\n * Construct a GeoTIFF from an HTML\n * [Blob]{@link https://developer.mozilla.org/en-US/docs/Web/API/Blob} or\n * [File]{@link https://developer.mozilla.org/en-US/docs/Web/API/File}\n * object.\n * @param {Blob|File} blob The Blob or File object to read from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromBlob(blob, signal) {\n  return GeoTIFF.fromSource(makeFileReaderSource(blob), signal);\n}\n\n/**\n * Construct a MultiGeoTIFF from the given URLs.\n * @param {string} mainUrl The URL for the main file.\n * @param {string[]} overviewUrls An array of URLs for the overview images.\n * @param {Object} [options] Additional options to pass to the source.\n *                           See [makeRemoteSource]{@link module:source.makeRemoteSource}\n *                           for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<MultiGeoTIFF>} The resulting MultiGeoTIFF file.\n */\nexport async function fromUrls(mainUrl, overviewUrls = [], options = {}, signal) {\n  const mainFile = await GeoTIFF.fromSource(makeRemoteSource(mainUrl, options), signal);\n  const overviewFiles = await Promise.all(\n    overviewUrls.map((url) => GeoTIFF.fromSource(makeRemoteSource(url, options))),\n  );\n\n  return new MultiGeoTIFF(mainFile, overviewFiles);\n}\n\n/**\n * Main creating function for GeoTIFF files.\n * @param {(Array)} array of pixel values\n * @returns {metadata} metadata\n */\nexport function writeArrayBuffer(values, metadata) {\n  return writeGeotiff(values, metadata);\n}\n\nexport { Pool };\nexport { GeoTIFFImage };\nexport { BaseClient, BaseResponse };\n","'use strict';\n\n/** @type {import('./shams')} */\n/* eslint complexity: [2, 18], max-statements: [2, 33] */\nmodule.exports = function hasSymbols() {\n\tif (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }\n\tif (typeof Symbol.iterator === 'symbol') { return true; }\n\n\t/** @type {{ [k in symbol]?: unknown }} */\n\tvar obj = {};\n\tvar sym = Symbol('test');\n\tvar symObj = Object(sym);\n\tif (typeof sym === 'string') { return false; }\n\n\tif (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }\n\tif (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }\n\n\t// temp disabled per https://github.com/ljharb/object.assign/issues/17\n\t// if (sym instanceof Symbol) { return false; }\n\t// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4\n\t// if (!(symObj instanceof Symbol)) { return false; }\n\n\t// if (typeof Symbol.prototype.toString !== 'function') { return false; }\n\t// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }\n\n\tvar symVal = 42;\n\tobj[sym] = symVal;\n\tfor (var _ in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop\n\tif (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }\n\n\tif (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }\n\n\tvar syms = Object.getOwnPropertySymbols(obj);\n\tif (syms.length !== 1 || syms[0] !== sym) { return false; }\n\n\tif (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }\n\n\tif (typeof Object.getOwnPropertyDescriptor === 'function') {\n\t\t// eslint-disable-next-line no-extra-parens\n\t\tvar descriptor = /** @type {PropertyDescriptor} */ (Object.getOwnPropertyDescriptor(obj, sym));\n\t\tif (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }\n\t}\n\n\treturn true;\n};\n","'use strict';\n\n/** @type {import('./Reflect.getPrototypeOf')} */\nmodule.exports = (typeof Reflect !== 'undefined' && Reflect.getPrototypeOf) || null;\n","'use strict';\n\nvar hasSymbols = require('has-symbols/shams');\n\n/** @type {import('.')} */\nmodule.exports = function hasToStringTagShams() {\n\treturn hasSymbols() && !!Symbol.toStringTag;\n};\n","'use strict';\n\nvar origSymbol = typeof Symbol !== 'undefined' && Symbol;\nvar hasSymbolSham = require('./shams');\n\n/** @type {import('.')} */\nmodule.exports = function hasNativeSymbols() {\n\tif (typeof origSymbol !== 'function') { return false; }\n\tif (typeof Symbol !== 'function') { return false; }\n\tif (typeof origSymbol('foo') !== 'symbol') { return false; }\n\tif (typeof Symbol('bar') !== 'symbol') { return false; }\n\n\treturn hasSymbolSham();\n};\n","'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = Function.prototype.bind || implementation;\n","'use strict';\n\nvar undefined;\n\nvar $Object = require('es-object-atoms');\n\nvar $Error = require('es-errors');\nvar $EvalError = require('es-errors/eval');\nvar $RangeError = require('es-errors/range');\nvar $ReferenceError = require('es-errors/ref');\nvar $SyntaxError = require('es-errors/syntax');\nvar $TypeError = require('es-errors/type');\nvar $URIError = require('es-errors/uri');\n\nvar abs = require('math-intrinsics/abs');\nvar floor = require('math-intrinsics/floor');\nvar max = require('math-intrinsics/max');\nvar min = require('math-intrinsics/min');\nvar pow = require('math-intrinsics/pow');\nvar round = require('math-intrinsics/round');\nvar sign = require('math-intrinsics/sign');\n\nvar $Function = Function;\n\n// eslint-disable-next-line consistent-return\nvar getEvalledConstructor = function (expressionSyntax) {\n\ttry {\n\t\treturn $Function('\"use strict\"; return (' + expressionSyntax + ').constructor;')();\n\t} catch (e) {}\n};\n\nvar $gOPD = require('gopd');\nvar $defineProperty = require('es-define-property');\n\nvar throwTypeError = function () {\n\tthrow new $TypeError();\n};\nvar ThrowTypeError = $gOPD\n\t? (function () {\n\t\ttry {\n\t\t\t// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties\n\t\t\targuments.callee; // IE 8 does not throw here\n\t\t\treturn throwTypeError;\n\t\t} catch (calleeThrows) {\n\t\t\ttry {\n\t\t\t\t// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')\n\t\t\t\treturn $gOPD(arguments, 'callee').get;\n\t\t\t} catch (gOPDthrows) {\n\t\t\t\treturn throwTypeError;\n\t\t\t}\n\t\t}\n\t}())\n\t: throwTypeError;\n\nvar hasSymbols = require('has-symbols')();\n\nvar getProto = require('get-proto');\nvar $ObjectGPO = require('get-proto/Object.getPrototypeOf');\nvar $ReflectGPO = require('get-proto/Reflect.getPrototypeOf');\n\nvar $apply = require('call-bind-apply-helpers/functionApply');\nvar $call = require('call-bind-apply-helpers/functionCall');\n\nvar needsEval = {};\n\nvar TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined : getProto(Uint8Array);\n\nvar INTRINSICS = {\n\t__proto__: null,\n\t'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,\n\t'%Array%': Array,\n\t'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,\n\t'%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,\n\t'%AsyncFromSyncIteratorPrototype%': undefined,\n\t'%AsyncFunction%': needsEval,\n\t'%AsyncGenerator%': needsEval,\n\t'%AsyncGeneratorFunction%': needsEval,\n\t'%AsyncIteratorPrototype%': needsEval,\n\t'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,\n\t'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,\n\t'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,\n\t'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,\n\t'%Boolean%': Boolean,\n\t'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,\n\t'%Date%': Date,\n\t'%decodeURI%': decodeURI,\n\t'%decodeURIComponent%': decodeURIComponent,\n\t'%encodeURI%': encodeURI,\n\t'%encodeURIComponent%': encodeURIComponent,\n\t'%Error%': $Error,\n\t'%eval%': eval, // eslint-disable-line no-eval\n\t'%EvalError%': $EvalError,\n\t'%Float16Array%': typeof Float16Array === 'undefined' ? undefined : Float16Array,\n\t'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,\n\t'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,\n\t'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,\n\t'%Function%': $Function,\n\t'%GeneratorFunction%': needsEval,\n\t'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,\n\t'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,\n\t'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,\n\t'%isFinite%': isFinite,\n\t'%isNaN%': isNaN,\n\t'%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,\n\t'%JSON%': typeof JSON === 'object' ? JSON : undefined,\n\t'%Map%': typeof Map === 'undefined' ? undefined : Map,\n\t'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),\n\t'%Math%': Math,\n\t'%Number%': Number,\n\t'%Object%': $Object,\n\t'%Object.getOwnPropertyDescriptor%': $gOPD,\n\t'%parseFloat%': parseFloat,\n\t'%parseInt%': parseInt,\n\t'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,\n\t'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,\n\t'%RangeError%': $RangeError,\n\t'%ReferenceError%': $ReferenceError,\n\t'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,\n\t'%RegExp%': RegExp,\n\t'%Set%': typeof Set === 'undefined' ? undefined : Set,\n\t'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),\n\t'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,\n\t'%String%': String,\n\t'%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined,\n\t'%Symbol%': hasSymbols ? Symbol : undefined,\n\t'%SyntaxError%': $SyntaxError,\n\t'%ThrowTypeError%': ThrowTypeError,\n\t'%TypedArray%': TypedArray,\n\t'%TypeError%': $TypeError,\n\t'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,\n\t'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,\n\t'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,\n\t'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,\n\t'%URIError%': $URIError,\n\t'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,\n\t'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,\n\t'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet,\n\n\t'%Function.prototype.call%': $call,\n\t'%Function.prototype.apply%': $apply,\n\t'%Object.defineProperty%': $defineProperty,\n\t'%Object.getPrototypeOf%': $ObjectGPO,\n\t'%Math.abs%': abs,\n\t'%Math.floor%': floor,\n\t'%Math.max%': max,\n\t'%Math.min%': min,\n\t'%Math.pow%': pow,\n\t'%Math.round%': round,\n\t'%Math.sign%': sign,\n\t'%Reflect.getPrototypeOf%': $ReflectGPO\n};\n\nif (getProto) {\n\ttry {\n\t\tnull.error; // eslint-disable-line no-unused-expressions\n\t} catch (e) {\n\t\t// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229\n\t\tvar errorProto = getProto(getProto(e));\n\t\tINTRINSICS['%Error.prototype%'] = errorProto;\n\t}\n}\n\nvar doEval = function doEval(name) {\n\tvar value;\n\tif (name === '%AsyncFunction%') {\n\t\tvalue = getEvalledConstructor('async function () {}');\n\t} else if (name === '%GeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('function* () {}');\n\t} else if (name === '%AsyncGeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('async function* () {}');\n\t} else if (name === '%AsyncGenerator%') {\n\t\tvar fn = doEval('%AsyncGeneratorFunction%');\n\t\tif (fn) {\n\t\t\tvalue = fn.prototype;\n\t\t}\n\t} else if (name === '%AsyncIteratorPrototype%') {\n\t\tvar gen = doEval('%AsyncGenerator%');\n\t\tif (gen && getProto) {\n\t\t\tvalue = getProto(gen.prototype);\n\t\t}\n\t}\n\n\tINTRINSICS[name] = value;\n\n\treturn value;\n};\n\nvar LEGACY_ALIASES = {\n\t__proto__: null,\n\t'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],\n\t'%ArrayPrototype%': ['Array', 'prototype'],\n\t'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],\n\t'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],\n\t'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],\n\t'%ArrayProto_values%': ['Array', 'prototype', 'values'],\n\t'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],\n\t'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],\n\t'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],\n\t'%BooleanPrototype%': ['Boolean', 'prototype'],\n\t'%DataViewPrototype%': ['DataView', 'prototype'],\n\t'%DatePrototype%': ['Date', 'prototype'],\n\t'%ErrorPrototype%': ['Error', 'prototype'],\n\t'%EvalErrorPrototype%': ['EvalError', 'prototype'],\n\t'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],\n\t'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],\n\t'%FunctionPrototype%': ['Function', 'prototype'],\n\t'%Generator%': ['GeneratorFunction', 'prototype'],\n\t'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],\n\t'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],\n\t'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],\n\t'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],\n\t'%JSONParse%': ['JSON', 'parse'],\n\t'%JSONStringify%': ['JSON', 'stringify'],\n\t'%MapPrototype%': ['Map', 'prototype'],\n\t'%NumberPrototype%': ['Number', 'prototype'],\n\t'%ObjectPrototype%': ['Object', 'prototype'],\n\t'%ObjProto_toString%': ['Object', 'prototype', 'toString'],\n\t'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],\n\t'%PromisePrototype%': ['Promise', 'prototype'],\n\t'%PromiseProto_then%': ['Promise', 'prototype', 'then'],\n\t'%Promise_all%': ['Promise', 'all'],\n\t'%Promise_reject%': ['Promise', 'reject'],\n\t'%Promise_resolve%': ['Promise', 'resolve'],\n\t'%RangeErrorPrototype%': ['RangeError', 'prototype'],\n\t'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],\n\t'%RegExpPrototype%': ['RegExp', 'prototype'],\n\t'%SetPrototype%': ['Set', 'prototype'],\n\t'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],\n\t'%StringPrototype%': ['String', 'prototype'],\n\t'%SymbolPrototype%': ['Symbol', 'prototype'],\n\t'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],\n\t'%TypedArrayPrototype%': ['TypedArray', 'prototype'],\n\t'%TypeErrorPrototype%': ['TypeError', 'prototype'],\n\t'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],\n\t'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],\n\t'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],\n\t'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],\n\t'%URIErrorPrototype%': ['URIError', 'prototype'],\n\t'%WeakMapPrototype%': ['WeakMap', 'prototype'],\n\t'%WeakSetPrototype%': ['WeakSet', 'prototype']\n};\n\nvar bind = require('function-bind');\nvar hasOwn = require('hasown');\nvar $concat = bind.call($call, Array.prototype.concat);\nvar $spliceApply = bind.call($apply, Array.prototype.splice);\nvar $replace = bind.call($call, String.prototype.replace);\nvar $strSlice = bind.call($call, String.prototype.slice);\nvar $exec = bind.call($call, RegExp.prototype.exec);\n\n/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */\nvar rePropName = /[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;\nvar reEscapeChar = /\\\\(\\\\)?/g; /** Used to match backslashes in property paths. */\nvar stringToPath = function stringToPath(string) {\n\tvar first = $strSlice(string, 0, 1);\n\tvar last = $strSlice(string, -1);\n\tif (first === '%' && last !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected closing `%`');\n\t} else if (last === '%' && first !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected opening `%`');\n\t}\n\tvar result = [];\n\t$replace(string, rePropName, function (match, number, quote, subString) {\n\t\tresult[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;\n\t});\n\treturn result;\n};\n/* end adaptation */\n\nvar getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {\n\tvar intrinsicName = name;\n\tvar alias;\n\tif (hasOwn(LEGACY_ALIASES, intrinsicName)) {\n\t\talias = LEGACY_ALIASES[intrinsicName];\n\t\tintrinsicName = '%' + alias[0] + '%';\n\t}\n\n\tif (hasOwn(INTRINSICS, intrinsicName)) {\n\t\tvar value = INTRINSICS[intrinsicName];\n\t\tif (value === needsEval) {\n\t\t\tvalue = doEval(intrinsicName);\n\t\t}\n\t\tif (typeof value === 'undefined' && !allowMissing) {\n\t\t\tthrow new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');\n\t\t}\n\n\t\treturn {\n\t\t\talias: alias,\n\t\t\tname: intrinsicName,\n\t\t\tvalue: value\n\t\t};\n\t}\n\n\tthrow new $SyntaxError('intrinsic ' + name + ' does not exist!');\n};\n\nmodule.exports = function GetIntrinsic(name, allowMissing) {\n\tif (typeof name !== 'string' || name.length === 0) {\n\t\tthrow new $TypeError('intrinsic name must be a non-empty string');\n\t}\n\tif (arguments.length > 1 && typeof allowMissing !== 'boolean') {\n\t\tthrow new $TypeError('\"allowMissing\" argument must be a boolean');\n\t}\n\n\tif ($exec(/^%?[^%]*%?$/, name) === null) {\n\t\tthrow new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');\n\t}\n\tvar parts = stringToPath(name);\n\tvar intrinsicBaseName = parts.length > 0 ? parts[0] : '';\n\n\tvar intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);\n\tvar intrinsicRealName = intrinsic.name;\n\tvar value = intrinsic.value;\n\tvar skipFurtherCaching = false;\n\n\tvar alias = intrinsic.alias;\n\tif (alias) {\n\t\tintrinsicBaseName = alias[0];\n\t\t$spliceApply(parts, $concat([0, 1], alias));\n\t}\n\n\tfor (var i = 1, isOwn = true; i < parts.length; i += 1) {\n\t\tvar part = parts[i];\n\t\tvar first = $strSlice(part, 0, 1);\n\t\tvar last = $strSlice(part, -1);\n\t\tif (\n\t\t\t(\n\t\t\t\t(first === '\"' || first === \"'\" || first === '`')\n\t\t\t\t|| (last === '\"' || last === \"'\" || last === '`')\n\t\t\t)\n\t\t\t&& first !== last\n\t\t) {\n\t\t\tthrow new $SyntaxError('property names with quotes must have matching quotes');\n\t\t}\n\t\tif (part === 'constructor' || !isOwn) {\n\t\t\tskipFurtherCaching = true;\n\t\t}\n\n\t\tintrinsicBaseName += '.' + part;\n\t\tintrinsicRealName = '%' + intrinsicBaseName + '%';\n\n\t\tif (hasOwn(INTRINSICS, intrinsicRealName)) {\n\t\t\tvalue = INTRINSICS[intrinsicRealName];\n\t\t} else if (value != null) {\n\t\t\tif (!(part in value)) {\n\t\t\t\tif (!allowMissing) {\n\t\t\t\t\tthrow new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');\n\t\t\t\t}\n\t\t\t\treturn void undefined;\n\t\t\t}\n\t\t\tif ($gOPD && (i + 1) >= parts.length) {\n\t\t\t\tvar desc = $gOPD(value, part);\n\t\t\t\tisOwn = !!desc;\n\n\t\t\t\t// By convention, when a data property is converted to an accessor\n\t\t\t\t// property to emulate a data property that does not suffer from\n\t\t\t\t// the override mistake, that accessor's getter is marked with\n\t\t\t\t// an `originalValue` property. Here, when we detect this, we\n\t\t\t\t// uphold the illusion by pretending to see that original data\n\t\t\t\t// property, i.e., returning the value rather than the getter\n\t\t\t\t// itself.\n\t\t\t\tif (isOwn && 'get' in desc && !('originalValue' in desc.get)) {\n\t\t\t\t\tvalue = desc.get;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = value[part];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tisOwn = hasOwn(value, part);\n\t\t\t\tvalue = value[part];\n\t\t\t}\n\n\t\t\tif (isOwn && !skipFurtherCaching) {\n\t\t\t\tINTRINSICS[intrinsicRealName] = value;\n\t\t\t}\n\t\t}\n\t}\n\treturn value;\n};\n","const registry = new Map();\n\nexport function addDecoder(cases, importFn) {\n  if (!Array.isArray(cases)) {\n    cases = [cases]; // eslint-disable-line no-param-reassign\n  }\n  cases.forEach((c) => registry.set(c, importFn));\n}\n\nexport async function getDecoder(fileDirectory) {\n  const importFn = registry.get(fileDirectory.Compression);\n  if (!importFn) {\n    throw new Error(`Unknown compression method identifier: ${fileDirectory.Compression}`);\n  }\n  const Decoder = await importFn();\n  return new Decoder(fileDirectory);\n}\n\n// Add default decoders to registry (end-user may override with other implementations)\naddDecoder([undefined, 1], () => import('./raw.js').then((m) => m.default));\naddDecoder(5, () => import('./lzw.js').then((m) => m.default));\naddDecoder(6, () => {\n  throw new Error('old style JPEG compression is not supported.');\n});\naddDecoder(7, () => import('./jpeg.js').then((m) => m.default));\naddDecoder([8, 32946], () => import('./deflate.js').then((m) => m.default));\naddDecoder(32773, () => import('./packbits.js').then((m) => m.default));\naddDecoder(34887, () => import('./lerc.js')\n  .then(async (m) => {\n    await m.zstd.init();\n    return m;\n  })\n  .then((m) => m.default),\n);\naddDecoder(50001, () => import('./webimage.js').then((m) => m.default));\n","'use strict';\n\nvar $Object = require('es-object-atoms');\n\n/** @type {import('./Object.getPrototypeOf')} */\nmodule.exports = $Object.getPrototypeOf || null;\n","'use strict';\n\n/** @type {import('.')} */\nvar $gOPD = require('./gOPD');\n\nif ($gOPD) {\n\ttry {\n\t\t$gOPD([], 'length');\n\t} catch (e) {\n\t\t// IE 8 has a broken gOPD\n\t\t$gOPD = null;\n\t}\n}\n\nmodule.exports = $gOPD;\n","'use strict';\n\nvar isCallable = require('is-callable');\n\nvar toStr = Object.prototype.toString;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/** @type {<This, A extends readonly unknown[]>(arr: A, iterator: (this: This | void, value: A[number], index: number, arr: A) => void, receiver: This | undefined) => void} */\nvar forEachArray = function forEachArray(array, iterator, receiver) {\n    for (var i = 0, len = array.length; i < len; i++) {\n        if (hasOwnProperty.call(array, i)) {\n            if (receiver == null) {\n                iterator(array[i], i, array);\n            } else {\n                iterator.call(receiver, array[i], i, array);\n            }\n        }\n    }\n};\n\n/** @type {<This, S extends string>(string: S, iterator: (this: This | void, value: S[number], index: number, string: S) => void, receiver: This | undefined) => void} */\nvar forEachString = function forEachString(string, iterator, receiver) {\n    for (var i = 0, len = string.length; i < len; i++) {\n        // no such thing as a sparse string.\n        if (receiver == null) {\n            iterator(string.charAt(i), i, string);\n        } else {\n            iterator.call(receiver, string.charAt(i), i, string);\n        }\n    }\n};\n\n/** @type {<This, O>(obj: O, iterator: (this: This | void, value: O[keyof O], index: keyof O, obj: O) => void, receiver: This | undefined) => void} */\nvar forEachObject = function forEachObject(object, iterator, receiver) {\n    for (var k in object) {\n        if (hasOwnProperty.call(object, k)) {\n            if (receiver == null) {\n                iterator(object[k], k, object);\n            } else {\n                iterator.call(receiver, object[k], k, object);\n            }\n        }\n    }\n};\n\n/** @type {(x: unknown) => x is readonly unknown[]} */\nfunction isArray(x) {\n    return toStr.call(x) === '[object Array]';\n}\n\n/** @type {import('.')._internal} */\nmodule.exports = function forEach(list, iterator, thisArg) {\n    if (!isCallable(iterator)) {\n        throw new TypeError('iterator must be a function');\n    }\n\n    var receiver;\n    if (arguments.length >= 3) {\n        receiver = thisArg;\n    }\n\n    if (isArray(list)) {\n        forEachArray(list, iterator, receiver);\n    } else if (typeof list === 'string') {\n        forEachString(list, iterator, receiver);\n    } else {\n        forEachObject(list, iterator, receiver);\n    }\n};\n","export function fromWhiteIsZero(raster, max) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  let value;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    value = 256 - (raster[i] / max * 256);\n    rgbRaster[j] = value;\n    rgbRaster[j + 1] = value;\n    rgbRaster[j + 2] = value;\n  }\n  return rgbRaster;\n}\n\nexport function fromBlackIsZero(raster, max) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  let value;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    value = raster[i] / max * 256;\n    rgbRaster[j] = value;\n    rgbRaster[j + 1] = value;\n    rgbRaster[j + 2] = value;\n  }\n  return rgbRaster;\n}\n\nexport function fromPalette(raster, colorMap) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  const greenOffset = colorMap.length / 3;\n  const blueOffset = colorMap.length / 3 * 2;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    const mapIndex = raster[i];\n    rgbRaster[j] = colorMap[mapIndex] / 65536 * 256;\n    rgbRaster[j + 1] = colorMap[mapIndex + greenOffset] / 65536 * 256;\n    rgbRaster[j + 2] = colorMap[mapIndex + blueOffset] / 65536 * 256;\n  }\n  return rgbRaster;\n}\n\nexport function fromCMYK(cmykRaster) {\n  const { width, height } = cmykRaster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  for (let i = 0, j = 0; i < cmykRaster.length; i += 4, j += 3) {\n    const c = cmykRaster[i];\n    const m = cmykRaster[i + 1];\n    const y = cmykRaster[i + 2];\n    const k = cmykRaster[i + 3];\n\n    rgbRaster[j] = 255 * ((255 - c) / 256) * ((255 - k) / 256);\n    rgbRaster[j + 1] = 255 * ((255 - m) / 256) * ((255 - k) / 256);\n    rgbRaster[j + 2] = 255 * ((255 - y) / 256) * ((255 - k) / 256);\n  }\n  return rgbRaster;\n}\n\nexport function fromYCbCr(yCbCrRaster) {\n  const { width, height } = yCbCrRaster;\n  const rgbRaster = new Uint8ClampedArray(width * height * 3);\n  for (let i = 0, j = 0; i < yCbCrRaster.length; i += 3, j += 3) {\n    const y = yCbCrRaster[i];\n    const cb = yCbCrRaster[i + 1];\n    const cr = yCbCrRaster[i + 2];\n\n    rgbRaster[j] = (y + (1.40200 * (cr - 0x80)));\n    rgbRaster[j + 1] = (y - (0.34414 * (cb - 0x80)) - (0.71414 * (cr - 0x80)));\n    rgbRaster[j + 2] = (y + (1.77200 * (cb - 0x80)));\n  }\n  return rgbRaster;\n}\n\nconst Xn = 0.95047;\nconst Yn = 1.00000;\nconst Zn = 1.08883;\n\n// from https://github.com/antimatter15/rgb-lab/blob/master/color.js\n\nexport function fromCIELab(cieLabRaster) {\n  const { width, height } = cieLabRaster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n\n  for (let i = 0, j = 0; i < cieLabRaster.length; i += 3, j += 3) {\n    const L = cieLabRaster[i + 0];\n    const a_ = cieLabRaster[i + 1] << 24 >> 24; // conversion from uint8 to int8\n    const b_ = cieLabRaster[i + 2] << 24 >> 24; // same\n\n    let y = (L + 16) / 116;\n    let x = (a_ / 500) + y;\n    let z = y - (b_ / 200);\n    let r;\n    let g;\n    let b;\n\n    x = Xn * ((x * x * x > 0.008856) ? x * x * x : (x - (16 / 116)) / 7.787);\n    y = Yn * ((y * y * y > 0.008856) ? y * y * y : (y - (16 / 116)) / 7.787);\n    z = Zn * ((z * z * z > 0.008856) ? z * z * z : (z - (16 / 116)) / 7.787);\n\n    r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n    g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n    b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n    r = (r > 0.0031308) ? ((1.055 * (r ** (1 / 2.4))) - 0.055) : 12.92 * r;\n    g = (g > 0.0031308) ? ((1.055 * (g ** (1 / 2.4))) - 0.055) : 12.92 * g;\n    b = (b > 0.0031308) ? ((1.055 * (b ** (1 / 2.4))) - 0.055) : 12.92 * b;\n\n    rgbRaster[j] = Math.max(0, Math.min(1, r)) * 255;\n    rgbRaster[j + 1] = Math.max(0, Math.min(1, g)) * 255;\n    rgbRaster[j + 2] = Math.max(0, Math.min(1, b)) * 255;\n  }\n  return rgbRaster;\n}\n","/**\n * @module resample\n */\n\nfunction copyNewSize(array, width, height, samplesPerPixel = 1) {\n  return new (Object.getPrototypeOf(array).constructor)(width * height * samplesPerPixel);\n}\n\n/**\n * Resample the input arrays using nearest neighbor value selection.\n * @param {TypedArray[]} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @returns {TypedArray[]} The resampled rasters\n */\nexport function resampleNearest(valueArrays, inWidth, inHeight, outWidth, outHeight) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n  return valueArrays.map((array) => {\n    const newArray = copyNewSize(array, outWidth, outHeight);\n    for (let y = 0; y < outHeight; ++y) {\n      const cy = Math.min(Math.round(relY * y), inHeight - 1);\n      for (let x = 0; x < outWidth; ++x) {\n        const cx = Math.min(Math.round(relX * x), inWidth - 1);\n        const value = array[(cy * inWidth) + cx];\n        newArray[(y * outWidth) + x] = value;\n      }\n    }\n    return newArray;\n  });\n}\n\n// simple linear interpolation, code from:\n// https://en.wikipedia.org/wiki/Linear_interpolation#Programming_language_support\nfunction lerp(v0, v1, t) {\n  return ((1 - t) * v0) + (t * v1);\n}\n\n/**\n * Resample the input arrays using bilinear interpolation.\n * @param {TypedArray[]} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @returns {TypedArray[]} The resampled rasters\n */\nexport function resampleBilinear(valueArrays, inWidth, inHeight, outWidth, outHeight) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n\n  return valueArrays.map((array) => {\n    const newArray = copyNewSize(array, outWidth, outHeight);\n    for (let y = 0; y < outHeight; ++y) {\n      const rawY = relY * y;\n\n      const yl = Math.floor(rawY);\n      const yh = Math.min(Math.ceil(rawY), (inHeight - 1));\n\n      for (let x = 0; x < outWidth; ++x) {\n        const rawX = relX * x;\n        const tx = rawX % 1;\n\n        const xl = Math.floor(rawX);\n        const xh = Math.min(Math.ceil(rawX), (inWidth - 1));\n\n        const ll = array[(yl * inWidth) + xl];\n        const hl = array[(yl * inWidth) + xh];\n        const lh = array[(yh * inWidth) + xl];\n        const hh = array[(yh * inWidth) + xh];\n\n        const value = lerp(\n          lerp(ll, hl, tx),\n          lerp(lh, hh, tx),\n          rawY % 1,\n        );\n        newArray[(y * outWidth) + x] = value;\n      }\n    }\n    return newArray;\n  });\n}\n\n/**\n * Resample the input arrays using the selected resampling method.\n * @param {TypedArray[]} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {string} [method = 'nearest'] The desired resampling method\n * @returns {TypedArray[]} The resampled rasters\n */\nexport function resample(valueArrays, inWidth, inHeight, outWidth, outHeight, method = 'nearest') {\n  switch (method.toLowerCase()) {\n    case 'nearest':\n      return resampleNearest(valueArrays, inWidth, inHeight, outWidth, outHeight);\n    case 'bilinear':\n    case 'linear':\n      return resampleBilinear(valueArrays, inWidth, inHeight, outWidth, outHeight);\n    default:\n      throw new Error(`Unsupported resampling method: '${method}'`);\n  }\n}\n\n/**\n * Resample the pixel interleaved input array using nearest neighbor value selection.\n * @param {TypedArray} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {number} samples The number of samples per pixel for pixel\n *                         interleaved data\n * @returns {TypedArray} The resampled raster\n */\nexport function resampleNearestInterleaved(\n  valueArray, inWidth, inHeight, outWidth, outHeight, samples) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n\n  const newArray = copyNewSize(valueArray, outWidth, outHeight, samples);\n  for (let y = 0; y < outHeight; ++y) {\n    const cy = Math.min(Math.round(relY * y), inHeight - 1);\n    for (let x = 0; x < outWidth; ++x) {\n      const cx = Math.min(Math.round(relX * x), inWidth - 1);\n      for (let i = 0; i < samples; ++i) {\n        const value = valueArray[(cy * inWidth * samples) + (cx * samples) + i];\n        newArray[(y * outWidth * samples) + (x * samples) + i] = value;\n      }\n    }\n  }\n  return newArray;\n}\n\n/**\n * Resample the pixel interleaved input array using bilinear interpolation.\n * @param {TypedArray} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {number} samples The number of samples per pixel for pixel\n *                         interleaved data\n * @returns {TypedArray} The resampled raster\n */\nexport function resampleBilinearInterleaved(\n  valueArray, inWidth, inHeight, outWidth, outHeight, samples) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n  const newArray = copyNewSize(valueArray, outWidth, outHeight, samples);\n  for (let y = 0; y < outHeight; ++y) {\n    const rawY = relY * y;\n\n    const yl = Math.floor(rawY);\n    const yh = Math.min(Math.ceil(rawY), (inHeight - 1));\n\n    for (let x = 0; x < outWidth; ++x) {\n      const rawX = relX * x;\n      const tx = rawX % 1;\n\n      const xl = Math.floor(rawX);\n      const xh = Math.min(Math.ceil(rawX), (inWidth - 1));\n\n      for (let i = 0; i < samples; ++i) {\n        const ll = valueArray[(yl * inWidth * samples) + (xl * samples) + i];\n        const hl = valueArray[(yl * inWidth * samples) + (xh * samples) + i];\n        const lh = valueArray[(yh * inWidth * samples) + (xl * samples) + i];\n        const hh = valueArray[(yh * inWidth * samples) + (xh * samples) + i];\n\n        const value = lerp(\n          lerp(ll, hl, tx),\n          lerp(lh, hh, tx),\n          rawY % 1,\n        );\n        newArray[(y * outWidth * samples) + (x * samples) + i] = value;\n      }\n    }\n  }\n  return newArray;\n}\n\n/**\n * Resample the pixel interleaved input array using the selected resampling method.\n * @param {TypedArray} valueArray The input array to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {number} samples The number of samples per pixel for pixel\n *                                 interleaved data\n * @param {string} [method = 'nearest'] The desired resampling method\n * @returns {TypedArray} The resampled rasters\n */\nexport function resampleInterleaved(valueArray, inWidth, inHeight, outWidth, outHeight, samples, method = 'nearest') {\n  switch (method.toLowerCase()) {\n    case 'nearest':\n      return resampleNearestInterleaved(\n        valueArray, inWidth, inHeight, outWidth, outHeight, samples,\n      );\n    case 'bilinear':\n    case 'linear':\n      return resampleBilinearInterleaved(\n        valueArray, inWidth, inHeight, outWidth, outHeight, samples,\n      );\n    default:\n      throw new Error(`Unsupported resampling method: '${method}'`);\n  }\n}\n","/** @module geotiffimage */\nimport { getFloat16 } from '@petamoriken/float16';\nimport getAttribute from 'xml-utils/get-attribute.js';\nimport findTagsByName from 'xml-utils/find-tags-by-name.js';\n\nimport { photometricInterpretations, ExtraSamplesValues } from './globals.js';\nimport { fromWhiteIsZero, fromBlackIsZero, fromPalette, fromCMYK, fromYCbCr, fromCIELab } from './rgb.js';\nimport { getDecoder } from './compression/index.js';\nimport { resample, resampleInterleaved } from './resample.js';\n\n/**\n * @typedef {Object} ReadRasterOptions\n * @property {Array<number>} [window=whole window] the subset to read data from in pixels.\n * @property {Array<number>} [bbox=whole image] the subset to read data from in\n *                                           geographical coordinates.\n * @property {Array<number>} [samples=all samples] the selection of samples to read from. Default is all samples.\n * @property {boolean} [interleave=false] whether the data shall be read\n *                                             in one single array or separate\n *                                             arrays.\n * @property {Pool} [pool=null] The optional decoder pool to use.\n * @property {number} [width] The desired width of the output. When the width is not the\n *                                 same as the images, resampling will be performed.\n * @property {number} [height] The desired height of the output. When the width is not the\n *                                  same as the images, resampling will be performed.\n * @property {string} [resampleMethod='nearest'] The desired resampling method.\n * @property {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                                       to be aborted\n * @property {number|number[]} [fillValue] The value to use for parts of the image\n *                                              outside of the images extent. When multiple\n *                                              samples are requested, an array of fill values\n *                                              can be passed.\n */\n\n/** @typedef {import(\"./geotiff.js\").TypedArray} TypedArray */\n/** @typedef {import(\"./geotiff.js\").ReadRasterResult} ReadRasterResult */\n\nfunction sum(array, start, end) {\n  let s = 0;\n  for (let i = start; i < end; ++i) {\n    s += array[i];\n  }\n  return s;\n}\n\nfunction arrayForType(format, bitsPerSample, size) {\n  switch (format) {\n    case 1: // unsigned integer data\n      if (bitsPerSample <= 8) {\n        return new Uint8Array(size);\n      } else if (bitsPerSample <= 16) {\n        return new Uint16Array(size);\n      } else if (bitsPerSample <= 32) {\n        return new Uint32Array(size);\n      }\n      break;\n    case 2: // twos complement signed integer data\n      if (bitsPerSample === 8) {\n        return new Int8Array(size);\n      } else if (bitsPerSample === 16) {\n        return new Int16Array(size);\n      } else if (bitsPerSample === 32) {\n        return new Int32Array(size);\n      }\n      break;\n    case 3: // floating point data\n      switch (bitsPerSample) {\n        case 16:\n        case 32:\n          return new Float32Array(size);\n        case 64:\n          return new Float64Array(size);\n        default:\n          break;\n      }\n      break;\n    default:\n      break;\n  }\n  throw Error('Unsupported data format/bitsPerSample');\n}\n\nfunction needsNormalization(format, bitsPerSample) {\n  if ((format === 1 || format === 2) && bitsPerSample <= 32 && bitsPerSample % 8 === 0) {\n    return false;\n  } else if (format === 3 && (bitsPerSample === 16 || bitsPerSample === 32 || bitsPerSample === 64)) {\n    return false;\n  }\n  return true;\n}\n\nfunction normalizeArray(inBuffer, format, planarConfiguration, samplesPerPixel, bitsPerSample, tileWidth, tileHeight) {\n  // const inByteArray = new Uint8Array(inBuffer);\n  const view = new DataView(inBuffer);\n  const outSize = planarConfiguration === 2\n    ? tileHeight * tileWidth\n    : tileHeight * tileWidth * samplesPerPixel;\n  const samplesToTransfer = planarConfiguration === 2\n    ? 1 : samplesPerPixel;\n  const outArray = arrayForType(format, bitsPerSample, outSize);\n  // let pixel = 0;\n\n  const bitMask = parseInt('1'.repeat(bitsPerSample), 2);\n\n  if (format === 1) { // unsigned integer\n    // translation of https://github.com/OSGeo/gdal/blob/master/gdal/frmts/gtiff/geotiff.cpp#L7337\n    let pixelBitSkip;\n    // let sampleBitOffset = 0;\n    if (planarConfiguration === 1) {\n      pixelBitSkip = samplesPerPixel * bitsPerSample;\n      // sampleBitOffset = (samplesPerPixel - 1) * bitsPerSample;\n    } else {\n      pixelBitSkip = bitsPerSample;\n    }\n\n    // Bits per line rounds up to next byte boundary.\n    let bitsPerLine = tileWidth * pixelBitSkip;\n    if ((bitsPerLine & 7) !== 0) {\n      bitsPerLine = (bitsPerLine + 7) & (~7);\n    }\n\n    for (let y = 0; y < tileHeight; ++y) {\n      const lineBitOffset = y * bitsPerLine;\n      for (let x = 0; x < tileWidth; ++x) {\n        const pixelBitOffset = lineBitOffset + (x * samplesToTransfer * bitsPerSample);\n        for (let i = 0; i < samplesToTransfer; ++i) {\n          const bitOffset = pixelBitOffset + (i * bitsPerSample);\n          const outIndex = (((y * tileWidth) + x) * samplesToTransfer) + i;\n\n          const byteOffset = Math.floor(bitOffset / 8);\n          const innerBitOffset = bitOffset % 8;\n          if (innerBitOffset + bitsPerSample <= 8) {\n            outArray[outIndex] = (view.getUint8(byteOffset) >> (8 - bitsPerSample) - innerBitOffset) & bitMask;\n          } else if (innerBitOffset + bitsPerSample <= 16) {\n            outArray[outIndex] = (view.getUint16(byteOffset) >> (16 - bitsPerSample) - innerBitOffset) & bitMask;\n          } else if (innerBitOffset + bitsPerSample <= 24) {\n            const raw = (view.getUint16(byteOffset) << 8) | (view.getUint8(byteOffset + 2));\n            outArray[outIndex] = (raw >> (24 - bitsPerSample) - innerBitOffset) & bitMask;\n          } else {\n            outArray[outIndex] = (view.getUint32(byteOffset) >> (32 - bitsPerSample) - innerBitOffset) & bitMask;\n          }\n\n          // let outWord = 0;\n          // for (let bit = 0; bit < bitsPerSample; ++bit) {\n          //   if (inByteArray[bitOffset >> 3]\n          //     & (0x80 >> (bitOffset & 7))) {\n          //     outWord |= (1 << (bitsPerSample - 1 - bit));\n          //   }\n          //   ++bitOffset;\n          // }\n\n          // outArray[outIndex] = outWord;\n          // outArray[pixel] = outWord;\n          // pixel += 1;\n        }\n        // bitOffset = bitOffset + pixelBitSkip - bitsPerSample;\n      }\n    }\n  } else if (format === 3) { // floating point\n    // Float16 is handled elsewhere\n    // normalize 16/24 bit floats to 32 bit floats in the array\n    // console.time();\n    // if (bitsPerSample === 16) {\n    //   for (let byte = 0, outIndex = 0; byte < inBuffer.byteLength; byte += 2, ++outIndex) {\n    //     outArray[outIndex] = getFloat16(view, byte);\n    //   }\n    // }\n    // console.timeEnd()\n  }\n\n  return outArray.buffer;\n}\n\n/**\n * GeoTIFF sub-file image.\n */\nclass GeoTIFFImage {\n  /**\n   * @constructor\n   * @param {Object} fileDirectory The parsed file directory\n   * @param {Object} geoKeys The parsed geo-keys\n   * @param {DataView} dataView The DataView for the underlying file.\n   * @param {Boolean} littleEndian Whether the file is encoded in little or big endian\n   * @param {Boolean} cache Whether or not decoded tiles shall be cached\n   * @param {import('./source/basesource').BaseSource} source The datasource to read from\n   */\n  constructor(fileDirectory, geoKeys, dataView, littleEndian, cache, source) {\n    this.fileDirectory = fileDirectory;\n    this.geoKeys = geoKeys;\n    this.dataView = dataView;\n    this.littleEndian = littleEndian;\n    this.tiles = cache ? {} : null;\n    this.isTiled = !fileDirectory.StripOffsets;\n    const planarConfiguration = fileDirectory.PlanarConfiguration;\n    this.planarConfiguration = (typeof planarConfiguration === 'undefined') ? 1 : planarConfiguration;\n    if (this.planarConfiguration !== 1 && this.planarConfiguration !== 2) {\n      throw new Error('Invalid planar configuration.');\n    }\n\n    this.source = source;\n  }\n\n  /**\n   * Returns the associated parsed file directory.\n   * @returns {Object} the parsed file directory\n   */\n  getFileDirectory() {\n    return this.fileDirectory;\n  }\n\n  /**\n   * Returns the associated parsed geo keys.\n   * @returns {Object} the parsed geo keys\n   */\n  getGeoKeys() {\n    return this.geoKeys;\n  }\n\n  /**\n   * Returns the width of the image.\n   * @returns {Number} the width of the image\n   */\n  getWidth() {\n    return this.fileDirectory.ImageWidth;\n  }\n\n  /**\n   * Returns the height of the image.\n   * @returns {Number} the height of the image\n   */\n  getHeight() {\n    return this.fileDirectory.ImageLength;\n  }\n\n  /**\n   * Returns the number of samples per pixel.\n   * @returns {Number} the number of samples per pixel\n   */\n  getSamplesPerPixel() {\n    return typeof this.fileDirectory.SamplesPerPixel !== 'undefined'\n      ? this.fileDirectory.SamplesPerPixel : 1;\n  }\n\n  /**\n   * Returns the width of each tile.\n   * @returns {Number} the width of each tile\n   */\n  getTileWidth() {\n    return this.isTiled ? this.fileDirectory.TileWidth : this.getWidth();\n  }\n\n  /**\n   * Returns the height of each tile.\n   * @returns {Number} the height of each tile\n   */\n  getTileHeight() {\n    if (this.isTiled) {\n      return this.fileDirectory.TileLength;\n    }\n    if (typeof this.fileDirectory.RowsPerStrip !== 'undefined') {\n      return Math.min(this.fileDirectory.RowsPerStrip, this.getHeight());\n    }\n    return this.getHeight();\n  }\n\n  getBlockWidth() {\n    return this.getTileWidth();\n  }\n\n  getBlockHeight(y) {\n    if (this.isTiled || (y + 1) * this.getTileHeight() <= this.getHeight()) {\n      return this.getTileHeight();\n    } else {\n      return this.getHeight() - (y * this.getTileHeight());\n    }\n  }\n\n  /**\n   * Calculates the number of bytes for each pixel across all samples. Only full\n   * bytes are supported, an exception is thrown when this is not the case.\n   * @returns {Number} the bytes per pixel\n   */\n  getBytesPerPixel() {\n    let bytes = 0;\n    for (let i = 0; i < this.fileDirectory.BitsPerSample.length; ++i) {\n      bytes += this.getSampleByteSize(i);\n    }\n    return bytes;\n  }\n\n  getSampleByteSize(i) {\n    if (i >= this.fileDirectory.BitsPerSample.length) {\n      throw new RangeError(`Sample index ${i} is out of range.`);\n    }\n    return Math.ceil(this.fileDirectory.BitsPerSample[i] / 8);\n  }\n\n  getReaderForSample(sampleIndex) {\n    const format = this.fileDirectory.SampleFormat\n      ? this.fileDirectory.SampleFormat[sampleIndex] : 1;\n    const bitsPerSample = this.fileDirectory.BitsPerSample[sampleIndex];\n    switch (format) {\n      case 1: // unsigned integer data\n        if (bitsPerSample <= 8) {\n          return DataView.prototype.getUint8;\n        } else if (bitsPerSample <= 16) {\n          return DataView.prototype.getUint16;\n        } else if (bitsPerSample <= 32) {\n          return DataView.prototype.getUint32;\n        }\n        break;\n      case 2: // twos complement signed integer data\n        if (bitsPerSample <= 8) {\n          return DataView.prototype.getInt8;\n        } else if (bitsPerSample <= 16) {\n          return DataView.prototype.getInt16;\n        } else if (bitsPerSample <= 32) {\n          return DataView.prototype.getInt32;\n        }\n        break;\n      case 3:\n        switch (bitsPerSample) {\n          case 16:\n            return function (offset, littleEndian) {\n              return getFloat16(this, offset, littleEndian);\n            };\n          case 32:\n            return DataView.prototype.getFloat32;\n          case 64:\n            return DataView.prototype.getFloat64;\n          default:\n            break;\n        }\n        break;\n      default:\n        break;\n    }\n    throw Error('Unsupported data format/bitsPerSample');\n  }\n\n  getSampleFormat(sampleIndex = 0) {\n    return this.fileDirectory.SampleFormat\n      ? this.fileDirectory.SampleFormat[sampleIndex] : 1;\n  }\n\n  getBitsPerSample(sampleIndex = 0) {\n    return this.fileDirectory.BitsPerSample[sampleIndex];\n  }\n\n  getArrayForSample(sampleIndex, size) {\n    const format = this.getSampleFormat(sampleIndex);\n    const bitsPerSample = this.getBitsPerSample(sampleIndex);\n    return arrayForType(format, bitsPerSample, size);\n  }\n\n  /**\n   * Returns the decoded strip or tile.\n   * @param {Number} x the strip or tile x-offset\n   * @param {Number} y the tile y-offset (0 for stripped images)\n   * @param {Number} sample the sample to get for separated samples\n   * @param {import(\"./geotiff\").Pool|import(\"./geotiff\").BaseDecoder} poolOrDecoder the decoder or decoder pool\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   * @returns {Promise.<ArrayBuffer>}\n   */\n  async getTileOrStrip(x, y, sample, poolOrDecoder, signal) {\n    const numTilesPerRow = Math.ceil(this.getWidth() / this.getTileWidth());\n    const numTilesPerCol = Math.ceil(this.getHeight() / this.getTileHeight());\n    let index;\n    const { tiles } = this;\n    if (this.planarConfiguration === 1) {\n      index = (y * numTilesPerRow) + x;\n    } else if (this.planarConfiguration === 2) {\n      index = (sample * numTilesPerRow * numTilesPerCol) + (y * numTilesPerRow) + x;\n    }\n\n    let offset;\n    let byteCount;\n    if (this.isTiled) {\n      offset = this.fileDirectory.TileOffsets[index];\n      byteCount = this.fileDirectory.TileByteCounts[index];\n    } else {\n      offset = this.fileDirectory.StripOffsets[index];\n      byteCount = this.fileDirectory.StripByteCounts[index];\n    }\n    const slice = (await this.source.fetch([{ offset, length: byteCount }], signal))[0];\n\n    let request;\n    if (tiles === null || !tiles[index]) {\n    // resolve each request by potentially applying array normalization\n      request = (async () => {\n        let data = await poolOrDecoder.decode(this.fileDirectory, slice);\n        const sampleFormat = this.getSampleFormat();\n        const bitsPerSample = this.getBitsPerSample();\n        if (needsNormalization(sampleFormat, bitsPerSample)) {\n          data = normalizeArray(\n            data,\n            sampleFormat,\n            this.planarConfiguration,\n            this.getSamplesPerPixel(),\n            bitsPerSample,\n            this.getTileWidth(),\n            this.getBlockHeight(y),\n          );\n        }\n        return data;\n      })();\n\n      // set the cache\n      if (tiles !== null) {\n        tiles[index] = request;\n      }\n    } else {\n      // get from the cache\n      request = tiles[index];\n    }\n\n    // cache the tile request\n    return { x, y, sample, data: await request };\n  }\n\n  /**\n   * Internal read function.\n   * @private\n   * @param {Array} imageWindow The image window in pixel coordinates\n   * @param {Array} samples The selected samples (0-based indices)\n   * @param {TypedArray|TypedArray[]} valueArrays The array(s) to write into\n   * @param {Boolean} interleave Whether or not to write in an interleaved manner\n   * @param {import(\"./geotiff\").Pool|AbstractDecoder} poolOrDecoder the decoder or decoder pool\n   * @param {number} width the width of window to be read into\n   * @param {number} height the height of window to be read into\n   * @param {number} resampleMethod the resampling method to be used when interpolating\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   * @returns {Promise<ReadRasterResult>}\n   */\n  async _readRaster(imageWindow, samples, valueArrays, interleave, poolOrDecoder, width,\n    height, resampleMethod, signal) {\n    const tileWidth = this.getTileWidth();\n    const tileHeight = this.getTileHeight();\n    const imageWidth = this.getWidth();\n    const imageHeight = this.getHeight();\n\n    const minXTile = Math.max(Math.floor(imageWindow[0] / tileWidth), 0);\n    const maxXTile = Math.min(\n      Math.ceil(imageWindow[2] / tileWidth),\n      Math.ceil(imageWidth / tileWidth),\n    );\n    const minYTile = Math.max(Math.floor(imageWindow[1] / tileHeight), 0);\n    const maxYTile = Math.min(\n      Math.ceil(imageWindow[3] / tileHeight),\n      Math.ceil(imageHeight / tileHeight),\n    );\n    const windowWidth = imageWindow[2] - imageWindow[0];\n\n    let bytesPerPixel = this.getBytesPerPixel();\n\n    const srcSampleOffsets = [];\n    const sampleReaders = [];\n    for (let i = 0; i < samples.length; ++i) {\n      if (this.planarConfiguration === 1) {\n        srcSampleOffsets.push(sum(this.fileDirectory.BitsPerSample, 0, samples[i]) / 8);\n      } else {\n        srcSampleOffsets.push(0);\n      }\n      sampleReaders.push(this.getReaderForSample(samples[i]));\n    }\n\n    const promises = [];\n    const { littleEndian } = this;\n\n    for (let yTile = minYTile; yTile < maxYTile; ++yTile) {\n      for (let xTile = minXTile; xTile < maxXTile; ++xTile) {\n        let getPromise;\n        if (this.planarConfiguration === 1) {\n          getPromise = this.getTileOrStrip(xTile, yTile, 0, poolOrDecoder, signal);\n        }\n        for (let sampleIndex = 0; sampleIndex < samples.length; ++sampleIndex) {\n          const si = sampleIndex;\n          const sample = samples[sampleIndex];\n          if (this.planarConfiguration === 2) {\n            bytesPerPixel = this.getSampleByteSize(sample);\n            getPromise = this.getTileOrStrip(xTile, yTile, sample, poolOrDecoder, signal);\n          }\n          const promise = getPromise.then((tile) => {\n            const buffer = tile.data;\n            const dataView = new DataView(buffer);\n            const blockHeight = this.getBlockHeight(tile.y);\n            const firstLine = tile.y * tileHeight;\n            const firstCol = tile.x * tileWidth;\n            const lastLine = firstLine + blockHeight;\n            const lastCol = (tile.x + 1) * tileWidth;\n            const reader = sampleReaders[si];\n\n            const ymax = Math.min(blockHeight, blockHeight - (lastLine - imageWindow[3]), imageHeight - firstLine);\n            const xmax = Math.min(tileWidth, tileWidth - (lastCol - imageWindow[2]), imageWidth - firstCol);\n\n            for (let y = Math.max(0, imageWindow[1] - firstLine); y < ymax; ++y) {\n              for (let x = Math.max(0, imageWindow[0] - firstCol); x < xmax; ++x) {\n                const pixelOffset = ((y * tileWidth) + x) * bytesPerPixel;\n                const value = reader.call(\n                  dataView, pixelOffset + srcSampleOffsets[si], littleEndian,\n                );\n                let windowCoordinate;\n                if (interleave) {\n                  windowCoordinate = ((y + firstLine - imageWindow[1]) * windowWidth * samples.length)\n                    + ((x + firstCol - imageWindow[0]) * samples.length)\n                    + si;\n                  valueArrays[windowCoordinate] = value;\n                } else {\n                  windowCoordinate = (\n                    (y + firstLine - imageWindow[1]) * windowWidth\n                  ) + x + firstCol - imageWindow[0];\n                  valueArrays[si][windowCoordinate] = value;\n                }\n              }\n            }\n          });\n          promises.push(promise);\n        }\n      }\n    }\n    await Promise.all(promises);\n\n    if ((width && (imageWindow[2] - imageWindow[0]) !== width)\n        || (height && (imageWindow[3] - imageWindow[1]) !== height)) {\n      let resampled;\n      if (interleave) {\n        resampled = resampleInterleaved(\n          valueArrays,\n          imageWindow[2] - imageWindow[0],\n          imageWindow[3] - imageWindow[1],\n          width, height,\n          samples.length,\n          resampleMethod,\n        );\n      } else {\n        resampled = resample(\n          valueArrays,\n          imageWindow[2] - imageWindow[0],\n          imageWindow[3] - imageWindow[1],\n          width, height,\n          resampleMethod,\n        );\n      }\n      resampled.width = width;\n      resampled.height = height;\n      return resampled;\n    }\n\n    valueArrays.width = width || imageWindow[2] - imageWindow[0];\n    valueArrays.height = height || imageWindow[3] - imageWindow[1];\n\n    return valueArrays;\n  }\n\n  /**\n   * Reads raster data from the image. This function reads all selected samples\n   * into separate arrays of the correct type for that sample or into a single\n   * combined array when `interleave` is set. When provided, only a subset\n   * of the raster is read for each sample.\n   *\n   * @param {ReadRasterOptions} [options={}] optional parameters\n   * @returns {Promise<ReadRasterResult>} the decoded arrays as a promise\n   */\n  async readRasters({\n    window: wnd, samples = [], interleave, pool = null,\n    width, height, resampleMethod, fillValue, signal,\n  } = {}) {\n    const imageWindow = wnd || [0, 0, this.getWidth(), this.getHeight()];\n\n    // check parameters\n    if (imageWindow[0] > imageWindow[2] || imageWindow[1] > imageWindow[3]) {\n      throw new Error('Invalid subsets');\n    }\n\n    const imageWindowWidth = imageWindow[2] - imageWindow[0];\n    const imageWindowHeight = imageWindow[3] - imageWindow[1];\n    const numPixels = imageWindowWidth * imageWindowHeight;\n    const samplesPerPixel = this.getSamplesPerPixel();\n\n    if (!samples || !samples.length) {\n      for (let i = 0; i < samplesPerPixel; ++i) {\n        samples.push(i);\n      }\n    } else {\n      for (let i = 0; i < samples.length; ++i) {\n        if (samples[i] >= samplesPerPixel) {\n          return Promise.reject(new RangeError(`Invalid sample index '${samples[i]}'.`));\n        }\n      }\n    }\n    let valueArrays;\n    if (interleave) {\n      const format = this.fileDirectory.SampleFormat\n        ? Math.max.apply(null, this.fileDirectory.SampleFormat) : 1;\n      const bitsPerSample = Math.max.apply(null, this.fileDirectory.BitsPerSample);\n      valueArrays = arrayForType(format, bitsPerSample, numPixels * samples.length);\n      if (fillValue) {\n        valueArrays.fill(fillValue);\n      }\n    } else {\n      valueArrays = [];\n      for (let i = 0; i < samples.length; ++i) {\n        const valueArray = this.getArrayForSample(samples[i], numPixels);\n        if (Array.isArray(fillValue) && i < fillValue.length) {\n          valueArray.fill(fillValue[i]);\n        } else if (fillValue && !Array.isArray(fillValue)) {\n          valueArray.fill(fillValue);\n        }\n        valueArrays.push(valueArray);\n      }\n    }\n\n    const poolOrDecoder = pool || await getDecoder(this.fileDirectory);\n\n    const result = await this._readRaster(\n      imageWindow, samples, valueArrays, interleave, poolOrDecoder, width, height, resampleMethod, signal,\n    );\n    return result;\n  }\n\n  /**\n   * Reads raster data from the image as RGB. The result is always an\n   * interleaved typed array.\n   * Colorspaces other than RGB will be transformed to RGB, color maps expanded.\n   * When no other method is applicable, the first sample is used to produce a\n   * grayscale image.\n   * When provided, only a subset of the raster is read for each sample.\n   *\n   * @param {Object} [options] optional parameters\n   * @param {Array<number>} [options.window] the subset to read data from in pixels.\n   * @param {boolean} [options.interleave=true] whether the data shall be read\n   *                                             in one single array or separate\n   *                                             arrays.\n   * @param {import(\"./geotiff\").Pool} [options.pool=null] The optional decoder pool to use.\n   * @param {number} [options.width] The desired width of the output. When the width is no the\n   *                                 same as the images, resampling will be performed.\n   * @param {number} [options.height] The desired height of the output. When the width is no the\n   *                                  same as the images, resampling will be performed.\n   * @param {string} [options.resampleMethod='nearest'] The desired resampling method.\n   * @param {boolean} [options.enableAlpha=false] Enable reading alpha channel if present.\n   * @param {AbortSignal} [options.signal] An AbortSignal that may be signalled if the request is\n   *                                       to be aborted\n   * @returns {Promise<ReadRasterResult>} the RGB array as a Promise\n   */\n  async readRGB({ window, interleave = true, pool = null, width, height,\n    resampleMethod, enableAlpha = false, signal } = {}) {\n    const imageWindow = window || [0, 0, this.getWidth(), this.getHeight()];\n\n    // check parameters\n    if (imageWindow[0] > imageWindow[2] || imageWindow[1] > imageWindow[3]) {\n      throw new Error('Invalid subsets');\n    }\n\n    const pi = this.fileDirectory.PhotometricInterpretation;\n\n    if (pi === photometricInterpretations.RGB) {\n      let s = [0, 1, 2];\n      if ((!(this.fileDirectory.ExtraSamples === ExtraSamplesValues.Unspecified)) && enableAlpha) {\n        s = [];\n        for (let i = 0; i < this.fileDirectory.BitsPerSample.length; i += 1) {\n          s.push(i);\n        }\n      }\n      return this.readRasters({\n        window,\n        interleave,\n        samples: s,\n        pool,\n        width,\n        height,\n        resampleMethod,\n        signal,\n      });\n    }\n\n    let samples;\n    switch (pi) {\n      case photometricInterpretations.WhiteIsZero:\n      case photometricInterpretations.BlackIsZero:\n      case photometricInterpretations.Palette:\n        samples = [0];\n        break;\n      case photometricInterpretations.CMYK:\n        samples = [0, 1, 2, 3];\n        break;\n      case photometricInterpretations.YCbCr:\n      case photometricInterpretations.CIELab:\n        samples = [0, 1, 2];\n        break;\n      default:\n        throw new Error('Invalid or unsupported photometric interpretation.');\n    }\n\n    const subOptions = {\n      window: imageWindow,\n      interleave: true,\n      samples,\n      pool,\n      width,\n      height,\n      resampleMethod,\n      signal,\n    };\n    const { fileDirectory } = this;\n    const raster = await this.readRasters(subOptions);\n\n    const max = 2 ** this.fileDirectory.BitsPerSample[0];\n    let data;\n    switch (pi) {\n      case photometricInterpretations.WhiteIsZero:\n        data = fromWhiteIsZero(raster, max);\n        break;\n      case photometricInterpretations.BlackIsZero:\n        data = fromBlackIsZero(raster, max);\n        break;\n      case photometricInterpretations.Palette:\n        data = fromPalette(raster, fileDirectory.ColorMap);\n        break;\n      case photometricInterpretations.CMYK:\n        data = fromCMYK(raster);\n        break;\n      case photometricInterpretations.YCbCr:\n        data = fromYCbCr(raster);\n        break;\n      case photometricInterpretations.CIELab:\n        data = fromCIELab(raster);\n        break;\n      default:\n        throw new Error('Unsupported photometric interpretation.');\n    }\n\n    // if non-interleaved data is requested, we must split the channels\n    // into their respective arrays\n    if (!interleave) {\n      const red = new Uint8Array(data.length / 3);\n      const green = new Uint8Array(data.length / 3);\n      const blue = new Uint8Array(data.length / 3);\n      for (let i = 0, j = 0; i < data.length; i += 3, ++j) {\n        red[j] = data[i];\n        green[j] = data[i + 1];\n        blue[j] = data[i + 2];\n      }\n      data = [red, green, blue];\n    }\n\n    data.width = raster.width;\n    data.height = raster.height;\n    return data;\n  }\n\n  /**\n   * Returns an array of tiepoints.\n   * @returns {Object[]}\n   */\n  getTiePoints() {\n    if (!this.fileDirectory.ModelTiepoint) {\n      return [];\n    }\n\n    const tiePoints = [];\n    for (let i = 0; i < this.fileDirectory.ModelTiepoint.length; i += 6) {\n      tiePoints.push({\n        i: this.fileDirectory.ModelTiepoint[i],\n        j: this.fileDirectory.ModelTiepoint[i + 1],\n        k: this.fileDirectory.ModelTiepoint[i + 2],\n        x: this.fileDirectory.ModelTiepoint[i + 3],\n        y: this.fileDirectory.ModelTiepoint[i + 4],\n        z: this.fileDirectory.ModelTiepoint[i + 5],\n      });\n    }\n    return tiePoints;\n  }\n\n  /**\n   * Returns the parsed GDAL metadata items.\n   *\n   * If sample is passed to null, dataset-level metadata will be returned.\n   * Otherwise only metadata specific to the provided sample will be returned.\n   *\n   * @param {number} [sample=null] The sample index.\n   * @returns {Object}\n   */\n  getGDALMetadata(sample = null) {\n    const metadata = {};\n    if (!this.fileDirectory.GDAL_METADATA) {\n      return null;\n    }\n    const string = this.fileDirectory.GDAL_METADATA;\n\n    let items = findTagsByName(string, 'Item');\n\n    if (sample === null) {\n      items = items.filter((item) => getAttribute(item, 'sample') === undefined);\n    } else {\n      items = items.filter((item) => Number(getAttribute(item, 'sample')) === sample);\n    }\n\n    for (let i = 0; i < items.length; ++i) {\n      const item = items[i];\n      metadata[getAttribute(item, 'name')] = item.inner;\n    }\n    return metadata;\n  }\n\n  /**\n   * Returns the GDAL nodata value\n   * @returns {number|null}\n   */\n  getGDALNoData() {\n    if (!this.fileDirectory.GDAL_NODATA) {\n      return null;\n    }\n    const string = this.fileDirectory.GDAL_NODATA;\n    return Number(string.substring(0, string.length - 1));\n  }\n\n  /**\n   * Returns the image origin as a XYZ-vector. When the image has no affine\n   * transformation, then an exception is thrown.\n   * @returns {Array<number>} The origin as a vector\n   */\n  getOrigin() {\n    const tiePoints = this.fileDirectory.ModelTiepoint;\n    const modelTransformation = this.fileDirectory.ModelTransformation;\n    if (tiePoints && tiePoints.length === 6) {\n      return [\n        tiePoints[3],\n        tiePoints[4],\n        tiePoints[5],\n      ];\n    }\n    if (modelTransformation) {\n      return [\n        modelTransformation[3],\n        modelTransformation[7],\n        modelTransformation[11],\n      ];\n    }\n    throw new Error('The image does not have an affine transformation.');\n  }\n\n  /**\n   * Returns the image resolution as a XYZ-vector. When the image has no affine\n   * transformation, then an exception is thrown.\n   * @param {GeoTIFFImage} [referenceImage=null] A reference image to calculate the resolution from\n   *                                             in cases when the current image does not have the\n   *                                             required tags on its own.\n   * @returns {Array<number>} The resolution as a vector\n   */\n  getResolution(referenceImage = null) {\n    const modelPixelScale = this.fileDirectory.ModelPixelScale;\n    const modelTransformation = this.fileDirectory.ModelTransformation;\n\n    if (modelPixelScale) {\n      return [\n        modelPixelScale[0],\n        -modelPixelScale[1],\n        modelPixelScale[2],\n      ];\n    }\n    if (modelTransformation) {\n      if (modelTransformation[1] === 0 && modelTransformation[4] === 0) {\n        return [\n          modelTransformation[0],\n          -modelTransformation[5],\n          modelTransformation[10],\n        ];\n      }\n      return [\n        Math.sqrt((modelTransformation[0] * modelTransformation[0])\n          + (modelTransformation[4] * modelTransformation[4])),\n        -Math.sqrt((modelTransformation[1] * modelTransformation[1])\n          + (modelTransformation[5] * modelTransformation[5])),\n        modelTransformation[10]];\n    }\n\n    if (referenceImage) {\n      const [refResX, refResY, refResZ] = referenceImage.getResolution();\n      return [\n        refResX * referenceImage.getWidth() / this.getWidth(),\n        refResY * referenceImage.getHeight() / this.getHeight(),\n        refResZ * referenceImage.getWidth() / this.getWidth(),\n      ];\n    }\n\n    throw new Error('The image does not have an affine transformation.');\n  }\n\n  /**\n   * Returns whether or not the pixels of the image depict an area (or point).\n   * @returns {Boolean} Whether the pixels are a point\n   */\n  pixelIsArea() {\n    return this.geoKeys.GTRasterTypeGeoKey === 1;\n  }\n\n  /**\n   * Returns the image bounding box as an array of 4 values: min-x, min-y,\n   * max-x and max-y. When the image has no affine transformation, then an\n   * exception is thrown.\n   * @param {boolean} [tilegrid=false] If true return extent for a tilegrid\n   *                                   without adjustment for ModelTransformation.\n   * @returns {Array<number>} The bounding box\n   */\n  getBoundingBox(tilegrid = false) {\n    const height = this.getHeight();\n    const width = this.getWidth();\n\n    if (this.fileDirectory.ModelTransformation && !tilegrid) {\n      // eslint-disable-next-line no-unused-vars\n      const [a, b, c, d, e, f, g, h] = this.fileDirectory.ModelTransformation;\n\n      const corners = [\n        [0, 0],\n        [0, height],\n        [width, 0],\n        [width, height],\n      ];\n\n      const projected = corners.map(([I, J]) => [\n        d + (a * I) + (b * J),\n        h + (e * I) + (f * J),\n      ]);\n\n      const xs = projected.map((pt) => pt[0]);\n      const ys = projected.map((pt) => pt[1]);\n\n      return [\n        Math.min(...xs),\n        Math.min(...ys),\n        Math.max(...xs),\n        Math.max(...ys),\n      ];\n    } else {\n      const origin = this.getOrigin();\n      const resolution = this.getResolution();\n\n      const x1 = origin[0];\n      const y1 = origin[1];\n\n      const x2 = x1 + (resolution[0] * width);\n      const y2 = y1 + (resolution[1] * height);\n\n      return [\n        Math.min(x1, x2),\n        Math.min(y1, y2),\n        Math.max(x1, x2),\n        Math.max(y1, y2),\n      ];\n    }\n  }\n}\n\nexport default GeoTIFFImage;\n","'use strict';\n\n/* eslint no-invalid-this: 1 */\n\nvar ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\nvar toStr = Object.prototype.toString;\nvar max = Math.max;\nvar funcType = '[object Function]';\n\nvar concatty = function concatty(a, b) {\n    var arr = [];\n\n    for (var i = 0; i < a.length; i += 1) {\n        arr[i] = a[i];\n    }\n    for (var j = 0; j < b.length; j += 1) {\n        arr[j + a.length] = b[j];\n    }\n\n    return arr;\n};\n\nvar slicy = function slicy(arrLike, offset) {\n    var arr = [];\n    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {\n        arr[j] = arrLike[i];\n    }\n    return arr;\n};\n\nvar joiny = function (arr, joiner) {\n    var str = '';\n    for (var i = 0; i < arr.length; i += 1) {\n        str += arr[i];\n        if (i + 1 < arr.length) {\n            str += joiner;\n        }\n    }\n    return str;\n};\n\nmodule.exports = function bind(that) {\n    var target = this;\n    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {\n        throw new TypeError(ERROR_MESSAGE + target);\n    }\n    var args = slicy(arguments, 1);\n\n    var bound;\n    var binder = function () {\n        if (this instanceof bound) {\n            var result = target.apply(\n                this,\n                concatty(args, arguments)\n            );\n            if (Object(result) === result) {\n                return result;\n            }\n            return this;\n        }\n        return target.apply(\n            that,\n            concatty(args, arguments)\n        );\n\n    };\n\n    var boundLength = max(0, target.length - args.length);\n    var boundArgs = [];\n    for (var i = 0; i < boundLength; i++) {\n        boundArgs[i] = '$' + i;\n    }\n\n    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);\n\n    if (target.prototype) {\n        var Empty = function Empty() {};\n        Empty.prototype = target.prototype;\n        bound.prototype = new Empty();\n        Empty.prototype = null;\n    }\n\n    return bound;\n};\n","'use strict';\n\nvar reflectGetProto = require('./Reflect.getPrototypeOf');\nvar originalGetProto = require('./Object.getPrototypeOf');\n\nvar getDunderProto = require('dunder-proto/get');\n\n/** @type {import('.')} */\nmodule.exports = reflectGetProto\n\t? function getProto(O) {\n\t\t// @ts-expect-error TS can't narrow inside a closure, for some reason\n\t\treturn reflectGetProto(O);\n\t}\n\t: originalGetProto\n\t\t? function getProto(O) {\n\t\t\tif (!O || (typeof O !== 'object' && typeof O !== 'function')) {\n\t\t\t\tthrow new TypeError('getProto: not an object');\n\t\t\t}\n\t\t\t// @ts-expect-error TS can't narrow inside a closure, for some reason\n\t\t\treturn originalGetProto(O);\n\t\t}\n\t\t: getDunderProto\n\t\t\t? function getProto(O) {\n\t\t\t\t// @ts-expect-error TS can't narrow inside a closure, for some reason\n\t\t\t\treturn getDunderProto(O);\n\t\t\t}\n\t\t\t: null;\n","export const fieldTagNames = {\n  // TIFF Baseline\n  0x013B: 'Artist',\n  0x0102: 'BitsPerSample',\n  0x0109: 'CellLength',\n  0x0108: 'CellWidth',\n  0x0140: 'ColorMap',\n  0x0103: 'Compression',\n  0x8298: 'Copyright',\n  0x0132: 'DateTime',\n  0x0152: 'ExtraSamples',\n  0x010A: 'FillOrder',\n  0x0121: 'FreeByteCounts',\n  0x0120: 'FreeOffsets',\n  0x0123: 'GrayResponseCurve',\n  0x0122: 'GrayResponseUnit',\n  0x013C: 'HostComputer',\n  0x010E: 'ImageDescription',\n  0x0101: 'ImageLength',\n  0x0100: 'ImageWidth',\n  0x010F: 'Make',\n  0x0119: 'MaxSampleValue',\n  0x0118: 'MinSampleValue',\n  0x0110: 'Model',\n  0x00FE: 'NewSubfileType',\n  0x0112: 'Orientation',\n  0x0106: 'PhotometricInterpretation',\n  0x011C: 'PlanarConfiguration',\n  0x0128: 'ResolutionUnit',\n  0x0116: 'RowsPerStrip',\n  0x0115: 'SamplesPerPixel',\n  0x0131: 'Software',\n  0x0117: 'StripByteCounts',\n  0x0111: 'StripOffsets',\n  0x00FF: 'SubfileType',\n  0x0107: 'Threshholding',\n  0x011A: 'XResolution',\n  0x011B: 'YResolution',\n\n  // TIFF Extended\n  0x0146: 'BadFaxLines',\n  0x0147: 'CleanFaxData',\n  0x0157: 'ClipPath',\n  0x0148: 'ConsecutiveBadFaxLines',\n  0x01B1: 'Decode',\n  0x01B2: 'DefaultImageColor',\n  0x010D: 'DocumentName',\n  0x0150: 'DotRange',\n  0x0141: 'HalftoneHints',\n  0x015A: 'Indexed',\n  0x015B: 'JPEGTables',\n  0x011D: 'PageName',\n  0x0129: 'PageNumber',\n  0x013D: 'Predictor',\n  0x013F: 'PrimaryChromaticities',\n  0x0214: 'ReferenceBlackWhite',\n  0x0153: 'SampleFormat',\n  0x0154: 'SMinSampleValue',\n  0x0155: 'SMaxSampleValue',\n  0x022F: 'StripRowCounts',\n  0x014A: 'SubIFDs',\n  0x0124: 'T4Options',\n  0x0125: 'T6Options',\n  0x0145: 'TileByteCounts',\n  0x0143: 'TileLength',\n  0x0144: 'TileOffsets',\n  0x0142: 'TileWidth',\n  0x012D: 'TransferFunction',\n  0x013E: 'WhitePoint',\n  0x0158: 'XClipPathUnits',\n  0x011E: 'XPosition',\n  0x0211: 'YCbCrCoefficients',\n  0x0213: 'YCbCrPositioning',\n  0x0212: 'YCbCrSubSampling',\n  0x0159: 'YClipPathUnits',\n  0x011F: 'YPosition',\n\n  // EXIF\n  0x9202: 'ApertureValue',\n  0xA001: 'ColorSpace',\n  0x9004: 'DateTimeDigitized',\n  0x9003: 'DateTimeOriginal',\n  0x8769: 'Exif IFD',\n  0x9000: 'ExifVersion',\n  0x829A: 'ExposureTime',\n  0xA300: 'FileSource',\n  0x9209: 'Flash',\n  0xA000: 'FlashpixVersion',\n  0x829D: 'FNumber',\n  0xA420: 'ImageUniqueID',\n  0x9208: 'LightSource',\n  0x927C: 'MakerNote',\n  0x9201: 'ShutterSpeedValue',\n  0x9286: 'UserComment',\n\n  // IPTC\n  0x83BB: 'IPTC',\n\n  // ICC\n  0x8773: 'ICC Profile',\n\n  // XMP\n  0x02BC: 'XMP',\n\n  // GDAL\n  0xA480: 'GDAL_METADATA',\n  0xA481: 'GDAL_NODATA',\n\n  // Photoshop\n  0x8649: 'Photoshop',\n\n  // GeoTiff\n  0x830E: 'ModelPixelScale',\n  0x8482: 'ModelTiepoint',\n  0x85D8: 'ModelTransformation',\n  0x87AF: 'GeoKeyDirectory',\n  0x87B0: 'GeoDoubleParams',\n  0x87B1: 'GeoAsciiParams',\n\n  // LERC\n  0xC5F2: 'LercParameters',\n};\n\nexport const fieldTags = {};\nfor (const key in fieldTagNames) {\n  if (fieldTagNames.hasOwnProperty(key)) {\n    fieldTags[fieldTagNames[key]] = parseInt(key, 10);\n  }\n}\n\nexport const fieldTagTypes = {\n  256: 'SHORT',\n  257: 'SHORT',\n  258: 'SHORT',\n  259: 'SHORT',\n  262: 'SHORT',\n  273: 'LONG',\n  274: 'SHORT',\n  277: 'SHORT',\n  278: 'LONG',\n  279: 'LONG',\n  282: 'RATIONAL',\n  283: 'RATIONAL',\n  284: 'SHORT',\n  286: 'SHORT',\n  287: 'RATIONAL',\n  296: 'SHORT',\n  297: 'SHORT',\n  305: 'ASCII',\n  306: 'ASCII',\n  338: 'SHORT',\n  339: 'SHORT',\n  513: 'LONG',\n  514: 'LONG',\n  1024: 'SHORT',\n  1025: 'SHORT',\n  2048: 'SHORT',\n  2049: 'ASCII',\n  3072: 'SHORT',\n  3073: 'ASCII',\n  33550: 'DOUBLE',\n  33922: 'DOUBLE',\n  34264: 'DOUBLE',\n  34665: 'LONG',\n  34735: 'SHORT',\n  34736: 'DOUBLE',\n  34737: 'ASCII',\n  42113: 'ASCII',\n};\n\nexport const arrayFields = [\n  fieldTags.BitsPerSample,\n  fieldTags.ExtraSamples,\n  fieldTags.SampleFormat,\n  fieldTags.StripByteCounts,\n  fieldTags.StripOffsets,\n  fieldTags.StripRowCounts,\n  fieldTags.TileByteCounts,\n  fieldTags.TileOffsets,\n  fieldTags.SubIFDs,\n];\n\nexport const fieldTypeNames = {\n  0x0001: 'BYTE',\n  0x0002: 'ASCII',\n  0x0003: 'SHORT',\n  0x0004: 'LONG',\n  0x0005: 'RATIONAL',\n  0x0006: 'SBYTE',\n  0x0007: 'UNDEFINED',\n  0x0008: 'SSHORT',\n  0x0009: 'SLONG',\n  0x000A: 'SRATIONAL',\n  0x000B: 'FLOAT',\n  0x000C: 'DOUBLE',\n  // IFD offset, suggested by https://owl.phy.queensu.ca/~phil/exiftool/standards.html\n  0x000D: 'IFD',\n  // introduced by BigTIFF\n  0x0010: 'LONG8',\n  0x0011: 'SLONG8',\n  0x0012: 'IFD8',\n};\n\nexport const fieldTypes = {};\nfor (const key in fieldTypeNames) {\n  if (fieldTypeNames.hasOwnProperty(key)) {\n    fieldTypes[fieldTypeNames[key]] = parseInt(key, 10);\n  }\n}\n\nexport const photometricInterpretations = {\n  WhiteIsZero: 0,\n  BlackIsZero: 1,\n  RGB: 2,\n  Palette: 3,\n  TransparencyMask: 4,\n  CMYK: 5,\n  YCbCr: 6,\n\n  CIELab: 8,\n  ICCLab: 9,\n};\n\nexport const ExtraSamplesValues = {\n  Unspecified: 0,\n  Assocalpha: 1,\n  Unassalpha: 2,\n};\n\nexport const LercParameters = {\n  Version: 0,\n  AddCompression: 1,\n};\n\nexport const LercAddCompression = {\n  None: 0,\n  Deflate: 1,\n  Zstandard: 2,\n};\n\nexport const geoKeyNames = {\n  1024: 'GTModelTypeGeoKey',\n  1025: 'GTRasterTypeGeoKey',\n  1026: 'GTCitationGeoKey',\n  2048: 'GeographicTypeGeoKey',\n  2049: 'GeogCitationGeoKey',\n  2050: 'GeogGeodeticDatumGeoKey',\n  2051: 'GeogPrimeMeridianGeoKey',\n  2052: 'GeogLinearUnitsGeoKey',\n  2053: 'GeogLinearUnitSizeGeoKey',\n  2054: 'GeogAngularUnitsGeoKey',\n  2055: 'GeogAngularUnitSizeGeoKey',\n  2056: 'GeogEllipsoidGeoKey',\n  2057: 'GeogSemiMajorAxisGeoKey',\n  2058: 'GeogSemiMinorAxisGeoKey',\n  2059: 'GeogInvFlatteningGeoKey',\n  2060: 'GeogAzimuthUnitsGeoKey',\n  2061: 'GeogPrimeMeridianLongGeoKey',\n  2062: 'GeogTOWGS84GeoKey',\n  3072: 'ProjectedCSTypeGeoKey',\n  3073: 'PCSCitationGeoKey',\n  3074: 'ProjectionGeoKey',\n  3075: 'ProjCoordTransGeoKey',\n  3076: 'ProjLinearUnitsGeoKey',\n  3077: 'ProjLinearUnitSizeGeoKey',\n  3078: 'ProjStdParallel1GeoKey',\n  3079: 'ProjStdParallel2GeoKey',\n  3080: 'ProjNatOriginLongGeoKey',\n  3081: 'ProjNatOriginLatGeoKey',\n  3082: 'ProjFalseEastingGeoKey',\n  3083: 'ProjFalseNorthingGeoKey',\n  3084: 'ProjFalseOriginLongGeoKey',\n  3085: 'ProjFalseOriginLatGeoKey',\n  3086: 'ProjFalseOriginEastingGeoKey',\n  3087: 'ProjFalseOriginNorthingGeoKey',\n  3088: 'ProjCenterLongGeoKey',\n  3089: 'ProjCenterLatGeoKey',\n  3090: 'ProjCenterEastingGeoKey',\n  3091: 'ProjCenterNorthingGeoKey',\n  3092: 'ProjScaleAtNatOriginGeoKey',\n  3093: 'ProjScaleAtCenterGeoKey',\n  3094: 'ProjAzimuthAngleGeoKey',\n  3095: 'ProjStraightVertPoleLongGeoKey',\n  3096: 'ProjRectifiedGridAngleGeoKey',\n  4096: 'VerticalCSTypeGeoKey',\n  4097: 'VerticalCitationGeoKey',\n  4098: 'VerticalDatumGeoKey',\n  4099: 'VerticalUnitsGeoKey',\n};\n\nexport const geoKeys = {};\nfor (const key in geoKeyNames) {\n  if (geoKeyNames.hasOwnProperty(key)) {\n    geoKeys[geoKeyNames[key]] = parseInt(key, 10);\n  }\n}\n"],"names":["module","exports","Object","getOwnPropertyDescriptor","call","Function","prototype","$hasOwn","hasOwnProperty","bind","$defineProperty","hasPropertyDescriptors","hasArrayLengthDefineBug","value","length","e","DataView64","constructor","arrayBuffer","this","_dataView","DataView","buffer","getUint64","offset","littleEndian","left","getUint32","right","combined","Number","isSafeInteger","Error","getInt64","isNegative","getUint8","carrying","i","byte","getInt8","getUint16","getInt16","getInt32","getFloat16","getFloat32","getFloat64","DataSlice","sliceOffset","bigTiff","_sliceOffset","_littleEndian","_bigTiff","sliceTop","byteLength","covers","readUint8","readInt8","readUint16","readInt16","readUint32","readInt32","readFloat32","readFloat64","readUint64","readInt64","readOffset","CRLFCRLF","itemsToObject","items","fromEntries","obj","key","toLowerCase","parseHeaders","text","split","map","line","kv","str","trim","parseContentType","rawContentType","type","rawParams","s","paramsItems","param","params","parseContentRange","rawContentRange","start","end","total","match","parseInt","parseByteRanges","responseArrayBuffer","boundary","decoder","TextDecoder","out","startBoundary","endBoundary","decode","Uint8Array","Math","min","startsWith","innerText","substr","endOfHeaders","indexOf","headers","startOfData","push","data","slice","fileSize","BaseSource","fetch","slices","signal","undefined","Promise","all","fetchSlice","close","async","wait","milliseconds","resolve","setTimeout","zip","a","b","A","Array","isArray","from","B","k","AbortError","super","captureStackTrace","name","CustomAggregateError","errors","message","AggregateError","Block","top","BlockGroup","blockIds","BlockedSource","source","blockSize","cacheSize","blockCache","maxSize","onEviction","blockId","block","evictedBlocks","set","Map","blockRequests","blockIdsToFetch","Set","abortedBlockIds","missingBlockIds","allBlockIds","clear","firstBlockOffset","floor","current","has","add","get","fetchBlocks","missingRequests","allSettled","abortedBlockRequests","filter","id","forEach","aborted","blocks","failedBlocks","requiredBlocks","readSliceData","size","groups","groupBlocks","groupRequests","groupIndex","group","response","blockOffset","o","t","delete","err","sortedBlockIds","sort","lastBlockId","blockIdLow","blockIdHigh","sliceData","ArrayBuffer","sliceView","delta","topDelta","usedBlockLength","blockInnerOffset","rangeInnerOffset","blockView","BaseResponse","ok","status","getHeader","headerName","getData","BaseClient","url","request","FetchResponse","FetchClient","credentials","XHRResponse","xhr","getResponseHeader","XHRClient","constructRequest","reject","XMLHttpRequest","open","responseType","entries","setRequestHeader","onload","onerror","onabort","send","abort","addEventListener","HttpResponse","dataPromise","statusCode","HttpClient","parsedUrl","httpApi","protocol","resolveData","chunks","on","chunk","Buffer","concat","destroy","RemoteSource","client","maxRanges","allowFullFile","_fileSize","fetchSlices","Range","join","byteRanges","first","others","maybeWrapInBlockedSource","makeFetchSource","blockOptions","makeXHRSource","makeHttpSource","makeRemoteSource","forceXHR","clientOptions","FileReaderSource","file","blob","reader","FileReader","event","target","result","readAsArrayBuffer","makeFileReaderSource","getFieldTypeLength","fieldType","BYTE","ASCII","SBYTE","UNDEFINED","SHORT","SSHORT","LONG","SLONG","FLOAT","IFD","RATIONAL","SRATIONAL","DOUBLE","LONG8","SLONG8","IFD8","RangeError","parseGeoKeyDirectory","fileDirectory","rawGeoKeyDirectory","GeoKeyDirectory","geoKeyDirectory","location","count","substring","subarray","getValues","dataSlice","values","readMethod","fieldTypeLength","Int8Array","Uint16Array","Int16Array","Uint32Array","Int32Array","Float32Array","Float64Array","ImageFileDirectory","nextIFDByteOffset","GeoTIFFImageIndexError","index","GeoTIFFBase","readRasters","options","window","imageWindow","width","height","resX","resY","bbox","firstImage","getImage","usedImage","imageCount","getImageCount","imgBBox","getBoundingBox","oX","oY","getOrigin","rX","rY","getResolution","usedBBox","allImages","image","SubfileType","subfileType","NewSubfileType","newSubfileType","getWidth","imgResX","imgResY","getHeight","wnd","imageResX","imageResY","round","max","GeoTIFF","firstIFDOffset","cache","ifdRequests","ghostValues","getSlice","fallbackSize","parseFileDirectoryAt","entrySize","offsetSize","numDirEntries","byteSize","entryCount","fieldTag","typeCount","fieldValues","valueOffset","actualOffset","fieldDataSlice","requestIFD","previousIfd","ifd","dataView","hasNext","getGhostValues","detectionString","heuristicAreaSize","valuesString","firstLine","metadataSize","fullString","fromSource","headerData","BOM","TypeError","magicNumber","offsetByteSize","MultiGeoTIFF","mainFile","overviewFiles","imageFiles","fileDirectoriesPerFile","fileDirectoriesPerFileParsing","parseFileDirectoriesPerFile","requests","visited","relativeIndex","imageFile","ii","imageCounts","reduce","ifds","fromUrl","fromBlob","fromUrls","mainUrl","overviewUrls","Symbol","getOwnPropertySymbols","iterator","sym","symObj","toString","symVal","_","keys","getOwnPropertyNames","syms","propertyIsEnumerable","descriptor","enumerable","Reflect","getPrototypeOf","hasSymbols","toStringTag","origSymbol","hasSymbolSham","implementation","$Object","$Error","$EvalError","$RangeError","$ReferenceError","$SyntaxError","$TypeError","$URIError","abs","pow","sign","$Function","getEvalledConstructor","expressionSyntax","$gOPD","throwTypeError","ThrowTypeError","calleeThrows","arguments","gOPDthrows","getProto","$ObjectGPO","$ReflectGPO","$apply","$call","needsEval","TypedArray","INTRINSICS","__proto__","Atomics","BigInt","BigInt64Array","BigUint64Array","Boolean","Date","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","eval","Float16Array","FinalizationRegistry","isFinite","isNaN","JSON","parseFloat","Proxy","RegExp","SharedArrayBuffer","String","Uint8ClampedArray","WeakMap","WeakRef","WeakSet","error","errorProto","doEval","fn","gen","LEGACY_ALIASES","hasOwn","$concat","$spliceApply","splice","$replace","replace","$strSlice","$exec","exec","rePropName","reEscapeChar","stringToPath","string","last","number","quote","subString","getBaseIntrinsic","allowMissing","alias","intrinsicName","parts","intrinsicBaseName","intrinsic","intrinsicRealName","skipFurtherCaching","isOwn","part","desc","registry","addDecoder","cases","importFn","c","getDecoder","Compression","Decoder","then","m","default","zstd","init","isCallable","toStr","forEachArray","array","receiver","len","forEachString","charAt","forEachObject","object","x","list","thisArg","fromWhiteIsZero","raster","rgbRaster","j","fromBlackIsZero","fromPalette","colorMap","greenOffset","blueOffset","mapIndex","fromCMYK","cmykRaster","y","fromYCbCr","yCbCrRaster","cb","cr","Xn","Yn","Zn","fromCIELab","cieLabRaster","L","a_","b_","r","g","z","copyNewSize","samplesPerPixel","resampleNearest","valueArrays","inWidth","inHeight","outWidth","outHeight","relX","relY","newArray","cy","cx","lerp","v0","v1","resampleBilinear","rawY","yl","yh","ceil","rawX","tx","xl","xh","ll","hl","lh","hh","resample","method","resampleNearestInterleaved","valueArray","samples","resampleBilinearInterleaved","resampleInterleaved","sum","arrayForType","format","bitsPerSample","needsNormalization","normalizeArray","inBuffer","planarConfiguration","tileWidth","tileHeight","view","outSize","samplesToTransfer","outArray","bitMask","repeat","pixelBitSkip","bitsPerLine","lineBitOffset","pixelBitOffset","bitOffset","outIndex","byteOffset","innerBitOffset","raw","GeoTIFFImage","geoKeys","tiles","isTiled","StripOffsets","PlanarConfiguration","getFileDirectory","getGeoKeys","ImageWidth","ImageLength","getSamplesPerPixel","SamplesPerPixel","getTileWidth","TileWidth","getTileHeight","TileLength","RowsPerStrip","getBlockWidth","getBlockHeight","getBytesPerPixel","bytes","BitsPerSample","getSampleByteSize","getReaderForSample","sampleIndex","SampleFormat","getSampleFormat","getBitsPerSample","getArrayForSample","getTileOrStrip","sample","poolOrDecoder","numTilesPerRow","numTilesPerCol","byteCount","TileOffsets","TileByteCounts","StripByteCounts","sampleFormat","_readRaster","interleave","resampleMethod","imageWidth","imageHeight","minXTile","maxXTile","minYTile","maxYTile","windowWidth","bytesPerPixel","srcSampleOffsets","sampleReaders","promises","yTile","xTile","getPromise","si","promise","tile","blockHeight","firstCol","lastLine","lastCol","ymax","xmax","pixelOffset","windowCoordinate","resampled","pool","fillValue","imageWindowWidth","imageWindowHeight","numPixels","apply","fill","readRGB","enableAlpha","pi","PhotometricInterpretation","RGB","ExtraSamples","Unspecified","WhiteIsZero","BlackIsZero","Palette","CMYK","YCbCr","CIELab","subOptions","ColorMap","red","green","blue","getTiePoints","ModelTiepoint","tiePoints","getGDALMetadata","metadata","GDAL_METADATA","item","inner","getGDALNoData","GDAL_NODATA","modelTransformation","ModelTransformation","referenceImage","modelPixelScale","ModelPixelScale","sqrt","refResX","refResY","refResZ","pixelIsArea","GTRasterTypeGeoKey","tilegrid","d","f","h","corners","projected","I","J","xs","pt","ys","origin","resolution","x1","y1","x2","y2","ERROR_MESSAGE","funcType","concatty","arr","slicy","arrLike","joiny","joiner","that","bound","args","binder","boundLength","boundArgs","Empty","reflectGetProto","originalGetProto","getDunderProto","O","fieldTagNames","fieldTags","arrayFields","StripRowCounts","SubIFDs","fieldTypeNames","fieldTypes","photometricInterpretations","TransparencyMask","ICCLab","ExtraSamplesValues","Assocalpha","Unassalpha","LercParameters","Version","AddCompression","LercAddCompression","None","Deflate","Zstandard","geoKeyNames"],"sourceRoot":""}