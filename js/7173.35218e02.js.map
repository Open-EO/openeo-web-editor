{"version":3,"file":"js/7173.35218e02.js","mappings":"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","sources":["webpack://@openeo/web-editor/./src/export/exporter.js","webpack://@openeo/web-editor/./src/export/javascript.js","webpack://@openeo/web-editor/./src/formats/csv.js","webpack://@openeo/web-editor/./src/formats/format.js","webpack://@openeo/web-editor/./src/formats/browserImage.js","webpack://@openeo/web-editor/./src/formats/native.js","webpack://@openeo/web-editor/./src/formats/tsv.js","webpack://@openeo/web-editor/./src/formats/formatRegistry.js","webpack://@openeo/web-editor/./src/formats/geotiff.js","webpack://@openeo/web-editor/./src/formats/json.js"],"sourcesContent":["import { BaseProcess, ProcessGraph } from '@openeo/js-processgraphs';\nimport Utils from \"../utils\";\n\nclass ProcessImpl extends BaseProcess {\n\tconstructor(process, exporter) {\n\t\tsuper(process);\n\t\tthis.exporter = exporter;\n\t}\n\tasync execute(node) {\n\t\tawait this.exporter.generateFunction(node);\n\t}\n}\n\nexport default class Exporter extends ProcessGraph {\n\n\tconstructor(process, registry, connection) {\n\t\tsuper(Utils.isObject(process) ? process : {}, registry);\n\t\tthis.connection = connection;\n\t\tthis.code = [];\n\t\tthis.fnCounter = 1;\n\t\tthis.allowEmpty();\n\t\tthis.fillUndefinedParameters();\n\t}\n\n\t// inherited from ProcessGraph\n\n\tcreateProcessGraphInstance(process) {\n\t\tlet pg = new Exporter(process, this.processRegistry, this.getJsonSchemaValidator());\n\t\treturn this.copyProcessGraphInstanceProperties(pg);\n\t}\n\n\tcopyProcessGraphInstanceProperties(pg) {\n\t\tpg = super.copyProcessGraphInstanceProperties(pg);\n\t\tpg.connection = this.connection;\n\t\treturn pg;\n\t}\n\n\tcreateProcessInstance(process) {\n\t\treturn new ProcessImpl(process, this);\n\t}\n\n\tisKeyword(keyword) {\n\t\treturn this.getKeywords().includes(keyword.toLowerCase());\n\t}\n\n\t// Methods to be implemented by sub-class\n\n\tgetKeywords() {\n\t\treturn [];\n\t}\n\n\tcomment(/*comment*/) {}\n\n\tgenerateImports() {}\n\n\tgenerateConnection() {}\n\n\tgenerateAuthentication() {}\n\n\tgenerateBuilder() {}\n\n\tgenerateMetadata(/*key, value*/) {}\n\n\tgenerateMissingParameter() {}\n\n\tasync generateFunction(/*node*/) {}\n\n\tgenerateFunctionParams(parameters) {\n\t\treturn parameters.map(p => {\n\t\t\tif (typeof p.default !== 'undefined') {\n\t\t\t\treturn `${p.name} = ${this.e(p.default)}`;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn p.name;\n\t\t\t}\n\t\t});\n\t}\n\n\tasync generateCallback(/*callback, parameters, variable*/) {}\n\n\tgenerateResult(/*resultNode, callback*/) {}\n\n\tmakeNull() {\n\t\treturn \"null\";\n\t}\n\tmakeBoolean(val) {\n\t\treturn val ? \"true\" : \"false\";\n\t}\n\tmakeArray(arr) {\n\t\treturn `[${arr.join(', ')}]`;\n\t}\n\tmakeObject(obj) {\n\t\tlet arr = Utils.mapObject(obj, (val, key) => `${this.makeString(key)}: ${val}`);\n\t\treturn `{${arr.join(', ')}}`;\n\t}\n\tmakeString(str) {\n\t\treturn JSON.stringify(str);\n\t}\n\tmakeNumber(num) {\n\t\treturn num;\n\t}\n\n\t// Helpers\n\n\te(value) {\n\t\tif (value === null) {\n\t\t\treturn this.makeNull();\n\t\t}\n\t\telse if (typeof value === 'boolean') {\n\t\t\treturn this.makeBoolean(value);\n\t\t}\n\t\telse if (typeof value === 'number') {\n\t\t\treturn this.makeNumber(value);\n\t\t}\n\t\telse if (typeof value === 'string') {\n\t\t\treturn this.makeString(value);\n\t\t}\n\t\telse if (Array.isArray(value)) {\n\t\t\treturn this.makeArray(value.map(val => this.e(val)));\n\t\t}\n\t\telse if (Utils.isObject(value)) {\n\t\t\treturn this.makeObject(Utils.mapObjectValues(value, val => this.e(val)));\n\t\t}\n\t\telse if (typeof value === 'function') {\n\t\t\treturn value();\n\t\t}\n\t\telse {\n\t\t\treturn this.makeNull();\n\t\t}\n\t}\n\n\tgenerateMetadata() {\n\t\tlet hasComment = false;\n\t\tfor(let key in this.process) {\n\t\t\tif (key === 'process_graph') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet val = this.process[key];\n\t\t\tif (Array.isArray(val) && val.length === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse if (typeof val === 'string' && val.length === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse if (typeof val === 'boolean' && !val) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!hasComment) {\n\t\t\t\tthis.newLine();\n\t\t\t\tthis.comment(`Set the metadata for the process`);\n\t\t\t\thasComment = true;\n\t\t\t}\n\t\t\tthis.generateMetadataEntry(key, val);\n\t\t}\n\t}\n\n\tasync resolveArguments(args, onExporter, filter) {\n\t\tlet newArgs = Array.isArray(args) ? [] : {};\n\t\tfor(let key in args) {\n\t\t\tlet value = args[key];\n\t\t\tif (filter && filter(key, value)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (Utils.isObject(value)) {\n\t\t\t\tif (value.from_node) {\n\t\t\t\t\tnewArgs[key] = () => this.var(value.from_node, this.varPrefix());\n\t\t\t\t\tcontinue; \n\t\t\t\t}\n\t\t\t\telse if (value.from_parameter) {\n\t\t\t\t\tnewArgs[key] = () => this.var(value.from_parameter);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if (value instanceof Exporter) {\n\t\t\t\t\tlet fnName = await onExporter(key);\n\t\t\t\t\tnewArgs[key] = () => fnName;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tnewArgs[key] = await this.resolveArguments(value, onExporter, filter);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (Array.isArray(value)) {\n\t\t\t\tnewArgs[key] = await this.resolveArguments(value, onExporter, filter);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnewArgs[key] = value;\n\t\t\t}\n\t\t}\n\t\treturn newArgs;\n\t}\n\n\tasync resolveCallback(node, key) {\n\t\tlet callback;\n\t\tif (node.process_id === 'load_collection') {\n\t\t\tlet properties = node.getArgument('properties');\n\t\t\tcallback = properties[key];\n\t\t}\n\t\telse {\n\t\t\tcallback = node.getArgument(key);\n\t\t}\n\t\tlet parameters = callback.getCallbackParameters();\n\t\tawait callback.execute(parameters);\n\t\tlet fnName = this.var(`${key}${this.fnCounter++}`, 'fn_');\n\t\tlet replacement = await this.generateCallback(callback, parameters, fnName);\n\t\treturn replacement ? replacement : fnName;\n\t}\n\n\tasync generateArguments(node, ordered = false, filter = null) {\n\t\tlet args = await this.resolveArguments(node.arguments, async key => await this.resolveCallback(node, key), filter);\n\t\tif (ordered) {\n\t\t\targs = this.orderArguments(node, args);\n\t\t}\n\t\treturn args;\n\t}\n\n\torderArguments(node, args) {\n\t\tlet process = node.getProcessGraph().getProcess(node);\n\t\tif (process && Array.isArray(process.parameters)) {\n\t\t\tlet orderedArgs = process.parameters.map(param => {\n\t\t\t\tif (typeof args[param.name] !== 'undefined') {\n\t\t\t\t\treturn args[param.name];\n\t\t\t\t}\n\t\t\t\telse if (!param.optional) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t});\n\t\t\tlet definedValueFound = false;\n\t\t\tfor(let i = orderedArgs.length-1; i >= 0; i--) {\n\t\t\t\tif (typeof orderedArgs[i] === 'undefined') {\n\t\t\t\t\tif (definedValueFound) {\n\t\t\t\t\t\torderedArgs[i] = null;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\torderedArgs.pop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdefinedValueFound = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn orderedArgs;\n\t\t}\n\t}\n\n\tvarPrefix() {\n\t\tif (!this.getParent()) {\n\t\t\treturn 'datacube';\n\t\t}\n\t\telse {\n\t\t\treturn 'data';\n\t\t}\n\t}\n\n\tvar(id, prefix = \"var\") {\n\t\tid = String(id);\n\t\tif (this.isKeyword(id)) {\n\t\t\treturn `${id}_`;\n\t\t}\n\t\tif (!id.match(/^[a-z_]\\w*$/)) {\n\t\t\treturn prefix + id.replace(/[^\\w]+/g, '_');\n\t\t}\n\t\telse {\n\t\t\treturn id;\n\t\t}\n\t}\n\n\tgetTab() {\n\t\treturn `\\t`;\n\t}\n\n\taddCode(code, prefix = '', level = 0) {\n\t\tif (typeof code !== 'string') {\n\t\t\treturn;\n\t\t}\n\t\tlet tabs = this.getTab().repeat(level);\n\t\tlet lines = code.trim().split(/\\r\\n|\\r|\\n/g);\n\t\tfor(let line of lines) {\n\t\t\tthis.code.push(`${tabs}${prefix}${line}\\n`);\n\t\t}\n\t}\n\n\tnewLine(count = 1) {\n\t\tfor(let i = 0; i < count; i++) {\n\t\t\tthis.addCode('');\n\t\t}\n\t}\n\n\tgetServerUrl() {\n\t\treturn this.connection.getUrl();\n\t}\n\n\tasync toCode(callback = false) {\n\t\tthis.code = [];\n\t\tif (!callback) {\n\t\t\tthis.comment(`Import required packages`);\n\t\t\tthis.generateImports();\n\t\t\tthis.newLine();\n\t\t\tthis.comment(`Connect to the back-end`);\n\t\t\tthis.generateConnection();\n\t\t\tthis.generateAuthentication();\n\t\t\tthis.newLine();\n\t\t\tthis.generateBuilder();\n\t\t\tthis.generateMetadata();\n\t\t\tthis.newLine();\n\t\t}\n\t\tlet params = this.getProcessParameters();\n\t\tif (params.length > 0) {\n\t\t\tthis.comment('ToDo: Here you need to set values for the parameters');\n\t\t\tfor(let param of params) {\n\t\t\t\tthis.generateMissingParameter(param);\n\t\t\t}\n\t\t\tthis.newLine();\n\t\t}\n\t\tawait this.execute();\n\t\tif (!callback) {\n\t\t\tthis.newLine();\n\t\t\tthis.comment(`The process can be executed synchronously (see below), as batch job or as web service now`);\n\t\t}\n\t\tthis.generateResult(this.getResultNode(), callback);\n\t\treturn this.code.join('').trim();\n\t}\n\n\tasync execute() {\n\t\tawait this.validate();\n\t\tthis.reset();\n\t\tawait this.executeNodes(this.getStartNodes());\n\t\treturn this.getResultNode();\n\t}\n\n\tisMath() {\n\t\tif (typeof this._isMath === 'undefined') {\n\t\t\t// Determine whether the process is just math\n\t\t\tthis._isMath = this.processRegistry.isMath(this);\n\t\t}\n\t\treturn this._isMath;\n\t}\n\n}","import Utils from \"../utils\";\nimport Exporter from \"./exporter\";\nimport { Formula } from '@openeo/js-client';\n\nconst KEYWORDS = [\n\t\"abstract\",\n\t\"arguments\",\n\t\"await\",\n\t\"boolean\",\n\t\"break\",\n\t\"byte\",\n\t\"case\",\n\t\"catch\",\n\t\"char\",\n\t\"class\",\n\t\"const\",\n\t\"continue\",\n\t\"debugger\",\n\t\"default\",\n\t\"delete\",\n\t\"do\",\n\t\"double\",\n\t\"else\",\n\t\"enum\",\n\t\"eval\",\n\t\"export\",\n\t\"extends\",\n\t\"false\",\n\t\"final\",\n\t\"finally\",\n\t\"float\",\n\t\"for\",\n\t\"function\",\n\t\"goto\",\n\t\"if\",\n\t\"implements\",\n\t\"import\",\n\t\"in\",\n\t\"instanceof\",\n\t\"int\",\n\t\"interface\",\n\t\"let\",\n\t\"long\",\n\t\"native\",\n\t\"new\",\n\t\"null\",\n\t\"package\",\n\t\"private\",\n\t\"protected\",\n\t\"public\",\n\t\"return\",\n\t\"short\",\n\t\"static\",\n\t\"super\",\n\t\"switch\",\n\t\"synchronized\",\n\t\"this\",\n\t\"throw\",\n\t\"throws\",\n\t\"transient\",\n\t\"true\",\n\t\"try\",\n\t\"typeof\",\n\t\"var\",\n\t\"void\",\n\t\"volatile\",\n\t\"while\",\n\t\"with\",\n\t\"yield\",\n\t// specific to this generator\n\t\"builder\",\n\t\"connection\",\n\t\"formula\",\n\t\"openeo\",\n\t\"result\"\n];\n\nexport default class JavaScript extends Exporter {\n\n\tconstructor(process, registry, connection, generateFormula = false) {\n\t\tsuper(process, registry, connection);\n\t\tthis.generateFormula = generateFormula;\n\t}\n\n\tcreateProcessGraphInstance(process) {\n\t\tlet pg = new JavaScript(process, this.processRegistry, this.getJsonSchemaValidator(), this.generateFormula);\n\t\treturn this.copyProcessGraphInstanceProperties(pg);\n\t}\n\n\tparse() {\n\t\tif (this.parsed) {\n\t\t\treturn;\n\t\t}\n\t\tsuper.parse();\n\t}\n\n\tgetKeywords() {\n\t\treturn KEYWORDS;\n\t}\n\n\tcomment(comment) {\n\t\tthis.addCode(comment, '// ');\n\t}\n\n\tgenerateImports() {\n\t\tthis.addCode(`import { OpenEO, Formula } from '@openeo/js-client';`);\n\t}\n\n\tgenerateConnection() {\n\t\tthis.addCode(`let connection = await OpenEO.connect('${this.getServerUrl()}');`);\n\t}\n\n\tgenerateAuthentication() {\n\t\tthis.comment(`ToDo: Here you need to add your authentication steps`);\n\t}\n\n\tgenerateBuilder() {\n\t\tthis.addCode(`let builder = await connection.buildProcess();`);\n\t}\n\n\tgenerateMetadataEntry(key, value) {\n\t\tthis.addCode(`builder.${key} = ${this.e(value)};`);\n\t}\n\n\tasync generateFunction(node) {\n\t\tlet builderName = node.getParent() ? 'this' : 'builder';\n\t\tlet variable = this.var(node.id, this.varPrefix());\n\t\tlet args = await this.generateArguments(node, !node.namespace);\n\n\t\tthis.comment(node.description);\n\t\tif (Utils.isObject(args)) {\n\t\t\tlet processId = node.namespace ? `${node.process_id}@${node.namespace}` : node.process_id;\n\t\t\tthis.addCode(`let ${variable} = ${builderName}.process(\"${processId}\", ${this.e(args)});`);\n\t\t}\n\t\telse {\n\t\t\tthis.addCode(`let ${variable} = ${builderName}.${node.process_id}(${args.map(arg => this.e(arg)).join(', ')});`);\n\t\t}\n\t}\n\n\tgenerateMissingParameter(parameter) {\n\t\tthis.comment(parameter.description);\n\t\tlet paramName = this.var(parameter.name, 'param');\n\t\tlet value = typeof parameter.default !== 'undefined' ? parameter.default : null;\n\t\tthis.addCode(`let ${paramName} = ${this.e(value)};`);\n\t}\n\n\tasync generateCallback(callback, parameters, variable) {\n\t\tif (this.generateFormula && callback && callback.isMath()) {\n\t\t\tlet formula = callback.toFormulaString();\n\t\t\tlet escaped = JSON.stringify(formula);\n\t\t\treturn `new Formula(${escaped})`;\n\t\t}\n\t\telse {\n\t\t\tlet params = this.generateFunctionParams(parameters);\n\t\t\tthis.newLine();\n\t\t\tthis.addCode(`let ${variable} = function(${params.join(', ')}) {`);\n\t\t\tthis.addCode(await callback.toCode(true), '', 1);\n\t\t\tthis.addCode(`}`);\n\t\t}\n\t}\n\n\tgenerateResult(resultNode, callback) {\n\t\tif (!resultNode) {\n\t\t\treturn;\n\t\t}\n\t\tlet variable = this.var(resultNode.id, this.varPrefix());\n\t\tif (callback) {\n\t\t\tthis.addCode(`return ${variable};`);\n\t\t}\n\t\telse {\n\t\t\tthis.addCode(`let result = await connection.computeResult(${variable});`);\n\t\t}\n\t}\n\n\ttoFormulaString() {\n\t\tif (this.isMath()) {\n\t\t\treturn this.nodeToFormula(this.getResultNode());\n\t\t}\n\t\telse {\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tgetArrayElementPlaceholder(node) {\n\t\tif (node.process_id === 'array_element') {\n\t\t\tif (node.getArgumentType('data') === 'parameter') {\n\t\t\t\tlet parameter = node.getRawArgument('data').from_parameter;\n\t\t\t\tlet index = this.getCallbackParameters().findIndex(param => param.name === parameter);\n\t\t\t\tif (index >= 0) {\n\t\t\t\t\treturn '$'.repeat(index+1) + (node.getArgument('label') || node.getArgument('index'));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tnodeToFormula(node, parentOperator = null) {\n\t\tif (node.process_id === 'array_element') {\n\t\t\tlet arrayElement = this.getArrayElementPlaceholder(node);\n\t\t\tif (arrayElement) {\n\t\t\t\treturn arrayElement;\n\t\t\t}\n\t\t}\n\n\t\tlet operator = Formula.reverseOperatorMapping[node.process_id];\n\t\tlet process = this.processRegistry.get(node.process_id);\n\t\tlet isArrayData = (typeof Formula.arrayOperatorMapping[node.process_id] !== 'undefined');\n\n\t\tlet convertValue = value => {\n\t\t\tif (Utils.isObject(value)) {\n\t\t\t\tif (value.from_node) {\n\t\t\t\t\tlet refNode = node.getProcessGraph().getNode(value.from_node);\n\t\t\t\t\tif (refNode) {\n\t\t\t\t\t\tvalue = this.nodeToFormula(refNode, operator);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tvalue = '#' + value.from_node;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (value.from_parameter) {\n\t\t\t\t\tvalue = value.from_parameter;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow new Error('Objects not allowed');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn value;\n\t\t};\n\n\t\t// Create the list of arguments\n\t\tlet argList = [];\n\t\tlet params = Array.isArray(process.parameters) ? process.parameters : [];\n\t\tfor(let parameter of params) {\n\t\t\tlet value = convertValue(node.getRawArgument(parameter.name));\n\n\t\t\tif (isArrayData && Array.isArray(value) && parameter.name === 'data') {\n\t\t\t\targList = value.map(v => convertValue(v));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(typeof value !== 'undefined') {\n\t\t\t\targList.push(value);\n\t\t\t}\n\t\t\telse if(typeof parameter.default !== 'undefined') {\n\t\t\t\targList.push(parameter.default);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new Error('Argument for parameter \"' + parameter.name + '\" missing');\n\t\t\t}\n\t\t}\n\t\t \n\t\t // Filter null values for array data to handle ignore_nodata\n\t\tif (isArrayData) {\n\t\t\targList = argList.filter(v => v !== null);\n\t\t}\n\n\t\tif (operator) {\n\t\t\tlet strongOps = ['/', '*']; // \"Punktrechnung\" vor\n\t\t\tlet weakOps = ['-', '+']; // \"Strichrechung\"\n\t\t\tlet formula = argList\n\t\t\t\t.map(v => v < 0 ? '(' + v + ')' : v) // Put negative values in brackets\n\t\t\t\t.join(operator); // Merge everything together\n\t\t\t\n\t\t\t// Check whether brackets are required\n\t\t\tif (\n\t\t\t\t// No brackets on top-level\n\t\t\t\t!parentOperator\n\t\t\t\t// If operators are both weak, no brackets required\n\t\t\t\t|| (weakOps.includes(parentOperator) && weakOps.includes(operator))\n\t\t\t\t// If operators are both strong, no brackets required -> not correct, x/(a*b) needs it, see https://github.com/Open-EO/openeo-web-editor/issues/235\n//\t\t\t\t|| (strongOps.includes(parentOperator) && strongOps.includes(operator))\n\t\t\t\t// No brackets required for power, it's the strongest operation\n\t\t\t\t|| operator === '^'\n\t\t\t\t// If the parent operation is a weak operation (+/-) and this is a strong operation, no brackets required\n\t\t\t\t|| (weakOps.includes(parentOperator) && strongOps.includes(operator))\n\t\t\t) {\n\t\t\t\treturn formula;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn '(' + formula + ')';\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn node.process_id + '(' + argList.join(', ') + ')';\n\t\t}\n\t}\n\n}","import { SupportedFormat } from './format';\n\nclass CSV extends SupportedFormat {\n\n\tconstructor(asset, delim = [',', ';']) {\n\t\tsuper(asset, 'TableViewer', 'fa-table');\n\t\tthis.delim = delim;\n\t}\n\n\tasync parseData(data) {\n\t\tif (typeof data === 'string') {\n\t\t\t// Parse CSV\n\t\t\tlet array = this.parseCSV(data.trim());\n\t\t\t// Convert values into numbers, if possible\n\t\t\treturn array.map(row => row.map(col => {\n\t\t\t\tcol = col.trim();\n\t\t\t\tif (col.length === 0) {\n\t\t\t\t\treturn NaN;\n\t\t\t\t}\n\t\t\t\telse if (!isNaN(col)) { // https://stackoverflow.com/a/35759874/9709414\n\t\t\t\t\treturn parseFloat(col);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn col;\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t\treturn data;\n\t}\n\n\t// From https://stackoverflow.com/questions/1293147/example-javascript-code-to-parse-csv-data\n\tparseCSV(str) {\n\t\tvar arr = [];\n\t\tvar quote = false;  // 'true' means we're inside a quoted field\n\t\n\t\t// Iterate over each character, keep track of current row and column (of the returned array)\n\t\tfor (var row = 0, col = 0, c = 0; c < str.length; c++) {\n\t\t\tvar cc = str[c], nc = str[c+1];        // Current character, next character\n\t\t\tarr[row] = arr[row] || [];             // Create a new row if necessary\n\t\t\tarr[row][col] = arr[row][col] || '';   // Create a new column (start with empty string) if necessary\n\t\n\t\t\t// If the current character is a quotation mark, and we're inside a\n\t\t\t// quoted field, and the next character is also a quotation mark,\n\t\t\t// add a quotation mark to the current column and skip the next character\n\t\t\tif (cc == '\"' && quote && nc == '\"') {\n\t\t\t\tarr[row][col] += cc; ++c;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// If it's just one quotation mark, begin/end quoted field\n\t\t\tif (cc == '\"') {\n\t\t\t\tquote = !quote;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// If it's a elimiter and we're not in a quoted field, move on to the next column\n\t\t\tif (this.delim.includes(cc) && !quote) {\n\t\t\t\t++col;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// If it's a newline (CRLF) and we're not in a quoted field, skip the next character\n\t\t\t// and move on to the next row and move to column 0 of that new row\n\t\t\tif (cc == '\\r' && nc == '\\n' && !quote) {\n\t\t\t\t++row; col = 0; ++c;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// If it's a newline (LF or CR) and we're not in a quoted field,\n\t\t\t// move on to the next row and move to column 0 of that new row\n\t\t\tif (cc == '\\n' && !quote) {\n\t\t\t\t++row; col = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (cc == '\\r' && !quote) {\n\t\t\t\t++row; col = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// Otherwise, append the current character to the current column\n\t\t\tarr[row][col] += cc;\n\t\t}\n\t\treturn arr;\n\t}\n\n}\n\nexport default CSV;","import Utils from '../utils.js';\n\nexport class Format {\n\n\tconstructor(asset) {\n\t\tObject.assign(this, asset);\n\t\tthis.context = null;\n\t}\n\n\tsetContext(context) {\n\t\tthis.context = context;\n\t}\n\n\tgetContext() {\n\t\treturn this.context;\n\t}\n\n\tgetUrl() {\n\t\treturn this.href;\n\t}\n\n\tcanGroup() {\n\t\treturn false;\n\t}\n\n\tisBinary() {\n\t\treturn true;\n\t}\n\n\tdownload(filename = null) {\n\t\tlet tempLink = document.createElement('a');\n\t\ttempLink.style.display = 'none';\n\t\ttempLink.href = this.getUrl();\n\t\ttempLink.setAttribute('download', filename ? filename :  Utils.makeFileName(\"result\", this.type));\n\t\tif (typeof tempLink.download === 'undefined') {\n\t\t\ttempLink.setAttribute('target', '_blank');\n\t\t}\n\t\tdocument.body.appendChild(tempLink);\n\t\ttempLink.click();\n\t\tdocument.body.removeChild(tempLink);\n\t}\n\n\tasync loadData(connection) {\n\t\tif (!this.loaded) {\n\t\t\tthis.data = await this.fetchData(connection);\n\t\t\tthis.loaded = true;\n\t\t}\n\t}\n\n\tgetData() {\n\t\tif (!this.loaded) {\n\t\t\tthrow new Error('Data must be loaded before');\n\t\t}\n\t\treturn this.data;\n\t}\n\n\tasync fetchData(connection) {\n\t\tlet blob;\n\t\tlet url = this.getUrl();\n\t\tif (url.startsWith('blob:')) {\n\t\t\tlet response = await fetch(url);\n\t\t\tblob = await response.blob();\n\t\t}\n\t\telse {\n\t\t\tblob = await connection.download(url, false);\n\t\t}\n\t\tlet promise = new Promise((resolve, reject) => {\n\t\t\tlet reader = new FileReader();\n\t\t\treader.onload = event => resolve(event.target.result);\n\t\t\treader.onerror = reject;\n\t\t\tif (this.isBinary()) {\n\t\t\t\treader.readAsBinaryString(blob);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treader.readAsText(blob);\n\t\t\t}\n\t\t});\n\t\tlet data = await promise;\n\t\treturn await this.parseData(data);\n\t}\n\n\tasync parseData(data) {\n\t\treturn data;\n\t}\n\n}\n\nexport class SupportedFormat extends Format {\n\n\tconstructor(asset, component = null, icon = 'fa-database', props = {}, events = {}) {\n\t\tsuper(asset);\n\t\tthis.loaded = false;\n\t\tthis.component = component;\n\t\tthis.props = props;\n\t\tif (!this.props.data) {\n\t\t\tthis.props.data = this;\n\t\t}\n\t\tthis.icon = icon;\n\t\tthis.events = events;\n\t}\n\n\tisBinary() {\n\t\treturn false;\n\t}\n\n}\n\nexport class UnsupportedFormat extends Format {\n\n\tconstructor(asset) {\n\t\tsuper(asset);\n\t}\n\n}\n\nexport class FormatCollection extends SupportedFormat {\n\n}","import { SupportedFormat } from './format';\n\nclass BrowserImage extends SupportedFormat {\n\n\tconstructor(asset) {\n\t\tsuper(asset, 'ImageViewer', 'fa-image');\n\t}\n\n\tisBinary() {\n\t\treturn true;\n\t}\n\n\tasync fetchData() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet img = new Image();\n\t\t\timg.crossOrigin = 'anonymous';\n\t\t\timg.onerror = reject;\n\t\t\timg.onload = () => resolve(img);\n\t\t\timg.fetchPriotity = 'high';\n\t\t\timg.decoding = 'sync';\n\t\t\timg.src = this.getUrl();\n\t\t});\n\t}\n\n}\n\nexport default BrowserImage;","import { SupportedFormat } from './format';\n\nclass NativeType extends SupportedFormat {\n\n\tconstructor(asset) {\n\t\tsuper(asset, \"DataViewer\");\n\t}\n\n}\n\nexport default NativeType;","import CSV from './csv';\n\nclass TSV extends CSV {\n\n\tconstructor(asset) {\n\t\tsuper(asset, [\"\\t\"]);\n\t}\n\n}\n\nexport default TSV;","import contentType from 'content-type';\n\nimport BrowserImage from '../formats/browserImage';\nimport CSV from '../formats/csv';\nimport GeoTIFF from '../formats/geotiff';\nimport JSON_ from '../formats/json';\nimport NativeType from './native';\nimport TSV from '../formats/tsv';\nimport { UnsupportedFormat } from './format';\n\nexport default class FormatRegistry {\n\n\tconstructor() {\n\t}\n\n\tcreateFilesFromSTAC(stac, resource = null) {\n\t\tlet files = Object.values(stac.assets)\n\t\t\t.filter(asset => !Array.isArray(asset.roles) || !asset.roles.includes(\"metadata\"))\n\t\t\t.map(asset => this.createFileFromAsset(asset, stac));\n\t\tif (resource) {\n\t\t\tfiles.forEach(file => file.setContext(resource));\n\t\t}\n\t\treturn files;\n\t}\n\n\tcreateFilesFromBlob(data) {\n\t\tif (!(data instanceof Blob)) {\n\t\t\tthrow new Error(\"Given data is not a valid Blob\");\n\t\t}\n\t\treturn this.createFilesFromSTAC({\n\t\t\tstac_version: \"1.0.0\",\n\t\t\ttype: \"Feature\",\n\t\t\tgeometry: null,\n\t\t\tproperties: {},\n\t\t\tlinks: [],\n\t\t\tassets: {\n\t\t\t\tresult: {\n\t\t\t\t\thref: URL.createObjectURL(data),\n\t\t\t\t\ttype: data.type\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tcreateFileFromAsset(asset, stac) {\n\t\ttry {\n\n\t\t\t// Detect by media type\n\t\t\tif (typeof asset.type === 'string') {\n\t\t\t\tlet mime = contentType.parse(asset.type.toLowerCase());\n\t\t\t\tswitch(mime.type) {\n\t\t\t\t\tcase 'image/png':\n\t\t\t\t\tcase 'image/jpg':\n\t\t\t\t\tcase 'image/jpeg':\n\t\t\t\t\tcase 'image/gif':\n\t\t\t\t\tcase 'image/webp':\n\t\t\t\t\t\treturn new BrowserImage(asset);\n\t\t\t\t\tcase 'application/json':\n\t\t\t\t\tcase 'text/json':\n\t\t\t\t\tcase 'application/geo+json':\n\t\t\t\t\t\treturn new JSON_(asset);\n\t\t\t\t\tcase 'text/plain':\n\t\t\t\t\t\treturn new NativeType(asset);\n\t\t\t\t\tcase 'text/csv':\n\t\t\t\t\t\treturn new CSV(asset);\n\t\t\t\t\tcase 'text/tab-separated-values':\n\t\t\t\t\t\treturn new TSV(asset);\n\t\t\t\t\tcase 'image/tiff':\n\t\t\t\t\t\treturn new GeoTIFF(asset, stac);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Fallback: Detect by file extension\n\t\t\tif (typeof asset.href === 'string') {\n\t\t\t\tlet extension = asset.href.split(/[#?]/)[0].split('.').pop().trim().toLowerCase();\n\t\t\t\tswitch(extension) {\n\t\t\t\t\tcase 'png':\n\t\t\t\t\tcase 'jpg':\n\t\t\t\t\tcase 'jpeg':\n\t\t\t\t\tcase 'gif':\n\t\t\t\t\tcase 'webp':\n\t\t\t\t\t\treturn new BrowserImage(asset);\n\t\t\t\t\tcase 'json':\n\t\t\t\t\tcase 'geojson':\n\t\t\t\t\t\treturn new JSON_(asset);\n\t\t\t\t\tcase 'txt':\n\t\t\t\t\t\treturn new NativeType(asset);\n\t\t\t\t\tcase 'csv':\n\t\t\t\t\t\treturn new CSV(asset);\n\t\t\t\t\tcase 'tsv':\n\t\t\t\t\t\treturn new TSV(asset);\n\t\t\t\t\tcase 'tif':\n\t\t\t\t\tcase 'tiff':\n\t\t\t\t\t\treturn new GeoTIFF(asset, stac);\n\t\t\t\t}\n\t\t\t}\n\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\n\t\treturn new UnsupportedFormat(asset);\n\t}\n\n}","import { SupportedFormat } from './format';\nimport Utils from '../utils';\nimport ProjManager from '../components/maps/projManager';\n\nimport { fromUrl as tiffFromUrl, globals as _ } from 'geotiff';\n\nimport { toUserExtent } from 'ol/proj';\nimport Projection from 'ol/proj/Projection';\nimport { fromCode as unitsFromCode } from 'ol/proj/Units';\n\nconst GDAL_MIN = 'STATISTICS_MINIMUM';\nconst GDAL_MAX = 'STATISTICS_MAXIMUM';\nconst GDAL_NAME = 'DESCRIPTION';\n\nclass GeoTIFF extends SupportedFormat {\n\n\tconstructor(asset, stac) {\n\t\tsuper(asset, \"MapViewer\", 'fa-map', { removableLayers: true });\n\t\tthis.bands = [];\n\t\tthis.nodata = [];\n\t\tthis.img = null;\n\t\tthis.projection = null;\n\t\tthis.extent = null;\n\t\tthis.convertToRGB = false;\n\t\tthis.stac = stac;\n\t}\n\n\tisBinary() {\n\t\treturn true;\n\t}\n\n\tcanGroup() {\n\t\treturn true;\n\t}\n\n\tasync loadData(connection) {\n\t\tif (!this.loaded) {\n\t\t\tawait this.parseMetadata();\n\t\t\tthis.loaded = true;\n\t\t}\n\t\treturn this;\n\t}\n\n\tgetData() {\n\t\treturn this;\n\t}\n\n\tasync parseMetadata() {\n\t\tlet stacHasExtent = this.stac && (this.stac.geometry || this.stac.extent);\n\n\t\t// Get projection from STAC\n\t\tthis.projection = await ProjManager.addFromStac(this.stac);\n\n\t\t// Get nodata from STAC file:nodata\n\t\tif (Array.isArray(this['file:nodata']) && this['file:nodata'].length > 0) {\n\t\t\tthis.nodata = Utils.parseNodata(this['file:nodata']);\n\t\t}\n\n\t\t// Get band names from STAC eo:bands\n\t\tif (Array.isArray(this['eo:bands']) && this['eo:bands'].length > 0) {\n\t\t\tthis['eo:bands'].forEach((band, i) => this.setBandInfo(i, { name: band.name }));\n\t\t}\n\n\t\t// Get min/max/nodata from STAC raster:bands\n\t\tif (Array.isArray(this['raster:bands']) && this['raster:bands'].length > 0) {\n\t\t\tthis['raster:bands'].forEach((band, i) => {\n\t\t\t\t// Get name from band\n\t\t\t\tif (band.name) {\n\t\t\t\t\tthis.setBandInfo(i, {\n\t\t\t\t\t\tname: band.name\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Set min/max from statistics\n\t\t\t\tif (Utils.isObject(band.statistics)) {\n\t\t\t\t\tthis.setBandInfo(i, {\n\t\t\t\t\t\tmin: band.statistics.minimum,\n\t\t\t\t\t\tmax: band.statistics.maximum\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// per-band no-data values are not supported, simply read the no-data from the first occurance if not defined yet\n\t\t\t\tif (this.nodata.length === 0 && typeof band.nodata !== 'undefined') {\n\t\t\t\t\tthis.nodata.push(Utils.parseNodata(band.nodata));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Load example tiff image\n\t\tlet tiff = await tiffFromUrl(this.getUrl());\n\t\tthis.img = await tiff.getImage();\n\n\t\t// Get data for each band / sample\n\t\tfor (let i = 0; i < this.img.getSamplesPerPixel(); i++) {\n\t\t\tlet data = {};\n\n\t\t\t// Use min/max for data type (as fallback)\n\t\t\ttry {\n\t\t\t\tlet dummy = this.img.getArrayForSample(i);\n\t\t\t\tif (!Number.isFinite(this.bands[i].min)) {\n\t\t\t\t\tdata.min = this.getMinForDataType(dummy);\n\t\t\t\t}\n\t\t\t\tif (!Number.isFinite(this.bands[i].max)) {\n\t\t\t\t\tdata.max = this.getMaxForDataType(dummy);\n\t\t\t\t}\n\t\t\t} catch (error) {}\n\n\t\t\t// Set min/max/name from statistics, if available\n\t\t\tlet band = this.img.getGDALMetadata(i);\n\t\t\tif (Utils.isObject(band)) {\n\t\t\t\tif (GDAL_MIN in band) {\n\t\t\t\t\tdata.min = parseFloat(band[GDAL_MIN]);\n\t\t\t\t}\n\t\t\t\tif (GDAL_MAX in band) {\n\t\t\t\t\tdata.max = parseFloat(band[GDAL_MAX]);\n\t\t\t\t}\n\t\t\t\tif (GDAL_NAME in band) {\n\t\t\t\t\tdata.name = band[GDAL_NAME];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.setBandInfo(i, data);\n\n\t\t\t// get no-data values if needed\n\t\t\tlet nodata = this.img.getGDALNoData();\n\t\t\tif (this.nodata.length === 0 && nodata !== null) {\n\t\t\t\tthis.nodata.push(nodata);\n\t\t\t}\n\t\t}\n\n\t\t// Get projection from GeoTiff\n\t\tlet code;\n\t\tif (!this.projection && this.img.geoKeys) {\n\t\t\tlet { ProjectedCSTypeGeoKey, GeographicTypeGeoKey, ProjLinearUnitsGeoKey, GeogAngularUnitsGeoKey } = this.img.geoKeys;\n\t\t\tif (ProjectedCSTypeGeoKey) {\n\t\t\t\tcode = 'EPSG:' + ProjectedCSTypeGeoKey;\n\t\t\t\tthis.projection = await ProjManager.get(code);\n\t\t\t}\n\t\t\tif (!this.projection && GeographicTypeGeoKey) {\n\t\t\t\tcode = 'EPSG:' + GeographicTypeGeoKey;\n\t\t\t\tthis.projection = await ProjManager.get(code);\n\t\t\t}\n\n\t\t\tif (!this.projection && code) {\n\t\t\t\tconst units = (ProjLinearUnitsGeoKey && unitsFromCode(ProjLinearUnitsGeoKey)) || (GeogAngularUnitsGeoKey && unitsFromCode(GeogAngularUnitsGeoKey));\n\t\t\t\tif (units) {\n\t\t\t\t\tthis.projection = new Projection({ code, units });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Get extent from geotiff\n\t\tif (!stacHasExtent) {\n\t\t\ttry {\n\t\t\t\tlet bbox = this.img.getBoundingBox();\n\t\t\t\tthis.extent = toUserExtent(bbox, this.projection);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.warn(error);\n\t\t\t}\n\t\t}\n\n\t\t// Store color map as RGB\n\t\tif (this.img.fileDirectory.ColorMap) {\n\t\t\tconst map = Array.from(this.img.fileDirectory.ColorMap);\n\t\t\tconst greenOffset = map.length / 3;\n\t\t\tconst blueOffset = map.length / 3 * 2;\n\t\t\tthis.colorMap = [];\n\t\t\tfor (let i = 0; i < greenOffset; i++) {\n\t\t\t\tthis.colorMap.push([\n\t\t\t\t\tMath.trunc(map[i] / 65536 * 256),\n\t\t\t\t\tMath.trunc(map[i + greenOffset] / 65536 * 256),\n\t\t\t\t\tMath.trunc(map[i + blueOffset] / 65536 * 256),\n\t\t\t\t\tthis.nodata.includes(i) ? 0 : 1\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\n\t\t// Get photometric interpretation\n\t\tswitch (this.img.fileDirectory.PhotometricInterpretation) {\n\t\t\tcase _.photometricInterpretations.CMYK:\n\t\t\tcase _.photometricInterpretations.YCbCr:\n\t\t\tcase _.photometricInterpretations.CIELab:\n\t\t\t\tthis.convertToRGB = true;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// RGB and (Black/White)IsZero are handled via user control\n\t\t\t\t// Palette is handled directly by our styling\n\t\t\t\tthis.convertToRGB = false;\n\t\t}\n\t}\n\n\tsetBandInfo(i, data) {\n\t\tif (this.bands[i]) {\n\t\t\tObject.assign(this.bands[i], data);\n\t\t}\n\t\telse {\n\t\t\tthis.bands.push(Object.assign({ id: i + 1 }, data));\n\t\t}\n\t}\n\n\tgetNoData() {\n\t\treturn this.nodata;\n\t}\n\n\tgetContext() {\n\t\treturn this.stac;\n\t}\n\n\tgetBands() {\n\t\treturn this.bands;\n\t}\n\n\tgetProjection() {\n\t\treturn this.projection;\n\t}\n\n\tgetExtent() {\n\t\treturn this.extent;\n\t}\n\n\tgetColorMap() {\n\t\treturn this.colorMap;\n\t}\n\n\tgetMinForDataType(array) {\n\t\tif (array instanceof Int8Array) {\n\t\t\treturn -128;\n\t\t}\n\t\tif (array instanceof Int16Array) {\n\t\t\treturn -32768;\n\t\t}\n\t\tif (array instanceof Int32Array) {\n\t\t\treturn -2147483648;\n\t\t}\n\t\tif (array instanceof Float32Array) {\n\t\t\treturn 1.2e-38;\n\t\t}\n\t\treturn 0;\n\t}\n\t\n\tgetMaxForDataType(array) {\n\t\tif (array instanceof Int8Array) {\n\t\t\treturn 127;\n\t\t}\n\t\tif (array instanceof Uint8Array) {\n\t\t\treturn 255;\n\t\t}\n\t\tif (array instanceof Uint8ClampedArray) {\n\t\t\treturn 255;\n\t\t}\n\t\tif (array instanceof Int16Array) {\n\t\t\treturn 32767;\n\t\t}\n\t\tif (array instanceof Uint16Array) {\n\t\t\treturn 65535;\n\t\t}\n\t\tif (array instanceof Int32Array) {\n\t\t\treturn 2147483647;\n\t\t}\n\t\tif (array instanceof Uint32Array) {\n\t\t\treturn 4294967295;\n\t\t}\n\t\tif (array instanceof Float32Array) {\n\t\t\treturn 3.4e38;\n\t\t}\n\t\treturn 255;\n\t}\n\n}\n\nexport default GeoTIFF;","import { isIterable } from 'core-js';\nimport Utils from '../utils';\nimport { SupportedFormat } from './format';\n\nclass JSON_ extends SupportedFormat {\n\n\tconstructor(asset, component = \"DataViewer\") {\n\t\tsuper(asset, component);\n\n\t\tthis.isGeoJson = false;\n\t\t// this.isCovJson = false;\n\t}\n\n\tasync parseData(data) {\n\t\tif (typeof data === 'string') {\n\t\t\ttry {\n\t\t\t\tdata = JSON.parse(data);\n\t\t\t}\n\t\t\tcatch (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t}\n\t\t}\n\t\tif (Utils.detectGeoJson(data)) {\n\t\t\tthis.isGeoJson = true;\n\t\t\tthis.component = 'MapViewer';\n\t\t\tthis.icon = 'fa-map';\n\t\t}\n\t\telse if (this.isTable(data)) {\n\t\t\tthis.component = 'TableViewer';\n\t\t\tthis.icon = 'fa-table';\n\t\t}\n\t\treturn data;\n\t}\n\n\tisTable(data) {\n\t\tif (!data || typeof data !== 'object' || Utils.size(data) === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tlet values = Object.values(data);\n\t\tlet keys = Object.keys(values[0]);\n\t\treturn !values.some(row => !row || typeof row !== 'object' || !Utils.equals(Object.keys(row), keys));\n\t}\n}\n\nexport default JSON_;"],"names":["ProcessImpl","BaseProcess","constructor","process","exporter","super","this","node","generateFunction","Exporter","ProcessGraph","registry","connection","Utils","code","fnCounter","allowEmpty","fillUndefinedParameters","createProcessGraphInstance","pg","processRegistry","getJsonSchemaValidator","copyProcessGraphInstanceProperties","createProcessInstance","isKeyword","keyword","getKeywords","includes","toLowerCase","comment","generateImports","generateConnection","generateAuthentication","generateBuilder","generateMetadata","generateMissingParameter","generateFunctionParams","parameters","map","p","default","name","e","generateResult","makeNull","makeBoolean","val","makeArray","arr","join","makeObject","obj","key","makeString","str","JSON","stringify","makeNumber","num","value","Array","isArray","hasComment","length","newLine","generateMetadataEntry","args","onExporter","filter","newArgs","from_node","var","varPrefix","from_parameter","fnName","resolveArguments","callback","process_id","properties","getArgument","getCallbackParameters","execute","replacement","generateCallback","ordered","arguments","async","resolveCallback","orderArguments","getProcessGraph","getProcess","orderedArgs","param","optional","definedValueFound","i","pop","getParent","id","prefix","String","match","replace","getTab","addCode","level","tabs","repeat","lines","trim","split","line","push","count","getServerUrl","getUrl","params","getProcessParameters","getResultNode","validate","reset","executeNodes","getStartNodes","isMath","_isMath","KEYWORDS","JavaScript","generateFormula","parse","parsed","builderName","variable","generateArguments","namespace","description","processId","arg","parameter","paramName","formula","toFormulaString","escaped","toCode","resultNode","nodeToFormula","getArrayElementPlaceholder","getArgumentType","getRawArgument","index","findIndex","parentOperator","arrayElement","operator","Formula","get","isArrayData","convertValue","refNode","getNode","Error","argList","v","strongOps","weakOps","CSV","SupportedFormat","asset","delim","data","array","parseCSV","row","col","NaN","isNaN","parseFloat","quote","c","cc","nc","Format","Object","assign","context","setContext","getContext","href","canGroup","isBinary","download","filename","tempLink","document","createElement","style","display","setAttribute","type","body","appendChild","click","removeChild","loaded","fetchData","getData","blob","url","startsWith","response","fetch","promise","Promise","resolve","reject","reader","FileReader","onload","event","target","result","onerror","readAsBinaryString","readAsText","parseData","component","icon","props","events","UnsupportedFormat","BrowserImage","img","Image","crossOrigin","fetchPriotity","decoding","src","NativeType","TSV","FormatRegistry","createFilesFromSTAC","stac","resource","files","values","assets","roles","createFileFromAsset","forEach","file","createFilesFromBlob","Blob","stac_version","geometry","links","URL","createObjectURL","mime","contentType","JSON_","GeoTIFF","extension","error","console","log","GDAL_MIN","GDAL_MAX","GDAL_NAME","removableLayers","bands","nodata","projection","extent","convertToRGB","parseMetadata","stacHasExtent","ProjManager","band","setBandInfo","statistics","min","minimum","max","maximum","tiff","tiffFromUrl","getImage","getSamplesPerPixel","dummy","getArrayForSample","Number","isFinite","getMinForDataType","getMaxForDataType","getGDALMetadata","getGDALNoData","geoKeys","ProjectedCSTypeGeoKey","GeographicTypeGeoKey","ProjLinearUnitsGeoKey","GeogAngularUnitsGeoKey","units","unitsFromCode","Projection","bbox","getBoundingBox","toUserExtent","warn","fileDirectory","ColorMap","from","greenOffset","blueOffset","colorMap","Math","trunc","PhotometricInterpretation","_","getNoData","getBands","getProjection","getExtent","getColorMap","Int8Array","Int16Array","Int32Array","Float32Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","isGeoJson","isTable","keys","some"],"sourceRoot":""}