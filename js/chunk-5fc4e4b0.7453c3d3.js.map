{"version":3,"sources":["webpack:///./src/formats/browserImage.js","webpack:///./src/formats/native.js","webpack:///./src/formats/tsv.js","webpack:///./src/formats/formatRegistry.js","webpack:///./src/formats/format.js","webpack:///./src/formats/csv.js","webpack:///./src/formats/geotiff.js","webpack:///./src/export/exporter.js","webpack:///./src/export/javascript.js","webpack:///./src/formats/json.js"],"names":["BrowserImage","SupportedFormat","constructor","asset","super","isBinary","img","Image","crossOrigin","src","this","getUrl","NativeType","TSV","CSV","FormatRegistry","createFilesFromSTAC","stac","resource","files","Object","values","assets","map","createFileFromAsset","forEach","file","setContext","createFilesFromBlob","data","Blob","Error","stac_version","type","geometry","properties","links","result","href","URL","createObjectURL","mime","contentType","parse","toLowerCase","JSON_","GeoTIFF","extension","split","pop","trim","error","console","log","UnsupportedFormat","Format","assign","context","getContext","canGroup","download","filename","tempLink","document","createElement","style","display","setAttribute","Utils","makeFileName","body","appendChild","click","removeChild","connection","loaded","fetchData","getData","blob","url","startsWith","response","fetch","promise","Promise","resolve","reject","reader","FileReader","onload","event","target","onerror","readAsBinaryString","readAsText","parseData","component","icon","props","events","delim","array","parseCSV","row","col","length","NaN","isNaN","parseFloat","str","arr","quote","c","cc","nc","includes","GDAL_MIN","GDAL_MAX","GDAL_NAME","removableLayers","bands","nodata","projection","extent","convertToRGB","parseMetadata","stacHasExtent","ProjManager","addFromStac","Array","isArray","parseNodata","band","i","setBandInfo","name","isObject","statistics","min","minimum","max","maximum","push","code","tiff","tiffFromUrl","getImage","getSamplesPerPixel","dummy","getArrayForSample","Number","isFinite","getMinForDataType","getMaxForDataType","getGDALMetadata","getGDALNoData","geoKeys","ProjectedCSTypeGeoKey","GeographicTypeGeoKey","ProjLinearUnitsGeoKey","GeogAngularUnitsGeoKey","get","units","unitsFromCode","Projection","bbox","getBoundingBox","toUserExtent","warn","fileDirectory","ColorMap","from","greenOffset","blueOffset","colorMap","Math","trunc","PhotometricInterpretation","photometricInterpretations","CMYK","YCbCr","CIELab","id","getNoData","getBands","getProjection","getExtent","getColorMap","Int8Array","Int16Array","Int32Array","Float32Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","ProcessImpl","BaseProcess","process","exporter","node","generateFunction","Exporter","ProcessGraph","registry","fnCounter","allowEmpty","fillUndefinedParameters","createProcessGraphInstance","pg","processRegistry","getJsonSchemaValidator","copyProcessGraphInstanceProperties","createProcessInstance","isKeyword","keyword","getKeywords","comment","generateImports","generateConnection","generateAuthentication","generateBuilder","generateMetadata","generateMissingParameter","generateFunctionParams","parameters","p","default","e","generateResult","makeNull","makeBoolean","val","makeArray","join","makeObject","obj","mapObject","key","makeString","JSON","stringify","makeNumber","num","value","mapObjectValues","hasComment","newLine","generateMetadataEntry","args","onExporter","filter","newArgs","from_node","var","varPrefix","from_parameter","fnName","resolveArguments","callback","process_id","getArgument","getCallbackParameters","execute","replacement","generateCallback","ordered","arguments","async","resolveCallback","orderArguments","getProcessGraph","getProcess","orderedArgs","param","optional","definedValueFound","getParent","prefix","String","match","replace","getTab","addCode","level","tabs","repeat","lines","line","count","getServerUrl","params","getProcessParameters","getResultNode","validate","reset","executeNodes","getStartNodes","isMath","_isMath","KEYWORDS","JavaScript","generateFormula","parsed","builderName","variable","generateArguments","namespace","description","processId","arg","parameter","paramName","formula","toFormulaString","escaped","toCode","resultNode","nodeToFormula","getArrayElementPlaceholder","getArgumentType","getRawArgument","index","findIndex","parentOperator","arrayElement","operator","Formula","reverseOperatorMapping","isArrayData","arrayOperatorMapping","convertValue","refNode","getNode","argList","v","strongOps","weakOps","isGeoJson","detectGeoJson","isTable","size","keys","some","equals"],"mappings":"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","file":"js/chunk-5fc4e4b0.7453c3d3.js","sourcesContent":["import { SupportedFormat } from './format';\n\nclass BrowserImage extends SupportedFormat {\n\n\tconstructor(asset) {\n\t\tsuper(asset, 'ImageViewer', 'fa-image');\n\t}\n\n\tisBinary() {\n\t\treturn true;\n\t}\n\n\tasync fetchData() {\n\t\tlet img = new Image();\n\t\timg.crossOrigin = 'anonymous';\n\t\timg.src = this.getUrl();\n\t\treturn img;\n\t}\n\n}\n\nexport default BrowserImage;","import { SupportedFormat } from './format';\n\nclass NativeType extends SupportedFormat {\n\n\tconstructor(asset) {\n\t\tsuper(asset, \"DataViewer\");\n\t}\n\n}\n\nexport default NativeType;","import CSV from './csv';\n\nclass TSV extends CSV {\n\n\tconstructor(asset) {\n\t\tsuper(asset, [\"\\t\"]);\n\t}\n\n}\n\nexport default TSV;","import contentType from 'content-type';\n\nimport BrowserImage from '../formats/browserImage';\nimport CSV from '../formats/csv';\nimport GeoTIFF from '../formats/geotiff';\nimport JSON_ from '../formats/json';\nimport NativeType from './native';\nimport TSV from '../formats/tsv';\nimport { UnsupportedFormat } from './format';\n\nexport default class FormatRegistry {\n\n\tconstructor() {\n\t}\n\n\tcreateFilesFromSTAC(stac, resource = null) {\n\t\tlet files = Object.values(stac.assets)\n\t\t\t.map(asset => this.createFileFromAsset(asset, stac));\n\t\tif (resource) {\n\t\t\tfiles.forEach(file => file.setContext(resource));\n\t\t}\n\t\treturn files;\n\t}\n\n\tcreateFilesFromBlob(data) {\n\t\tif (!(data instanceof Blob)) {\n\t\t\tthrow new Error(\"Given data is not a valid Blob\");\n\t\t}\n\t\treturn this.createFilesFromSTAC({\n\t\t\tstac_version: \"1.0.0\",\n\t\t\ttype: \"Feature\",\n\t\t\tgeometry: null,\n\t\t\tproperties: {},\n\t\t\tlinks: [],\n\t\t\tassets: {\n\t\t\t\tresult: {\n\t\t\t\t\thref: URL.createObjectURL(data),\n\t\t\t\t\ttype: data.type\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tcreateFileFromAsset(asset, stac) {\n\t\ttry {\n\n\t\t\t// Detect by media type\n\t\t\tif (typeof asset.type === 'string') {\n\t\t\t\tlet mime = contentType.parse(asset.type.toLowerCase());\n\t\t\t\tswitch(mime.type) {\n\t\t\t\t\tcase 'image/png':\n\t\t\t\t\tcase 'image/jpg':\n\t\t\t\t\tcase 'image/jpeg':\n\t\t\t\t\tcase 'image/gif':\n\t\t\t\t\tcase 'image/webp':\n\t\t\t\t\t\treturn new BrowserImage(asset);\n\t\t\t\t\tcase 'application/json':\n\t\t\t\t\tcase 'text/json':\n\t\t\t\t\tcase 'application/geo+json':\n\t\t\t\t\t\treturn new JSON_(asset);\n\t\t\t\t\tcase 'text/plain':\n\t\t\t\t\t\treturn new NativeType(asset);\n\t\t\t\t\tcase 'text/csv':\n\t\t\t\t\t\treturn new CSV(asset);\n\t\t\t\t\tcase 'text/tab-separated-values':\n\t\t\t\t\t\treturn new TSV(asset);\n\t\t\t\t\tcase 'image/tiff':\n\t\t\t\t\t\treturn new GeoTIFF(asset, stac);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Fallback: Detect by file extension\n\t\t\tif (typeof asset.href === 'string') {\n\t\t\t\tlet extension = asset.href.split(/[#?]/)[0].split('.').pop().trim().toLowerCase();\n\t\t\t\tswitch(extension) {\n\t\t\t\t\tcase 'png':\n\t\t\t\t\tcase 'jpg':\n\t\t\t\t\tcase 'jpeg':\n\t\t\t\t\tcase 'gif':\n\t\t\t\t\tcase 'webp':\n\t\t\t\t\t\treturn new BrowserImage(asset);\n\t\t\t\t\tcase 'json':\n\t\t\t\t\tcase 'geojson':\n\t\t\t\t\t\treturn new JSON_(asset);\n\t\t\t\t\tcase 'txt':\n\t\t\t\t\t\treturn new NativeType(asset);\n\t\t\t\t\tcase 'csv':\n\t\t\t\t\t\treturn new CSV(asset);\n\t\t\t\t\tcase 'tsv':\n\t\t\t\t\t\treturn new TSV(asset);\n\t\t\t\t\tcase 'tif':\n\t\t\t\t\tcase 'tiff':\n\t\t\t\t\t\treturn new GeoTIFF(asset, stac);\n\t\t\t\t}\n\t\t\t}\n\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\n\t\treturn new UnsupportedFormat(asset);\n\t}\n\n}","import Utils from '../utils.js';\n\nexport class Format {\n\n\tconstructor(asset) {\n\t\tObject.assign(this, asset);\n\t\tthis.context = null;\n\t}\n\n\tsetContext(context) {\n\t\tthis.context = context;\n\t}\n\n\tgetContext() {\n\t\treturn this.context;\n\t}\n\n\tgetUrl() {\n\t\treturn this.href;\n\t}\n\n\tcanGroup() {\n\t\treturn false;\n\t}\n\n\tisBinary() {\n\t\treturn true;\n\t}\n\n\tdownload(filename = null) {\n\t\tlet tempLink = document.createElement('a');\n\t\ttempLink.style.display = 'none';\n\t\ttempLink.href = this.getUrl();\n\t\ttempLink.setAttribute('download', filename ? filename :  Utils.makeFileName(\"result\", this.type));\n\t\tif (typeof tempLink.download === 'undefined') {\n\t\t\ttempLink.setAttribute('target', '_blank');\n\t\t}\n\t\tdocument.body.appendChild(tempLink);\n\t\ttempLink.click();\n\t\tdocument.body.removeChild(tempLink);\n\t}\n\n\tasync loadData(connection) {\n\t\tif (!this.loaded) {\n\t\t\tthis.data = await this.fetchData(connection);\n\t\t\tthis.loaded = true;\n\t\t}\n\t}\n\n\tgetData() {\n\t\tif (!this.loaded) {\n\t\t\tthrow new Error('Data must be loaded before');\n\t\t}\n\t\treturn this.data;\n\t}\n\n\tasync fetchData(connection) {\n\t\tlet blob;\n\t\tlet url = this.getUrl();\n\t\tif (url.startsWith('blob:')) {\n\t\t\tlet response = await fetch(url);\n\t\t\tblob = await response.blob();\n\t\t}\n\t\telse {\n\t\t\tblob = await connection.download(url, false);\n\t\t}\n\t\tlet promise = new Promise((resolve, reject) => {\n\t\t\tlet reader = new FileReader();\n\t\t\treader.onload = event => resolve(event.target.result);\n\t\t\treader.onerror = reject;\n\t\t\tif (this.isBinary()) {\n\t\t\t\treader.readAsBinaryString(blob);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treader.readAsText(blob);\n\t\t\t}\n\t\t});\n\t\tlet data = await promise;\n\t\treturn await this.parseData(data);\n\t}\n\n\tasync parseData(data) {\n\t\treturn data;\n\t}\n\n}\n\nexport class SupportedFormat extends Format {\n\n\tconstructor(asset, component = null, icon = 'fa-database', props = {}, events = {}) {\n\t\tsuper(asset);\n\t\tthis.loaded = false;\n\t\tthis.component = component;\n\t\tthis.props = props;\n\t\tif (!this.props.data) {\n\t\t\tthis.props.data = this;\n\t\t}\n\t\tthis.icon = icon;\n\t\tthis.events = events;\n\t}\n\n\tisBinary() {\n\t\treturn false;\n\t}\n\n}\n\nexport class UnsupportedFormat extends Format {\n\n\tconstructor(asset) {\n\t\tsuper(asset);\n\t}\n\n}\n\nexport class FormatCollection extends SupportedFormat {\n\n}","import { SupportedFormat } from './format';\n\nclass CSV extends SupportedFormat {\n\n\tconstructor(asset, delim = [',', ';']) {\n\t\tsuper(asset, 'TableViewer', 'fa-table');\n\t\tthis.delim = delim;\n\t}\n\n\tasync parseData(data) {\n\t\tif (typeof data === 'string') {\n\t\t\t// Parse CSV\n\t\t\tlet array = this.parseCSV(data.trim());\n\t\t\t// Convert values into numbers, if possible\n\t\t\treturn array.map(row => row.map(col => {\n\t\t\t\tcol = col.trim();\n\t\t\t\tif (col.length === 0) {\n\t\t\t\t\treturn NaN;\n\t\t\t\t}\n\t\t\t\telse if (!isNaN(col)) { // https://stackoverflow.com/a/35759874/9709414\n\t\t\t\t\treturn parseFloat(col);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn col;\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t\treturn data;\n\t}\n\n\t// From https://stackoverflow.com/questions/1293147/example-javascript-code-to-parse-csv-data\n\tparseCSV(str) {\n\t\tvar arr = [];\n\t\tvar quote = false;  // 'true' means we're inside a quoted field\n\t\n\t\t// Iterate over each character, keep track of current row and column (of the returned array)\n\t\tfor (var row = 0, col = 0, c = 0; c < str.length; c++) {\n\t\t\tvar cc = str[c], nc = str[c+1];        // Current character, next character\n\t\t\tarr[row] = arr[row] || [];             // Create a new row if necessary\n\t\t\tarr[row][col] = arr[row][col] || '';   // Create a new column (start with empty string) if necessary\n\t\n\t\t\t// If the current character is a quotation mark, and we're inside a\n\t\t\t// quoted field, and the next character is also a quotation mark,\n\t\t\t// add a quotation mark to the current column and skip the next character\n\t\t\tif (cc == '\"' && quote && nc == '\"') {\n\t\t\t\tarr[row][col] += cc; ++c;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// If it's just one quotation mark, begin/end quoted field\n\t\t\tif (cc == '\"') {\n\t\t\t\tquote = !quote;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// If it's a elimiter and we're not in a quoted field, move on to the next column\n\t\t\tif (this.delim.includes(cc) && !quote) {\n\t\t\t\t++col;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// If it's a newline (CRLF) and we're not in a quoted field, skip the next character\n\t\t\t// and move on to the next row and move to column 0 of that new row\n\t\t\tif (cc == '\\r' && nc == '\\n' && !quote) {\n\t\t\t\t++row; col = 0; ++c;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// If it's a newline (LF or CR) and we're not in a quoted field,\n\t\t\t// move on to the next row and move to column 0 of that new row\n\t\t\tif (cc == '\\n' && !quote) {\n\t\t\t\t++row; col = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (cc == '\\r' && !quote) {\n\t\t\t\t++row; col = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// Otherwise, append the current character to the current column\n\t\t\tarr[row][col] += cc;\n\t\t}\n\t\treturn arr;\n\t}\n\n}\n\nexport default CSV;","import { SupportedFormat } from './format';\nimport Utils from '../utils';\nimport ProjManager from '../components/maps/projManager';\n\nimport { fromUrl as tiffFromUrl } from 'geotiff';\nimport { photometricInterpretations } from 'geotiff/dist-module/globals';\n\nimport { toUserExtent } from 'ol/proj';\nimport Projection from 'ol/proj/Projection';\nimport { fromCode as unitsFromCode } from 'ol/proj/Units';\n\nconst GDAL_MIN = 'STATISTICS_MINIMUM';\nconst GDAL_MAX = 'STATISTICS_MAXIMUM';\nconst GDAL_NAME = 'DESCRIPTION';\n\nclass GeoTIFF extends SupportedFormat {\n\n\tconstructor(asset, stac) {\n\t\tsuper(asset, \"MapViewer\", 'fa-map', { removableLayers: true });\n\t\tthis.bands = [];\n\t\tthis.nodata = [];\n\t\tthis.img = null;\n\t\tthis.projection = null;\n\t\tthis.extent = null;\n\t\tthis.convertToRGB = false;\n\t\tthis.stac = stac;\n\t}\n\n\tisBinary() {\n\t\treturn true;\n\t}\n\n\tcanGroup() {\n\t\treturn true;\n\t}\n\n\tasync loadData(connection) {\n\t\tif (!this.loaded) {\n\t\t\tawait this.parseMetadata();\n\t\t\tthis.loaded = true;\n\t\t}\n\t\treturn this;\n\t}\n\n\tgetData() {\n\t\treturn this;\n\t}\n\n\tasync parseMetadata() {\n\t\tlet stacHasExtent = this.stac && (this.stac.geometry || this.stac.extent);\n\n\t\t// Get projection from STAC\n\t\tthis.projection = await ProjManager.addFromStac(this.stac);\n\n\t\t// Get nodata from STAC file:nodata\n\t\tif (Array.isArray(this['file:nodata']) && this['file:nodata'].length > 0) {\n\t\t\tthis.nodata = Utils.parseNodata(this['file:nodata']);\n\t\t}\n\n\t\t// Get band names from STAC eo:bands\n\t\tif (Array.isArray(this['eo:bands']) && this['eo:bands'].length > 0) {\n\t\t\tthis['eo:bands'].forEach((band, i) => this.setBandInfo(i, { name: band.name }));\n\t\t}\n\n\t\t// Get min/max/nodata from STAC raster:bands\n\t\tif (Array.isArray(this['raster:bands']) && this['raster:bands'].length > 0) {\n\t\t\tthis['raster:bands'].forEach((band, i) => {\n\t\t\t\t// Get name from band\n\t\t\t\tif (band.name) {\n\t\t\t\t\tthis.setBandInfo(i, {\n\t\t\t\t\t\tname: band.name\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Set min/max from statistics\n\t\t\t\tif (Utils.isObject(band.statistics)) {\n\t\t\t\t\tthis.setBandInfo(i, {\n\t\t\t\t\t\tmin: band.statistics.minimum,\n\t\t\t\t\t\tmax: band.statistics.maximum\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// per-band no-data values are not supported, simply read the no-data from the first occurance if not defined yet\n\t\t\t\tif (this.nodata.length === 0 && typeof band.nodata !== 'undefined') {\n\t\t\t\t\tthis.nodata.push(Utils.parseNodata(band.nodata));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Load example tiff image\n\t\tlet tiff = await tiffFromUrl(this.getUrl());\n\t\tthis.img = await tiff.getImage();\n\n\t\t// Get data for each band / sample\n\t\tfor (let i = 0; i < this.img.getSamplesPerPixel(); i++) {\n\t\t\tlet data = {};\n\n\t\t\t// Use min/max for data type (as fallback)\n\t\t\ttry {\n\t\t\t\tlet dummy = this.img.getArrayForSample(i);\n\t\t\t\tif (!Number.isFinite(this.bands[i].min)) {\n\t\t\t\t\tdata.min = this.getMinForDataType(dummy);\n\t\t\t\t}\n\t\t\t\tif (!Number.isFinite(this.bands[i].max)) {\n\t\t\t\t\tdata.max = this.getMaxForDataType(dummy);\n\t\t\t\t}\n\t\t\t} catch (error) {}\n\n\t\t\t// Set min/max/name from statistics, if available\n\t\t\tlet band = this.img.getGDALMetadata(i);\n\t\t\tif (Utils.isObject(band)) {\n\t\t\t\tif (GDAL_MIN in band) {\n\t\t\t\t\tdata.min = parseFloat(band[GDAL_MIN]);\n\t\t\t\t}\n\t\t\t\tif (GDAL_MAX in band) {\n\t\t\t\t\tdata.max = parseFloat(band[GDAL_MAX]);\n\t\t\t\t}\n\t\t\t\tif (GDAL_NAME in band) {\n\t\t\t\t\tdata.name = band[GDAL_NAME];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.setBandInfo(i, data);\n\n\t\t\t// get no-data values if needed\n\t\t\tlet nodata = this.img.getGDALNoData();\n\t\t\tif (this.nodata.length === 0 && nodata !== null) {\n\t\t\t\tthis.nodata.push(nodata);\n\t\t\t}\n\t\t}\n\n\t\t// Get projection from GeoTiff\n\t\tlet code;\n\t\tif (!this.projection && this.img.geoKeys) {\n\t\t\tlet { ProjectedCSTypeGeoKey, GeographicTypeGeoKey, ProjLinearUnitsGeoKey, GeogAngularUnitsGeoKey } = this.img.geoKeys;\n\t\t\tif (ProjectedCSTypeGeoKey) {\n\t\t\t\tcode = 'EPSG:' + ProjectedCSTypeGeoKey;\n\t\t\t\tthis.projection = await ProjManager.get(code);\n\t\t\t}\n\t\t\tif (!this.projection && GeographicTypeGeoKey) {\n\t\t\t\tcode = 'EPSG:' + GeographicTypeGeoKey;\n\t\t\t\tthis.projection = await ProjManager.get(code);\n\t\t\t}\n\n\t\t\tif (!this.projection && code) {\n\t\t\t\tconst units = (ProjLinearUnitsGeoKey && unitsFromCode(ProjLinearUnitsGeoKey)) || (GeogAngularUnitsGeoKey && unitsFromCode(GeogAngularUnitsGeoKey));\n\t\t\t\tif (units) {\n\t\t\t\t\tthis.projection = new Projection({ code, units });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Get extent from geotiff\n\t\tif (!stacHasExtent) {\n\t\t\ttry {\n\t\t\t\tlet bbox = this.img.getBoundingBox();\n\t\t\t\tthis.extent = toUserExtent(bbox, this.projection);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.warn(error);\n\t\t\t}\n\t\t}\n\n\t\t// Store color map as RGB\n\t\tif (this.img.fileDirectory.ColorMap) {\n\t\t\tconst map = Array.from(this.img.fileDirectory.ColorMap);\n\t\t\tconst greenOffset = map.length / 3;\n\t\t\tconst blueOffset = map.length / 3 * 2;\n\t\t\tthis.colorMap = [];\n\t\t\tfor (let i = 0; i < greenOffset; i++) {\n\t\t\t\tthis.colorMap.push([\n\t\t\t\t\tMath.trunc(map[i] / 65536 * 256),\n\t\t\t\t\tMath.trunc(map[i + greenOffset] / 65536 * 256),\n\t\t\t\t\tMath.trunc(map[i + blueOffset] / 65536 * 256),\n\t\t\t\t\tthis.nodata.includes(i) ? 0 : 1\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\n\t\t// Get photometric interpretation\n\t\tswitch (this.img.fileDirectory.PhotometricInterpretation) {\n\t\t\tcase photometricInterpretations.CMYK:\n\t\t\tcase photometricInterpretations.YCbCr:\n\t\t\tcase photometricInterpretations.CIELab:\n\t\t\t\tthis.convertToRGB = true;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// RGB and (Black/White)IsZero are handled via user control\n\t\t\t\t// Palette is handled directly by our styling\n\t\t\t\tthis.convertToRGB = false;\n\t\t}\n\t}\n\n\tsetBandInfo(i, data) {\n\t\tif (this.bands[i]) {\n\t\t\tObject.assign(this.bands[i], data);\n\t\t}\n\t\telse {\n\t\t\tthis.bands.push(Object.assign({ id: i + 1 }, data));\n\t\t}\n\t}\n\n\tgetNoData() {\n\t\treturn this.nodata;\n\t}\n\n\tgetContext() {\n\t\treturn this.stac;\n\t}\n\n\tgetBands() {\n\t\treturn this.bands;\n\t}\n\n\tgetProjection() {\n\t\treturn this.projection;\n\t}\n\n\tgetExtent() {\n\t\treturn this.extent;\n\t}\n\n\tgetColorMap() {\n\t\treturn this.colorMap;\n\t}\n\n\tgetMinForDataType(array) {\n\t\tif (array instanceof Int8Array) {\n\t\t\treturn -128;\n\t\t}\n\t\tif (array instanceof Int16Array) {\n\t\t\treturn -32768;\n\t\t}\n\t\tif (array instanceof Int32Array) {\n\t\t\treturn -2147483648;\n\t\t}\n\t\tif (array instanceof Float32Array) {\n\t\t\treturn 1.2e-38;\n\t\t}\n\t\treturn 0;\n\t}\n\t\n\tgetMaxForDataType(array) {\n\t\tif (array instanceof Int8Array) {\n\t\t\treturn 127;\n\t\t}\n\t\tif (array instanceof Uint8Array) {\n\t\t\treturn 255;\n\t\t}\n\t\tif (array instanceof Uint8ClampedArray) {\n\t\t\treturn 255;\n\t\t}\n\t\tif (array instanceof Int16Array) {\n\t\t\treturn 32767;\n\t\t}\n\t\tif (array instanceof Uint16Array) {\n\t\t\treturn 65535;\n\t\t}\n\t\tif (array instanceof Int32Array) {\n\t\t\treturn 2147483647;\n\t\t}\n\t\tif (array instanceof Uint32Array) {\n\t\t\treturn 4294967295;\n\t\t}\n\t\tif (array instanceof Float32Array) {\n\t\t\treturn 3.4e38;\n\t\t}\n\t\treturn 255;\n\t}\n\n}\n\nexport default GeoTIFF;","import { BaseProcess, ProcessGraph } from '@openeo/js-processgraphs';\nimport Utils from \"../utils\";\n\nclass ProcessImpl extends BaseProcess {\n\tconstructor(process, exporter) {\n\t\tsuper(process);\n\t\tthis.exporter = exporter;\n\t}\n\tasync execute(node) {\n\t\tawait this.exporter.generateFunction(node);\n\t}\n}\n\nexport default class Exporter extends ProcessGraph {\n\n\tconstructor(process, registry, connection) {\n\t\tsuper(Utils.isObject(process) ? process : {}, registry);\n\t\tthis.connection = connection;\n\t\tthis.code = [];\n\t\tthis.fnCounter = 1;\n\t\tthis.allowEmpty();\n\t\tthis.fillUndefinedParameters();\n\t}\n\n\t// inherited from ProcessGraph\n\n\tcreateProcessGraphInstance(process) {\n\t\tlet pg = new Exporter(process, this.processRegistry, this.getJsonSchemaValidator());\n\t\treturn this.copyProcessGraphInstanceProperties(pg);\n\t}\n\n\tcopyProcessGraphInstanceProperties(pg) {\n\t\tpg = super.copyProcessGraphInstanceProperties(pg);\n\t\tpg.connection = this.connection;\n\t\treturn pg;\n\t}\n\n\tcreateProcessInstance(process) {\n\t\treturn new ProcessImpl(process, this);\n\t}\n\n\tisKeyword(keyword) {\n\t\treturn this.getKeywords().includes(keyword.toLowerCase());\n\t}\n\n\t// Methods to be implemented by sub-class\n\n\tgetKeywords() {\n\t\treturn [];\n\t}\n\n\tcomment(/*comment*/) {}\n\n\tgenerateImports() {}\n\n\tgenerateConnection() {}\n\n\tgenerateAuthentication() {}\n\n\tgenerateBuilder() {}\n\n\tgenerateMetadata(/*key, value*/) {}\n\n\tgenerateMissingParameter() {}\n\n\tasync generateFunction(/*node*/) {}\n\n\tgenerateFunctionParams(parameters) {\n\t\treturn parameters.map(p => {\n\t\t\tif (typeof p.default !== 'undefined') {\n\t\t\t\treturn `${p.name} = ${this.e(p.default)}`;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn p.name;\n\t\t\t}\n\t\t});\n\t}\n\n\tasync generateCallback(/*callback, parameters, variable*/) {}\n\n\tgenerateResult(/*resultNode, callback*/) {}\n\n\tmakeNull() {\n\t\treturn \"null\";\n\t}\n\tmakeBoolean(val) {\n\t\treturn val ? \"true\" : \"false\";\n\t}\n\tmakeArray(arr) {\n\t\treturn `[${arr.join(', ')}]`;\n\t}\n\tmakeObject(obj) {\n\t\tlet arr = Utils.mapObject(obj, (val, key) => `${this.makeString(key)}: ${val}`);\n\t\treturn `{${arr.join(', ')}}`;\n\t}\n\tmakeString(str) {\n\t\treturn JSON.stringify(str);\n\t}\n\tmakeNumber(num) {\n\t\treturn num;\n\t}\n\n\t// Helpers\n\n\te(value) {\n\t\tif (value === null) {\n\t\t\treturn this.makeNull();\n\t\t}\n\t\telse if (typeof value === 'boolean') {\n\t\t\treturn this.makeBoolean(value);\n\t\t}\n\t\telse if (typeof value === 'number') {\n\t\t\treturn this.makeNumber(value);\n\t\t}\n\t\telse if (typeof value === 'string') {\n\t\t\treturn this.makeString(value);\n\t\t}\n\t\telse if (Array.isArray(value)) {\n\t\t\treturn this.makeArray(value.map(val => this.e(val)));\n\t\t}\n\t\telse if (Utils.isObject(value)) {\n\t\t\treturn this.makeObject(Utils.mapObjectValues(value, val => this.e(val)));\n\t\t}\n\t\telse if (typeof value === 'function') {\n\t\t\treturn value();\n\t\t}\n\t\telse {\n\t\t\treturn this.makeNull();\n\t\t}\n\t}\n\n\tgenerateMetadata() {\n\t\tlet hasComment = false;\n\t\tfor(let key in this.process) {\n\t\t\tif (key === 'process_graph') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet val = this.process[key];\n\t\t\tif (Array.isArray(val) && val.length === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse if (typeof val === 'string' && val.length === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse if (typeof val === 'boolean' && !val) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!hasComment) {\n\t\t\t\tthis.newLine();\n\t\t\t\tthis.comment(`Set the metadata for the process`);\n\t\t\t\thasComment = true;\n\t\t\t}\n\t\t\tthis.generateMetadataEntry(key, val);\n\t\t}\n\t}\n\n\tasync resolveArguments(args, onExporter, filter) {\n\t\tlet newArgs = Array.isArray(args) ? [] : {};\n\t\tfor(let key in args) {\n\t\t\tlet value = args[key];\n\t\t\tif (filter && filter(key, value)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (Utils.isObject(value)) {\n\t\t\t\tif (value.from_node) {\n\t\t\t\t\tnewArgs[key] = () => this.var(value.from_node, this.varPrefix());\n\t\t\t\t\tcontinue; \n\t\t\t\t}\n\t\t\t\telse if (value.from_parameter) {\n\t\t\t\t\tnewArgs[key] = () => this.var(value.from_parameter);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if (value instanceof Exporter) {\n\t\t\t\t\tlet fnName = await onExporter(key);\n\t\t\t\t\tnewArgs[key] = () => fnName;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tnewArgs[key] = await this.resolveArguments(value, onExporter, filter);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (Array.isArray(value)) {\n\t\t\t\tnewArgs[key] = await this.resolveArguments(value, onExporter, filter);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnewArgs[key] = value;\n\t\t\t}\n\t\t}\n\t\treturn newArgs;\n\t}\n\n\tasync resolveCallback(node, key) {\n\t\tlet callback;\n\t\tif (node.process_id === 'load_collection') {\n\t\t\tlet properties = node.getArgument('properties');\n\t\t\tcallback = properties[key];\n\t\t}\n\t\telse {\n\t\t\tcallback = node.getArgument(key);\n\t\t}\n\t\tlet parameters = callback.getCallbackParameters();\n\t\tawait callback.execute(parameters);\n\t\tlet fnName = this.var(`${key}${this.fnCounter++}`, 'fn_');\n\t\tlet replacement = await this.generateCallback(callback, parameters, fnName);\n\t\treturn replacement ? replacement : fnName;\n\t}\n\n\tasync generateArguments(node, ordered = false, filter = null) {\n\t\tlet args = await this.resolveArguments(node.arguments, async key => await this.resolveCallback(node, key), filter);\n\t\tif (ordered) {\n\t\t\targs = this.orderArguments(node, args);\n\t\t}\n\t\treturn args;\n\t}\n\n\torderArguments(node, args) {\n\t\tlet process = node.getProcessGraph().getProcess(node);\n\t\tif (process && Array.isArray(process.parameters)) {\n\t\t\tlet orderedArgs = process.parameters.map(param => {\n\t\t\t\tif (typeof args[param.name] !== 'undefined') {\n\t\t\t\t\treturn args[param.name];\n\t\t\t\t}\n\t\t\t\telse if (!param.optional) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t});\n\t\t\tlet definedValueFound = false;\n\t\t\tfor(let i = orderedArgs.length-1; i >= 0; i--) {\n\t\t\t\tif (typeof orderedArgs[i] === 'undefined') {\n\t\t\t\t\tif (definedValueFound) {\n\t\t\t\t\t\torderedArgs[i] = null;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\torderedArgs.pop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdefinedValueFound = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn orderedArgs;\n\t\t}\n\t}\n\n\tvarPrefix() {\n\t\tif (!this.getParent()) {\n\t\t\treturn 'datacube';\n\t\t}\n\t\telse {\n\t\t\treturn 'data';\n\t\t}\n\t}\n\n\tvar(id, prefix = \"var\") {\n\t\tid = String(id);\n\t\tif (this.isKeyword(id)) {\n\t\t\treturn `${id}_`;\n\t\t}\n\t\tif (!id.match(/^[a-z_]\\w*$/)) {\n\t\t\treturn prefix + id.replace(/[^\\w]+/g, '_');\n\t\t}\n\t\telse {\n\t\t\treturn id;\n\t\t}\n\t}\n\n\tgetTab() {\n\t\treturn `\\t`;\n\t}\n\n\taddCode(code, prefix = '', level = 0) {\n\t\tif (typeof code !== 'string') {\n\t\t\treturn;\n\t\t}\n\t\tlet tabs = this.getTab().repeat(level);\n\t\tlet lines = code.trim().split(/\\r\\n|\\r|\\n/g);\n\t\tfor(let line of lines) {\n\t\t\tthis.code.push(`${tabs}${prefix}${line}\\n`);\n\t\t}\n\t}\n\n\tnewLine(count = 1) {\n\t\tfor(let i = 0; i < count; i++) {\n\t\t\tthis.addCode('');\n\t\t}\n\t}\n\n\tgetServerUrl() {\n\t\treturn this.connection.getUrl();\n\t}\n\n\tasync toCode(callback = false) {\n\t\tthis.code = [];\n\t\tif (!callback) {\n\t\t\tthis.comment(`Import required packages`);\n\t\t\tthis.generateImports();\n\t\t\tthis.newLine();\n\t\t\tthis.comment(`Connect to the back-end`);\n\t\t\tthis.generateConnection();\n\t\t\tthis.generateAuthentication();\n\t\t\tthis.newLine();\n\t\t\tthis.generateBuilder();\n\t\t\tthis.generateMetadata();\n\t\t\tthis.newLine();\n\t\t}\n\t\tlet params = this.getProcessParameters();\n\t\tif (params.length > 0) {\n\t\t\tthis.comment('ToDo: Here you need to set values for the parameters');\n\t\t\tfor(let param of params) {\n\t\t\t\tthis.generateMissingParameter(param);\n\t\t\t}\n\t\t\tthis.newLine();\n\t\t}\n\t\tawait this.execute();\n\t\tif (!callback) {\n\t\t\tthis.newLine();\n\t\t\tthis.comment(`The process can be executed synchronously (see below), as batch job or as web service now`);\n\t\t}\n\t\tthis.generateResult(this.getResultNode(), callback);\n\t\treturn this.code.join('').trim();\n\t}\n\n\tasync execute() {\n\t\tawait this.validate();\n\t\tthis.reset();\n\t\tawait this.executeNodes(this.getStartNodes());\n\t\treturn this.getResultNode();\n\t}\n\n\tisMath() {\n\t\tif (typeof this._isMath === 'undefined') {\n\t\t\t// Determine whether the process is just math\n\t\t\tthis._isMath = this.processRegistry.isMath(this);\n\t\t}\n\t\treturn this._isMath;\n\t}\n\n}","import Utils from \"../utils\";\nimport Exporter from \"./exporter\";\nimport { Formula } from '@openeo/js-client';\n\nconst KEYWORDS = [\n\t\"abstract\",\n\t\"arguments\",\n\t\"await\",\n\t\"boolean\",\n\t\"break\",\n\t\"byte\",\n\t\"case\",\n\t\"catch\",\n\t\"char\",\n\t\"class\",\n\t\"const\",\n\t\"continue\",\n\t\"debugger\",\n\t\"default\",\n\t\"delete\",\n\t\"do\",\n\t\"double\",\n\t\"else\",\n\t\"enum\",\n\t\"eval\",\n\t\"export\",\n\t\"extends\",\n\t\"false\",\n\t\"final\",\n\t\"finally\",\n\t\"float\",\n\t\"for\",\n\t\"function\",\n\t\"goto\",\n\t\"if\",\n\t\"implements\",\n\t\"import\",\n\t\"in\",\n\t\"instanceof\",\n\t\"int\",\n\t\"interface\",\n\t\"let\",\n\t\"long\",\n\t\"native\",\n\t\"new\",\n\t\"null\",\n\t\"package\",\n\t\"private\",\n\t\"protected\",\n\t\"public\",\n\t\"return\",\n\t\"short\",\n\t\"static\",\n\t\"super\",\n\t\"switch\",\n\t\"synchronized\",\n\t\"this\",\n\t\"throw\",\n\t\"throws\",\n\t\"transient\",\n\t\"true\",\n\t\"try\",\n\t\"typeof\",\n\t\"var\",\n\t\"void\",\n\t\"volatile\",\n\t\"while\",\n\t\"with\",\n\t\"yield\",\n\t// specific to this generator\n\t\"builder\",\n\t\"connection\",\n\t\"formula\",\n\t\"openeo\",\n\t\"result\"\n];\n\nexport default class JavaScript extends Exporter {\n\n\tconstructor(process, registry, connection, generateFormula = false) {\n\t\tsuper(process, registry, connection);\n\t\tthis.generateFormula = generateFormula;\n\t}\n\n\tcreateProcessGraphInstance(process) {\n\t\tlet pg = new JavaScript(process, this.processRegistry, this.getJsonSchemaValidator(), this.generateFormula);\n\t\treturn this.copyProcessGraphInstanceProperties(pg);\n\t}\n\n\tparse() {\n\t\tif (this.parsed) {\n\t\t\treturn;\n\t\t}\n\t\tsuper.parse();\n\t}\n\n\tgetKeywords() {\n\t\treturn KEYWORDS;\n\t}\n\n\tcomment(comment) {\n\t\tthis.addCode(comment, '// ');\n\t}\n\n\tgenerateImports() {\n\t\tthis.addCode(`import { OpenEO, Formula } from '@openeo/js-client';`);\n\t}\n\n\tgenerateConnection() {\n\t\tthis.addCode(`let connection = await OpenEO.connect('${this.getServerUrl()}');`);\n\t}\n\n\tgenerateAuthentication() {\n\t\tthis.comment(`ToDo: Here you need to add your authentication steps`);\n\t}\n\n\tgenerateBuilder() {\n\t\tthis.addCode(`let builder = await connection.buildProcess();`);\n\t}\n\n\tgenerateMetadataEntry(key, value) {\n\t\tthis.addCode(`builder.${key} = ${this.e(value)};`);\n\t}\n\n\tasync generateFunction(node) {\n\t\tlet builderName = node.getParent() ? 'this' : 'builder';\n\t\tlet variable = this.var(node.id, this.varPrefix());\n\t\tlet args = await this.generateArguments(node, !node.namespace);\n\n\t\tthis.comment(node.description);\n\t\tif (Utils.isObject(args)) {\n\t\t\tlet processId = node.namespace ? `${node.process_id}@${node.namespace}` : node.process_id;\n\t\t\tthis.addCode(`let ${variable} = ${builderName}.process(\"${processId}\", ${this.e(args)});`);\n\t\t}\n\t\telse {\n\t\t\tthis.addCode(`let ${variable} = ${builderName}.${node.process_id}(${args.map(arg => this.e(arg)).join(', ')});`);\n\t\t}\n\t}\n\n\tgenerateMissingParameter(parameter) {\n\t\tthis.comment(parameter.description);\n\t\tlet paramName = this.var(parameter.name, 'param');\n\t\tlet value = typeof parameter.default !== 'undefined' ? parameter.default : null;\n\t\tthis.addCode(`let ${paramName} = ${this.e(value)};`);\n\t}\n\n\tasync generateCallback(callback, parameters, variable) {\n\t\tif (this.generateFormula && callback && callback.isMath()) {\n\t\t\tlet formula = callback.toFormulaString();\n\t\t\tlet escaped = JSON.stringify(formula);\n\t\t\treturn `new Formula(${escaped})`;\n\t\t}\n\t\telse {\n\t\t\tlet params = this.generateFunctionParams(parameters);\n\t\t\tthis.newLine();\n\t\t\tthis.addCode(`let ${variable} = function(${params.join(', ')}) {`);\n\t\t\tthis.addCode(await callback.toCode(true), '', 1);\n\t\t\tthis.addCode(`}`);\n\t\t}\n\t}\n\n\tgenerateResult(resultNode, callback) {\n\t\tif (!resultNode) {\n\t\t\treturn;\n\t\t}\n\t\tlet variable = this.var(resultNode.id, this.varPrefix());\n\t\tif (callback) {\n\t\t\tthis.addCode(`return ${variable};`);\n\t\t}\n\t\telse {\n\t\t\tthis.addCode(`let result = await connection.computeResult(${variable});`);\n\t\t}\n\t}\n\n\ttoFormulaString() {\n\t\tif (this.isMath()) {\n\t\t\treturn this.nodeToFormula(this.getResultNode());\n\t\t}\n\t\telse {\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tgetArrayElementPlaceholder(node) {\n\t\tif (node.process_id === 'array_element') {\n\t\t\tif (node.getArgumentType('data') === 'parameter') {\n\t\t\t\tlet parameter = node.getRawArgument('data').from_parameter;\n\t\t\t\tlet index = this.getCallbackParameters().findIndex(param => param.name === parameter);\n\t\t\t\tif (index >= 0) {\n\t\t\t\t\treturn '$'.repeat(index+1) + (node.getArgument('label') || node.getArgument('index'));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tnodeToFormula(node, parentOperator = null) {\n\t\tif (node.process_id === 'array_element') {\n\t\t\tlet arrayElement = this.getArrayElementPlaceholder(node);\n\t\t\tif (arrayElement) {\n\t\t\t\treturn arrayElement;\n\t\t\t}\n\t\t}\n\n\t\tlet operator = Formula.reverseOperatorMapping[node.process_id];\n\t\tlet process = this.processRegistry.get(node.process_id);\n\t\tlet isArrayData = (typeof Formula.arrayOperatorMapping[node.process_id] !== 'undefined');\n\n\t\tlet convertValue = value => {\n\t\t\tif (Utils.isObject(value)) {\n\t\t\t\tif (value.from_node) {\n\t\t\t\t\tlet refNode = node.getProcessGraph().getNode(value.from_node);\n\t\t\t\t\tif (refNode) {\n\t\t\t\t\t\tvalue = this.nodeToFormula(refNode, operator);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tvalue = '#' + value.from_node;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (value.from_parameter) {\n\t\t\t\t\tvalue = value.from_parameter;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow new Error('Objects not allowed');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn value;\n\t\t};\n\n\t\t// Create the list of arguments\n\t\tlet argList = [];\n\t\tlet params = Array.isArray(process.parameters) ? process.parameters : [];\n\t\tfor(let parameter of params) {\n\t\t\tlet value = convertValue(node.getRawArgument(parameter.name));\n\n\t\t\tif (isArrayData && Array.isArray(value) && parameter.name === 'data') {\n\t\t\t\targList = value.map(v => convertValue(v));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(typeof value !== 'undefined') {\n\t\t\t\targList.push(value);\n\t\t\t}\n\t\t\telse if(typeof parameter.default !== 'undefined') {\n\t\t\t\targList.push(parameter.default);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new Error('Argument for parameter \"' + parameter.name + '\" missing');\n\t\t\t}\n\t\t}\n\t\t \n\t\t // Filter null values for array data to handle ignore_nodata\n\t\tif (isArrayData) {\n\t\t\targList = argList.filter(v => v !== null);\n\t\t}\n\n\t\tif (operator) {\n\t\t\tlet strongOps = ['/', '*']; // \"Punktrechnung\" vor\n\t\t\tlet weakOps = ['-', '+']; // \"Strichrechung\"\n\t\t\tlet formula = argList\n\t\t\t\t.map(v => v < 0 ? '(' + v + ')' : v) // Put negative values in brackets\n\t\t\t\t.join(operator); // Merge everything together\n\t\t\t\n\t\t\t// Check whether brackets are required\n\t\t\tif (\n\t\t\t\t// No brackets on top-level\n\t\t\t\t!parentOperator\n\t\t\t\t// If operators are both weak, no brackets required\n\t\t\t\t|| (weakOps.includes(parentOperator) && weakOps.includes(operator))\n\t\t\t\t// If operators are both strong, no brackets required -> not correct, x/(a*b) needs it, see https://github.com/Open-EO/openeo-web-editor/issues/235\n//\t\t\t\t|| (strongOps.includes(parentOperator) && strongOps.includes(operator))\n\t\t\t\t// No brackets required for power, it's the strongest operation\n\t\t\t\t|| operator === '^'\n\t\t\t\t// If the parent operation is a weak operation (+/-) and this is a strong operation, no brackets required\n\t\t\t\t|| (weakOps.includes(parentOperator) && strongOps.includes(operator))\n\t\t\t) {\n\t\t\t\treturn formula;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn '(' + formula + ')';\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn node.process_id + '(' + argList.join(', ') + ')';\n\t\t}\n\t}\n\n}","import { isIterable } from 'core-js';\nimport Utils from '../utils';\nimport { SupportedFormat } from './format';\n\nclass JSON_ extends SupportedFormat {\n\n\tconstructor(asset, component = \"DataViewer\") {\n\t\tsuper(asset, component);\n\n\t\tthis.isGeoJson = false;\n\t\t// this.isCovJson = false;\n\t}\n\n\tasync parseData(data) {\n\t\tif (typeof data === 'string') {\n\t\t\ttry {\n\t\t\t\tdata = JSON.parse(data);\n\t\t\t}\n\t\t\tcatch (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t}\n\t\t}\n\t\tif (Utils.detectGeoJson(data)) {\n\t\t\tthis.isGeoJson = true;\n\t\t\tthis.component = 'MapViewer';\n\t\t\tthis.icon = 'fa-map';\n\t\t}\n\t\telse if (this.isTable(data)) {\n\t\t\tthis.component = 'TableViewer';\n\t\t\tthis.icon = 'fa-table';\n\t\t}\n\t\treturn data;\n\t}\n\n\tisTable(data) {\n\t\tif (!data || typeof data !== 'object' || Utils.size(data) === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tlet values = Object.values(data);\n\t\tlet keys = Object.keys(values[0]);\n\t\treturn !values.some(row => !row || typeof row !== 'object' || !Utils.equals(Object.keys(row), keys));\n\t}\n}\n\nexport default JSON_;"],"sourceRoot":""}