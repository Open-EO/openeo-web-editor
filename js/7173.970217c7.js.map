{"version":3,"file":"js/7173.970217c7.js","mappings":"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","sources":["webpack://@openeo/web-editor/./src/export/exporter.js","webpack://@openeo/web-editor/./src/export/javascript.js","webpack://@openeo/web-editor/./src/formats/csv.js","webpack://@openeo/web-editor/./src/formats/format.js","webpack://@openeo/web-editor/./src/formats/browserImage.js","webpack://@openeo/web-editor/./src/formats/native.js","webpack://@openeo/web-editor/./src/formats/tsv.js","webpack://@openeo/web-editor/./src/formats/formatRegistry.js","webpack://@openeo/web-editor/./src/formats/geotiff.js","webpack://@openeo/web-editor/./src/formats/json.js"],"sourcesContent":["import { BaseProcess, ProcessGraph } from '@openeo/js-processgraphs';\nimport Utils from \"../utils\";\n\nclass ProcessImpl extends BaseProcess {\n\tconstructor(process, exporter) {\n\t\tsuper(process);\n\t\tthis.exporter = exporter;\n\t}\n\tasync execute(node) {\n\t\tawait this.exporter.generateFunction(node);\n\t}\n}\n\nexport default class Exporter extends ProcessGraph {\n\n\tconstructor(process, registry, connection) {\n\t\tsuper(Utils.isObject(process) ? process : {}, registry);\n\t\tthis.connection = connection;\n\t\tthis.code = [];\n\t\tthis.fnCounter = 1;\n\t\tthis.allowEmpty();\n\t\tthis.fillUndefinedParameters();\n\t}\n\n\t// inherited from ProcessGraph\n\n\tcreateProcessGraphInstance(process) {\n\t\tlet pg = new Exporter(process, this.processRegistry, this.getJsonSchemaValidator());\n\t\treturn this.copyProcessGraphInstanceProperties(pg);\n\t}\n\n\tcopyProcessGraphInstanceProperties(pg) {\n\t\tpg = super.copyProcessGraphInstanceProperties(pg);\n\t\tpg.connection = this.connection;\n\t\treturn pg;\n\t}\n\n\tcreateProcessInstance(process) {\n\t\treturn new ProcessImpl(process, this);\n\t}\n\n\tisKeyword(keyword) {\n\t\treturn this.getKeywords().includes(keyword.toLowerCase());\n\t}\n\n\t// Methods to be implemented by sub-class\n\n\tgetKeywords() {\n\t\treturn [];\n\t}\n\n\tcomment(/*comment*/) {}\n\n\tgenerateImports() {}\n\n\tgenerateConnection() {}\n\n\tgenerateAuthentication() {}\n\n\tgenerateBuilder() {}\n\n\tgenerateMetadata(/*key, value*/) {}\n\n\tgenerateMissingParameter() {}\n\n\tasync generateFunction(/*node*/) {}\n\n\tgenerateFunctionParams(parameters) {\n\t\treturn parameters.map(p => {\n\t\t\tif (typeof p.default !== 'undefined') {\n\t\t\t\treturn `${p.name} = ${this.e(p.default)}`;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn p.name;\n\t\t\t}\n\t\t});\n\t}\n\n\tasync generateCallback(/*callback, parameters, variable*/) {}\n\n\tgenerateResult(/*resultNode, callback*/) {}\n\n\tmakeNull() {\n\t\treturn \"null\";\n\t}\n\tmakeBoolean(val) {\n\t\treturn val ? \"true\" : \"false\";\n\t}\n\tmakeArray(arr) {\n\t\treturn `[${arr.join(', ')}]`;\n\t}\n\tmakeObject(obj) {\n\t\tlet arr = Utils.mapObject(obj, (val, key) => `${this.makeString(key)}: ${val}`);\n\t\treturn `{${arr.join(', ')}}`;\n\t}\n\tmakeString(str) {\n\t\treturn JSON.stringify(str);\n\t}\n\tmakeNumber(num) {\n\t\treturn num;\n\t}\n\n\t// Helpers\n\n\te(value) {\n\t\tif (value === null) {\n\t\t\treturn this.makeNull();\n\t\t}\n\t\telse if (typeof value === 'boolean') {\n\t\t\treturn this.makeBoolean(value);\n\t\t}\n\t\telse if (typeof value === 'number') {\n\t\t\treturn this.makeNumber(value);\n\t\t}\n\t\telse if (typeof value === 'string') {\n\t\t\treturn this.makeString(value);\n\t\t}\n\t\telse if (Array.isArray(value)) {\n\t\t\treturn this.makeArray(value.map(val => this.e(val)));\n\t\t}\n\t\telse if (Utils.isObject(value)) {\n\t\t\treturn this.makeObject(Utils.mapObjectValues(value, val => this.e(val)));\n\t\t}\n\t\telse if (typeof value === 'function') {\n\t\t\treturn value();\n\t\t}\n\t\telse {\n\t\t\treturn this.makeNull();\n\t\t}\n\t}\n\n\tgenerateMetadata() {\n\t\tlet hasComment = false;\n\t\tfor(let key in this.process) {\n\t\t\tif (key === 'process_graph') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet val = this.process[key];\n\t\t\tif (Array.isArray(val) && val.length === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse if (typeof val === 'string' && val.length === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse if (typeof val === 'boolean' && !val) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!hasComment) {\n\t\t\t\tthis.newLine();\n\t\t\t\tthis.comment(`Set the metadata for the process`);\n\t\t\t\thasComment = true;\n\t\t\t}\n\t\t\tthis.generateMetadataEntry(key, val);\n\t\t}\n\t}\n\n\tasync resolveArguments(args, onExporter, filter) {\n\t\tlet newArgs = Array.isArray(args) ? [] : {};\n\t\tfor(let key in args) {\n\t\t\tlet value = args[key];\n\t\t\tif (filter && filter(key, value)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (Utils.isObject(value)) {\n\t\t\t\tif (value.from_node) {\n\t\t\t\t\tnewArgs[key] = () => this.var(value.from_node, this.varPrefix());\n\t\t\t\t\tcontinue; \n\t\t\t\t}\n\t\t\t\telse if (value.from_parameter) {\n\t\t\t\t\tnewArgs[key] = () => this.var(value.from_parameter);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if (value instanceof Exporter) {\n\t\t\t\t\tlet fnName = await onExporter(key);\n\t\t\t\t\tnewArgs[key] = () => fnName;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tnewArgs[key] = await this.resolveArguments(value, onExporter, filter);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (Array.isArray(value)) {\n\t\t\t\tnewArgs[key] = await this.resolveArguments(value, onExporter, filter);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnewArgs[key] = value;\n\t\t\t}\n\t\t}\n\t\treturn newArgs;\n\t}\n\n\tasync resolveCallback(node, key) {\n\t\tlet callback;\n\t\tif (node.process_id === 'load_collection') {\n\t\t\tlet properties = node.getArgument('properties');\n\t\t\tcallback = properties[key];\n\t\t}\n\t\telse {\n\t\t\tcallback = node.getArgument(key);\n\t\t}\n\t\tlet parameters = callback.getCallbackParameters();\n\t\tawait callback.execute(parameters);\n\t\tlet fnName = this.var(`${key}${this.fnCounter++}`, 'fn_');\n\t\tlet replacement = await this.generateCallback(callback, parameters, fnName);\n\t\treturn replacement ? replacement : fnName;\n\t}\n\n\tasync generateArguments(node, ordered = false, filter = null) {\n\t\tlet args = await this.resolveArguments(node.arguments, async key => await this.resolveCallback(node, key), filter);\n\t\tif (ordered) {\n\t\t\targs = this.orderArguments(node, args);\n\t\t}\n\t\treturn args;\n\t}\n\n\torderArguments(node, args) {\n\t\tlet process = node.getProcessGraph().getProcess(node);\n\t\tif (process && Array.isArray(process.parameters)) {\n\t\t\tlet orderedArgs = process.parameters.map(param => {\n\t\t\t\tif (typeof args[param.name] !== 'undefined') {\n\t\t\t\t\treturn args[param.name];\n\t\t\t\t}\n\t\t\t\telse if (!param.optional) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t});\n\t\t\tlet definedValueFound = false;\n\t\t\tfor(let i = orderedArgs.length-1; i >= 0; i--) {\n\t\t\t\tif (typeof orderedArgs[i] === 'undefined') {\n\t\t\t\t\tif (definedValueFound) {\n\t\t\t\t\t\torderedArgs[i] = null;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\torderedArgs.pop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdefinedValueFound = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn orderedArgs;\n\t\t}\n\t}\n\n\tvarPrefix() {\n\t\tif (!this.getParent()) {\n\t\t\treturn 'datacube';\n\t\t}\n\t\telse {\n\t\t\treturn 'data';\n\t\t}\n\t}\n\n\tvar(id, prefix = \"var\") {\n\t\tid = String(id);\n\t\tif (this.isKeyword(id)) {\n\t\t\treturn `${id}_`;\n\t\t}\n\t\tif (!id.match(/^[a-z_]\\w*$/)) {\n\t\t\treturn prefix + id.replace(/[^\\w]+/g, '_');\n\t\t}\n\t\telse {\n\t\t\treturn id;\n\t\t}\n\t}\n\n\tgetTab() {\n\t\treturn `\\t`;\n\t}\n\n\taddCode(code, prefix = '', level = 0) {\n\t\tif (typeof code !== 'string') {\n\t\t\treturn;\n\t\t}\n\t\tlet tabs = this.getTab().repeat(level);\n\t\tlet lines = code.trim().split(/\\r\\n|\\r|\\n/g);\n\t\tfor(let line of lines) {\n\t\t\tthis.code.push(`${tabs}${prefix}${line}\\n`);\n\t\t}\n\t}\n\n\tnewLine(count = 1) {\n\t\tfor(let i = 0; i < count; i++) {\n\t\t\tthis.addCode('');\n\t\t}\n\t}\n\n\tgetServerUrl() {\n\t\treturn this.connection.getUrl();\n\t}\n\n\tasync toCode(callback = false) {\n\t\tthis.code = [];\n\t\tif (!callback) {\n\t\t\tthis.comment(`Import required packages`);\n\t\t\tthis.generateImports();\n\t\t\tthis.newLine();\n\t\t\tthis.comment(`Connect to the back-end`);\n\t\t\tthis.generateConnection();\n\t\t\tthis.generateAuthentication();\n\t\t\tthis.newLine();\n\t\t\tthis.generateBuilder();\n\t\t\tthis.generateMetadata();\n\t\t\tthis.newLine();\n\t\t}\n\t\tlet params = this.getProcessParameters();\n\t\tif (params.length > 0) {\n\t\t\tthis.comment('ToDo: Here you need to set values for the parameters');\n\t\t\tfor(let param of params) {\n\t\t\t\tthis.generateMissingParameter(param);\n\t\t\t}\n\t\t\tthis.newLine();\n\t\t}\n\t\tawait this.execute();\n\t\tif (!callback) {\n\t\t\tthis.newLine();\n\t\t\tthis.comment(`The process can be executed synchronously (see below), as batch job or as web service now`);\n\t\t}\n\t\tthis.generateResult(this.getResultNode(), callback);\n\t\treturn this.code.join('').trim();\n\t}\n\n\tasync execute() {\n\t\tawait this.validate();\n\t\tthis.reset();\n\t\tawait this.executeNodes(this.getStartNodes());\n\t\treturn this.getResultNode();\n\t}\n\n\tisMath() {\n\t\tif (typeof this._isMath === 'undefined') {\n\t\t\t// Determine whether the process is just math\n\t\t\tthis._isMath = this.processRegistry.isMath(this);\n\t\t}\n\t\treturn this._isMath;\n\t}\n\n}","import Utils from \"../utils\";\nimport Exporter from \"./exporter\";\nimport { Formula } from '@openeo/js-client';\n\nconst KEYWORDS = [\n\t\"abstract\",\n\t\"arguments\",\n\t\"await\",\n\t\"boolean\",\n\t\"break\",\n\t\"byte\",\n\t\"case\",\n\t\"catch\",\n\t\"char\",\n\t\"class\",\n\t\"const\",\n\t\"continue\",\n\t\"debugger\",\n\t\"default\",\n\t\"delete\",\n\t\"do\",\n\t\"double\",\n\t\"else\",\n\t\"enum\",\n\t\"eval\",\n\t\"export\",\n\t\"extends\",\n\t\"false\",\n\t\"final\",\n\t\"finally\",\n\t\"float\",\n\t\"for\",\n\t\"function\",\n\t\"goto\",\n\t\"if\",\n\t\"implements\",\n\t\"import\",\n\t\"in\",\n\t\"instanceof\",\n\t\"int\",\n\t\"interface\",\n\t\"let\",\n\t\"long\",\n\t\"native\",\n\t\"new\",\n\t\"null\",\n\t\"package\",\n\t\"private\",\n\t\"protected\",\n\t\"public\",\n\t\"return\",\n\t\"short\",\n\t\"static\",\n\t\"super\",\n\t\"switch\",\n\t\"synchronized\",\n\t\"this\",\n\t\"throw\",\n\t\"throws\",\n\t\"transient\",\n\t\"true\",\n\t\"try\",\n\t\"typeof\",\n\t\"var\",\n\t\"void\",\n\t\"volatile\",\n\t\"while\",\n\t\"with\",\n\t\"yield\",\n\t// specific to this generator\n\t\"builder\",\n\t\"connection\",\n\t\"formula\",\n\t\"openeo\",\n\t\"result\"\n];\n\nexport default class JavaScript extends Exporter {\n\n\tconstructor(process, registry, connection, generateFormula = false) {\n\t\tsuper(process, registry, connection);\n\t\tthis.generateFormula = generateFormula;\n\t}\n\n\tcreateProcessGraphInstance(process) {\n\t\tlet pg = new JavaScript(process, this.processRegistry, this.getJsonSchemaValidator(), this.generateFormula);\n\t\treturn this.copyProcessGraphInstanceProperties(pg);\n\t}\n\n\tparse() {\n\t\tif (this.parsed) {\n\t\t\treturn;\n\t\t}\n\t\tsuper.parse();\n\t}\n\n\tgetKeywords() {\n\t\treturn KEYWORDS;\n\t}\n\n\tcomment(comment) {\n\t\tthis.addCode(comment, '// ');\n\t}\n\n\tgenerateImports() {\n\t\tthis.addCode(`import { OpenEO, Formula } from '@openeo/js-client';`);\n\t}\n\n\tgenerateConnection() {\n\t\tthis.addCode(`let connection = await OpenEO.connect('${this.getServerUrl()}');`);\n\t}\n\n\tgenerateAuthentication() {\n\t\tthis.comment(`ToDo: Here you need to add your authentication steps`);\n\t}\n\n\tgenerateBuilder() {\n\t\tthis.addCode(`let builder = await connection.buildProcess();`);\n\t}\n\n\tgenerateMetadataEntry(key, value) {\n\t\tthis.addCode(`builder.${key} = ${this.e(value)};`);\n\t}\n\n\tasync generateFunction(node) {\n\t\tlet builderName = node.getParent() ? 'this' : 'builder';\n\t\tlet variable = this.var(node.id, this.varPrefix());\n\t\tlet args = await this.generateArguments(node, !node.namespace);\n\n\t\tthis.comment(node.description);\n\t\tif (Utils.isObject(args)) {\n\t\t\tlet processId = node.namespace ? `${node.process_id}@${node.namespace}` : node.process_id;\n\t\t\tthis.addCode(`let ${variable} = ${builderName}.process(\"${processId}\", ${this.e(args)});`);\n\t\t}\n\t\telse {\n\t\t\tthis.addCode(`let ${variable} = ${builderName}.${node.process_id}(${args.map(arg => this.e(arg)).join(', ')});`);\n\t\t}\n\t}\n\n\tgenerateMissingParameter(parameter) {\n\t\tthis.comment(parameter.description);\n\t\tlet paramName = this.var(parameter.name, 'param');\n\t\tlet value = typeof parameter.default !== 'undefined' ? parameter.default : null;\n\t\tthis.addCode(`let ${paramName} = ${this.e(value)};`);\n\t}\n\n\tasync generateCallback(callback, parameters, variable) {\n\t\tif (this.generateFormula && callback && callback.isMath()) {\n\t\t\tlet formula = callback.toFormulaString();\n\t\t\tlet escaped = JSON.stringify(formula);\n\t\t\treturn `new Formula(${escaped})`;\n\t\t}\n\t\telse {\n\t\t\tlet params = this.generateFunctionParams(parameters);\n\t\t\tthis.newLine();\n\t\t\tthis.addCode(`let ${variable} = function(${params.join(', ')}) {`);\n\t\t\tthis.addCode(await callback.toCode(true), '', 1);\n\t\t\tthis.addCode(`}`);\n\t\t}\n\t}\n\n\tgenerateResult(resultNode, callback) {\n\t\tif (!resultNode) {\n\t\t\treturn;\n\t\t}\n\t\tlet variable = this.var(resultNode.id, this.varPrefix());\n\t\tif (callback) {\n\t\t\tthis.addCode(`return ${variable};`);\n\t\t}\n\t\telse {\n\t\t\tthis.addCode(`let result = await connection.computeResult(${variable});`);\n\t\t}\n\t}\n\n\ttoFormulaString() {\n\t\tif (this.isMath()) {\n\t\t\treturn this.nodeToFormula(this.getResultNode());\n\t\t}\n\t\telse {\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tgetArrayElementPlaceholder(node) {\n\t\tif (node.process_id === 'array_element') {\n\t\t\tif (node.getArgumentType('data') === 'parameter') {\n\t\t\t\tlet parameter = node.getRawArgument('data').from_parameter;\n\t\t\t\tlet index = this.getCallbackParameters().findIndex(param => param.name === parameter);\n\t\t\t\tif (index >= 0) {\n\t\t\t\t\treturn '$'.repeat(index+1) + (node.getArgument('label') || node.getArgument('index'));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tnodeToFormula(node, parentOperator = null) {\n\t\tif (node.process_id === 'array_element') {\n\t\t\tlet arrayElement = this.getArrayElementPlaceholder(node);\n\t\t\tif (arrayElement) {\n\t\t\t\treturn arrayElement;\n\t\t\t}\n\t\t}\n\n\t\tlet operator = Formula.reverseOperatorMapping[node.process_id];\n\t\tlet process = this.processRegistry.get(node.process_id);\n\t\tlet isArrayData = (typeof Formula.arrayOperatorMapping[node.process_id] !== 'undefined');\n\n\t\tlet convertValue = value => {\n\t\t\tif (Utils.isObject(value)) {\n\t\t\t\tif (value.from_node) {\n\t\t\t\t\tlet refNode = node.getProcessGraph().getNode(value.from_node);\n\t\t\t\t\tif (refNode) {\n\t\t\t\t\t\tvalue = this.nodeToFormula(refNode, operator);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tvalue = '#' + value.from_node;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (value.from_parameter) {\n\t\t\t\t\tvalue = value.from_parameter;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow new Error('Objects not allowed');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn value;\n\t\t};\n\n\t\t// Create the list of arguments\n\t\tlet argList = [];\n\t\tlet params = Array.isArray(process.parameters) ? process.parameters : [];\n\t\tfor(let parameter of params) {\n\t\t\tlet value = convertValue(node.getRawArgument(parameter.name));\n\n\t\t\tif (isArrayData && Array.isArray(value) && parameter.name === 'data') {\n\t\t\t\targList = value.map(v => convertValue(v));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(typeof value !== 'undefined') {\n\t\t\t\targList.push(value);\n\t\t\t}\n\t\t\telse if(typeof parameter.default !== 'undefined') {\n\t\t\t\targList.push(parameter.default);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new Error('Argument for parameter \"' + parameter.name + '\" missing');\n\t\t\t}\n\t\t}\n\t\t \n\t\t // Filter null values for array data to handle ignore_nodata\n\t\tif (isArrayData) {\n\t\t\targList = argList.filter(v => v !== null);\n\t\t}\n\n\t\tif (operator) {\n\t\t\tlet strongOps = ['/', '*']; // \"Punktrechnung\" vor\n\t\t\tlet weakOps = ['-', '+']; // \"Strichrechung\"\n\t\t\tlet formula = argList\n\t\t\t\t.map(v => v < 0 ? '(' + v + ')' : v) // Put negative values in brackets\n\t\t\t\t.join(operator); // Merge everything together\n\t\t\t\n\t\t\t// Check whether brackets are required\n\t\t\tif (\n\t\t\t\t// No brackets on top-level\n\t\t\t\t!parentOperator\n\t\t\t\t// If operators are both weak, no brackets required\n\t\t\t\t|| (weakOps.includes(parentOperator) && weakOps.includes(operator))\n\t\t\t\t// If operators are both strong, no brackets required -> not correct, x/(a*b) needs it, see https://github.com/Open-EO/openeo-web-editor/issues/235\n//\t\t\t\t|| (strongOps.includes(parentOperator) && strongOps.includes(operator))\n\t\t\t\t// No brackets required for power, it's the strongest operation\n\t\t\t\t|| operator === '^'\n\t\t\t\t// If the parent operation is a weak operation (+/-) and this is a strong operation, no brackets required\n\t\t\t\t|| (weakOps.includes(parentOperator) && strongOps.includes(operator))\n\t\t\t) {\n\t\t\t\treturn formula;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn '(' + formula + ')';\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn node.process_id + '(' + argList.join(', ') + ')';\n\t\t}\n\t}\n\n}","import { SupportedFormat } from './format';\n\nclass CSV extends SupportedFormat {\n\n\tconstructor(asset, delim = [',', ';']) {\n\t\tsuper(asset, 'TableViewer', 'fa-table');\n\t\tthis.delim = delim;\n\t}\n\n\tasync parseData(data) {\n\t\tif (typeof data === 'string') {\n\t\t\t// Parse CSV\n\t\t\tlet array = this.parseCSV(data.trim());\n\t\t\t// Convert values into numbers, if possible\n\t\t\treturn array.map(row => row.map(col => {\n\t\t\t\tcol = col.trim();\n\t\t\t\tif (col.length === 0) {\n\t\t\t\t\treturn NaN;\n\t\t\t\t}\n\t\t\t\telse if (!isNaN(col)) { // https://stackoverflow.com/a/35759874/9709414\n\t\t\t\t\treturn parseFloat(col);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn col;\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t\treturn data;\n\t}\n\n\t// From https://stackoverflow.com/questions/1293147/example-javascript-code-to-parse-csv-data\n\tparseCSV(str) {\n\t\tvar arr = [];\n\t\tvar quote = false;  // 'true' means we're inside a quoted field\n\t\n\t\t// Iterate over each character, keep track of current row and column (of the returned array)\n\t\tfor (var row = 0, col = 0, c = 0; c < str.length; c++) {\n\t\t\tvar cc = str[c], nc = str[c+1];        // Current character, next character\n\t\t\tarr[row] = arr[row] || [];             // Create a new row if necessary\n\t\t\tarr[row][col] = arr[row][col] || '';   // Create a new column (start with empty string) if necessary\n\t\n\t\t\t// If the current character is a quotation mark, and we're inside a\n\t\t\t// quoted field, and the next character is also a quotation mark,\n\t\t\t// add a quotation mark to the current column and skip the next character\n\t\t\tif (cc == '\"' && quote && nc == '\"') {\n\t\t\t\tarr[row][col] += cc; ++c;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// If it's just one quotation mark, begin/end quoted field\n\t\t\tif (cc == '\"') {\n\t\t\t\tquote = !quote;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// If it's a elimiter and we're not in a quoted field, move on to the next column\n\t\t\tif (this.delim.includes(cc) && !quote) {\n\t\t\t\t++col;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// If it's a newline (CRLF) and we're not in a quoted field, skip the next character\n\t\t\t// and move on to the next row and move to column 0 of that new row\n\t\t\tif (cc == '\\r' && nc == '\\n' && !quote) {\n\t\t\t\t++row; col = 0; ++c;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// If it's a newline (LF or CR) and we're not in a quoted field,\n\t\t\t// move on to the next row and move to column 0 of that new row\n\t\t\tif (cc == '\\n' && !quote) {\n\t\t\t\t++row; col = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (cc == '\\r' && !quote) {\n\t\t\t\t++row; col = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// Otherwise, append the current character to the current column\n\t\t\tarr[row][col] += cc;\n\t\t}\n\t\treturn arr;\n\t}\n\n}\n\nexport default CSV;","import Utils from '../utils.js';\n\nexport class Format {\n\n\tconstructor(asset) {\n\t\tObject.assign(this, asset);\n\t\tthis.context = null;\n\t}\n\n\tsetContext(context) {\n\t\tthis.context = context;\n\t}\n\n\tgetContext() {\n\t\treturn this.context;\n\t}\n\n\tgetUrl() {\n\t\treturn this.href;\n\t}\n\n\tcanGroup() {\n\t\treturn false;\n\t}\n\n\tisBinary() {\n\t\treturn true;\n\t}\n\n\tdownload(filename = null) {\n\t\tlet tempLink = document.createElement('a');\n\t\ttempLink.style.display = 'none';\n\t\ttempLink.href = this.getUrl();\n\t\ttempLink.setAttribute('download', filename ? filename :  Utils.makeFileName(\"result\", this.type));\n\t\tif (typeof tempLink.download === 'undefined') {\n\t\t\ttempLink.setAttribute('target', '_blank');\n\t\t}\n\t\tdocument.body.appendChild(tempLink);\n\t\ttempLink.click();\n\t\tdocument.body.removeChild(tempLink);\n\t}\n\n\tasync loadData(connection) {\n\t\tif (!this.loaded) {\n\t\t\tthis.data = await this.fetchData(connection);\n\t\t\tthis.loaded = true;\n\t\t}\n\t}\n\n\tgetData() {\n\t\tif (!this.loaded) {\n\t\t\tthrow new Error('Data must be loaded before');\n\t\t}\n\t\treturn this.data;\n\t}\n\n\tasync fetchData(connection) {\n\t\tlet blob;\n\t\tlet url = this.getUrl();\n\t\tif (url.startsWith('blob:')) {\n\t\t\tlet response = await fetch(url);\n\t\t\tblob = await response.blob();\n\t\t}\n\t\telse {\n\t\t\tblob = await connection.download(url, false);\n\t\t}\n\t\tlet promise = new Promise((resolve, reject) => {\n\t\t\tlet reader = new FileReader();\n\t\t\treader.onload = event => resolve(event.target.result);\n\t\t\treader.onerror = reject;\n\t\t\tif (this.isBinary()) {\n\t\t\t\treader.readAsBinaryString(blob);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treader.readAsText(blob);\n\t\t\t}\n\t\t});\n\t\tlet data = await promise;\n\t\treturn await this.parseData(data);\n\t}\n\n\tasync parseData(data) {\n\t\treturn data;\n\t}\n\n}\n\nexport class SupportedFormat extends Format {\n\n\tconstructor(asset, component = null, icon = 'fa-database', props = {}, events = {}) {\n\t\tsuper(asset);\n\t\tthis.loaded = false;\n\t\tthis.component = component;\n\t\tthis.props = props;\n\t\tif (!this.props.data) {\n\t\t\tthis.props.data = this;\n\t\t}\n\t\tthis.icon = icon;\n\t\tthis.events = events;\n\t}\n\n\tisBinary() {\n\t\treturn false;\n\t}\n\n}\n\nexport class UnsupportedFormat extends Format {\n\n\tconstructor(asset) {\n\t\tsuper(asset);\n\t}\n\n}\n\nexport class FormatCollection extends SupportedFormat {\n\n}","import { SupportedFormat } from './format';\n\nclass BrowserImage extends SupportedFormat {\n\n\tconstructor(asset) {\n\t\tsuper(asset, 'ImageViewer', 'fa-image');\n\t}\n\n\tisBinary() {\n\t\treturn true;\n\t}\n\n\tasync fetchData() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet img = new Image();\n\t\t\timg.crossOrigin = 'anonymous';\n\t\t\timg.onerror = () => reject(new Error('Failed to load the image'));\n\t\t\timg.onload = () => resolve(img);\n\t\t\timg.fetchPriotity = 'high';\n\t\t\timg.decoding = 'sync';\n\t\t\timg.src = this.getUrl();\n\t\t});\n\t}\n\n}\n\nexport default BrowserImage;","import { SupportedFormat } from './format';\n\nclass NativeType extends SupportedFormat {\n\n\tconstructor(asset) {\n\t\tsuper(asset, \"DataViewer\");\n\t}\n\n}\n\nexport default NativeType;","import CSV from './csv';\n\nclass TSV extends CSV {\n\n\tconstructor(asset) {\n\t\tsuper(asset, [\"\\t\"]);\n\t}\n\n}\n\nexport default TSV;","import contentType from 'content-type';\n\nimport BrowserImage from '../formats/browserImage';\nimport CSV from '../formats/csv';\nimport GeoTIFF from '../formats/geotiff';\nimport JSON_ from '../formats/json';\nimport NativeType from './native';\nimport TSV from '../formats/tsv';\nimport { UnsupportedFormat } from './format';\n\nexport default class FormatRegistry {\n\n\tconstructor() {\n\t}\n\n\tcreateFilesFromSTAC(stac, resource = null) {\n\t\tlet files = Object.values(stac.assets)\n\t\t\t.filter(asset => !Array.isArray(asset.roles) || !asset.roles.includes(\"metadata\"))\n\t\t\t.map(asset => this.createFileFromAsset(asset, stac));\n\t\tif (resource) {\n\t\t\tfiles.forEach(file => file.setContext(resource));\n\t\t}\n\t\treturn files;\n\t}\n\n\tcreateFilesFromBlob(data) {\n\t\tif (!(data instanceof Blob)) {\n\t\t\tthrow new Error(\"Given data is not a valid Blob\");\n\t\t}\n\t\treturn this.createFilesFromSTAC({\n\t\t\tstac_version: \"1.0.0\",\n\t\t\ttype: \"Feature\",\n\t\t\tgeometry: null,\n\t\t\tproperties: {},\n\t\t\tlinks: [],\n\t\t\tassets: {\n\t\t\t\tresult: {\n\t\t\t\t\thref: URL.createObjectURL(data),\n\t\t\t\t\tblob: data,\n\t\t\t\t\ttype: data.type\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tcreateFileFromAsset(asset, stac) {\n\t\ttry {\n\n\t\t\t// Detect by media type\n\t\t\tif (typeof asset.type === 'string') {\n\t\t\t\tlet mime = contentType.parse(asset.type.toLowerCase());\n\t\t\t\tswitch(mime.type) {\n\t\t\t\t\tcase 'image/png':\n\t\t\t\t\tcase 'image/jpg':\n\t\t\t\t\tcase 'image/jpeg':\n\t\t\t\t\tcase 'image/gif':\n\t\t\t\t\tcase 'image/webp':\n\t\t\t\t\t\treturn new BrowserImage(asset);\n\t\t\t\t\tcase 'application/json':\n\t\t\t\t\tcase 'text/json':\n\t\t\t\t\tcase 'application/geo+json':\n\t\t\t\t\t\treturn new JSON_(asset);\n\t\t\t\t\tcase 'text/plain':\n\t\t\t\t\t\treturn new NativeType(asset);\n\t\t\t\t\tcase 'text/csv':\n\t\t\t\t\t\treturn new CSV(asset);\n\t\t\t\t\tcase 'text/tab-separated-values':\n\t\t\t\t\t\treturn new TSV(asset);\n\t\t\t\t\tcase 'image/tiff':\n\t\t\t\t\t\treturn new GeoTIFF(asset, stac);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Fallback: Detect by file extension\n\t\t\tif (typeof asset.href === 'string') {\n\t\t\t\tlet extension = asset.href.split(/[#?]/)[0].split('.').pop().trim().toLowerCase();\n\t\t\t\tswitch(extension) {\n\t\t\t\t\tcase 'png':\n\t\t\t\t\tcase 'jpg':\n\t\t\t\t\tcase 'jpeg':\n\t\t\t\t\tcase 'gif':\n\t\t\t\t\tcase 'webp':\n\t\t\t\t\t\treturn new BrowserImage(asset);\n\t\t\t\t\tcase 'json':\n\t\t\t\t\tcase 'geojson':\n\t\t\t\t\t\treturn new JSON_(asset);\n\t\t\t\t\tcase 'txt':\n\t\t\t\t\t\treturn new NativeType(asset);\n\t\t\t\t\tcase 'csv':\n\t\t\t\t\t\treturn new CSV(asset);\n\t\t\t\t\tcase 'tsv':\n\t\t\t\t\t\treturn new TSV(asset);\n\t\t\t\t\tcase 'tif':\n\t\t\t\t\tcase 'tiff':\n\t\t\t\t\t\treturn new GeoTIFF(asset, stac);\n\t\t\t\t}\n\t\t\t}\n\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\n\t\treturn new UnsupportedFormat(asset);\n\t}\n\n}","import { SupportedFormat } from './format';\nimport Utils from '../utils';\nimport ProjManager from '../components/maps/projManager';\n\nimport { fromUrl as tiffFromUrl, fromBlob as tiffFromBlob, globals as _ } from 'geotiff';\n\nimport { toUserExtent } from 'ol/proj';\nimport Projection from 'ol/proj/Projection';\nimport { fromCode as unitsFromCode } from 'ol/proj/Units';\n\nconst GDAL_MIN = 'STATISTICS_MINIMUM';\nconst GDAL_MAX = 'STATISTICS_MAXIMUM';\nconst GDAL_NAME = 'DESCRIPTION';\n\nclass GeoTIFF extends SupportedFormat {\n\n\tconstructor(asset, stac) {\n\t\tsuper(asset, \"MapViewer\", 'fa-map', { removableLayers: true });\n\t\tthis.bands = [];\n\t\tthis.nodata = [];\n\t\tthis.img = null;\n\t\tthis.projection = null;\n\t\tthis.extent = null;\n\t\tthis.convertToRGB = false;\n\t\tthis.stac = stac;\n\t}\n\n\tisBinary() {\n\t\treturn true;\n\t}\n\n\tcanGroup() {\n\t\treturn true;\n\t}\n\n\tasync loadData(connection) {\n\t\tif (!this.loaded) {\n\t\t\tawait this.parseMetadata();\n\t\t\tthis.loaded = true;\n\t\t}\n\t\treturn this;\n\t}\n\n\tgetData() {\n\t\treturn this;\n\t}\n\n\tasync parseMetadata() {\n\t\tlet stacHasExtent = this.stac && (this.stac.geometry || this.stac.extent);\n\n\t\t// Get projection from STAC\n\t\tthis.projection = await ProjManager.addFromStac(this.stac);\n\n\t\t// Get nodata from STAC file:nodata\n\t\tif (Array.isArray(this['file:nodata']) && this['file:nodata'].length > 0) {\n\t\t\tthis.nodata = Utils.parseNodata(this['file:nodata']);\n\t\t}\n\n\t\t// Get band names from STAC eo:bands\n\t\tif (Array.isArray(this['eo:bands']) && this['eo:bands'].length > 0) {\n\t\t\tthis['eo:bands'].forEach((band, i) => this.setBandInfo(i, { name: band.name }));\n\t\t}\n\n\t\t// Get min/max/nodata from STAC raster:bands\n\t\tif (Array.isArray(this['raster:bands']) && this['raster:bands'].length > 0) {\n\t\t\tthis['raster:bands'].forEach((band, i) => {\n\t\t\t\t// Get name from band\n\t\t\t\tif (band.name) {\n\t\t\t\t\tthis.setBandInfo(i, {\n\t\t\t\t\t\tname: band.name\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Set min/max from statistics\n\t\t\t\tif (Utils.isObject(band.statistics)) {\n\t\t\t\t\tthis.setBandInfo(i, {\n\t\t\t\t\t\tmin: band.statistics.minimum,\n\t\t\t\t\t\tmax: band.statistics.maximum\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// per-band no-data values are not supported, simply read the no-data from the first occurance if not defined yet\n\t\t\t\tif (this.nodata.length === 0 && typeof band.nodata !== 'undefined') {\n\t\t\t\t\tthis.nodata.push(Utils.parseNodata(band.nodata));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Load example tiff image\n\t\tlet tiff;\n\t\tif (this.getBlob()) {\n\t\t\ttiff = await tiffFromBlob(this.getBlob());\n\t\t}\n\t\telse {\n\t\t\ttiff = await tiffFromUrl(this.getUrl());\n\t\t}\n\t\tthis.img = await tiff.getImage();\n\n\t\t// Get data for each band / sample\n\t\tfor (let i = 0; i < this.img.getSamplesPerPixel(); i++) {\n\t\t\tlet data = {};\n\n\t\t\t// Use min/max for data type (as fallback)\n\t\t\ttry {\n\t\t\t\tlet dummy = this.img.getArrayForSample(i);\n\t\t\t\tif (!Number.isFinite(this.bands[i].min)) {\n\t\t\t\t\tdata.min = this.getMinForDataType(dummy);\n\t\t\t\t}\n\t\t\t\tif (!Number.isFinite(this.bands[i].max)) {\n\t\t\t\t\tdata.max = this.getMaxForDataType(dummy);\n\t\t\t\t}\n\t\t\t} catch (error) {}\n\n\t\t\t// Set min/max/name from statistics, if available\n\t\t\tlet band = this.img.getGDALMetadata(i);\n\t\t\tif (Utils.isObject(band)) {\n\t\t\t\tif (GDAL_MIN in band) {\n\t\t\t\t\tdata.min = parseFloat(band[GDAL_MIN]);\n\t\t\t\t}\n\t\t\t\tif (GDAL_MAX in band) {\n\t\t\t\t\tdata.max = parseFloat(band[GDAL_MAX]);\n\t\t\t\t}\n\t\t\t\tif (GDAL_NAME in band) {\n\t\t\t\t\tdata.name = band[GDAL_NAME];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.setBandInfo(i, data);\n\n\t\t\t// get no-data values if needed\n\t\t\tlet nodata = this.img.getGDALNoData();\n\t\t\tif (this.nodata.length === 0 && nodata !== null) {\n\t\t\t\tthis.nodata.push(nodata);\n\t\t\t}\n\t\t}\n\n\t\t// Get projection from GeoTiff\n\t\tlet code;\n\t\tif (!this.projection && this.img.geoKeys) {\n\t\t\tlet { ProjectedCSTypeGeoKey, GeographicTypeGeoKey, ProjLinearUnitsGeoKey, GeogAngularUnitsGeoKey } = this.img.geoKeys;\n\t\t\tif (ProjectedCSTypeGeoKey) {\n\t\t\t\tcode = 'EPSG:' + ProjectedCSTypeGeoKey;\n\t\t\t\tthis.projection = await ProjManager.get(code);\n\t\t\t}\n\t\t\tif (!this.projection && GeographicTypeGeoKey) {\n\t\t\t\tcode = 'EPSG:' + GeographicTypeGeoKey;\n\t\t\t\tthis.projection = await ProjManager.get(code);\n\t\t\t}\n\n\t\t\tif (!this.projection && code) {\n\t\t\t\tconst units = (ProjLinearUnitsGeoKey && unitsFromCode(ProjLinearUnitsGeoKey)) || (GeogAngularUnitsGeoKey && unitsFromCode(GeogAngularUnitsGeoKey));\n\t\t\t\tif (units) {\n\t\t\t\t\tthis.projection = new Projection({ code, units });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Get extent from geotiff\n\t\tif (!stacHasExtent) {\n\t\t\ttry {\n\t\t\t\tlet bbox = this.img.getBoundingBox();\n\t\t\t\tthis.extent = toUserExtent(bbox, this.projection);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.warn(error);\n\t\t\t}\n\t\t}\n\n\t\t// Store color map as RGB\n\t\tif (this.img.fileDirectory.ColorMap) {\n\t\t\tconst map = Array.from(this.img.fileDirectory.ColorMap);\n\t\t\tconst greenOffset = map.length / 3;\n\t\t\tconst blueOffset = map.length / 3 * 2;\n\t\t\tthis.colorMap = [];\n\t\t\tfor (let i = 0; i < greenOffset; i++) {\n\t\t\t\tthis.colorMap.push([\n\t\t\t\t\tMath.trunc(map[i] / 65536 * 256),\n\t\t\t\t\tMath.trunc(map[i + greenOffset] / 65536 * 256),\n\t\t\t\t\tMath.trunc(map[i + blueOffset] / 65536 * 256),\n\t\t\t\t\tthis.nodata.includes(i) ? 0 : 1\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\n\t\t// Get photometric interpretation\n\t\tswitch (this.img.fileDirectory.PhotometricInterpretation) {\n\t\t\tcase _.photometricInterpretations.CMYK:\n\t\t\tcase _.photometricInterpretations.YCbCr:\n\t\t\tcase _.photometricInterpretations.CIELab:\n\t\t\t\tthis.convertToRGB = true;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// RGB and (Black/White)IsZero are handled via user control\n\t\t\t\t// Palette is handled directly by our styling\n\t\t\t\tthis.convertToRGB = false;\n\t\t}\n\t}\n\n\tsetBandInfo(i, data) {\n\t\tif (this.bands[i]) {\n\t\t\tObject.assign(this.bands[i], data);\n\t\t}\n\t\telse {\n\t\t\tthis.bands.push(Object.assign({ id: i + 1 }, data));\n\t\t}\n\t}\n\n\tgetBlob() {\n\t\treturn this.blob;\n\t}\n\n\tgetNoData() {\n\t\treturn this.nodata;\n\t}\n\n\tgetContext() {\n\t\treturn this.stac;\n\t}\n\n\tgetBands() {\n\t\treturn this.bands;\n\t}\n\n\tgetProjection() {\n\t\treturn this.projection;\n\t}\n\n\tgetExtent() {\n\t\treturn this.extent;\n\t}\n\n\tgetColorMap() {\n\t\treturn this.colorMap;\n\t}\n\n\tgetMinForDataType(array) {\n\t\tif (array instanceof Int8Array) {\n\t\t\treturn -128;\n\t\t}\n\t\tif (array instanceof Int16Array) {\n\t\t\treturn -32768;\n\t\t}\n\t\tif (array instanceof Int32Array) {\n\t\t\treturn -2147483648;\n\t\t}\n\t\tif (array instanceof Float32Array) {\n\t\t\treturn 1.2e-38;\n\t\t}\n\t\treturn 0;\n\t}\n\t\n\tgetMaxForDataType(array) {\n\t\tif (array instanceof Int8Array) {\n\t\t\treturn 127;\n\t\t}\n\t\tif (array instanceof Uint8Array) {\n\t\t\treturn 255;\n\t\t}\n\t\tif (array instanceof Uint8ClampedArray) {\n\t\t\treturn 255;\n\t\t}\n\t\tif (array instanceof Int16Array) {\n\t\t\treturn 32767;\n\t\t}\n\t\tif (array instanceof Uint16Array) {\n\t\t\treturn 65535;\n\t\t}\n\t\tif (array instanceof Int32Array) {\n\t\t\treturn 2147483647;\n\t\t}\n\t\tif (array instanceof Uint32Array) {\n\t\t\treturn 4294967295;\n\t\t}\n\t\tif (array instanceof Float32Array) {\n\t\t\treturn 3.4e38;\n\t\t}\n\t\treturn 255;\n\t}\n\n}\n\nexport default GeoTIFF;","import { isIterable } from 'core-js';\nimport Utils from '../utils';\nimport { SupportedFormat } from './format';\n\nclass JSON_ extends SupportedFormat {\n\n\tconstructor(asset, component = \"DataViewer\") {\n\t\tsuper(asset, component);\n\n\t\tthis.isGeoJson = false;\n\t\t// this.isCovJson = false;\n\t}\n\n\tasync parseData(data) {\n\t\tif (typeof data === 'string') {\n\t\t\ttry {\n\t\t\t\tdata = JSON.parse(data);\n\t\t\t}\n\t\t\tcatch (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t}\n\t\t}\n\t\tif (Utils.detectGeoJson(data)) {\n\t\t\tthis.isGeoJson = true;\n\t\t\tthis.component = 'MapViewer';\n\t\t\tthis.icon = 'fa-map';\n\t\t}\n\t\telse if (this.isTable(data)) {\n\t\t\tthis.component = 'TableViewer';\n\t\t\tthis.icon = 'fa-table';\n\t\t}\n\t\treturn data;\n\t}\n\n\tisTable(data) {\n\t\tif (!data || typeof data !== 'object' || Utils.size(data) === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tlet values = Object.values(data);\n\t\tlet keys = Object.keys(values[0]);\n\t\treturn !values.some(row => !row || typeof row !== 'object' || !Utils.equals(Object.keys(row), keys));\n\t}\n}\n\nexport default JSON_;"],"names":["ProcessImpl","BaseProcess","constructor","process","exporter","super","this","async","node","generateFunction","Exporter","ProcessGraph","registry","connection","Utils","code","fnCounter","allowEmpty","fillUndefinedParameters","createProcessGraphInstance","pg","processRegistry","getJsonSchemaValidator","copyProcessGraphInstanceProperties","createProcessInstance","isKeyword","keyword","getKeywords","includes","toLowerCase","comment","generateImports","generateConnection","generateAuthentication","generateBuilder","generateMetadata","generateMissingParameter","generateFunctionParams","parameters","map","p","default","name","e","generateResult","makeNull","makeBoolean","val","makeArray","arr","join","makeObject","obj","key","makeString","str","JSON","stringify","makeNumber","num","value","Array","isArray","hasComment","length","newLine","generateMetadataEntry","args","onExporter","filter","newArgs","from_node","var","varPrefix","from_parameter","fnName","resolveArguments","callback","process_id","properties","getArgument","getCallbackParameters","execute","replacement","generateCallback","ordered","arguments","resolveCallback","orderArguments","getProcessGraph","getProcess","orderedArgs","param","optional","definedValueFound","i","pop","getParent","id","prefix","String","match","replace","getTab","addCode","level","tabs","repeat","lines","trim","split","line","push","count","getServerUrl","getUrl","params","getProcessParameters","getResultNode","validate","reset","executeNodes","getStartNodes","isMath","_isMath","KEYWORDS","JavaScript","generateFormula","parse","parsed","builderName","variable","generateArguments","namespace","description","processId","arg","parameter","paramName","formula","toFormulaString","escaped","toCode","resultNode","nodeToFormula","getArrayElementPlaceholder","getArgumentType","getRawArgument","index","findIndex","parentOperator","arrayElement","operator","Formula","get","isArrayData","convertValue","refNode","getNode","Error","argList","v","strongOps","weakOps","CSV","SupportedFormat","asset","delim","data","array","parseCSV","row","col","NaN","isNaN","parseFloat","quote","c","cc","nc","Format","Object","assign","context","setContext","getContext","href","canGroup","isBinary","download","filename","tempLink","document","createElement","style","display","setAttribute","type","body","appendChild","click","removeChild","loaded","fetchData","getData","blob","url","startsWith","response","fetch","promise","Promise","resolve","reject","reader","FileReader","onload","event","target","result","onerror","readAsBinaryString","readAsText","parseData","component","icon","props","events","UnsupportedFormat","BrowserImage","img","Image","crossOrigin","fetchPriotity","decoding","src","NativeType","TSV","FormatRegistry","createFilesFromSTAC","stac","resource","files","values","assets","roles","createFileFromAsset","forEach","file","createFilesFromBlob","Blob","stac_version","geometry","links","URL","createObjectURL","mime","contentType","JSON_","GeoTIFF","extension","error","console","log","GDAL_MIN","GDAL_MAX","GDAL_NAME","removableLayers","bands","nodata","projection","extent","convertToRGB","parseMetadata","tiff","stacHasExtent","ProjManager","band","setBandInfo","statistics","min","minimum","max","maximum","getBlob","tiffFromBlob","tiffFromUrl","getImage","getSamplesPerPixel","dummy","getArrayForSample","Number","isFinite","getMinForDataType","getMaxForDataType","getGDALMetadata","getGDALNoData","geoKeys","ProjectedCSTypeGeoKey","GeographicTypeGeoKey","ProjLinearUnitsGeoKey","GeogAngularUnitsGeoKey","units","unitsFromCode","Projection","bbox","getBoundingBox","toUserExtent","warn","fileDirectory","ColorMap","from","greenOffset","blueOffset","colorMap","Math","trunc","PhotometricInterpretation","_","getNoData","getBands","getProjection","getExtent","getColorMap","Int8Array","Int16Array","Int32Array","Float32Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","isGeoJson","isTable","keys","some"],"sourceRoot":""}