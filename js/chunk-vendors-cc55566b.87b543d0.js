(globalThis["webpackChunk_openeo_web_editor"]=globalThis["webpackChunk_openeo_web_editor"]||[]).push([[6296],{42233:(e,t,r)=>{const s=r(28270),i={MultipleResultNodes:"Multiple result nodes specified for the process.",StartNodeMissing:"No start nodes found for the process.",ResultNodeMissing:"No result node found for the process.",ReferencedNodeMissing:"Referenced process node '{node_id}' doesn't exist.",NodeIdInvalid:"Invalid node id specified in the process.",NodeInvalid:"Process node '{node_id}' is not a valid object.",ProcessIdMissing:"Process node '{node_id}' doesn't contain a process id.",ProcessGraphParameterMissing:"Invalid parameter '{argument}' referenced in process node '{node_id}' (process: {process_id}, namespace: {namespace}).",ProcessUnsupported:"Process '{process}' (namespace: {namespace}) is not supported.",ProcessArgumentUnsupported:"Process '{process}' (namespace: {namespace}) does not support the following arguments: {arguments}",ProcessArgumentRequired:"Process '{process}' (namespace: {namespace}) requires argument '{argument}'.",ProcessArgumentInvalid:"The argument '{argument}' in process '{process}' (namespace: {namespace}) is invalid: {reason}",ProcessGraphMissing:"No process graph specified",ProcessMissing:"No process specified"};class a extends Error{constructor(e,t={}){super(),this.variables=t,"string"===typeof i[e]?(this.code=e,this.message=s.replacePlaceholders(i[e],t)):(this.code=e.replace(/[^\w\d]+/g,""),this.message=e)}toJSON(){return{code:this.code,message:this.message}}}e.exports=a},93469:e=>{class t{constructor(){this.errors=[]}first(){return this.errors[0]||null}last(){return this.errors[this.errors.length-1]||null}merge(e){this.errors=this.errors.concat(e.getAll())}add(e){this.errors.push(e)}count(){return this.errors.length}toJSON(){return this.errors.map((e=>"function"===typeof e.toJSON?e.toJSON():{code:"InternalError",message:e.message}))}getMessage(){var e="";for(var t in this.errors)e+=parseInt(t,10)+1+". "+this.errors[t].message+"\r\n";return e.trim()}getAll(){return this.errors}}e.exports=t},4350:(e,t,r)=>{const s=r(28019),i=r(28270),a=r(20779),n=r(75743);var o=r(69446),p=r(96318);class m{constructor(){this.ajv=new s({schemaId:"auto",format:"full",addUsedSchema:!1}),this.ajv.addSchema(o),this.ajv.addKeyword("parameters",Object.assign(n.parameters,{valid:!0,errors:!0})),this.ajv.addKeyword("returns",Object.assign(n.returns,{valid:!0,errors:!0})),this.ajv.addKeyword("subtype",Object.assign(n.subtype,{validate:async(e,t,r)=>await this.validateSubtype(e,t,r),async:!0,errors:!0})),this.collections=null,this.epsgCodes=null,this.fileFormats={input:null,output:null},this.processRegistry=null,this.udfRuntimes=null}getFunctionName(e){return"validate"+e.replace(/(^|\-)(\w)/g,((e,t,r)=>r.toUpperCase()))}makeSchema(e,t=!1){if(e=i.deepClone(e),Array.isArray(e)&&(e={anyOf:e}),"undefined"===typeof e.$schema&&(e.$schema="http://json-schema.org/draft-07/schema#"),t&&(e.$async=!0,i.isObject(e.definitions)))for(let r in e.definitions)e.definitions[r].$async=!0;return e}async validateValue(e,t){t=this.makeSchema(t,!0);try{return await this.ajv.validate(t,e),[]}catch(r){if(Array.isArray(r.errors))return r.errors.map((e=>e.message));throw r}}async validateSubtype(e,t,r){"undefined"!==typeof p.definitions[e]?(r=this.makeSchema(p,!0),r=Object.assign({},p.definitions[e],r),"process-graph"===e&&(delete r.required,delete r.properties)):r=this.makeSchema(r,!0),delete r.subtype;let s=await this.ajv.validate(r,t),i=this.getFunctionName(e);return s&&"function"===typeof this[i]?await this[i](t):s}setUdfRuntimes(e){i.isObject(e)&&(this.udfRuntimes=e)}setCollections(e){if(Array.isArray(e)){this.collections=[];for(let t of e)i.isObject(t)&&"string"===typeof t.id?this.collections.push(t.id):"string"===typeof t&&this.collections.push(t)}}setFileFormats(e){if(i.isObject(e))for(let t of["input","output"])if(this.fileFormats[t]={},i.isObject(e[t]))for(let r in e[t])this.fileFormats[t][r.toUpperCase()]=e[t][r]}setEpsgCodes(e){Array.isArray(e)&&(this.epsgCodes=e.map((e=>parseInt(e,10))))}async validateCollectionId(e){if(Array.isArray(this.collections)&&!this.collections.find((t=>t===e)))throw new s.ValidationError([{message:"Collection with id '"+e+"' doesn't exist."}]);return!0}async validateUdfRuntime(e){if(i.isObject(this.udfRuntimes)&&!(e in this.udfRuntimes))throw new s.ValidationError([{message:"UDF runtime '"+e+"' is not supported."}]);return!0}async validateEpsgCode(e){if(Array.isArray(this.epsgCodes)){if(this.epsgCodes.includes(e))return!0}else if(e>=2e3)return!0;throw new s.ValidationError([{message:"Invalid EPSG code '"+e+"' specified."}])}async validateInputFormat(e){if(i.isObject(this.fileFormats.input)&&!(e.toUpperCase()in this.fileFormats.input))throw new s.ValidationError([{message:"Input format  '"+e+"' not supported."}]);return!0}async validateOutputFormat(e){if(i.isObject(this.fileFormats.output)&&!(e.toUpperCase()in this.fileFormats.output))throw new s.ValidationError([{message:"Output format  '"+e+"' not supported."}]);return!0}async validateProjDefinition(e){if(!e.toLowerCase().includes("+proj"))throw new s.ValidationError([{message:"Invalid PROJ string specified (doesn't contain '+proj')."}]);return!0}async validateWkt2Definition(e){var t=["BOUNDCRS","COMPOUNDCRS","ENGCRS","ENGINEERINGCRS","GEODCRS","GEODETICCRS","GEOGCRS","GEOGRAPHICCRS","PARAMETRICCRS","PROJCRS","PROJECTEDCRS","TIMECRS","VERTCRS","VERTICALCRS"];if(e=e.toUpperCase(),!t.some((t=>-1!==e.indexOf(t))))throw new s.ValidationError([{message:"Invalid WKT2 string specified."}]);return!0}async validateTemporalInterval(e){if(null===e[0]&&null===e[1])throw new s.ValidationError([{message:"Temporal interval must not be open on both ends."}]);if(null!==e[0]&&null!==e[1]){let t=new Date(e[0]),r=new Date(e[1]);if(r.getTime()<t.getTime())throw new s.ValidationError([{message:"The second timestamp can't be before the first timestamp."}])}return!0}async validateTemporalIntervals(e){for(let t of e)await this.validateTemporalInterval(t);return!0}setProcessGraphParser(e){this.processGraph=e}async validateProcessGraph(e){try{const s=r(34580);var t;return t=e instanceof s?e:this.processGraph?this.processGraph.createProcessGraphInstance(e):new s(e,null,this),await t.validate(),!0}catch(i){throw new s.ValidationError([{message:i.message}])}}static isSchemaCompatible(e,t,r=!1,s=!1){var n=a.normalizeJsonSchema(e,!0),o=a.normalizeJsonSchema(t,!0),p=n.findIndex((e=>{for(var t in o){var a=o[t];if("string"!==typeof e.type||!r&&"string"!==typeof a.type)return!0;if(e.type===a.type||s&&("array"===e.type||"object"===e.type)||"number"===e.type&&"integer"===a.type||!r&&"integer"===e.type&&"number"===a.type){if("array"===e.type&&i.isObject(e.items)){const t=e=>!(!s||!m.isSchemaCompatible(e,a,r))||!(!i.isObject(a.items)||!m.isSchemaCompatible(e,a.items,r));return Array.isArray(e.items.anyOf)||Array.isArray(e.items.oneOf)?(e.items.anyOf||e.items.oneOf).some(t):t(e.items)}if("object"===e.type){if(e.subtype===a.subtype)return!0;if("datacube"===e.subtype||"datacube"===a.subtype)return!0;if(i.isObject(e.properties)&&i.isObject(a.properties))return!0}else{if(!(r||"string"===typeof e.subtype&&"string"===typeof a.subtype))return!0;if("string"!==typeof e.subtype)return!0;if(e.subtype===a.subtype)return!0}}}return!1}));return-1!==p}}e.exports=m},75743:e=>{e.exports={subtype:{metaSchema:{type:"string"}},parameters:{dependencies:["subtype"],metaSchema:{type:"array",items:{type:"object",required:["name","description","schema"],properties:{name:{type:"string",pattern:"^\\w+$"},description:{type:"string"},optional:{type:"boolean",default:!1},deprecated:{type:"boolean",default:!1},experimental:{type:"boolean",default:!1},default:{},schema:{oneOf:[{$ref:"http://json-schema.org/draft-07/schema"},{type:"array",items:{$ref:"http://json-schema.org/draft-07/schema"}}]}}}}},returns:{dependencies:["subtype"],metaSchema:{type:"object",required:["schema"],properties:{description:{type:"string"},schema:{oneOf:[{$ref:"http://json-schema.org/draft-07/schema"},{type:"array",items:{$ref:"http://json-schema.org/draft-07/schema"}}]}}}}}},14894:(e,t,r)=>{const s=r(83126),i=r(93469),a=r(4350),n=r(34580),o=r(42233),p=r(95379),m=r(60908),c=r(28270);e.exports={BaseProcess:s,ErrorList:i,JsonSchemaValidator:a,ProcessGraph:n,ProcessGraphError:o,ProcessGraphNode:p,ProcessRegistry:m,Utils:c}},95379:(e,t,r)=>{const s=r(42233),i=r(28270);class a{constructor(e,t,r=null){if("string"!==typeof t||0===t.length)throw new s("NodeIdInvalid");if(!i.isObject(e))throw new s("NodeInvalid",{node_id:t});if("string"!==typeof e.process_id)throw new s("ProcessIdMissing",{node_id:t});this.id=t,this.processGraph=r,this.source=e,this.process_id=e.process_id,this.namespace=e.namespace||null,this.arguments=i.isObject(e.arguments)?i.deepClone(e.arguments):{},this.description=e.description||null,this.isResultNode=e.result||!1,this.expectsFrom=[],this.receivedFrom=[],this.passesTo=[],this.computedResult=void 0}toJSON(){let e=i.mapObjectValues(this.arguments,(e=>i.isObject(e)&&"function"===typeof e.toJSON?e.toJSON():e));return Object.assign({},this.source,{process_id:this.process_id,namespace:this.namespace,description:this.description,arguments:e,result:this.isResultNode})}getProcessGraph(){return this.processGraph}getParent(){return null!==this.processGraph?this.processGraph.getParentNode():null}getArgumentNames(){return Object.keys(this.arguments)}hasArgument(e){return"undefined"!==typeof this.arguments[e]}getArgumentType(e){return i.getType(this.getRawArgument(e))}getRawArgument(e){return i.isObject(this.source.arguments)?this.source.arguments[e]:void 0}getParsedArgument(e){return this.arguments[e]}getArgument(e,t=void 0){return"undefined"===typeof this.arguments[e]?t:this.evaluateArgument(this.arguments[e])}getArgumentRefs(e){return i.getRefs(this.getRawArgument(e),!1)}getRefs(){return i.getRefs(this.source.arguments,!1)}getProcessGraphParameterValue(e){let t,r=this.processGraph;do{if(r.hasArgument(e))return r.getArgument(e);r.hasParameterDefault(e)&&(t=r.getParameterDefault(e)),r=r.getParent()}while(null!==r);if("undefined"!==typeof t)return t;if(!this.processGraph.allowUndefinedParameterRefs)throw new s("ProcessGraphParameterMissing",{argument:e,node_id:this.id,process_id:this.process_id,namespace:this.namespace||"n/a"})}evaluateArgument(e){var t=i.getType(e);switch(t){case"result":return this.processGraph.getNode(e.from_node).getResult();case"callback":return e;case"parameter":return this.getProcessGraphParameterValue(e.from_parameter);case"array":case"object":let s="array"===t?[]:{};for(var r in e)s[r]=this.evaluateArgument(e[r]);return s;default:return e}}isStartNode(){return 0===this.expectsFrom.length}addPreviousNode(e){this.expectsFrom.find((t=>t.id===e.id))||this.expectsFrom.push(e)}getPreviousNodes(){return this.expectsFrom.sort(((e,t)=>e.id.localeCompare(t.id)))}addNextNode(e){this.passesTo.find((t=>t.id===e.id))||this.passesTo.push(e)}getNextNodes(){return this.passesTo.sort(((e,t)=>e.id.localeCompare(t.id)))}reset(){this.computedResult=void 0,this.receivedFrom=[]}getDescription(){return this.description}setDescription(e){this.description="string"===typeof e?e:null}setResult(e){this.computedResult=e}getResult(){return this.computedResult}solveDependency(e){return null!==e&&this.expectsFrom.includes(e)&&this.receivedFrom.push(e),this.expectsFrom.length===this.receivedFrom.length}}e.exports=a},83126:(e,t,r)=>{const s=r(4350),i=r(42233),a=r(20779),n=r(28270);class o{constructor(e){if(Object.assign(this,e),"string"!==typeof this.id)throw new Error("Invalid process specified, no id given.");Array.isArray(this.parameters)||(this.parameters=[])}toJSON(){return n.omitFromObject(this,["validate","validateArgument","execute","test"])}async validate(e){let t=e.getArgumentNames().filter((e=>-1===this.parameters.findIndex((t=>t.name===e))));if(t.length>0)throw new i("ProcessArgumentUnsupported",{process:this.id,namespace:this.namespace||"n/a",arguments:t});for(let r in this.parameters){let t=this.parameters[r];if(!e.hasArgument(t.name)){if(t.optional)continue;throw new i("ProcessArgumentRequired",{process:this.id,namespace:this.namespace||"n/a",argument:t.name})}let s=e.getParsedArgument(t.name),a=e.getRawArgument(t.name);await this.validateArgument(s,a,e,t)}}async validateArgument(e,t,r,o,p=null){p||(p=o.name);let m=n.getType(e),c=r.getProcessGraph();switch(m){case"parameter":let m=c.getCallbackParameter(e.from_parameter);if(m){if(!s.isSchemaCompatible(o.schema,m.schema))throw new i("ProcessArgumentInvalid",{process:this.id,namespace:this.namespace||"n/a",argument:p,reason:"Schema for parameter '"+e.from_parameter+"' not compatible with reference"});return}let d=r.getProcessGraphParameterValue(e.from_parameter),u=c.getProcessParameter(e.from_parameter);if(n.isObject(u)&&u.schema&&("undefined"!==typeof d&&await this.validateArgument(d,t,r,u,p),!s.isSchemaCompatible(o.schema,u.schema)))throw new i("ProcessArgumentInvalid",{process:this.id,namespace:this.namespace||"n/a",argument:p,reason:"Schema for parameter '"+e.from_parameter+"' not compatible"});break;case"result":let h=c.getNode(e.from_node),f=c.getProcess(h);if(!s.isSchemaCompatible(o.schema,f.returns.schema))throw new i("ProcessArgumentInvalid",{process:this.id,namespace:this.namespace||"n/a",argument:p,reason:"Schema for result '"+e.from_node+"' not compatible"});break;case"array":case"object":let g=a.normalizeJsonSchema(o.schema).filter((e=>["array","object"].includes(e.type))),b=1===g.length&&"process-graph"===g[0].subtype;if(n.containsRef(t)&&!b){for(var l in e){let s=g.map((e=>a.getElementJsonSchema(e,l))).filter((e=>Object.keys(e).length));if(s.length>0){let i=0,a=null;for(let n of s)try{await this.validateArgument(e[l],t[l],r,{schema:n},p+"/"+l),i++}catch(y){a=y}if(0===i&&a)throw a}}return}default:let P=r.getProcessGraph().getJsonSchemaValidator(),w=await P.validateValue(e,o.schema);if(w.length>0)throw new i("ProcessArgumentInvalid",{process:this.id,namespace:this.namespace||"n/a",argument:p,reason:w})}}async execute(){throw new Error(`execute not implemented yet for process '${this.id}' (namespace: ${this.namespace||"n/a"})`)}test(){throw new Error(`test not implemented yet for process '${this.id}' (namespace: ${this.namespace||"n/a"})`)}}e.exports=o},34580:(e,t,r)=>{const s=r(83126),i=r(93469),a=r(4350),n=r(42233),o=r(95379),p=r(28270),m=r(20779),c=["id","summary","description","categories","parameters","returns","deprecated","experimental","exceptions","examples","links","process_graph"];class l{constructor(e,t=null,r=null){this.process=e,this.nodes={},this.startNodes=[],this.resultNode=null,this.children=[],this.parentNode=null,this.parsed=!1,this.validated=!1,this.errors=new i,this.callbackParameters=[],this.processRegistry=t,this.jsonSchemaValidator=r,this.arguments={},this.allowEmptyGraph=!1,this.fillProcessParameters=!1,this.allowUndefinedParameterRefs=!0}toJSON(){return this.process}getJsonSchemaValidator(){return null===this.jsonSchemaValidator&&(this.jsonSchemaValidator=this.createJsonSchemaValidatorInstance()),this.jsonSchemaValidator.setProcessGraphParser(this),this.jsonSchemaValidator}createJsonSchemaValidatorInstance(){return new a}createNodeInstance(e,t,r){return new o(e,t,r)}createProcessGraphInstance(e){let t=new l(e,this.processRegistry,this.getJsonSchemaValidator());return this.copyProcessGraphInstanceProperties(t)}createProcessInstance(e){return new s(e)}copyProcessGraphInstanceProperties(e){return e.allowEmptyGraph=this.allowEmptyGraph,e.fillProcessParameters=this.fillProcessParameters,e.allowUndefinedParameterRefs=this.allowUndefinedParameterRefs,e}createChildProcessGraph(e,t,r=[]){var s=this.createProcessGraphInstance(e);if(s.setArguments(this.arguments),s.setParentNode(t),r.length>0){let e=r.shift();s.setCallbackParameters(m.getCallbackParametersForProcess(s.getParentProcess(),e,r))}return s.parse(),this.children.push(s),s}getParentNode(){return this.parentNode}getParent(){return this.parentNode?this.parentNode.getProcessGraph():null}setParentNode(e){this.parentNode=e instanceof o?e:null}isValid(){return this.validated&&0===this.errors.count()}addError(e){this.errors.add(e)}allowUndefinedParameters(e=!0){e||(this.fillProcessParameters=!1),this.allowUndefinedParameterRefs=e}fillUndefinedParameters(e=!0){e&&(this.allowUndefinedParameterRefs=!0),this.fillProcessParameters=e}allowEmpty(e=!0){this.allowEmptyGraph=e}parse(){if(this.parsed)return;const e=e=>this.getParentProcessId()?new n(e+"Callback",{process_id:this.getParentProcessId(),node_id:this.parentNode?this.parentNode.id:"N/A"}):new n(e);if(!p.isObject(this.process))throw e("ProcessMissing");if(0===p.size(this.process.process_graph)){if(this.allowEmptyGraph){let e=Object.keys(this.process).find((e=>c.includes(e)));if(0===p.size(this.process)||e)return void(this.parsed=!0)}throw e("ProcessGraphMissing")}this.nodes=p.mapObjectValues(this.process.process_graph,((e,t)=>this.createNodeInstance(e,t,this)));for(let r in this.nodes){var t=this.nodes[r];if(t.isResultNode){if(null!==this.resultNode)throw e("MultipleResultNodes");this.resultNode=t}this.parseNodeArguments(r,t)}if(null===this.resultNode)throw e("ResultNodeMissing");if(this.startNodes=Object.values(this.nodes).filter((e=>e.isStartNode())).sort(((e,t)=>e.id.localeCompare(t.id))),0===this.startNodes.length)throw e("StartNodeMissing");this.parsed=!0}async validate(e=!0){if(this.validated){if(e&&this.errors.count()>0)throw this.errors.first();return this.errors}this.validated=!0;try{this.parse()}catch(t){if(this.addError(t),e)throw t}return await this.validateNodes(this.getStartNodes(),e),this.errors}async execute(e=null){return this.allowUndefinedParameters(!1),this.setArguments(e),await this.validate(),this.reset(),await this.executeNodes(this.getStartNodes()),this.getResultNode()}async validateNodes(e,t,r=null){if(0!==e.length){var s=e.map((async e=>{if(e.solveDependency(r)){try{await this.validateNode(e)}catch(s){if(s instanceof i){if(this.errors.merge(s),t)throw s.first()}else if(this.addError(s),t)throw s}await this.validateNodes(e.getNextNodes(),t,e)}}));await Promise.all(s)}}async validateNode(e){var t=this.getProcess(e);if(t)return await t.validate(e)}async executeNodes(e,t=null){if(0!==e.length){var r=e.map((async e=>{if(e.solveDependency(t)){var r=await this.executeNode(e);e.setResult(r),await this.executeNodes(e.getNextNodes(),e)}}));return await Promise.all(r)}}async executeNode(e){var t=this.getProcess(e);return await t.execute(e)}parseNodeArguments(e,t,r=[],s=void 0){"undefined"===typeof s&&(s=t.arguments);for(let a in s){let o=s[a],m=r.concat([a]),c=p.getType(o);switch(c){case"result":var i=this.nodes[o.from_node];if("undefined"===typeof i)throw new n("ReferencedNodeMissing",{node_id:o.from_node});t.addPreviousNode(i),i.addNextNode(t);break;case"callback":s[a]=this.createChildProcessGraph(o,t,m);break;case"parameter":this.fillProcessParameters&&!this.hasParameter(o.from_parameter)&&this.addProcessParameter(o.from_parameter);break;case"array":case"object":this.parseNodeArguments(e,t,m,o);break}}}setCallbackParameters(e){this.callbackParameters=e}getCallbackParameter(e){return this.getCallbackParameters().find((t=>t.name===e))||null}getCallbackParameters(){return this.callbackParameters}addProcessParameter(e,t="",r={}){Array.isArray(this.process.parameters)||(this.process.parameters=[]),this.process.parameters.push({name:e,description:t,schema:r})}hasParameterDefault(e){return void 0!==this.getParameterDefault(e)}getParameterDefault(e){let t=this.getParameter(e);if(null!==t)return t.default}hasParameter(e){return null!==this.getParameter(e)}getProcessParameters(e=!1){let t=Array.isArray(this.process.parameters)?this.process.parameters.slice(0):[];if(e&&!this.fillProcessParameters)for(let r in this.nodes){let e=this.nodes[r].getRefs();for(let r of e)r.from_parameter&&!t.find((e=>e.name===r.from_parameter))&&t.push({name:r.from_parameter,description:"",schema:{}})}return t}getProcessParameter(e,t=!1){return this.getProcessParameters(t).find((t=>t.name===e))||null}getParameter(e){let t=this.getCallbackParameter(e),r=this.getProcessParameter(e);return t&&r?Object.assign({},t,r):t||(r||null)}setArguments(e){p.isObject(e)&&Object.assign(this.arguments,e)}hasArgument(e){return"undefined"!==typeof this.arguments[e]}getArgument(e){return this.arguments[e]}reset(){for(var e in this.nodes)this.nodes[e].reset();this.children.forEach((e=>e.reset()))}getResultNode(){return this.resultNode}getStartNodes(){return this.startNodes}getStartNodeIds(){return this.startNodes.map((e=>e.id))}getNode(e){return e in this.nodes?this.nodes[e]:null}getNodeCount(){return p.size(this.nodes)}getNodes(){return this.nodes}getErrors(){return this.errors}getProcess(e,t=null){if(null===this.processRegistry)return null;let r;e instanceof o?(r=e.process_id,t=e.namespace):r=e;let s=this.processRegistry.get(r,t);if(null===s)throw new n("ProcessUnsupported",{process:r,namespace:t||"n/a"});return this.createProcessInstance(s)}getParentProcessId(){return this.getParentNode()?this.getParentNode().process_id:null}getParentProcess(){return null===this.processRegistry?null:this.processRegistry.get(this.getParentProcessId())}}e.exports=l},60908:(e,t,r)=>{const s=r(73659);class i extends s{}e.exports=i},28270:(e,t,r)=>{const s=r(60768);class i extends s{static containsRef(e,t=!0,r=!1){let s=i.getType(e);switch(s){case"result":case"parameter":return!0;case"callback":if(t&&i.containsRef(e.process_graph,r,r))return!0;break;case"array":case"object":for(let s in e)if(i.containsRef(e[s],t,r))return!0}return!1}static getRefs(e,t=!0,r=!1){var s=[],a=i.getType(e);switch(a){case"result":case"parameter":s.push(e);break;case"callback":t&&(s=s.concat(i.getRefs(e.process_graph,r,r)));break;case"array":case"object":for(var n in e)s=s.concat(i.getRefs(e[n],t,r));break}return i.unique(s,!0)}static getType(e){const t=r(34580);return"object"===typeof e?null===e?"null":Array.isArray(e)?"array":e.hasOwnProperty("process_graph")||e instanceof t?"callback":e.hasOwnProperty("from_node")?"result":e.hasOwnProperty("from_parameter")?"parameter":"object":typeof e}}e.exports=i},69446:e=>{"use strict";e.exports=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","$id":"https://geojson.org/schema/GeoJSON.json","title":"GeoJSON","oneOf":[{"title":"GeoJSON Point","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["Point"]},"coordinates":{"type":"array","minItems":2,"items":{"type":"number"}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON LineString","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["LineString"]},"coordinates":{"type":"array","minItems":2,"items":{"type":"array","minItems":2,"items":{"type":"number"}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON Polygon","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["Polygon"]},"coordinates":{"type":"array","items":{"type":"array","minItems":4,"items":{"type":"array","minItems":2,"items":{"type":"number"}}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON MultiPoint","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["MultiPoint"]},"coordinates":{"type":"array","items":{"type":"array","minItems":2,"items":{"type":"number"}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON MultiLineString","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["MultiLineString"]},"coordinates":{"type":"array","items":{"type":"array","minItems":2,"items":{"type":"array","minItems":2,"items":{"type":"number"}}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON MultiPolygon","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["MultiPolygon"]},"coordinates":{"type":"array","items":{"type":"array","items":{"type":"array","minItems":4,"items":{"type":"array","minItems":2,"items":{"type":"number"}}}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON GeometryCollection","type":"object","required":["type","geometries"],"properties":{"type":{"type":"string","enum":["GeometryCollection"]},"geometries":{"type":"array","items":{"oneOf":[{"title":"GeoJSON Point","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["Point"]},"coordinates":{"type":"array","minItems":2,"items":{"type":"number"}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON LineString","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["LineString"]},"coordinates":{"type":"array","minItems":2,"items":{"type":"array","minItems":2,"items":{"type":"number"}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON Polygon","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["Polygon"]},"coordinates":{"type":"array","items":{"type":"array","minItems":4,"items":{"type":"array","minItems":2,"items":{"type":"number"}}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON MultiPoint","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["MultiPoint"]},"coordinates":{"type":"array","items":{"type":"array","minItems":2,"items":{"type":"number"}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON MultiLineString","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["MultiLineString"]},"coordinates":{"type":"array","items":{"type":"array","minItems":2,"items":{"type":"array","minItems":2,"items":{"type":"number"}}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON MultiPolygon","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["MultiPolygon"]},"coordinates":{"type":"array","items":{"type":"array","items":{"type":"array","minItems":4,"items":{"type":"array","minItems":2,"items":{"type":"number"}}}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}}]}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON Feature","type":"object","required":["type","properties","geometry"],"properties":{"type":{"type":"string","enum":["Feature"]},"properties":{"oneOf":[{"type":"null"},{"type":"object"}]},"geometry":{"oneOf":[{"type":"null"},{"title":"GeoJSON Point","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["Point"]},"coordinates":{"type":"array","minItems":2,"items":{"type":"number"}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON LineString","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["LineString"]},"coordinates":{"type":"array","minItems":2,"items":{"type":"array","minItems":2,"items":{"type":"number"}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON Polygon","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["Polygon"]},"coordinates":{"type":"array","items":{"type":"array","minItems":4,"items":{"type":"array","minItems":2,"items":{"type":"number"}}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON MultiPoint","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["MultiPoint"]},"coordinates":{"type":"array","items":{"type":"array","minItems":2,"items":{"type":"number"}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON MultiLineString","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["MultiLineString"]},"coordinates":{"type":"array","items":{"type":"array","minItems":2,"items":{"type":"array","minItems":2,"items":{"type":"number"}}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON MultiPolygon","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["MultiPolygon"]},"coordinates":{"type":"array","items":{"type":"array","items":{"type":"array","minItems":4,"items":{"type":"array","minItems":2,"items":{"type":"number"}}}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON GeometryCollection","type":"object","required":["type","geometries"],"properties":{"type":{"type":"string","enum":["GeometryCollection"]},"geometries":{"type":"array","items":{"oneOf":[{"title":"GeoJSON Point","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["Point"]},"coordinates":{"type":"array","minItems":2,"items":{"type":"number"}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON LineString","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["LineString"]},"coordinates":{"type":"array","minItems":2,"items":{"type":"array","minItems":2,"items":{"type":"number"}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON Polygon","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["Polygon"]},"coordinates":{"type":"array","items":{"type":"array","minItems":4,"items":{"type":"array","minItems":2,"items":{"type":"number"}}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON MultiPoint","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["MultiPoint"]},"coordinates":{"type":"array","items":{"type":"array","minItems":2,"items":{"type":"number"}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON MultiLineString","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["MultiLineString"]},"coordinates":{"type":"array","items":{"type":"array","minItems":2,"items":{"type":"array","minItems":2,"items":{"type":"number"}}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON MultiPolygon","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["MultiPolygon"]},"coordinates":{"type":"array","items":{"type":"array","items":{"type":"array","minItems":4,"items":{"type":"array","minItems":2,"items":{"type":"number"}}}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}}]}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}}]},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON FeatureCollection","type":"object","required":["type","features"],"properties":{"type":{"type":"string","enum":["FeatureCollection"]},"features":{"type":"array","items":{"title":"GeoJSON Feature","type":"object","required":["type","properties","geometry"],"properties":{"type":{"type":"string","enum":["Feature"]},"properties":{"oneOf":[{"type":"null"},{"type":"object"}]},"geometry":{"oneOf":[{"type":"null"},{"title":"GeoJSON Point","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["Point"]},"coordinates":{"type":"array","minItems":2,"items":{"type":"number"}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON LineString","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["LineString"]},"coordinates":{"type":"array","minItems":2,"items":{"type":"array","minItems":2,"items":{"type":"number"}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON Polygon","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["Polygon"]},"coordinates":{"type":"array","items":{"type":"array","minItems":4,"items":{"type":"array","minItems":2,"items":{"type":"number"}}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON MultiPoint","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["MultiPoint"]},"coordinates":{"type":"array","items":{"type":"array","minItems":2,"items":{"type":"number"}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON MultiLineString","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["MultiLineString"]},"coordinates":{"type":"array","items":{"type":"array","minItems":2,"items":{"type":"array","minItems":2,"items":{"type":"number"}}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON MultiPolygon","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["MultiPolygon"]},"coordinates":{"type":"array","items":{"type":"array","items":{"type":"array","minItems":4,"items":{"type":"array","minItems":2,"items":{"type":"number"}}}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON GeometryCollection","type":"object","required":["type","geometries"],"properties":{"type":{"type":"string","enum":["GeometryCollection"]},"geometries":{"type":"array","items":{"oneOf":[{"title":"GeoJSON Point","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["Point"]},"coordinates":{"type":"array","minItems":2,"items":{"type":"number"}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON LineString","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["LineString"]},"coordinates":{"type":"array","minItems":2,"items":{"type":"array","minItems":2,"items":{"type":"number"}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON Polygon","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["Polygon"]},"coordinates":{"type":"array","items":{"type":"array","minItems":4,"items":{"type":"array","minItems":2,"items":{"type":"number"}}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON MultiPoint","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["MultiPoint"]},"coordinates":{"type":"array","items":{"type":"array","minItems":2,"items":{"type":"number"}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON MultiLineString","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["MultiLineString"]},"coordinates":{"type":"array","items":{"type":"array","minItems":2,"items":{"type":"array","minItems":2,"items":{"type":"number"}}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}},{"title":"GeoJSON MultiPolygon","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["MultiPolygon"]},"coordinates":{"type":"array","items":{"type":"array","items":{"type":"array","minItems":4,"items":{"type":"array","minItems":2,"items":{"type":"number"}}}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}}]}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}}]},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}}]}')},96318:e=>{"use strict";e.exports=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","$id":"http://processes.openeo.org/1.1.0/meta/subtype-schemas.json","title":"Subtype Schemas","description":"This file defines the schemas for subtypes we define for openEO processes.","definitions":{"band-name":{"type":"string","subtype":"band-name","title":"Band Name","description":"Either a unique band name (metadata field `name`) or a [common band name](https://github.com/radiantearth/stac-spec/tree/v0.9.0/extensions/eo#common-band-names) (metadata field `common_name`) available in the data cube. If the unique band name and the common name conflict, the unique band name has a higher priority."},"bounding-box":{"type":"object","subtype":"bounding-box","title":"Bounding Box","description":"A bounding box with the required fields `west`, `south`, `east`, `north` and optionally `base`, `height`, `crs`. The `crs` is a EPSG code, a WKT2:2018 string or a PROJ definition (deprecated).","required":["west","south","east","north"],"properties":{"west":{"description":"West (lower left corner, coordinate axis 1).","type":"number"},"south":{"description":"South (lower left corner, coordinate axis 2).","type":"number"},"east":{"description":"East (upper right corner, coordinate axis 1).","type":"number"},"north":{"description":"North (upper right corner, coordinate axis 2).","type":"number"},"base":{"description":"Base (optional, lower left corner, coordinate axis 3).","type":["number","null"],"default":null},"height":{"description":"Height (optional, upper right corner, coordinate axis 3).","type":["number","null"],"default":null},"crs":{"description":"Coordinate reference system of the extent, specified as as [EPSG code](http://www.epsg-registry.org/), [WKT2 (ISO 19162) string](http://docs.opengeospatial.org/is/18-010r7/18-010r7.html) or [PROJ definition (deprecated)](https://proj.org/usage/quickstart.html). Defaults to `4326` (EPSG code 4326) unless the client explicitly requests a different coordinate reference system.","anyOf":[{"$ref":"#/definitions/epsg-code"},{"$ref":"#/definitions/wkt2-definition"},{"$ref":"#/definitions/proj-definition"}],"default":4326}}},"chunk-size":{"type":"object","subtype":"chunk-size","required":["dimension","value"],"properties":{"dimension":{"type":"string"},"value":{"default":null,"anyOf":[{"type":"null"},{"type":"number","minimum":0},{"$ref":"#/definitions/duration"}]},"unit":{"type":"string","description":"The unit the values are given in. If no unit is given, uses the unit specified for the dimension or otherwise the default unit of the reference system."}}},"collection-id":{"type":"string","subtype":"collection-id","title":"Collection ID","description":"A collection id from the list of supported collections.","pattern":"^[\\\\w\\\\-\\\\.~/]+$"},"date":{"type":"string","subtype":"date","format":"date","title":"Date only","description":"Date only representation, as defined for `full-date` by [RFC 3339 in section 5.6](https://www.rfc-editor.org/rfc/rfc3339.html#section-5.6). The time zone is UTC."},"date-time":{"type":"string","subtype":"date-time","format":"date-time","title":"Date with Time","description":"Date and time representation, as defined for `date-time` by [RFC 3339 in section 5.6](https://www.rfc-editor.org/rfc/rfc3339.html#section-5.6)."},"duration":{"type":"string","subtype":"duration","description":"[ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations), e.g. `P1D` for one day.","pattern":"^(-?)P(?=\\\\d|T\\\\d)(?:(\\\\d+)Y)?(?:(\\\\d+)M)?(?:(\\\\d+)([DW]))?(?:T(?:(\\\\d+)H)?(?:(\\\\d+)M)?(?:(\\\\d+(?:\\\\.\\\\d+)?)S)?)?$"},"epsg-code":{"type":"integer","subtype":"epsg-code","title":"EPSG Code","description":"Specifies details about cartographic projections as [EPSG](http://www.epsg.org) code.","minimum":1000,"examples":[3857]},"file-path":{"type":"string","subtype":"file-path","pattern":"^[^\\r\\n\\\\:\'\\"]+$","title":"Single File path","description":"A relative path to a user-uploaded file. Folders can\'t be specified."},"file-paths":{"type":"array","subtype":"file-paths","title":"Multiple File paths","description":"An array with relative paths to user-uploaded files. Clients should assist to generate a list of files for folders.","items":{"$ref":"#/definitions/file-path"}},"geojson":{"type":"object","subtype":"geojson","title":"GeoJSON","description":"GeoJSON as defined by [RFC 7946](https://www.rfc-editor.org/rfc/rfc7946.html).","allOf":[{"$ref":"https://geojson.org/schema/GeoJSON.json"}]},"input-format":{"type":"string","subtype":"input-format","title":"Input File Format","description":"An input format supported by the back-end."},"input-format-options":{"type":"object","subtype":"input-format-options","title":"Options for Input File Formats","description":"Key-value-pairs with arguments for the input format options supported by the back-end."},"job-id":{"type":"string","subtype":"job-id","title":"Batch Job ID","description":"A batch job id, either one of the jobs a user has stored or a publicly available job.","pattern":"^[\\\\w\\\\-\\\\.~]+$"},"kernel":{"type":"array","subtype":"kernel","title":"Image Kernel","description":"Image kernel, a two-dimensional array of numbers.","items":{"type":"array","items":{"type":"number"}}},"labeled-array":{"type":"array","subtype":"labeled-array","title":"Array with labels","description":"An associative, ordered list of key-value pairs. Basically an array, which additionally has labels for each value. Labels can be numbers or (temporal) strings.\\n\\n**Important:** Due to the lack of such a data type in JSON, the schema for the items is not formally specified yet and a placeholder.","items":{"description":"Any data type."}},"metadata-filter":{"type":"object","subtype":"metadata-filter","title":"Filters","description":"A list of filters to check against. Specify key-value-pairs with the key being the name of the metadata property name and the value being a user-defined process evaluated against the metadata values.","additionalProperties":{"type":"object","subtype":"process-graph","parameters":[{"name":"value","description":"The property value to be checked against.","schema":{"description":"Any data type."}}],"returns":{"description":"`true` if the data should be used, otherwise `false`.","schema":{"type":"boolean"}}}},"output-format":{"type":"string","subtype":"output-format","title":"Output File Format","description":"An output format supported by the back-end."},"output-format-options":{"type":"object","subtype":"output-format-options","title":"Options for Output File Formats","description":"Key-value-pairs with arguments for the output format options supported by the back-end."},"process-graph":{"type":"object","subtype":"process-graph","title":"User-defined process","description":"An process graph that is passed as an argument and is expected to be executed by the process. Parameters passed to the process graph are specified in the `parameters` property of the corresponding schema.","required":["process_graph"],"properties":{"process_graph":{"type":"object","additionalProperties":{"type":"object","required":["process_id","arguments"],"properties":{"process_id":{"type":"string"},"arguments":{}}}}}},"proj-definition":{"type":"string","subtype":"proj-definition","title":"PROJ definition","description":"**DEPRECATED.** Specifies details about cartographic projections as [PROJ](https://proj.org/usage/quickstart.html) definition."},"raster-cube":{"type":"object","subtype":"raster-cube","title":"Raster data cube","description":"A raster data cube, an image collection stored at the back-end. Different back-ends have different internal representations for this data structure."},"temporal-interval":{"type":"array","subtype":"temporal-interval","title":"Single temporal interval","description":"Left-closed temporal interval, represented as two-element array with the following elements:\\n\\n1. The first element is the start of the temporal interval. The specified instance in time is **included** in the interval.\\n2. The second element is the end of the temporal interval. The specified instance in time is **excluded** from the interval.\\n\\nThe specified temporal strings follow [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339.html). Although [RFC 3339 prohibits the hour to be \'24\'](https://www.rfc-editor.org/rfc/rfc3339.html#section-5.7), **this process allows the value \'24\' for the hour** of an end time in order to make it possible that left-closed time intervals can fully cover the day. `null` can be used to specify open intervals.","minItems":2,"maxItems":2,"items":{"description":"Processes and implementations may choose to only implement a subset of the subtypes specified here. Clients must check what back-ends / processes actually support.","anyOf":[{"$ref":"#/definitions/date-time"},{"$ref":"#/definitions/date"},{"$ref":"#/definitions/time"},{"$ref":"#/definitions/year"},{"type":"null"}]},"examples":[["2015-01-01T00:00:00Z","2016-01-01T00:00:00Z"],["2015-01-01","2016-01-01"],["00:00:00Z","12:00:00Z"],["2015-01-01",null]]},"temporal-intervals":{"type":"array","subtype":"temporal-intervals","title":"Multiple temporal intervals","description":"Left-closed temporal intervals, which are allowed to overlap. Formatted as an array of two-element arrays, each being an array with subtype `temporal-interval`.","items":{"$ref":"#/definitions/temporal-interval"},"minItems":1,"examples":[[["2015-01-01","2016-01-01"],["2016-01-01","2017-01-01"],["2017-01-01","2018-01-01"]],[["00:00:00Z","12:00:00Z"],["12:00:00Z","24:00:00Z"]],[["2020-01-01T00:00:00Z",null]]]},"time":{"type":"string","subtype":"time","format":"time","title":"Time only","description":"Time only representation, as defined for `full-time` by [RFC 3339 in section 5.6](https://www.rfc-editor.org/rfc/rfc3339.html#section-5.6). Although [RFC 3339 prohibits the hour to be \'24\'](https://www.rfc-editor.org/rfc/rfc3339.html#section-5.7), this definition allows the value \'24\' for the hour as end time in an interval in order to make it possible that left-closed time intervals can fully cover the day."},"udf-code":{"type":"string","subtype":"udf-code","title":"UDF source code","description":"The multi-line source code of a user-defined function (UDF), must contain a newline/line-break.","pattern":"(\\r\\n|\\r|\\n)"},"udf-runtime":{"type":"string","subtype":"udf-runtime","title":"UDF runtime","description":"The name of a UDF runtime."},"udf-runtime-version":{"type":"string","subtype":"udf-runtime-version","title":"UDF Runtime version","description":"The version of a UDF runtime."},"uri":{"type":"string","subtype":"uri","format":"uri","title":"URI","description":"A valid URI according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986.html). Can be restricted using a regular expression, e.g. to (dis)allow certain protocols."},"vector-cube":{"type":"object","subtype":"vector-cube","title":"Vector data cube","description":"A vector data cube, a vector collection stored at the back-end. Different back-ends have different internal representations for this data structure"},"wkt2-definition":{"type":"string","subtype":"wkt2-definition","title":"WKT2 definition","description":"Specifies details about cartographic projections as WKT2 string. Refers to the latest WKT2 version (currently [WKT2:2018](http://docs.opengeospatial.org/is/18-010r7/18-010r7.html) / ISO 19162:2018) unless otherwise stated by the process."},"year":{"type":"string","subtype":"year","minLength":4,"maxLength":4,"pattern":"^\\\\d{4}$","title":"Year only","description":"Year representation, as defined for `date-fullyear` by [RFC 3339 in section 5.6](https://www.rfc-editor.org/rfc/rfc3339.html#section-5.6)."}}}')}}]);
//# sourceMappingURL=chunk-vendors-cc55566b.87b543d0.js.map