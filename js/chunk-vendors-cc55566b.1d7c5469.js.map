{"version":3,"file":"js/chunk-vendors-cc55566b.1d7c5469.js","mappings":"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","sources":["webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/error.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/errorlist.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/jsonschema.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/keywords.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/main.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/node.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/process.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/processgraph.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/registry.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/utils.js"],"sourcesContent":["const Utils = require('./utils');\r\n\r\nconst MESSAGES = {\r\n\t\"MultipleResultNodes\": \"Multiple result nodes specified for the process.\",\r\n\t\"StartNodeMissing\": \"No start nodes found for the process.\",\r\n\t\"ResultNodeMissing\": \"No result node found for the process.\",\r\n\t\"ReferencedNodeMissing\": \"Referenced process node '{node_id}' doesn't exist.\",\r\n\t\"NodeIdInvalid\": \"Invalid node id specified in the process.\",\r\n\t\"NodeInvalid\": \"Process node '{node_id}' is not a valid object.\",\r\n\t\"ProcessIdMissing\": \"Process node '{node_id}' doesn't contain a process id.\",\r\n\t\"ProcessGraphParameterMissing\": \"Invalid parameter '{argument}' referenced in process node '{node_id}' (process: {process_id}, namespace: {namespace}).\",\r\n\t\"ProcessUnsupported\": \"Process '{process}' (namespace: {namespace}) is not supported.\",\r\n\t\"ProcessArgumentUnsupported\": \"Process '{process}' (namespace: {namespace}) does not support the following arguments: {arguments}\",\r\n\t\"ProcessArgumentRequired\": \"Process '{process}' (namespace: {namespace}) requires argument '{argument}'.\",\r\n\t\"ProcessArgumentInvalid\": \"The argument '{argument}' in process '{process}' (namespace: {namespace}) is invalid: {reason}\",\r\n\t\"ProcessGraphMissing\": \"No process graph specified\",\r\n\t\"ProcessMissing\": \"No process specified\"\r\n};\r\n\r\n/**\r\n * An error class for this library.\r\n * \r\n * @class\r\n */\r\nclass ProcessGraphError extends Error {\r\n\r\n\tconstructor(codeOrMsg, variables = {}) {\r\n\t\tsuper();\r\n\t\tthis.variables = variables;\r\n\t\tif (typeof MESSAGES[codeOrMsg] === 'string') {\r\n\t\t\tthis.code = codeOrMsg;\r\n\t\t\tthis.message = Utils.replacePlaceholders(MESSAGES[codeOrMsg], variables);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.code = codeOrMsg.replace(/[^\\w\\d]+/g, '');\r\n\t\t\tthis.message = codeOrMsg;\r\n\t\t}\r\n\t}\r\n\r\n\ttoJSON() {\r\n\t\treturn {\r\n\t\t\tcode: this.code,\r\n\t\t\tmessage: this.message\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports = ProcessGraphError;","/**\r\n * A list of errors.\r\n * \r\n * @class\r\n */\r\nclass ErrorList {\r\n\r\n\tconstructor() {\r\n\t\tthis.errors = [];\r\n\t}\r\n\r\n\tfirst() {\r\n\t\treturn this.errors[0] || null;\r\n\t}\r\n\r\n\tlast() {\r\n\t\treturn this.errors[this.errors.length-1] || null;\r\n\t}\r\n\r\n\tmerge(errorList) {\r\n\t\tthis.errors = this.errors.concat(errorList.getAll());\r\n\t}\r\n\t\r\n\tadd(error) {\r\n\t\tthis.errors.push(error);\r\n\t}\r\n\r\n\tcount() {\r\n\t\treturn this.errors.length;\r\n\t}\r\n\r\n\ttoJSON() {\r\n\t\treturn this.errors.map(e => {\r\n\t\t\tif (typeof e.toJSON === 'function') {\r\n\t\t\t\treturn e.toJSON();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tcode: 'InternalError',\r\n\t\t\t\t\tmessage: e.message\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tgetMessage() {\r\n\t\tvar msg = '';\r\n\t\tfor (var i in this.errors) {\r\n\t\t\tmsg += (parseInt(i, 10)+1) + \". \" + this.errors[i].message + \"\\r\\n\";\r\n\t\t}\r\n\t\treturn msg.trim();\r\n\t}\r\n\r\n\tgetAll() {\r\n\t\treturn this.errors;\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports = ErrorList;","const Ajv = require('ajv');\r\nconst Utils = require('./utils');\r\nconst ProcessUtils = require('@openeo/js-commons/src/processUtils.js');\r\nconst keywords = require('./keywords');\r\n\r\nvar geoJsonSchema = require(\"../assets/GeoJSON.json\");\r\nvar subtypeSchemas = require(\"../assets/subtype-schemas.json\");\r\n\r\n/**\r\n * JSON Schema Validator.\r\n * \r\n * @class\r\n */\r\nclass JsonSchemaValidator {\r\n\r\n\tconstructor() {\r\n\t\tthis.ajv = new Ajv({\r\n\t\t\tschemaId: 'auto',\r\n\t\t\tformat: 'full',\r\n\t\t\taddUsedSchema: false\r\n\t\t});\r\n\t\t// Add subtype + GeoJSON schemas\r\n\t\tthis.ajv.addSchema(geoJsonSchema);\r\n\t\t// Add openEO specific keywords\r\n\t\tthis.ajv.addKeyword('parameters', Object.assign(keywords.parameters, {\r\n\t\t\tvalid: true,\r\n\t\t\terrors: true\r\n\t\t}));\r\n\t\tthis.ajv.addKeyword('returns', Object.assign(keywords.returns, {\r\n\t\t\tvalid: true,\r\n\t\t\terrors: true\r\n\t\t}));\r\n\t\tthis.ajv.addKeyword('subtype', Object.assign(keywords.subtype, {\r\n\t\t\tvalidate: async (subtype, data, schema) => await this.validateSubtype(subtype, data, schema),\r\n\t\t\tasync: true,\r\n\t\t\terrors: true\r\n\t\t}));\r\n\r\n\t\tthis.collections = null;\r\n\t\tthis.epsgCodes = null;\r\n\t\tthis.fileFormats = {\r\n\t\t\tinput: null,\r\n\t\t\toutput: null\r\n\t\t};\r\n\t\tthis.processRegistry = null;\r\n\t\tthis.udfRuntimes = null;\r\n\t}\r\n\r\n\tgetFunctionName(subtype) {\r\n\t\t// compute the function name (camelCase), e.g. for `band-name` it will be `validateBandName`\r\n\t\treturn \"validate\" + subtype.replace(/(^|\\-)(\\w)/g, (a, b, char) => char.toUpperCase());\r\n\t}\r\n\r\n\tmakeSchema(schema, $async = false) {\r\n\t\tschema = Utils.deepClone(schema);\r\n\r\n\t\t// Make array of schemas to a anyOf schema\r\n\t\tif (Array.isArray(schema)) {\r\n\t\t\tschema = {\r\n\t\t\t\tanyOf: schema\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// Set applicable JSON Schema draft version if not already set\r\n\t\tif (typeof schema.$schema === 'undefined') {\r\n\t\t\tschema.$schema = \"http://json-schema.org/draft-07/schema#\";\r\n\t\t}\r\n\r\n\t\t// Set async execution\r\n\t\tif ($async) {\r\n\t\t\tschema.$async = true;\r\n\t\t\tif (Utils.isObject(schema.definitions)) {\r\n\t\t\t\tfor(let key in schema.definitions) {\r\n\t\t\t\t\tschema.definitions[key].$async = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn schema;\r\n\t}\r\n\r\n\tasync validateValue(value, schema) {\r\n\t\tschema = this.makeSchema(schema, true);\r\n\r\n\t\ttry {\r\n\t\t\tawait this.ajv.validate(schema, value);\r\n\t\t\treturn [];\r\n\t\t} catch (e) {\r\n\t\t\tif (Array.isArray(e.errors)) {\r\n\t\t\t\treturn e.errors.map(e => e.message);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthrow e;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tasync validateSubtype(subtype, data, schema) {\r\n\t\tif (typeof subtypeSchemas.definitions[subtype] !== 'undefined') {\r\n\t\t\tschema = this.makeSchema(subtypeSchemas, true);\r\n\t\t\t// Make the schema for this subtype the default schema to be checked\r\n\t\t\tschema = Object.assign({}, subtypeSchemas.definitions[subtype], schema);\r\n\t\t\tif (subtype === 'process-graph') {\r\n\t\t\t\t// Special case: all validation will be done in validateProcessGraph()\r\n\t\t\t\tdelete schema.required;\r\n\t\t\t\tdelete schema.properties;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tschema = this.makeSchema(schema, true);\r\n\t\t}\r\n\r\n\t\t// Remove subtype to avoid recursion\r\n\t\tdelete schema.subtype;\r\n\r\n\t\tlet validated = await this.ajv.validate(schema, data);\r\n\t\tlet funcName = this.getFunctionName(subtype);\r\n\t\tif (validated && typeof this[funcName] === 'function') {\r\n\t\t\treturn await this[funcName](data);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn validated;\r\n\t\t}\r\n\t}\r\n\r\n\tsetUdfRuntimes(udfRuntimes) {\r\n\t\tif (!Utils.isObject(udfRuntimes)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.udfRuntimes = udfRuntimes;\r\n\t}\r\n\r\n\tsetCollections(collections) {\r\n\t\tif (!Array.isArray(collections)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.collections = [];\r\n\t\tfor(let c of collections) {\r\n\t\t\tif (Utils.isObject(c) && typeof c.id === 'string') {\r\n\t\t\t\tthis.collections.push(c.id);\r\n\t\t\t}\r\n\t\t\telse if (typeof c === 'string') {\r\n\t\t\t\tthis.collections.push(c);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Expects API compatible file formats (see GET /file_formats).\r\n\tsetFileFormats(fileFormats) {\r\n\t\tif (!Utils.isObject(fileFormats)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor(let io of ['input', 'output']) {\r\n\t\t\tthis.fileFormats[io] = {};\r\n\t\t\tif (!Utils.isObject(fileFormats[io])) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tfor (let key in fileFormats[io]) {\r\n\t\t\t\tthis.fileFormats[io][key.toUpperCase()] = fileFormats[io][key];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tsetEpsgCodes(epsgCodes) {\r\n\t\tif (Array.isArray(epsgCodes)) {\r\n\t\t\tthis.epsgCodes = epsgCodes.map(v => parseInt(v, 10));\r\n\t\t}\r\n\t}\r\n\r\n\tasync validateCollectionId(data) {\r\n\t\tif (Array.isArray(this.collections) && !this.collections.find(c => c === data)) {\r\n\t\t\tthrow new Ajv.ValidationError([{\r\n\t\t\t\tmessage: \"Collection with id '\" + data + \"' doesn't exist.\"\r\n\t\t\t}]);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tasync validateUdfRuntime(data) {\r\n\t\tif (Utils.isObject(this.udfRuntimes) && !(data in this.udfRuntimes)) {\r\n\t\t\tthrow new Ajv.ValidationError([{\r\n\t\t\t\tmessage: \"UDF runtime '\" + data + \"' is not supported.\"\r\n\t\t\t}]);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tasync validateEpsgCode(data) {\r\n\t\tif (Array.isArray(this.epsgCodes)) {\r\n\t\t\tif (this.epsgCodes.includes(data)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Rough check for valid numbers as we don't want to maintain a full epsg code list in this repo.\r\n\t\telse if (data >= 2000) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tthrow new Ajv.ValidationError([{\r\n\t\t\tmessage: \"Invalid EPSG code '\" + data + \"' specified.\"\r\n\t\t}]);\r\n\t}\r\n\t\r\n\tasync validateInputFormat(data) {\r\n\t\tif (Utils.isObject(this.fileFormats.input) && !(data.toUpperCase() in this.fileFormats.input)) {\r\n\t\t\tthrow new Ajv.ValidationError([{\r\n\t\t\t\tmessage: \"Input format  '\" + data + \"' not supported.\"\r\n\t\t\t}]);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tasync validateOutputFormat(data) {\r\n\t\tif (Utils.isObject(this.fileFormats.output) && !(data.toUpperCase() in this.fileFormats.output)) {\r\n\t\t\tthrow new Ajv.ValidationError([{\r\n\t\t\t\tmessage: \"Output format  '\" + data + \"' not supported.\"\r\n\t\t\t}]);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tasync validateProjDefinition(data) {\r\n\t\t// To be overridden by end-user application, just doing a very basic check here.\r\n\t\tif (!data.toLowerCase().includes(\"+proj\")) {\r\n\t\t\tthrow new Ajv.ValidationError([{\r\n\t\t\t\tmessage: \"Invalid PROJ string specified (doesn't contain '+proj').\"\r\n\t\t\t}]);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tasync validateWkt2Definition(data) {\r\n\t\t// To be overridden by end-user application, just doing a very basic check here based on code ported over from proj4js\r\n\t\tvar codeWords = [\r\n\t\t\t'BOUNDCRS',\r\n\t\t\t'COMPOUNDCRS',\r\n\t\t\t'ENGCRS', 'ENGINEERINGCRS',\r\n\t\t\t'GEODCRS', 'GEODETICCRS',\r\n\t\t\t'GEOGCRS', 'GEOGRAPHICCRS',\r\n\t\t\t'PARAMETRICCRS',\r\n\t\t\t'PROJCRS', 'PROJECTEDCRS',\r\n\t\t\t'TIMECRS',\r\n\t\t\t'VERTCRS', 'VERTICALCRS'\r\n\t\t];\r\n\t\tdata = data.toUpperCase();\r\n\t\tif (!codeWords.some(word => data.indexOf(word) !== -1)) {\r\n\t\t\tthrow new Ajv.ValidationError([{\r\n\t\t\t\tmessage: \"Invalid WKT2 string specified.\"\r\n\t\t\t}]);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tasync validateTemporalInterval(data) {\r\n\t\tif (data[0] === null && data[1] === null) {\r\n\t\t\tthrow new Ajv.ValidationError([{\r\n\t\t\t\tmessage: \"Temporal interval must not be open on both ends.\"\r\n\t\t\t}]);\r\n\t\t}\r\n\t\telse if (data[0] !== null && data[1] !== null) {\r\n\t\t\tlet date1 = new Date(data[0]);\r\n\t\t\tlet date2 = new Date(data[1]);\r\n\t\t\tif (date2.getTime() < date1.getTime()) {\r\n\t\t\t\tthrow new Ajv.ValidationError([{\r\n\t\t\t\t\tmessage: \"The second timestamp can't be before the first timestamp.\"\r\n\t\t\t\t}]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tasync validateTemporalIntervals(data) {\r\n\t\tfor(let interval of data) {\r\n\t\t\t// throws if invalid\r\n\t\t\tawait this.validateTemporalInterval(interval);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tsetProcessGraphParser(processGraph) {\r\n\t\tthis.processGraph = processGraph;\r\n\t}\r\n\r\n\tasync validateProcessGraph(data) {\r\n\t\ttry {\r\n\t\t\tconst ProcessGraph = require('./processgraph');\r\n\t\t\tvar parser;\r\n\t\t\tif (data instanceof ProcessGraph) {\r\n\t\t\t\tparser = data;\r\n\t\t\t}\r\n\t\t\telse if (this.processGraph) {\r\n\t\t\t\tparser = this.processGraph.createProcessGraphInstance(data);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tparser = new ProcessGraph(data, null, this);\r\n\t\t\t}\r\n\t\t\tawait parser.validate();\r\n\t\t\treturn true;\r\n\t\t} catch (error) {\r\n\t\t\tthrow new Ajv.ValidationError([{\r\n\t\t\t\tmessage: error.message\r\n\t\t\t}]);\r\n\t\t}\r\n\t}\r\n\r\n\t// Checks whether the valueSchema is compatible to the paramSchema.\r\n\t// So would a value compatible with valueSchema be accepted by paramSchema?\r\n\t// allowValueAsElements: If true, it checks whether the valueSchema would be allowed as part of an array or object. For example number could be allowed as part of an array of numbers.\r\n\tstatic isSchemaCompatible(paramSchema, valueSchema, strict = false, allowValueAsElements = false) {\r\n\t\tvar paramSchemas = ProcessUtils.normalizeJsonSchema(paramSchema, true);\r\n\t\tvar valueSchemas = ProcessUtils.normalizeJsonSchema(valueSchema, true);\r\n\r\n\t\tvar compatible = paramSchemas.findIndex(ps => {\r\n\t\t\tfor(var i in valueSchemas) {\r\n\t\t\t\tvar vs = valueSchemas[i];\r\n\t\t\t\tif (typeof ps.type !== 'string' || (!strict && typeof vs.type !== 'string')) { // \"any\" type is always compatible\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\telse if (ps.type === vs.type || (allowValueAsElements && (ps.type === 'array' || ps.type === 'object')) || (ps.type === 'number' && vs.type === 'integer') || (!strict && ps.type === 'integer' && vs.type === 'number')) {\r\n\t\t\t\t\tif (ps.type === 'array' && Utils.isObject(ps.items) && Utils.isObject(vs.items))  {\r\n\t\t\t\t\t\tif (allowValueAsElements && JsonSchemaValidator.isSchemaCompatible(ps.items, vs, strict)) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (JsonSchemaValidator.isSchemaCompatible(ps.items, vs.items, strict)) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (ps.type === 'object' && Utils.isObject(ps.properties) && Utils.isObject(vs.properties)) {\r\n\t\t\t\t\t\t// ToDo: Check properties, required properties etc.\r\n\t\t\t\t\t\t// If allowValueAsElements is true, all types are allowed to be part of the object.\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Check subtypes\r\n\t\t\t\t\telse if (!strict && (typeof ps.subtype !== 'string' || typeof vs.subtype !== 'string')) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (typeof ps.subtype !== 'string') { // types without subtype always accepts the same type with a subtype\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (ps.subtype === vs.subtype) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t});\r\n\r\n\t\treturn compatible !== -1;\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports = JsonSchemaValidator;","module.exports = {\r\n\tsubtype: {\r\n\t\tmetaSchema: {\r\n\t\t\ttype: \"string\"\r\n\t\t}\r\n\t},\r\n\tparameters: {\r\n\t\tdependencies: [\r\n\t\t\t\"subtype\"\r\n\t\t],\r\n\t\tmetaSchema: {\r\n\t\t\ttype: \"array\",\r\n\t\t\titems: {\r\n\t\t\t\ttype: \"object\",\r\n\t\t\t\trequired: [\r\n\t\t\t\t\t\"name\",\r\n\t\t\t\t\t\"description\",\r\n\t\t\t\t\t\"schema\"\r\n\t\t\t\t],\r\n\t\t\t\tproperties: {\r\n\t\t\t\t\tname: {\r\n\t\t\t\t\t\ttype: \"string\",\r\n\t\t\t\t\t\tpattern: \"^\\\\w+$\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdescription: {\r\n\t\t\t\t\t\ttype: \"string\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\toptional: {\r\n\t\t\t\t\t\ttype: \"boolean\",\r\n\t\t\t\t\t\tdefault: false\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdeprecated: {\r\n\t\t\t\t\t\ttype: \"boolean\",\r\n\t\t\t\t\t\tdefault: false\r\n\t\t\t\t\t},\r\n\t\t\t\t\texperimental: {\r\n\t\t\t\t\t\ttype: \"boolean\",\r\n\t\t\t\t\t\tdefault: false\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdefault: {\r\n\t\t\t\t\t\t// Any type\r\n\t\t\t\t\t},\r\n\t\t\t\t\tschema: {\r\n\t\t\t\t\t\toneOf: [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\"$ref\": \"http://json-schema.org/draft-07/schema\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ttype: \"array\",\r\n\t\t\t\t\t\t\t\titems: {\r\n\t\t\t\t\t\t\t\t\t\"$ref\": \"http://json-schema.org/draft-07/schema\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\treturns: {\r\n\t\tdependencies: [\r\n\t\t\t\"subtype\"\r\n\t\t],\r\n\t\tmetaSchema: {\r\n\t\t\ttype: \"object\",\r\n\t\t\trequired: [\r\n\t\t\t\t\"schema\"\r\n\t\t\t],\r\n\t\t\tproperties: {\r\n\t\t\t\tdescription: {\r\n\t\t\t\t\ttype: \"string\"\r\n\t\t\t\t},\r\n\t\t\t\tschema: {\r\n\t\t\t\t\toneOf: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"$ref\": \"http://json-schema.org/draft-07/schema\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttype: \"array\",\r\n\t\t\t\t\t\t\titems: {\r\n\t\t\t\t\t\t\t\t\"$ref\": \"http://json-schema.org/draft-07/schema\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};","const BaseProcess = require('./process');\r\nconst ErrorList = require('./errorlist');\r\nconst JsonSchemaValidator = require('./jsonschema');\r\nconst ProcessGraph = require('./processgraph');\r\nconst ProcessGraphError = require('./error');\r\nconst ProcessGraphNode = require('./node');\r\nconst ProcessRegistry = require('./registry');\r\nconst Utils = require('./utils');\r\n\r\nmodule.exports = {\r\n\tBaseProcess,\r\n\tErrorList,\r\n\tJsonSchemaValidator,\r\n\tProcessGraph,\r\n\tProcessGraphError,\r\n\tProcessGraphNode,\r\n\tProcessRegistry,\r\n\tUtils\r\n};","const ProcessGraphError = require('./error');\r\nconst Utils = require('./utils');\r\n\r\n/**\r\n * A Process graph node.\r\n * \r\n * @class\r\n */\r\nclass ProcessGraphNode {\r\n\r\n\tconstructor(node, id, parent = null) {\r\n\t\tif (typeof id !== 'string' || id.length === 0) {\r\n\t\t\tthrow new ProcessGraphError('NodeIdInvalid');\r\n\t\t}\r\n\t\tif (!Utils.isObject(node)) {\r\n\t\t\tthrow new ProcessGraphError('NodeInvalid', {node_id: id});\r\n\t\t}\r\n\t\tif (typeof node.process_id !== 'string') {\r\n\t\t\tthrow new ProcessGraphError('ProcessIdMissing', {node_id: id});\r\n\t\t}\r\n\r\n\t\tthis.id = id;\r\n\t\tthis.processGraph = parent;\r\n\t\tthis.source = node;\r\n\t\tthis.process_id = node.process_id;\r\n\t\tthis.namespace = node.namespace || null;\r\n\t\tthis.arguments = Utils.isObject(node.arguments) ? Utils.deepClone(node.arguments) : {};\r\n\t\tthis.description = node.description || null;\r\n\t\tthis.isResultNode = node.result || false;\r\n\t\tthis.expectsFrom = []; // From which node do we expect results from\r\n\t\tthis.receivedFrom = []; // From which node have received results from so far\r\n\t\tthis.passesTo = [];\r\n\t\tthis.computedResult = undefined;\r\n\t}\r\n\r\n\ttoJSON() {\r\n\t\tlet args = Utils.mapObjectValues(this.arguments, arg => Utils.isObject(arg) && typeof arg.toJSON === 'function' ? arg.toJSON() : arg);\r\n\t\treturn Object.assign({}, this.source, {\r\n\t\t\tprocess_id: this.process_id,\r\n\t\t\tnamespace: this.namespace,\r\n\t\t\tdescription: this.description,\r\n\t\t\targuments: args,\r\n\t\t\tresult: this.isResultNode\r\n\t\t});\r\n\t}\r\n\r\n\tgetProcessGraph() {\r\n\t\treturn this.processGraph;\r\n\t}\r\n\r\n\tgetParent() {\r\n\t\tif (this.processGraph !== null) {\r\n\t\t\treturn this.processGraph.getParentNode();\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgetArgumentNames() {\r\n\t\treturn Object.keys(this.arguments);\r\n\t}\r\n\r\n\thasArgument(name) {\r\n\t\treturn typeof this.arguments[name] !== 'undefined';\r\n\t}\r\n\r\n\tgetArgumentType(name) {\r\n\t\treturn Utils.getType(this.getRawArgument(name));\r\n\t}\r\n\r\n\tgetRawArgument(name) {\r\n\t\treturn Utils.isObject(this.source.arguments) ? this.source.arguments[name] : undefined;\r\n\t}\r\n\r\n\tgetParsedArgument(name) {\r\n\t\treturn this.arguments[name];\r\n\t}\r\n\r\n\tgetArgument(name, defaultValue = undefined) {\r\n\t\tif (typeof this.arguments[name] === 'undefined') {\r\n\t\t\treturn defaultValue;\r\n\t\t}\r\n\t\treturn this.evaluateArgument(this.arguments[name]);\r\n\t}\r\n\r\n\tgetArgumentRefs(name) {\r\n\t\treturn Utils.getRefs(this.getRawArgument(name), false);\r\n\t}\r\n\r\n\tgetRefs() {\r\n\t\treturn Utils.getRefs(this.source.arguments, false);\r\n\t}\r\n\r\n\tgetProcessGraphParameterValue(name) {\r\n\t\t// 1. Check local parameter, then check parents\r\n\t\t// 2. Check parents\r\n\t\t// 3. Try to get default value\r\n\t\t// 4. Fail if no value is available\r\n\t\tlet defaultValue;\r\n\t\tlet pg = this.processGraph;\r\n\t\tdo {\r\n\t\t\tif (pg.hasArgument(name)) {\r\n\t\t\t\treturn pg.getArgument(name);\r\n\t\t\t}\r\n\t\t\tif (pg.hasParameterDefault(name)) {\r\n\t\t\t\tdefaultValue = pg.getParameterDefault(name);\r\n\t\t\t}\r\n\t\t\tpg = pg.getParent();\r\n\t\t} while (pg !== null);\r\n\r\n\t\tif (typeof defaultValue !== 'undefined') {\r\n\t\t\treturn defaultValue;\r\n\t\t}\r\n\r\n\t\tif (!this.processGraph.allowUndefinedParameterRefs) {\r\n\t\t\tthrow new ProcessGraphError('ProcessGraphParameterMissing', {\r\n\t\t\t\targument: name,\r\n\t\t\t\tnode_id: this.id,\r\n\t\t\t\tprocess_id: this.process_id,\r\n\t\t\t\tnamespace: this.namespace || 'n/a'\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tevaluateArgument(arg) {\r\n\t\tvar type = Utils.getType(arg);\r\n\t\tswitch(type) {\r\n\t\t\tcase 'result':\r\n\t\t\t\treturn this.processGraph.getNode(arg.from_node).getResult();\r\n\t\t\tcase 'callback':\r\n\t\t\t\treturn arg;\r\n\t\t\tcase 'parameter':\r\n\t\t\t\treturn this.getProcessGraphParameterValue(arg.from_parameter);\r\n\t\t\tcase 'array':\r\n\t\t\tcase 'object':\r\n\t\t\t\tlet copy = type === 'array' ? [] : {};\r\n\t\t\t\tfor(var i in arg) {\r\n\t\t\t\t\tcopy[i] = this.evaluateArgument(arg[i]);\r\n\t\t\t\t}\r\n\t\t\t\treturn copy;\r\n\t\t\tdefault:\r\n\t\t\t\treturn arg;\r\n\t\t}\r\n\t}\r\n\r\n\tisStartNode() {\r\n\t\treturn (this.expectsFrom.length === 0);\r\n\t}\r\n\r\n\taddPreviousNode(node) {\r\n\t\tif (!this.expectsFrom.find(other => other.id === node.id)) {\r\n\t\t\tthis.expectsFrom.push(node);\r\n\t\t}\r\n\t}\r\n\r\n\tgetPreviousNodes() {\r\n\t\t// Sort nodes to ensure a consistent execution order\r\n\t\treturn this.expectsFrom.sort((a,b) => a.id.localeCompare(b.id));\r\n\t}\r\n\r\n\taddNextNode(node) {\r\n\t\tif (!this.passesTo.find(other => other.id === node.id)) {\r\n\t\t\tthis.passesTo.push(node);\r\n\t\t}\r\n\t}\r\n\r\n\tgetNextNodes() {\r\n\t\t// Sort nodes to ensure a consistent execution order\r\n\t\treturn this.passesTo.sort((a,b) => a.id.localeCompare(b.id));\r\n\t}\r\n\r\n\treset() {\r\n\t\tthis.computedResult = undefined;\r\n\t\tthis.receivedFrom = [];\r\n\t}\r\n\r\n\tgetDescription() {\r\n\t\treturn this.description;\r\n\t}\r\n\r\n\tsetDescription(description) {\r\n\t\tif (typeof description === 'string') {\r\n\t\t\tthis.description = description;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.description = null;\r\n\t\t}\r\n\t}\r\n\r\n\tsetResult(result) {\r\n\t\tthis.computedResult = result;\r\n\t}\r\n\r\n\tgetResult() {\r\n\t\treturn this.computedResult;\r\n\t}\r\n\r\n\tsolveDependency(dependencyNode) {\r\n\t\tif (dependencyNode !== null && this.expectsFrom.includes(dependencyNode)) {\r\n\t\t\tthis.receivedFrom.push(dependencyNode);\r\n\t\t}\r\n\t\treturn (this.expectsFrom.length === this.receivedFrom.length); // all dependencies solved?\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports = ProcessGraphNode;","const JsonSchemaValidator = require('./jsonschema');\r\nconst ProcessGraphError = require('./error');\r\nconst ProcessUtils = require('@openeo/js-commons/src/processUtils');\r\nconst Utils = require('./utils');\r\n\r\n/**\r\n * Base Process class\r\n * \r\n * @class\r\n */\r\nclass BaseProcess {\r\n\r\n\tconstructor(spec) {\r\n\t\t// Make properties easily accessible \r\n\t\tObject.assign(this, spec);\r\n\r\n\t\tif (typeof this.id !== 'string') {\r\n\t\t\tthrow new Error(\"Invalid process specified, no id given.\");\r\n\t\t}\r\n\t\tif (!Array.isArray(this.parameters)) {\r\n\t\t\tthis.parameters = [];\r\n\t\t}\r\n\t}\r\n\r\n\ttoJSON() {\r\n\t\treturn Utils.omitFromObject(this, [\"validate\", \"validateArgument\", \"execute\", \"test\"]);\r\n\t}\r\n\r\n\tasync validate(node) {\r\n\t\t// Check for arguments we don't support and throw error\r\n\t\tlet unsupportedArgs = node.getArgumentNames().filter(name => this.parameters.findIndex(p => p.name === name) === -1);\r\n\t\tif (unsupportedArgs.length > 0) {\r\n\t\t\tthrow new ProcessGraphError('ProcessArgumentUnsupported', {\r\n\t\t\t\tprocess: this.id,\r\n\t\t\t\tnamespace: this.namespace || 'n/a',\r\n\t\t\t\targuments: unsupportedArgs\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Validate against JSON Schema\r\n\t\tfor(let key in this.parameters) {\r\n\t\t\tlet param = this.parameters[key];\r\n\r\n\t\t\tif (!node.hasArgument(param.name)) {\r\n\t\t\t\tif (!param.optional) {\r\n\t\t\t\t\tthrow new ProcessGraphError('ProcessArgumentRequired', {\r\n\t\t\t\t\t\tprocess: this.id,\r\n\t\t\t\t\t\tnamespace: this.namespace || 'n/a',\r\n\t\t\t\t\t\targument: param.name\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet arg = node.getParsedArgument(param.name);\r\n\t\t\tlet rawArg = node.getRawArgument(param.name);\r\n\t\t\tawait this.validateArgument(arg, rawArg, node, param);\r\n\t\t}\r\n\t}\r\n\r\n\tasync validateArgument(arg, rawArg, node, param, path = null) {\r\n\t\tif (!path) {\r\n\t\t\tpath = param.name;\r\n\t\t}\r\n\t\tlet argType = Utils.getType(arg);\r\n\t\tlet pg = node.getProcessGraph();\r\n\t\tswitch(argType) {\r\n\t\t\tcase 'parameter':\r\n\t\t\t\t// Validate callback parameters (no value available yet)\r\n\t\t\t\tlet callbackParam = pg.getCallbackParameter(arg.from_parameter);\r\n\t\t\t\tif (callbackParam) {\r\n\t\t\t\t\tif (!JsonSchemaValidator.isSchemaCompatible(param.schema, callbackParam.schema)) {\r\n\t\t\t\t\t\tthrow new ProcessGraphError('ProcessArgumentInvalid', {\r\n\t\t\t\t\t\t\tprocess: this.id,\r\n\t\t\t\t\t\t\tnamespace: this.namespace || 'n/a',\r\n\t\t\t\t\t\t\targument: path,\r\n\t\t\t\t\t\t\treason: \"Schema for parameter '\" + arg.from_parameter + \"' not compatible with reference\"\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Validate all other parameters (value must be available if allowUndefinedParameterRefs is false)\r\n\t\t\t\tlet value = node.getProcessGraphParameterValue(arg.from_parameter);\r\n\t\t\t\tif (typeof value === 'undefined' && !pg.allowUndefinedParameterRefs) {\r\n\t\t\t\t\tthrow new ProcessGraphError('ProcessGraphParameterMissing', {\r\n\t\t\t\t\t\targument: arg.from_parameter,\r\n\t\t\t\t\t\tnode_id: node.id,\r\n\t\t\t\t\t\tprocess_id: node.process_id,\r\n\t\t\t\t\t\tnamespace: node.namespace || 'n/a'\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet parameter = pg.getProcessParameter(arg.from_parameter);\r\n\t\t\t\tif (Utils.isObject(parameter) && parameter.schema) {\r\n\t\t\t\t\tif (typeof value !== 'undefined') {\r\n\t\t\t\t\t\tawait this.validateArgument(value, rawArg, node, parameter, path);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!JsonSchemaValidator.isSchemaCompatible(param.schema, parameter.schema)) {\r\n\t\t\t\t\t\tthrow new ProcessGraphError('ProcessArgumentInvalid', {\r\n\t\t\t\t\t\t\tprocess: this.id,\r\n\t\t\t\t\t\t\tnamespace: this.namespace || 'n/a',\r\n\t\t\t\t\t\t\targument: path,\r\n\t\t\t\t\t\t\treason: \"Schema for parameter '\" + arg.from_parameter + \"' not compatible\"\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// else: Parameter not available, everything is valid\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'result':\r\n\t\t\t\tlet resultNode = pg.getNode(arg.from_node);\r\n\t\t\t\tlet process = pg.getProcess(resultNode);\r\n\t\t\t\tif (!JsonSchemaValidator.isSchemaCompatible(param.schema, process.returns.schema)) {\r\n\t\t\t\t\tthrow new ProcessGraphError('ProcessArgumentInvalid', {\r\n\t\t\t\t\t\tprocess: this.id,\r\n\t\t\t\t\t\tnamespace: this.namespace || 'n/a',\r\n\t\t\t\t\t\targument: path,\r\n\t\t\t\t\t\treason: \"Schema for result '\" + arg.from_node + \"' not compatible\"\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'array':\r\n\t\t\tcase 'object':\r\n\t\t\t\tlet schemas = ProcessUtils.normalizeJsonSchema(param.schema).filter(schema => ['array', 'object'].includes(schema.type));\r\n\t\t\t\t// Check if it is expected to be a process. If yes, do normal validation. Handles the issue discussed in https://github.com/Open-EO/openeo-js-processgraphs/issues/4\r\n\t\t\t\tlet isProcessGraphSchema = (schemas.length === 1 && schemas[0].subtype === 'process-graph');\r\n\t\t\t\tif (Utils.containsRef(rawArg) && !isProcessGraphSchema) {\r\n\t\t\t\t\t// This tries to at least be compliant to one of the element schemas\r\n\t\t\t\t\t// It's better than validating nothing, but it's still not 100% correct\r\n\t\t\t\t\tfor(var key in arg) {\r\n\t\t\t\t\t\tlet elementSchema = schemas.map(schema =>  ProcessUtils.getElementJsonSchema(schema, key)).filter(schema => Object.keys(schema).length); // jshint ignore:line\r\n\t\t\t\t\t\tif (elementSchema.length > 0) {\r\n\t\t\t\t\t\t\tlet validated = 0;\r\n\t\t\t\t\t\t\tlet lastError = null;\r\n\t\t\t\t\t\t\tfor(let schema of elementSchema) {\r\n\t\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\t\t// ToDo: Check against JSON schema required property\r\n\t\t\t\t\t\t\t\t\tawait this.validateArgument(arg[key], rawArg[key], node, {schema}, path + '/' + key);\r\n\t\t\t\t\t\t\t\t\tvalidated++;\r\n\t\t\t\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\t\t\t\tlastError = error;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (validated === 0 && lastError) {\r\n\t\t\t\t\t\t\t\tthrow lastError;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// Use default behavior below, so no break; needed\r\n\t\t\t\t} // jshint ignore:line\r\n\t\t\tdefault:\r\n\t\t\t\tlet validator = node.getProcessGraph().getJsonSchemaValidator();\r\n\t\t\t\t// Validate against JSON schema\r\n\t\t\t\tlet errors = await validator.validateValue(arg, param.schema);\r\n\t\t\t\tif (errors.length > 0) {\r\n\t\t\t\t\tthrow new ProcessGraphError('ProcessArgumentInvalid', {\r\n\t\t\t\t\t\tprocess: this.id,\r\n\t\t\t\t\t\tnamespace: this.namespace || 'n/a',\r\n\t\t\t\t\t\targument: path,\r\n\t\t\t\t\t\treason: errors\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/* istanbul ignore next */\r\n\tasync execute(/*node*/) {\r\n\t\tthrow new Error(`execute not implemented yet for process '${this.id}' (namespace: ${this.namespace || 'n/a'})`);\r\n\t}\r\n\r\n\t/* istanbul ignore next */\r\n\ttest() {\r\n\t\t// Run the tests from the examples\r\n\t\tthrow new Error(`test not implemented yet for process '${this.id}' (namespace: ${this.namespace || 'n/a'})`);\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports =  BaseProcess;","const BaseProcess = require('./process');\r\nconst ErrorList = require('./errorlist');\r\nconst JsonSchemaValidator = require('./jsonschema');\r\nconst ProcessGraphError = require('./error');\r\nconst ProcessGraphNode = require('./node');\r\nconst Utils = require('./utils');\r\nconst ProcessUtils = require('@openeo/js-commons/src/processUtils.js');\r\n\r\nconst processKeys = [\r\n\t'id',\r\n\t'summary',\r\n\t'description',\r\n\t'categories',\r\n\t'parameters',\r\n\t'returns',\r\n\t'deprecated',\r\n\t'experimental',\r\n\t'exceptions',\r\n\t'examples',\r\n\t'links',\r\n\t'process_graph'\r\n];\r\n\r\n/**\r\n * Process parser, validator and executor.\r\n * \r\n * @class\r\n */\r\nclass ProcessGraph {\r\n\r\n\t// ToDo: Also parse and validate other parts of the process, e.g. id, parameters, etc.\r\n\r\n\tconstructor(process, processRegistry = null, jsonSchemaValidator = null) {\r\n\t\tthis.process = process;\r\n\t\tthis.nodes = {};\r\n\t\tthis.startNodes = [];\r\n\t\tthis.resultNode = null;\r\n\t\tthis.children = [];\r\n\t\tthis.parentNode = null;\r\n\t\tthis.parsed = false;\r\n\t\tthis.validated = false;\r\n\t\tthis.errors = new ErrorList();\r\n\t\tthis.callbackParameters = [];\r\n\t\t// Sub process graphs need to copy these:\r\n\t\tthis.processRegistry = processRegistry;\r\n\t\tthis.jsonSchemaValidator = jsonSchemaValidator;\r\n\t\tthis.arguments = {};\r\n\t\tthis.allowEmptyGraph = false;\r\n\t\tthis.fillProcessParameters = false;\r\n\t\tthis.allowUndefinedParameterRefs = true;\r\n\t}\r\n\r\n\ttoJSON() {\r\n\t\treturn this.process;\r\n\t}\r\n\r\n\tgetJsonSchemaValidator() {\r\n\t\tif (this.jsonSchemaValidator === null) {\r\n\t\t\tthis.jsonSchemaValidator = this.createJsonSchemaValidatorInstance();\r\n\t\t}\r\n\t\tthis.jsonSchemaValidator.setProcessGraphParser(this);\r\n\t\treturn this.jsonSchemaValidator;\r\n\t}\r\n\r\n\tcreateJsonSchemaValidatorInstance() {\r\n\t\treturn new JsonSchemaValidator();\r\n\t}\r\n\r\n\tcreateNodeInstance(nodeObj, id, parent) {\r\n\t\treturn new ProcessGraphNode(nodeObj, id, parent);\r\n\t}\r\n\r\n\tcreateProcessGraphInstance(process) {\r\n\t\tlet pg = new ProcessGraph(process, this.processRegistry, this.getJsonSchemaValidator());\r\n\t\treturn this.copyProcessGraphInstanceProperties(pg);\r\n\t}\r\n\r\n\tcreateProcessInstance(process) {\r\n\t\treturn new BaseProcess(process);\r\n\t}\r\n\r\n\tcopyProcessGraphInstanceProperties(pg) {\r\n\t\tpg.allowEmptyGraph = this.allowEmptyGraph;\r\n\t\tpg.fillProcessParameters = this.fillProcessParameters;\r\n\t\tpg.allowUndefinedParameterRefs = this.allowUndefinedParameterRefs;\r\n\t\treturn pg;\r\n\t}\r\n\r\n\tcreateChildProcessGraph(process, node, parameterPath = []) {\r\n\t\tvar pg = this.createProcessGraphInstance(process);\r\n\t\tpg.setArguments(this.arguments);\r\n\t\tpg.setParentNode(node);\r\n\t\tif (parameterPath.length > 0) {\r\n\t\t\tlet parameterName = parameterPath.shift();\r\n\t\t\tpg.setCallbackParameters(ProcessUtils.getCallbackParametersForProcess(pg.getParentProcess(), parameterName, parameterPath));\r\n\t\t}\r\n\t\tpg.parse();\r\n\t\tthis.children.push(pg);\r\n\t\treturn pg;\r\n\t}\r\n\r\n\tgetParentNode() {\r\n\t\treturn this.parentNode;\r\n\t}\r\n\r\n\tgetParent() {\r\n\t\tif (this.parentNode) {\r\n\t\t\treturn this.parentNode.getProcessGraph();\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tsetParentNode(parent) {\r\n\t\tif (parent instanceof ProcessGraphNode) {\r\n\t\t\tthis.parentNode = parent;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.parentNode = null;\r\n\t\t}\r\n\t}\r\n\r\n\tisValid() {\r\n\t\treturn this.validated && this.errors.count() === 0;\r\n\t}\r\n\r\n\taddError(error) {\r\n\t\tthis.errors.add(error);\r\n\t}\r\n\r\n\tallowUndefinedParameters(allow = true) {\r\n\t\tif (!allow) {\r\n\t\t\tthis.fillProcessParameters = false;\r\n\t\t}\r\n\t\tthis.allowUndefinedParameterRefs = allow;\r\n\t}\r\n\r\n\tfillUndefinedParameters(fill = true) {\r\n\t\tif (fill) {\r\n\t\t\tthis.allowUndefinedParameterRefs = true;\r\n\t\t}\r\n\t\tthis.fillProcessParameters = fill;\r\n\t}\r\n\r\n\tallowEmpty(allow = true) {\r\n\t\tthis.allowEmptyGraph = allow;\r\n\t}\r\n\r\n\tparse() {\r\n\t\tif (this.parsed) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst makeError = (errorId) => {\r\n\t\t\tif (this.getParentProcessId()) {\r\n\t\t\t\treturn new ProcessGraphError(\r\n\t\t\t\t\terrorId + 'Callback',\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprocess_id: this.getParentProcessId(),\r\n\t\t\t\t\t\tnode_id: this.parentNode ? this.parentNode.id : 'N/A'\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn new ProcessGraphError(errorId);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif (!Utils.isObject(this.process)) {\r\n\t\t\tthrow makeError('ProcessMissing');\r\n\t\t}\r\n\r\n\t\tif (Utils.size(this.process.process_graph) === 0) {\r\n\t\t\tif (this.allowEmptyGraph) {\r\n\t\t\t\tlet hasProcessKey = Object.keys(this.process).find(key => processKeys.includes(key));\r\n\t\t\t\tif (Utils.size(this.process) === 0 || hasProcessKey) {\r\n\t\t\t\t\tthis.parsed = true;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthrow makeError('ProcessGraphMissing');\r\n\t\t}\r\n\r\n\t\tthis.nodes = Utils.mapObjectValues(this.process.process_graph, (pg, id) => this.createNodeInstance(pg, id, this));\r\n\r\n\t\tfor(let id in this.nodes) {\r\n\t\t\tvar node = this.nodes[id];\r\n\t\t\tif (node.isResultNode) {\r\n\t\t\t\tif (this.resultNode !== null) {\r\n\t\t\t\t\tthrow makeError('MultipleResultNodes');\r\n\t\t\t\t}\r\n\t\t\t\tthis.resultNode = node;\r\n\t\t\t}\r\n\r\n\t\t\tthis.parseNodeArguments(id, node);\r\n\t\t}\r\n\t\tif (this.resultNode === null) {\r\n\t\t\tthrow makeError('ResultNodeMissing');\r\n\t\t}\r\n\r\n\t\t// Find/Cache start nodes, only possible after parseNodeArguments have been called for all nodes\r\n\t\t// Sort nodes to ensure a consistent execution order\r\n\t\tthis.startNodes = Object.values(this.nodes).filter(node => node.isStartNode()).sort((a,b) => a.id.localeCompare(b.id));\r\n\t\tif (this.startNodes.length === 0) {\r\n\t\t\tthrow makeError('StartNodeMissing');\r\n\t\t}\r\n\r\n\t\tthis.parsed = true;\r\n\t}\r\n\r\n\tasync validate(throwOnErrors = true) {\r\n\t\tif (this.validated) {\r\n\t\t\tif (throwOnErrors && this.errors.count() > 0) {\r\n\t\t\t\tthrow this.errors.first();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this.errors;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.validated = true;\r\n\r\n\t\t// Parse\r\n\t\ttry {\r\n\t\t\tthis.parse();\r\n\t\t} catch (error) {\r\n\t\t\tthis.addError(error);\r\n\t\t\tif (throwOnErrors) {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Validate\r\n\t\tawait this.validateNodes(this.getStartNodes(), throwOnErrors);\r\n\t\treturn this.errors;\r\n\t}\r\n\r\n\tasync execute(args = null) {\r\n\t\tthis.allowUndefinedParameters(false);\r\n\t\tthis.setArguments(args);\r\n\t\tawait this.validate();\r\n\t\tthis.reset();\r\n\t\tawait this.executeNodes(this.getStartNodes());\r\n\t\treturn this.getResultNode();\r\n\t}\r\n\r\n\tasync validateNodes(nodes, throwOnErrors, previousNode = null) {\r\n\t\tif (nodes.length === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar promises = nodes.map(async (node) => {\r\n\t\t\t// Validate this node after all dependencies are available\r\n\t\t\tif (!node.solveDependency(previousNode)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Get process and validate\r\n\t\t\ttry {\r\n\t\t\t\tawait this.validateNode(node);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tif (e instanceof ErrorList) {\r\n\t\t\t\t\tthis.errors.merge(e);\r\n\t\t\t\t\tif (throwOnErrors) {\r\n\t\t\t\t\t\tthrow e.first();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.addError(e);\r\n\t\t\t\t\tif (throwOnErrors) {\r\n\t\t\t\t\t\tthrow e;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tawait this.validateNodes(node.getNextNodes(), throwOnErrors, node);\r\n\t\t});\r\n\r\n\t\tawait Promise.all(promises);\r\n\t}\r\n\r\n\tasync validateNode(node) {\r\n\t\tvar process = this.getProcess(node);\r\n\t\tif (process) {\r\n\t\t\treturn await process.validate(node);\r\n\t\t}\r\n\t}\r\n\r\n\tasync executeNodes(nodes, previousNode = null) {\r\n\t\tif (nodes.length === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar promises = nodes.map(async (node) => {\r\n\t\t\t// Execute this node after all dependencies are available\r\n\t\t\tif (!node.solveDependency(previousNode)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar result = await this.executeNode(node);\r\n\t\t\tnode.setResult(result);\r\n\r\n\t\t\t// Execute next nodes in chain\r\n\t\t\tawait this.executeNodes(node.getNextNodes(), node);\r\n\r\n\t\t});\r\n\r\n\t\treturn await Promise.all(promises);\r\n\t}\r\n\r\n\tasync executeNode(node) {\r\n\t\tvar process = this.getProcess(node);\r\n\t\treturn await process.execute(node);\r\n\t}\r\n\r\n\tparseNodeArguments(nodeId, node, parameterPath = [], args = undefined) {\r\n\t\tif (typeof args === 'undefined') {\r\n\t\t\targs = node.arguments;\r\n\t\t}\r\n\t\tfor(let argumentName in args) {\r\n\t\t\tlet arg = args[argumentName];\r\n\t\t\t// Make a \"path\" that consists of the parameter name and the keys of arrays/objects, if applicable.\r\n\t\t\tlet path = parameterPath.concat([argumentName]);\r\n\t\t\tlet type = Utils.getType(arg);\r\n\t\t\tswitch(type) {\r\n\t\t\t\tcase 'result':\r\n\t\t\t\t\t// Connect the nodes with each other\r\n\t\t\t\t\tvar prevNode = this.nodes[arg.from_node];\r\n\t\t\t\t\tif (typeof prevNode === 'undefined') {\r\n\t\t\t\t\t\tthrow new ProcessGraphError('ReferencedNodeMissing', {node_id: arg.from_node});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tnode.addPreviousNode(prevNode);\r\n\t\t\t\t\tprevNode.addNextNode(node);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'callback':\r\n\t\t\t\t\t// Create a new process graph for the callback\r\n\t\t\t\t\targs[argumentName] = this.createChildProcessGraph(arg, node, path);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'parameter':\r\n\t\t\t\t\t// If we found a parameter and it's not defined yet (includes that it's not a callback parameter) and fillProcessParameters is set to true: Add it to the process spec.\r\n\t\t\t\t\tif (this.fillProcessParameters && !this.hasParameter(arg.from_parameter)) {\r\n\t\t\t\t\t\tthis.addProcessParameter(arg.from_parameter);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'array':\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\t// Parse everything hidden in arrays and objects\r\n\t\t\t\t\tthis.parseNodeArguments(nodeId, node, path, arg);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tsetCallbackParameters(parameters) {\r\n\t\tthis.callbackParameters = parameters;\r\n\t}\r\n\r\n\tgetCallbackParameter(name) {\r\n\t\treturn this.getCallbackParameters().find(p => p.name === name) || null;\r\n\t}\r\n\r\n\tgetCallbackParameters() {\t\t\r\n\t\treturn this.callbackParameters;\r\n\t}\r\n\r\n\taddProcessParameter(name, description = '', schema = {}) {\r\n\t\tif (!Array.isArray(this.process.parameters)) {\r\n\t\t\tthis.process.parameters = [];\r\n\t\t}\r\n\t\tthis.process.parameters.push({\r\n\t\t\tname, description, schema\r\n\t\t});\r\n\t}\r\n\r\n\thasParameterDefault(name) {\r\n\t\treturn this.getParameterDefault(name) !== undefined;\r\n\t}\r\n\r\n\tgetParameterDefault(name) {\r\n\t\tlet param = this.getParameter(name);\r\n\t\tif (param !== null) {\r\n\t\t\treturn param.default;\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\thasParameter(name) {\r\n\t\treturn this.getParameter(name) !== null;\r\n\t}\r\n\r\n\tgetProcessParameters(includeUndefined = false) {\r\n\t\tlet parameters = Array.isArray(this.process.parameters) ? this.process.parameters.slice(0) : [];\r\n\t\tif (includeUndefined && !this.fillProcessParameters) {\r\n\t\t\tfor (let key in this.nodes) {\r\n\t\t\t\tlet refs = this.nodes[key].getRefs();\r\n\t\t\t\tfor(let ref of refs) {\r\n\t\t\t\t\tif (ref.from_parameter && !parameters.find(other => other.name === ref.from_parameter)) { // jshint ignore:line\r\n\t\t\t\t\t\tparameters.push({\r\n\t\t\t\t\t\t\tname: ref.from_parameter,\r\n\t\t\t\t\t\t\tdescription: '',\r\n\t\t\t\t\t\t\tschema: {}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn parameters;\r\n\t}\r\n\r\n\tgetProcessParameter(name, includeUndefined = false) {\r\n\t\treturn this.getProcessParameters(includeUndefined).find(p => p.name === name) || null;\r\n\t}\r\n\r\n\tgetParameter(name) {\r\n\t\tlet callbackParam = this.getCallbackParameter(name);\r\n\t\tlet processParam = this.getProcessParameter(name);\r\n\t\tif (callbackParam && processParam) {\r\n\t\t\t// ToDo: Take https://github.com/Open-EO/openeo-api/issues/332 into account\r\n\t\t\treturn Object.assign({}, callbackParam, processParam);\r\n\t\t}\r\n\t\telse if (callbackParam) {\r\n\t\t\treturn callbackParam;\r\n\t\t}\r\n\t\telse if (processParam) {\r\n\t\t\treturn processParam;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tsetArguments(args) {\r\n\t\tif (Utils.isObject(args)) {\r\n\t\t\tObject.assign(this.arguments, args);\r\n\t\t}\r\n\t}\r\n\r\n\thasArgument(name) {\r\n\t\treturn typeof this.arguments[name] !== 'undefined';\r\n\t}\r\n\r\n\tgetArgument(name) {\r\n\t\treturn this.arguments[name];\r\n\t}\r\n\r\n\treset() {\r\n\t\tfor(var id in this.nodes) {\r\n\t\t\tthis.nodes[id].reset();\r\n\t\t}\r\n\t\tthis.children.forEach(child => child.reset());\r\n\t}\r\n\r\n\tgetResultNode() {\r\n\t\treturn this.resultNode;\r\n\t}\r\n\r\n\tgetStartNodes() {\r\n\t\treturn this.startNodes;\r\n\t}\r\n\r\n\tgetStartNodeIds() {\r\n\t\treturn this.startNodes.map(node => node.id);\r\n\t}\r\n\r\n\tgetNode(nodeId) {\r\n\t\treturn nodeId in this.nodes ? this.nodes[nodeId] : null;\r\n\t}\r\n\r\n\tgetNodeCount() {\r\n\t\treturn Utils.size(this.nodes);\r\n\t}\r\n\r\n\tgetNodes() {\r\n\t\treturn this.nodes;\r\n\t}\r\n\r\n\tgetErrors() {\r\n\t\treturn this.errors;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the process for the given process ID or node.\r\n\t * \r\n\t * @param {ProcessGraphNode|string} process \r\n\t * @param {?string} [namespace=null]\r\n\t * @returns {object|null}\r\n\t * @throws {ProcessGraphError} - ProcessUnsupported\r\n\t */\r\n\tgetProcess(process, namespace = null) {\r\n\t\tif (this.processRegistry === null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tlet id;\r\n\t\tif (process instanceof ProcessGraphNode) {\r\n\t\t\tid = process.process_id;\r\n\t\t\tnamespace = process.namespace;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tid = process;\r\n\t\t}\r\n\t\tlet spec = this.processRegistry.get(id, namespace);\r\n\t\tif (spec === null) {\r\n\t\t\tthrow new ProcessGraphError('ProcessUnsupported', {process: id, namespace: namespace || 'n/a'});\r\n\t\t}\r\n\t\treturn this.createProcessInstance(spec);\r\n\t}\r\n\r\n\tgetParentProcessId() {\r\n\t\tif(this.getParentNode()) {\r\n\t\t\treturn this.getParentNode().process_id;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgetParentProcess() {\r\n\t\tif (this.processRegistry === null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn this.processRegistry.get(this.getParentProcessId());\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports = ProcessGraph;","const CommonProcessRegistry = require('@openeo/js-commons/src/processRegistry');\r\n\r\n/**\r\n * Central registry for processes.\r\n * \r\n * Implementation has been moved to @openeo/js-commons.\r\n * This wrapper here is only available for backward compatibility.\r\n * \r\n * @todo Remove in 2.0.0.\r\n * @augments CommonProcessRegistry\r\n * @class\r\n * @deprecated\r\n */\r\nclass ProcessRegistry extends CommonProcessRegistry {\r\n\r\n}\r\n\r\nmodule.exports = ProcessRegistry;","const CommonUtils = require('@openeo/js-commons/src/utils.js');\r\n\r\n/**\r\n * Utilities\r\n * \r\n * @class\r\n */\r\nclass Utils extends CommonUtils {\r\n\r\n\t/**\r\n\t * Checks whether a value contains references (from_parameter, from_node).\r\n\t * \r\n\t * Doesn't return references from ProcessGraph objects if checkCallbacks is set to true.\r\n\t * \r\n\t * @param {*} value \r\n\t * @param {boolean} checkProcess - Set to `false` to not check for refs in a process if provided as value.\r\n\t * @param {boolean} checkCallbacks - Set to `true` to also check for refs in callbacks. Only applies if `checkProcess` is true.\r\n\t * @returns {boolean}\r\n\t */\r\n\tstatic containsRef(value, checkProcess = true, checkCallbacks = false) {\r\n\t\tlet type = Utils.getType(value);\r\n\t\tswitch(type) {\r\n\t\t\tcase 'result':\r\n\t\t\tcase 'parameter':\r\n\t\t\t\treturn true;\r\n\t\t\tcase 'callback':\r\n\t\t\t\tif (checkProcess && Utils.containsRef(value.process_graph, checkCallbacks, checkCallbacks)) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'array':\r\n\t\t\tcase 'object':\r\n\t\t\t\tfor(let key in value) {\r\n\t\t\t\t\tif (Utils.containsRef(value[key], checkProcess, checkCallbacks)) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns all distinct references (from_parameter, from_node) contained in a value.\r\n\t * \r\n\t * Doesn't return references from ProcessGraph objects if checkCallbacks is set to true.\r\n\t * \r\n\t * @param {*} value \r\n\t * @param {boolean} getFromProcess - Set to `false` to not get refs from a process if provided as value.\r\n\t * @param {boolean} getFromCallbacks - Set to `true` to also include refs in callbacks. Only applies if `getFromProcess` is true.\r\n\t * @returns {boolean}\r\n\t */\r\n\tstatic getRefs(value, getFromProcess = true, getFromCallbacks = false) {\r\n\t\tvar store = [];\r\n\t\tvar type = Utils.getType(value);\r\n\t\tswitch(type) {\r\n\t\t\tcase 'result':\r\n\t\t\tcase 'parameter':\r\n\t\t\t\tstore.push(value);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'callback':\r\n\t\t\t\tif (getFromProcess) {\r\n\t\t\t\t\tstore = store.concat(Utils.getRefs(value.process_graph, getFromCallbacks, getFromCallbacks));\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'array':\r\n\t\t\tcase 'object':\r\n\t\t\t\tfor(var key in value) {\r\n\t\t\t\t\tstore = store.concat(Utils.getRefs(value[key], getFromProcess, getFromCallbacks));\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\treturn Utils.unique(store, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the type of the value.\r\n\t * \r\n\t * Similar to typeof, but gives more details for objects (array, parameter, callback, result, null, object).\r\n\t * \r\n\t * @param {*} value \r\n\t * @returns {string}\r\n\t */\r\n\tstatic getType(value) {\r\n\t\tconst ProcessGraph = require('./processgraph');\r\n\t\tif (typeof value === 'object') {\r\n\t\t\tif (value === null) {\r\n\t\t\t\treturn 'null';\r\n\t\t\t}\r\n\t\t\telse if (Array.isArray(value)) {\r\n\t\t\t\treturn 'array';\r\n\t\t\t}\r\n\t\t\telse if(value.hasOwnProperty(\"process_graph\") || value instanceof ProcessGraph) {\r\n\t\t\t\treturn 'callback';\r\n\t\t\t}\r\n\t\t\telse if(value.hasOwnProperty(\"from_node\")) {\r\n\t\t\t\treturn 'result';\r\n\t\t\t}\r\n\t\t\telse if(value.hasOwnProperty(\"from_parameter\")) {\r\n\t\t\t\treturn 'parameter';\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 'object';\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn (typeof value);\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports = Utils;"],"names":["Utils","MESSAGES","ProcessGraphError","Error","constructor","codeOrMsg","variables","super","this","code","message","replacePlaceholders","replace","toJSON","module","exports","ErrorList","errors","first","last","length","merge","errorList","concat","getAll","add","error","push","count","map","e","getMessage","msg","i","parseInt","trim","Ajv","ProcessUtils","keywords","geoJsonSchema","subtypeSchemas","JsonSchemaValidator","ajv","schemaId","format","addUsedSchema","addSchema","addKeyword","Object","assign","parameters","valid","returns","subtype","validate","async","data","schema","validateSubtype","collections","epsgCodes","fileFormats","input","output","processRegistry","udfRuntimes","getFunctionName","a","b","char","toUpperCase","makeSchema","$async","deepClone","Array","isArray","anyOf","$schema","isObject","definitions","key","validateValue","value","required","properties","validated","funcName","setUdfRuntimes","setCollections","c","id","setFileFormats","io","setEpsgCodes","v","validateCollectionId","find","ValidationError","validateUdfRuntime","validateEpsgCode","includes","validateInputFormat","validateOutputFormat","validateProjDefinition","toLowerCase","validateWkt2Definition","codeWords","some","word","indexOf","validateTemporalInterval","date1","Date","date2","getTime","validateTemporalIntervals","interval","setProcessGraphParser","processGraph","validateProcessGraph","ProcessGraph","parser","createProcessGraphInstance","isSchemaCompatible","paramSchema","valueSchema","strict","allowValueAsElements","paramSchemas","normalizeJsonSchema","valueSchemas","compatible","findIndex","ps","vs","type","items","metaSchema","dependencies","name","pattern","description","optional","default","deprecated","experimental","oneOf","BaseProcess","ProcessGraphNode","ProcessRegistry","node","parent","node_id","process_id","source","namespace","arguments","isResultNode","result","expectsFrom","receivedFrom","passesTo","computedResult","undefined","args","mapObjectValues","arg","getProcessGraph","getParent","getParentNode","getArgumentNames","keys","hasArgument","getArgumentType","getType","getRawArgument","getParsedArgument","getArgument","defaultValue","evaluateArgument","getArgumentRefs","getRefs","getProcessGraphParameterValue","pg","hasParameterDefault","getParameterDefault","allowUndefinedParameterRefs","argument","getNode","from_node","getResult","from_parameter","copy","isStartNode","addPreviousNode","other","getPreviousNodes","sort","localeCompare","addNextNode","getNextNodes","reset","getDescription","setDescription","setResult","solveDependency","dependencyNode","spec","omitFromObject","unsupportedArgs","filter","p","process","param","rawArg","validateArgument","path","argType","callbackParam","getCallbackParameter","reason","parameter","getProcessParameter","resultNode","getProcess","schemas","isProcessGraphSchema","containsRef","elementSchema","getElementJsonSchema","lastError","validator","getJsonSchemaValidator","execute","test","processKeys","jsonSchemaValidator","nodes","startNodes","children","parentNode","parsed","callbackParameters","allowEmptyGraph","fillProcessParameters","createJsonSchemaValidatorInstance","createNodeInstance","nodeObj","copyProcessGraphInstanceProperties","createProcessInstance","createChildProcessGraph","parameterPath","setArguments","setParentNode","parameterName","shift","setCallbackParameters","getCallbackParametersForProcess","getParentProcess","parse","isValid","addError","allowUndefinedParameters","allow","fillUndefinedParameters","fill","allowEmpty","makeError","errorId","getParentProcessId","size","process_graph","hasProcessKey","parseNodeArguments","values","throwOnErrors","validateNodes","getStartNodes","executeNodes","getResultNode","previousNode","promises","validateNode","Promise","all","executeNode","nodeId","argumentName","prevNode","hasParameter","addProcessParameter","getCallbackParameters","getParameter","getProcessParameters","includeUndefined","slice","refs","ref","processParam","forEach","child","getStartNodeIds","getNodeCount","getNodes","getErrors","get","CommonProcessRegistry","CommonUtils","checkProcess","checkCallbacks","getFromProcess","getFromCallbacks","store","unique","hasOwnProperty"],"sourceRoot":""}