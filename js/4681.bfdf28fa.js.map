{"version":3,"file":"js/4681.bfdf28fa.js","mappings":"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","sources":["webpack://@openeo/web-editor/./node_modules/mgrs/mgrs.js","webpack://@openeo/web-editor/./node_modules/ol/AssertionError.js","webpack://@openeo/web-editor/./node_modules/ol/asserts.js","webpack://@openeo/web-editor/./node_modules/ol/coordinate.js","webpack://@openeo/web-editor/./node_modules/ol/extent.js","webpack://@openeo/web-editor/./node_modules/ol/extent/Relationship.js","webpack://@openeo/web-editor/./node_modules/ol/math.js","webpack://@openeo/web-editor/./node_modules/ol/proj/epsg3857.js","webpack://@openeo/web-editor/./node_modules/ol/proj/epsg4326.js","webpack://@openeo/web-editor/./node_modules/ol/proj/projections.js","webpack://@openeo/web-editor/./node_modules/ol/sphere.js","webpack://@openeo/web-editor/./node_modules/ol/proj.js","webpack://@openeo/web-editor/./node_modules/ol/proj/Projection.js","webpack://@openeo/web-editor/./node_modules/ol/proj/Units.js","webpack://@openeo/web-editor/./node_modules/ol/proj/proj4.js","webpack://@openeo/web-editor/./node_modules/ol/proj/transforms.js","webpack://@openeo/web-editor/./node_modules/ol/util.js"],"sourcesContent":["\n\n\n/**\n * UTM zones are grouped, and assigned to one of a group of 6\n * sets.\n *\n * {int} @private\n */\nvar NUM_100K_SETS = 6;\n\n/**\n * The column letters (for easting) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_COLUMN_LETTERS = 'AJSAJS';\n\n/**\n * The row letters (for northing) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_ROW_LETTERS = 'AFAFAF';\n\nvar A = 65; // A\nvar I = 73; // I\nvar O = 79; // O\nvar V = 86; // V\nvar Z = 90; // Z\nexport default {\n  forward: forward,\n  inverse: inverse,\n  toPoint: toPoint\n};\n/**\n * Conversion of lat/lon to MGRS.\n *\n * @param {object} ll Object literal with lat and lon properties on a\n *     WGS84 ellipsoid.\n * @param {int} accuracy Accuracy in digits (5 for 1 m, 4 for 10 m, 3 for\n *      100 m, 2 for 1000 m or 1 for 10000 m). Optional, default is 5.\n * @return {string} the MGRS string for the given location and accuracy.\n */\nexport function forward(ll, accuracy) {\n  accuracy = accuracy || 5; // default accuracy 1m\n  return encode(LLtoUTM({\n    lat: ll[1],\n    lon: ll[0]\n  }), accuracy);\n};\n\n/**\n * Conversion of MGRS to lat/lon.\n *\n * @param {string} mgrs MGRS string.\n * @return {array} An array with left (longitude), bottom (latitude), right\n *     (longitude) and top (latitude) values in WGS84, representing the\n *     bounding box for the provided MGRS reference.\n */\nexport function inverse(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat, bbox.lon, bbox.lat];\n  }\n  return [bbox.left, bbox.bottom, bbox.right, bbox.top];\n};\n\nexport function toPoint(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat];\n  }\n  return [(bbox.left + bbox.right) / 2, (bbox.top + bbox.bottom) / 2];\n};\n/**\n * Conversion from degrees to radians.\n *\n * @private\n * @param {number} deg the angle in degrees.\n * @return {number} the angle in radians.\n */\nfunction degToRad(deg) {\n  return (deg * (Math.PI / 180.0));\n}\n\n/**\n * Conversion from radians to degrees.\n *\n * @private\n * @param {number} rad the angle in radians.\n * @return {number} the angle in degrees.\n */\nfunction radToDeg(rad) {\n  return (180.0 * (rad / Math.PI));\n}\n\n/**\n * Converts a set of Longitude and Latitude co-ordinates to UTM\n * using the WGS84 ellipsoid.\n *\n * @private\n * @param {object} ll Object literal with lat and lon properties\n *     representing the WGS84 coordinate to be converted.\n * @return {object} Object literal containing the UTM value with easting,\n *     northing, zoneNumber and zoneLetter properties, and an optional\n *     accuracy property in digits. Returns null if the conversion failed.\n */\nfunction LLtoUTM(ll) {\n  var Lat = ll.lat;\n  var Long = ll.lon;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var k0 = 0.9996;\n  var LongOrigin;\n  var eccPrimeSquared;\n  var N, T, C, A, M;\n  var LatRad = degToRad(Lat);\n  var LongRad = degToRad(Long);\n  var LongOriginRad;\n  var ZoneNumber;\n  // (int)\n  ZoneNumber = Math.floor((Long + 180) / 6) + 1;\n\n  //Make sure the longitude 180.00 is in Zone 60\n  if (Long === 180) {\n    ZoneNumber = 60;\n  }\n\n  // Special zone for Norway\n  if (Lat >= 56.0 && Lat < 64.0 && Long >= 3.0 && Long < 12.0) {\n    ZoneNumber = 32;\n  }\n\n  // Special zones for Svalbard\n  if (Lat >= 72.0 && Lat < 84.0) {\n    if (Long >= 0.0 && Long < 9.0) {\n      ZoneNumber = 31;\n    }\n    else if (Long >= 9.0 && Long < 21.0) {\n      ZoneNumber = 33;\n    }\n    else if (Long >= 21.0 && Long < 33.0) {\n      ZoneNumber = 35;\n    }\n    else if (Long >= 33.0 && Long < 42.0) {\n      ZoneNumber = 37;\n    }\n  }\n\n  LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3; //+3 puts origin\n  // in middle of\n  // zone\n  LongOriginRad = degToRad(LongOrigin);\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));\n  T = Math.tan(LatRad) * Math.tan(LatRad);\n  C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);\n  A = Math.cos(LatRad) * (LongRad - LongOriginRad);\n\n  M = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * LatRad) - (35 * eccSquared * eccSquared * eccSquared / 3072) * Math.sin(6 * LatRad));\n\n  var UTMEasting = (k0 * N * (A + (1 - T + C) * A * A * A / 6.0 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A / 120.0) + 500000.0);\n\n  var UTMNorthing = (k0 * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A * A * A / 24.0 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A / 720.0)));\n  if (Lat < 0.0) {\n    UTMNorthing += 10000000.0; //10000000 meter offset for\n    // southern hemisphere\n  }\n\n  return {\n    northing: Math.round(UTMNorthing),\n    easting: Math.round(UTMEasting),\n    zoneNumber: ZoneNumber,\n    zoneLetter: getLetterDesignator(Lat)\n  };\n}\n\n/**\n * Converts UTM coords to lat/long, using the WGS84 ellipsoid. This is a convenience\n * class where the Zone can be specified as a single string eg.\"60N\" which\n * is then broken down into the ZoneNumber and ZoneLetter.\n *\n * @private\n * @param {object} utm An object literal with northing, easting, zoneNumber\n *     and zoneLetter properties. If an optional accuracy property is\n *     provided (in meters), a bounding box will be returned instead of\n *     latitude and longitude.\n * @return {object} An object literal containing either lat and lon values\n *     (if no accuracy was provided), or top, right, bottom and left values\n *     for the bounding box calculated according to the provided accuracy.\n *     Returns null if the conversion failed.\n */\nfunction UTMtoLL(utm) {\n\n  var UTMNorthing = utm.northing;\n  var UTMEasting = utm.easting;\n  var zoneLetter = utm.zoneLetter;\n  var zoneNumber = utm.zoneNumber;\n  // check the ZoneNummber is valid\n  if (zoneNumber < 0 || zoneNumber > 60) {\n    return null;\n  }\n\n  var k0 = 0.9996;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var eccPrimeSquared;\n  var e1 = (1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));\n  var N1, T1, C1, R1, D, M;\n  var LongOrigin;\n  var mu, phi1Rad;\n\n  // remove 500,000 meter offset for longitude\n  var x = UTMEasting - 500000.0;\n  var y = UTMNorthing;\n\n  // We must know somehow if we are in the Northern or Southern\n  // hemisphere, this is the only time we use the letter So even\n  // if the Zone letter isn't exactly correct it should indicate\n  // the hemisphere correctly\n  if (zoneLetter < 'N') {\n    y -= 10000000.0; // remove 10,000,000 meter offset used\n    // for southern hemisphere\n  }\n\n  // There are 60 zones with zone 1 being at West -180 to -174\n  LongOrigin = (zoneNumber - 1) * 6 - 180 + 3; // +3 puts origin\n  // in middle of\n  // zone\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  M = y / k0;\n  mu = M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));\n\n  phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + (151 * e1 * e1 * e1 / 96) * Math.sin(6 * mu);\n  // double phi1 = ProjMath.radToDeg(phi1Rad);\n\n  N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));\n  T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);\n  C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);\n  R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);\n  D = x / (N1 * k0);\n\n  var lat = phi1Rad - (N1 * Math.tan(phi1Rad) / R1) * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);\n  lat = radToDeg(lat);\n\n  var lon = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);\n  lon = LongOrigin + radToDeg(lon);\n\n  var result;\n  if (utm.accuracy) {\n    var topRight = UTMtoLL({\n      northing: utm.northing + utm.accuracy,\n      easting: utm.easting + utm.accuracy,\n      zoneLetter: utm.zoneLetter,\n      zoneNumber: utm.zoneNumber\n    });\n    result = {\n      top: topRight.lat,\n      right: topRight.lon,\n      bottom: lat,\n      left: lon\n    };\n  }\n  else {\n    result = {\n      lat: lat,\n      lon: lon\n    };\n  }\n  return result;\n}\n\n/**\n * Calculates the MGRS letter designator for the given latitude.\n *\n * @private\n * @param {number} lat The latitude in WGS84 to get the letter designator\n *     for.\n * @return {char} The letter designator.\n */\nfunction getLetterDesignator(lat) {\n  //This is here as an error flag to show that the Latitude is\n  //outside MGRS limits\n  var LetterDesignator = 'Z';\n\n  if ((84 >= lat) && (lat >= 72)) {\n    LetterDesignator = 'X';\n  }\n  else if ((72 > lat) && (lat >= 64)) {\n    LetterDesignator = 'W';\n  }\n  else if ((64 > lat) && (lat >= 56)) {\n    LetterDesignator = 'V';\n  }\n  else if ((56 > lat) && (lat >= 48)) {\n    LetterDesignator = 'U';\n  }\n  else if ((48 > lat) && (lat >= 40)) {\n    LetterDesignator = 'T';\n  }\n  else if ((40 > lat) && (lat >= 32)) {\n    LetterDesignator = 'S';\n  }\n  else if ((32 > lat) && (lat >= 24)) {\n    LetterDesignator = 'R';\n  }\n  else if ((24 > lat) && (lat >= 16)) {\n    LetterDesignator = 'Q';\n  }\n  else if ((16 > lat) && (lat >= 8)) {\n    LetterDesignator = 'P';\n  }\n  else if ((8 > lat) && (lat >= 0)) {\n    LetterDesignator = 'N';\n  }\n  else if ((0 > lat) && (lat >= -8)) {\n    LetterDesignator = 'M';\n  }\n  else if ((-8 > lat) && (lat >= -16)) {\n    LetterDesignator = 'L';\n  }\n  else if ((-16 > lat) && (lat >= -24)) {\n    LetterDesignator = 'K';\n  }\n  else if ((-24 > lat) && (lat >= -32)) {\n    LetterDesignator = 'J';\n  }\n  else if ((-32 > lat) && (lat >= -40)) {\n    LetterDesignator = 'H';\n  }\n  else if ((-40 > lat) && (lat >= -48)) {\n    LetterDesignator = 'G';\n  }\n  else if ((-48 > lat) && (lat >= -56)) {\n    LetterDesignator = 'F';\n  }\n  else if ((-56 > lat) && (lat >= -64)) {\n    LetterDesignator = 'E';\n  }\n  else if ((-64 > lat) && (lat >= -72)) {\n    LetterDesignator = 'D';\n  }\n  else if ((-72 > lat) && (lat >= -80)) {\n    LetterDesignator = 'C';\n  }\n  return LetterDesignator;\n}\n\n/**\n * Encodes a UTM location as MGRS string.\n *\n * @private\n * @param {object} utm An object literal with easting, northing,\n *     zoneLetter, zoneNumber\n * @param {number} accuracy Accuracy in digits (1-5).\n * @return {string} MGRS string for the given UTM location.\n */\nfunction encode(utm, accuracy) {\n  // prepend with leading zeroes\n  var seasting = \"00000\" + utm.easting,\n    snorthing = \"00000\" + utm.northing;\n\n  return utm.zoneNumber + utm.zoneLetter + get100kID(utm.easting, utm.northing, utm.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);\n}\n\n/**\n * Get the two letter 100k designator for a given UTM easting,\n * northing and zone number value.\n *\n * @private\n * @param {number} easting\n * @param {number} northing\n * @param {number} zoneNumber\n * @return the two letter 100k designator for the given UTM location.\n */\nfunction get100kID(easting, northing, zoneNumber) {\n  var setParm = get100kSetForZone(zoneNumber);\n  var setColumn = Math.floor(easting / 100000);\n  var setRow = Math.floor(northing / 100000) % 20;\n  return getLetter100kID(setColumn, setRow, setParm);\n}\n\n/**\n * Given a UTM zone number, figure out the MGRS 100K set it is in.\n *\n * @private\n * @param {number} i An UTM zone number.\n * @return {number} the 100k set the UTM zone is in.\n */\nfunction get100kSetForZone(i) {\n  var setParm = i % NUM_100K_SETS;\n  if (setParm === 0) {\n    setParm = NUM_100K_SETS;\n  }\n\n  return setParm;\n}\n\n/**\n * Get the two-letter MGRS 100k designator given information\n * translated from the UTM northing, easting and zone number.\n *\n * @private\n * @param {number} column the column index as it relates to the MGRS\n *        100k set spreadsheet, created from the UTM easting.\n *        Values are 1-8.\n * @param {number} row the row index as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM northing value. Values\n *        are from 0-19.\n * @param {number} parm the set block, as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM zone. Values are from\n *        1-60.\n * @return two letter MGRS 100k code.\n */\nfunction getLetter100kID(column, row, parm) {\n  // colOrigin and rowOrigin are the letters at the origin of the set\n  var index = parm - 1;\n  var colOrigin = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);\n  var rowOrigin = SET_ORIGIN_ROW_LETTERS.charCodeAt(index);\n\n  // colInt and rowInt are the letters to build to return\n  var colInt = colOrigin + column - 1;\n  var rowInt = rowOrigin + row;\n  var rollover = false;\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n    rollover = true;\n  }\n\n  if (colInt === I || (colOrigin < I && colInt > I) || ((colInt > I || colOrigin < I) && rollover)) {\n    colInt++;\n  }\n\n  if (colInt === O || (colOrigin < O && colInt > O) || ((colInt > O || colOrigin < O) && rollover)) {\n    colInt++;\n\n    if (colInt === I) {\n      colInt++;\n    }\n  }\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n    rollover = true;\n  }\n  else {\n    rollover = false;\n  }\n\n  if (((rowInt === I) || ((rowOrigin < I) && (rowInt > I))) || (((rowInt > I) || (rowOrigin < I)) && rollover)) {\n    rowInt++;\n  }\n\n  if (((rowInt === O) || ((rowOrigin < O) && (rowInt > O))) || (((rowInt > O) || (rowOrigin < O)) && rollover)) {\n    rowInt++;\n\n    if (rowInt === I) {\n      rowInt++;\n    }\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n  }\n\n  var twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);\n  return twoLetter;\n}\n\n/**\n * Decode the UTM parameters from a MGRS string.\n *\n * @private\n * @param {string} mgrsString an UPPERCASE coordinate string is expected.\n * @return {object} An object literal with easting, northing, zoneLetter,\n *     zoneNumber and accuracy (in meters) properties.\n */\nfunction decode(mgrsString) {\n\n  if (mgrsString && mgrsString.length === 0) {\n    throw (\"MGRSPoint coverting from nothing\");\n  }\n\n  var length = mgrsString.length;\n\n  var hunK = null;\n  var sb = \"\";\n  var testChar;\n  var i = 0;\n\n  // get Zone number\n  while (!(/[A-Z]/).test(testChar = mgrsString.charAt(i))) {\n    if (i >= 2) {\n      throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n    }\n    sb += testChar;\n    i++;\n  }\n\n  var zoneNumber = parseInt(sb, 10);\n\n  if (i === 0 || i + 3 > length) {\n    // A good MGRS string has to be 4-5 digits long,\n    // ##AAA/#AAA at least.\n    throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n  }\n\n  var zoneLetter = mgrsString.charAt(i++);\n\n  // Should we check the zone letter here? Why not.\n  if (zoneLetter <= 'A' || zoneLetter === 'B' || zoneLetter === 'Y' || zoneLetter >= 'Z' || zoneLetter === 'I' || zoneLetter === 'O') {\n    throw (\"MGRSPoint zone letter \" + zoneLetter + \" not handled: \" + mgrsString);\n  }\n\n  hunK = mgrsString.substring(i, i += 2);\n\n  var set = get100kSetForZone(zoneNumber);\n\n  var east100k = getEastingFromChar(hunK.charAt(0), set);\n  var north100k = getNorthingFromChar(hunK.charAt(1), set);\n\n  // We have a bug where the northing may be 2000000 too low.\n  // How\n  // do we know when to roll over?\n\n  while (north100k < getMinNorthing(zoneLetter)) {\n    north100k += 2000000;\n  }\n\n  // calculate the char index for easting/northing separator\n  var remainder = length - i;\n\n  if (remainder % 2 !== 0) {\n    throw (\"MGRSPoint has to have an even number \\nof digits after the zone letter and two 100km letters - front \\nhalf for easting meters, second half for \\nnorthing meters\" + mgrsString);\n  }\n\n  var sep = remainder / 2;\n\n  var sepEasting = 0.0;\n  var sepNorthing = 0.0;\n  var accuracyBonus, sepEastingString, sepNorthingString, easting, northing;\n  if (sep > 0) {\n    accuracyBonus = 100000.0 / Math.pow(10, sep);\n    sepEastingString = mgrsString.substring(i, i + sep);\n    sepEasting = parseFloat(sepEastingString) * accuracyBonus;\n    sepNorthingString = mgrsString.substring(i + sep);\n    sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;\n  }\n\n  easting = sepEasting + east100k;\n  northing = sepNorthing + north100k;\n\n  return {\n    easting: easting,\n    northing: northing,\n    zoneLetter: zoneLetter,\n    zoneNumber: zoneNumber,\n    accuracy: accuracyBonus\n  };\n}\n\n/**\n * Given the first letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the easting value that\n * should be added to the other, secondary easting value.\n *\n * @private\n * @param {char} e The first letter from a two-letter MGRS 100´k zone.\n * @param {number} set The MGRS table set for the zone number.\n * @return {number} The easting value for the given letter and set.\n */\nfunction getEastingFromChar(e, set) {\n  // colOrigin is the letter at the origin of the set for the\n  // column\n  var curCol = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);\n  var eastingValue = 100000.0;\n  var rewindMarker = false;\n\n  while (curCol !== e.charCodeAt(0)) {\n    curCol++;\n    if (curCol === I) {\n      curCol++;\n    }\n    if (curCol === O) {\n      curCol++;\n    }\n    if (curCol > Z) {\n      if (rewindMarker) {\n        throw (\"Bad character: \" + e);\n      }\n      curCol = A;\n      rewindMarker = true;\n    }\n    eastingValue += 100000.0;\n  }\n\n  return eastingValue;\n}\n\n/**\n * Given the second letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the northing value that\n * should be added to the other, secondary northing value. You have to\n * remember that Northings are determined from the equator, and the vertical\n * cycle of letters mean a 2000000 additional northing meters. This happens\n * approx. every 18 degrees of latitude. This method does *NOT* count any\n * additional northings. You have to figure out how many 2000000 meters need\n * to be added for the zone letter of the MGRS coordinate.\n *\n * @private\n * @param {char} n Second letter of the MGRS 100k zone\n * @param {number} set The MGRS table set number, which is dependent on the\n *     UTM zone number.\n * @return {number} The northing value for the given letter and set.\n */\nfunction getNorthingFromChar(n, set) {\n\n  if (n > 'V') {\n    throw (\"MGRSPoint given invalid Northing \" + n);\n  }\n\n  // rowOrigin is the letter at the origin of the set for the\n  // column\n  var curRow = SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);\n  var northingValue = 0.0;\n  var rewindMarker = false;\n\n  while (curRow !== n.charCodeAt(0)) {\n    curRow++;\n    if (curRow === I) {\n      curRow++;\n    }\n    if (curRow === O) {\n      curRow++;\n    }\n    // fixing a bug making whole application hang in this loop\n    // when 'n' is a wrong character\n    if (curRow > V) {\n      if (rewindMarker) { // making sure that this loop ends\n        throw (\"Bad character: \" + n);\n      }\n      curRow = A;\n      rewindMarker = true;\n    }\n    northingValue += 100000.0;\n  }\n\n  return northingValue;\n}\n\n/**\n * The function getMinNorthing returns the minimum northing value of a MGRS\n * zone.\n *\n * Ported from Geotrans' c Lattitude_Band_Value structure table.\n *\n * @private\n * @param {char} zoneLetter The MGRS zone to get the min northing for.\n * @return {number}\n */\nfunction getMinNorthing(zoneLetter) {\n  var northing;\n  switch (zoneLetter) {\n  case 'C':\n    northing = 1100000.0;\n    break;\n  case 'D':\n    northing = 2000000.0;\n    break;\n  case 'E':\n    northing = 2800000.0;\n    break;\n  case 'F':\n    northing = 3700000.0;\n    break;\n  case 'G':\n    northing = 4600000.0;\n    break;\n  case 'H':\n    northing = 5500000.0;\n    break;\n  case 'J':\n    northing = 6400000.0;\n    break;\n  case 'K':\n    northing = 7300000.0;\n    break;\n  case 'L':\n    northing = 8200000.0;\n    break;\n  case 'M':\n    northing = 9100000.0;\n    break;\n  case 'N':\n    northing = 0.0;\n    break;\n  case 'P':\n    northing = 800000.0;\n    break;\n  case 'Q':\n    northing = 1700000.0;\n    break;\n  case 'R':\n    northing = 2600000.0;\n    break;\n  case 'S':\n    northing = 3500000.0;\n    break;\n  case 'T':\n    northing = 4400000.0;\n    break;\n  case 'U':\n    northing = 5300000.0;\n    break;\n  case 'V':\n    northing = 6200000.0;\n    break;\n  case 'W':\n    northing = 7000000.0;\n    break;\n  case 'X':\n    northing = 7900000.0;\n    break;\n  default:\n    northing = -1.0;\n  }\n  if (northing >= 0.0) {\n    return northing;\n  }\n  else {\n    throw (\"Invalid zone letter: \" + zoneLetter);\n  }\n\n}\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/AssertionError\n */\nimport { VERSION } from './util.js';\n/**\n * Error object thrown when an assertion failed. This is an ECMA-262 Error,\n * extended with a `code` property.\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error.\n */\nvar AssertionError = /** @class */ (function (_super) {\n    __extends(AssertionError, _super);\n    /**\n     * @param {number} code Error code.\n     */\n    function AssertionError(code) {\n        var _this = this;\n        var path = VERSION === 'latest' ? VERSION : 'v' + VERSION.split('-')[0];\n        var message = 'Assertion failed. See https://openlayers.org/en/' +\n            path +\n            '/doc/errors/#' +\n            code +\n            ' for details.';\n        _this = _super.call(this, message) || this;\n        /**\n         * Error code. The meaning of the code can be found on\n         * https://openlayers.org/en/latest/doc/errors/ (replace `latest` with\n         * the version found in the OpenLayers script's header comment if a version\n         * other than the latest is used).\n         * @type {number}\n         * @api\n         */\n        _this.code = code;\n        /**\n         * @type {string}\n         */\n        _this.name = 'AssertionError';\n        // Re-assign message, see https://github.com/Rich-Harris/buble/issues/40\n        _this.message = message;\n        return _this;\n    }\n    return AssertionError;\n}(Error));\nexport default AssertionError;\n//# sourceMappingURL=AssertionError.js.map","/**\n * @module ol/asserts\n */\nimport AssertionError from './AssertionError.js';\n/**\n * @param {*} assertion Assertion we expected to be truthy.\n * @param {number} errorCode Error code.\n */\nexport function assert(assertion, errorCode) {\n    if (!assertion) {\n        throw new AssertionError(errorCode);\n    }\n}\n//# sourceMappingURL=asserts.js.map","/**\n * @module ol/coordinate\n */\nimport { getWidth } from './extent.js';\nimport { modulo } from './math.js';\nimport { padNumber } from './string.js';\n/**\n * An array of numbers representing an xy coordinate. Example: `[16, 48]`.\n * @typedef {Array<number>} Coordinate\n * @api\n */\n/**\n * A function that takes a {@link module:ol/coordinate~Coordinate} and\n * transforms it into a `{string}`.\n *\n * @typedef {function((Coordinate|undefined)): string} CoordinateFormat\n * @api\n */\n/**\n * Add `delta` to `coordinate`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {add} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     add(coord, [-2, 4]);\n *     // coord is now [5.85, 51.983333]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {Coordinate} delta Delta.\n * @return {Coordinate} The input coordinate adjusted by\n * the given delta.\n * @api\n */\nexport function add(coordinate, delta) {\n    coordinate[0] += +delta[0];\n    coordinate[1] += +delta[1];\n    return coordinate;\n}\n/**\n * Calculates the point closest to the passed coordinate on the passed circle.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {import(\"./geom/Circle.js\").default} circle The circle.\n * @return {Coordinate} Closest point on the circumference.\n */\nexport function closestOnCircle(coordinate, circle) {\n    var r = circle.getRadius();\n    var center = circle.getCenter();\n    var x0 = center[0];\n    var y0 = center[1];\n    var x1 = coordinate[0];\n    var y1 = coordinate[1];\n    var dx = x1 - x0;\n    var dy = y1 - y0;\n    if (dx === 0 && dy === 0) {\n        dx = 1;\n    }\n    var d = Math.sqrt(dx * dx + dy * dy);\n    var x = x0 + (r * dx) / d;\n    var y = y0 + (r * dy) / d;\n    return [x, y];\n}\n/**\n * Calculates the point closest to the passed coordinate on the passed segment.\n * This is the foot of the perpendicular of the coordinate to the segment when\n * the foot is on the segment, or the closest segment coordinate when the foot\n * is outside the segment.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {Array<Coordinate>} segment The two coordinates\n * of the segment.\n * @return {Coordinate} The foot of the perpendicular of\n * the coordinate to the segment.\n */\nexport function closestOnSegment(coordinate, segment) {\n    var x0 = coordinate[0];\n    var y0 = coordinate[1];\n    var start = segment[0];\n    var end = segment[1];\n    var x1 = start[0];\n    var y1 = start[1];\n    var x2 = end[0];\n    var y2 = end[1];\n    var dx = x2 - x1;\n    var dy = y2 - y1;\n    var along = dx === 0 && dy === 0\n        ? 0\n        : (dx * (x0 - x1) + dy * (y0 - y1)) / (dx * dx + dy * dy || 0);\n    var x, y;\n    if (along <= 0) {\n        x = x1;\n        y = y1;\n    }\n    else if (along >= 1) {\n        x = x2;\n        y = y2;\n    }\n    else {\n        x = x1 + along * dx;\n        y = y1 + along * dy;\n    }\n    return [x, y];\n}\n/**\n * Returns a {@link module:ol/coordinate~CoordinateFormat} function that can be\n * used to format\n * a {Coordinate} to a string.\n *\n * Example without specifying the fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var stringifyFunc = createStringXY();\n *     var out = stringifyFunc(coord);\n *     // out is now '8, 48'\n *\n * Example with explicitly specifying 2 fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var stringifyFunc = createStringXY(2);\n *     var out = stringifyFunc(coord);\n *     // out is now '7.85, 47.98'\n *\n * @param {number} [opt_fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {CoordinateFormat} Coordinate format.\n * @api\n */\nexport function createStringXY(opt_fractionDigits) {\n    return (\n    /**\n     * @param {Coordinate} coordinate Coordinate.\n     * @return {string} String XY.\n     */\n    function (coordinate) {\n        return toStringXY(coordinate, opt_fractionDigits);\n    });\n}\n/**\n * @param {string} hemispheres Hemispheres.\n * @param {number} degrees Degrees.\n * @param {number} [opt_fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} String.\n */\nexport function degreesToStringHDMS(hemispheres, degrees, opt_fractionDigits) {\n    var normalizedDegrees = modulo(degrees + 180, 360) - 180;\n    var x = Math.abs(3600 * normalizedDegrees);\n    var dflPrecision = opt_fractionDigits || 0;\n    var precision = Math.pow(10, dflPrecision);\n    var deg = Math.floor(x / 3600);\n    var min = Math.floor((x - deg * 3600) / 60);\n    var sec = x - deg * 3600 - min * 60;\n    sec = Math.ceil(sec * precision) / precision;\n    if (sec >= 60) {\n        sec = 0;\n        min += 1;\n    }\n    if (min >= 60) {\n        min = 0;\n        deg += 1;\n    }\n    return (deg +\n        '\\u00b0 ' +\n        padNumber(min, 2) +\n        '\\u2032 ' +\n        padNumber(sec, 2, dflPrecision) +\n        '\\u2033' +\n        (normalizedDegrees == 0\n            ? ''\n            : ' ' + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0)));\n}\n/**\n * Transforms the given {@link module:ol/coordinate~Coordinate} to a string\n * using the given string template. The strings `{x}` and `{y}` in the template\n * will be replaced with the first and second coordinate values respectively.\n *\n * Example without specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var template = 'Coordinate is ({x}|{y}).';\n *     var out = format(coord, template);\n *     // out is now 'Coordinate is (8|48).'\n *\n * Example explicitly specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var template = 'Coordinate is ({x}|{y}).';\n *     var out = format(coord, template, 2);\n *     // out is now 'Coordinate is (7.85|47.98).'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {string} template A template string with `{x}` and `{y}` placeholders\n *     that will be replaced by first and second coordinate values.\n * @param {number} [opt_fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Formatted coordinate.\n * @api\n */\nexport function format(coordinate, template, opt_fractionDigits) {\n    if (coordinate) {\n        return template\n            .replace('{x}', coordinate[0].toFixed(opt_fractionDigits))\n            .replace('{y}', coordinate[1].toFixed(opt_fractionDigits));\n    }\n    else {\n        return '';\n    }\n}\n/**\n * @param {Coordinate} coordinate1 First coordinate.\n * @param {Coordinate} coordinate2 Second coordinate.\n * @return {boolean} The two coordinates are equal.\n */\nexport function equals(coordinate1, coordinate2) {\n    var equals = true;\n    for (var i = coordinate1.length - 1; i >= 0; --i) {\n        if (coordinate1[i] != coordinate2[i]) {\n            equals = false;\n            break;\n        }\n    }\n    return equals;\n}\n/**\n * Rotate `coordinate` by `angle`. `coordinate` is modified in place and\n * returned by the function.\n *\n * Example:\n *\n *     import {rotate} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var rotateRadians = Math.PI / 2; // 90 degrees\n *     rotate(coord, rotateRadians);\n *     // coord is now [-47.983333, 7.85]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} angle Angle in radian.\n * @return {Coordinate} Coordinate.\n * @api\n */\nexport function rotate(coordinate, angle) {\n    var cosAngle = Math.cos(angle);\n    var sinAngle = Math.sin(angle);\n    var x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n    var y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n    coordinate[0] = x;\n    coordinate[1] = y;\n    return coordinate;\n}\n/**\n * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {scale as scaleCoordinate} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var scale = 1.2;\n *     scaleCoordinate(coord, scale);\n *     // coord is now [9.42, 57.5799996]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} scale Scale factor.\n * @return {Coordinate} Coordinate.\n */\nexport function scale(coordinate, scale) {\n    coordinate[0] *= scale;\n    coordinate[1] *= scale;\n    return coordinate;\n}\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Squared distance between coord1 and coord2.\n */\nexport function squaredDistance(coord1, coord2) {\n    var dx = coord1[0] - coord2[0];\n    var dy = coord1[1] - coord2[1];\n    return dx * dx + dy * dy;\n}\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Distance between coord1 and coord2.\n */\nexport function distance(coord1, coord2) {\n    return Math.sqrt(squaredDistance(coord1, coord2));\n}\n/**\n * Calculate the squared distance from a coordinate to a line segment.\n *\n * @param {Coordinate} coordinate Coordinate of the point.\n * @param {Array<Coordinate>} segment Line segment (2\n * coordinates).\n * @return {number} Squared distance from the point to the line segment.\n */\nexport function squaredDistanceToSegment(coordinate, segment) {\n    return squaredDistance(coordinate, closestOnSegment(coordinate, segment));\n}\n/**\n * Format a geographic coordinate with the hemisphere, degrees, minutes, and\n * seconds.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringHDMS} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringHDMS(coord);\n *     // out is now '47° 58′ 60″ N 7° 50′ 60″ E'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringHDMS} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringHDMS(coord, 1);\n *     // out is now '47° 58′ 60.0″ N 7° 50′ 60.0″ E'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} [opt_fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Hemisphere, degrees, minutes and seconds.\n * @api\n */\nexport function toStringHDMS(coordinate, opt_fractionDigits) {\n    if (coordinate) {\n        return (degreesToStringHDMS('NS', coordinate[1], opt_fractionDigits) +\n            ' ' +\n            degreesToStringHDMS('EW', coordinate[0], opt_fractionDigits));\n    }\n    else {\n        return '';\n    }\n}\n/**\n * Format a coordinate as a comma delimited string.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringXY(coord);\n *     // out is now '8, 48'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringXY(coord, 1);\n *     // out is now '7.8, 48.0'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} [opt_fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} XY.\n * @api\n */\nexport function toStringXY(coordinate, opt_fractionDigits) {\n    return format(coordinate, '{x}, {y}', opt_fractionDigits);\n}\n/**\n * Modifies the provided coordinate in-place to be within the real world\n * extent. The lower projection extent boundary is inclusive, the upper one\n * exclusive.\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {Coordinate} The coordinate within the real world extent.\n */\nexport function wrapX(coordinate, projection) {\n    if (projection.canWrapX()) {\n        var worldWidth = getWidth(projection.getExtent());\n        var worldsAway = getWorldsAway(coordinate, projection, worldWidth);\n        if (worldsAway) {\n            coordinate[0] -= worldsAway * worldWidth;\n        }\n    }\n    return coordinate;\n}\n/**\n * @param {Coordinate} coordinate Coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @param {number} [opt_sourceExtentWidth] Width of the source extent.\n * @return {number} Offset in world widths.\n */\nexport function getWorldsAway(coordinate, projection, opt_sourceExtentWidth) {\n    var projectionExtent = projection.getExtent();\n    var worldsAway = 0;\n    if (projection.canWrapX() &&\n        (coordinate[0] < projectionExtent[0] || coordinate[0] > projectionExtent[2])) {\n        var sourceExtentWidth = opt_sourceExtentWidth || getWidth(projectionExtent);\n        worldsAway = Math.floor((coordinate[0] - projectionExtent[0]) / sourceExtentWidth);\n    }\n    return worldsAway;\n}\n//# sourceMappingURL=coordinate.js.map","/**\n * @module ol/extent\n */\nimport Relationship from './extent/Relationship.js';\nimport { assert } from './asserts.js';\n/**\n * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.\n * @typedef {Array<number>} Extent\n * @api\n */\n/**\n * Extent corner.\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} Corner\n */\n/**\n * Build an extent that includes all given coordinates.\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Bounding extent.\n * @api\n */\nexport function boundingExtent(coordinates) {\n    var extent = createEmpty();\n    for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n        extendCoordinate(extent, coordinates[i]);\n    }\n    return extent;\n}\n/**\n * @param {Array<number>} xs Xs.\n * @param {Array<number>} ys Ys.\n * @param {Extent} [opt_extent] Destination extent.\n * @private\n * @return {Extent} Extent.\n */\nfunction _boundingExtentXYs(xs, ys, opt_extent) {\n    var minX = Math.min.apply(null, xs);\n    var minY = Math.min.apply(null, ys);\n    var maxX = Math.max.apply(null, xs);\n    var maxY = Math.max.apply(null, ys);\n    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n}\n/**\n * Return extent increased by the provided value.\n * @param {Extent} extent Extent.\n * @param {number} value The amount by which the extent should be buffered.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} Extent.\n * @api\n */\nexport function buffer(extent, value, opt_extent) {\n    if (opt_extent) {\n        opt_extent[0] = extent[0] - value;\n        opt_extent[1] = extent[1] - value;\n        opt_extent[2] = extent[2] + value;\n        opt_extent[3] = extent[3] + value;\n        return opt_extent;\n    }\n    else {\n        return [\n            extent[0] - value,\n            extent[1] - value,\n            extent[2] + value,\n            extent[3] + value,\n        ];\n    }\n}\n/**\n * Creates a clone of an extent.\n *\n * @param {Extent} extent Extent to clone.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} The clone.\n */\nexport function clone(extent, opt_extent) {\n    if (opt_extent) {\n        opt_extent[0] = extent[0];\n        opt_extent[1] = extent[1];\n        opt_extent[2] = extent[2];\n        opt_extent[3] = extent[3];\n        return opt_extent;\n    }\n    else {\n        return extent.slice();\n    }\n}\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {number} Closest squared distance.\n */\nexport function closestSquaredDistanceXY(extent, x, y) {\n    var dx, dy;\n    if (x < extent[0]) {\n        dx = extent[0] - x;\n    }\n    else if (extent[2] < x) {\n        dx = x - extent[2];\n    }\n    else {\n        dx = 0;\n    }\n    if (y < extent[1]) {\n        dy = extent[1] - y;\n    }\n    else if (extent[3] < y) {\n        dy = y - extent[3];\n    }\n    else {\n        dy = 0;\n    }\n    return dx * dx + dy * dy;\n}\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @return {boolean} The coordinate is contained in the extent.\n * @api\n */\nexport function containsCoordinate(extent, coordinate) {\n    return containsXY(extent, coordinate[0], coordinate[1]);\n}\n/**\n * Check if one extent contains another.\n *\n * An extent is deemed contained if it lies completely within the other extent,\n * including if they share one or more edges.\n *\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The second extent is contained by or on the edge of the\n *     first.\n * @api\n */\nexport function containsExtent(extent1, extent2) {\n    return (extent1[0] <= extent2[0] &&\n        extent2[2] <= extent1[2] &&\n        extent1[1] <= extent2[1] &&\n        extent2[3] <= extent1[3]);\n}\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {number} x X coordinate.\n * @param {number} y Y coordinate.\n * @return {boolean} The x, y values are contained in the extent.\n * @api\n */\nexport function containsXY(extent, x, y) {\n    return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\n}\n/**\n * Get the relationship between a coordinate and extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate The coordinate.\n * @return {import(\"./extent/Relationship.js\").default} The relationship (bitwise compare with\n *     import(\"./extent/Relationship.js\").Relationship).\n */\nexport function coordinateRelationship(extent, coordinate) {\n    var minX = extent[0];\n    var minY = extent[1];\n    var maxX = extent[2];\n    var maxY = extent[3];\n    var x = coordinate[0];\n    var y = coordinate[1];\n    var relationship = Relationship.UNKNOWN;\n    if (x < minX) {\n        relationship = relationship | Relationship.LEFT;\n    }\n    else if (x > maxX) {\n        relationship = relationship | Relationship.RIGHT;\n    }\n    if (y < minY) {\n        relationship = relationship | Relationship.BELOW;\n    }\n    else if (y > maxY) {\n        relationship = relationship | Relationship.ABOVE;\n    }\n    if (relationship === Relationship.UNKNOWN) {\n        relationship = Relationship.INTERSECTING;\n    }\n    return relationship;\n}\n/**\n * Create an empty extent.\n * @return {Extent} Empty extent.\n * @api\n */\nexport function createEmpty() {\n    return [Infinity, Infinity, -Infinity, -Infinity];\n}\n/**\n * Create a new extent or update the provided extent.\n * @param {number} minX Minimum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxX Maximum X.\n * @param {number} maxY Maximum Y.\n * @param {Extent} [opt_extent] Destination extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdate(minX, minY, maxX, maxY, opt_extent) {\n    if (opt_extent) {\n        opt_extent[0] = minX;\n        opt_extent[1] = minY;\n        opt_extent[2] = maxX;\n        opt_extent[3] = maxY;\n        return opt_extent;\n    }\n    else {\n        return [minX, minY, maxX, maxY];\n    }\n}\n/**\n * Create a new empty extent or make the provided one empty.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateEmpty(opt_extent) {\n    return createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, opt_extent);\n}\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinate(coordinate, opt_extent) {\n    var x = coordinate[0];\n    var y = coordinate[1];\n    return createOrUpdate(x, y, x, y, opt_extent);\n}\n/**\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinates(coordinates, opt_extent) {\n    var extent = createOrUpdateEmpty(opt_extent);\n    return extendCoordinates(extent, coordinates);\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromFlatCoordinates(flatCoordinates, offset, end, stride, opt_extent) {\n    var extent = createOrUpdateEmpty(opt_extent);\n    return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);\n}\n/**\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromRings(rings, opt_extent) {\n    var extent = createOrUpdateEmpty(opt_extent);\n    return extendRings(extent, rings);\n}\n/**\n * Determine if two extents are equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The two extents are equivalent.\n * @api\n */\nexport function equals(extent1, extent2) {\n    return (extent1[0] == extent2[0] &&\n        extent1[2] == extent2[2] &&\n        extent1[1] == extent2[1] &&\n        extent1[3] == extent2[3]);\n}\n/**\n * Determine if two extents are approximately equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {number} tolerance Tolerance in extent coordinate units.\n * @return {boolean} The two extents differ by less than the tolerance.\n */\nexport function approximatelyEquals(extent1, extent2, tolerance) {\n    return (Math.abs(extent1[0] - extent2[0]) < tolerance &&\n        Math.abs(extent1[2] - extent2[2]) < tolerance &&\n        Math.abs(extent1[1] - extent2[1]) < tolerance &&\n        Math.abs(extent1[3] - extent2[3]) < tolerance);\n}\n/**\n * Modify an extent to include another extent.\n * @param {Extent} extent1 The extent to be modified.\n * @param {Extent} extent2 The extent that will be included in the first.\n * @return {Extent} A reference to the first (extended) extent.\n * @api\n */\nexport function extend(extent1, extent2) {\n    if (extent2[0] < extent1[0]) {\n        extent1[0] = extent2[0];\n    }\n    if (extent2[2] > extent1[2]) {\n        extent1[2] = extent2[2];\n    }\n    if (extent2[1] < extent1[1]) {\n        extent1[1] = extent2[1];\n    }\n    if (extent2[3] > extent1[3]) {\n        extent1[3] = extent2[3];\n    }\n    return extent1;\n}\n/**\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n */\nexport function extendCoordinate(extent, coordinate) {\n    if (coordinate[0] < extent[0]) {\n        extent[0] = coordinate[0];\n    }\n    if (coordinate[0] > extent[2]) {\n        extent[2] = coordinate[0];\n    }\n    if (coordinate[1] < extent[1]) {\n        extent[1] = coordinate[1];\n    }\n    if (coordinate[1] > extent[3]) {\n        extent[3] = coordinate[1];\n    }\n}\n/**\n * @param {Extent} extent Extent.\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Extent.\n */\nexport function extendCoordinates(extent, coordinates) {\n    for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n        extendCoordinate(extent, coordinates[i]);\n    }\n    return extent;\n}\n/**\n * @param {Extent} extent Extent.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {Extent} Extent.\n */\nexport function extendFlatCoordinates(extent, flatCoordinates, offset, end, stride) {\n    for (; offset < end; offset += stride) {\n        extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\n    }\n    return extent;\n}\n/**\n * @param {Extent} extent Extent.\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @return {Extent} Extent.\n */\nexport function extendRings(extent, rings) {\n    for (var i = 0, ii = rings.length; i < ii; ++i) {\n        extendCoordinates(extent, rings[i]);\n    }\n    return extent;\n}\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n */\nexport function extendXY(extent, x, y) {\n    extent[0] = Math.min(extent[0], x);\n    extent[1] = Math.min(extent[1], y);\n    extent[2] = Math.max(extent[2], x);\n    extent[3] = Math.max(extent[3], y);\n}\n/**\n * This function calls `callback` for each corner of the extent. If the\n * callback returns a truthy value the function returns that value\n * immediately. Otherwise the function returns `false`.\n * @param {Extent} extent Extent.\n * @param {function(import(\"./coordinate.js\").Coordinate): S} callback Callback.\n * @return {S|boolean} Value.\n * @template S\n */\nexport function forEachCorner(extent, callback) {\n    var val;\n    val = callback(getBottomLeft(extent));\n    if (val) {\n        return val;\n    }\n    val = callback(getBottomRight(extent));\n    if (val) {\n        return val;\n    }\n    val = callback(getTopRight(extent));\n    if (val) {\n        return val;\n    }\n    val = callback(getTopLeft(extent));\n    if (val) {\n        return val;\n    }\n    return false;\n}\n/**\n * Get the size of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Area.\n * @api\n */\nexport function getArea(extent) {\n    var area = 0;\n    if (!isEmpty(extent)) {\n        area = getWidth(extent) * getHeight(extent);\n    }\n    return area;\n}\n/**\n * Get the bottom left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom left coordinate.\n * @api\n */\nexport function getBottomLeft(extent) {\n    return [extent[0], extent[1]];\n}\n/**\n * Get the bottom right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom right coordinate.\n * @api\n */\nexport function getBottomRight(extent) {\n    return [extent[2], extent[1]];\n}\n/**\n * Get the center coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Center.\n * @api\n */\nexport function getCenter(extent) {\n    return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\n}\n/**\n * Get a corner coordinate of an extent.\n * @param {Extent} extent Extent.\n * @param {Corner} corner Corner.\n * @return {import(\"./coordinate.js\").Coordinate} Corner coordinate.\n */\nexport function getCorner(extent, corner) {\n    var coordinate;\n    if (corner === 'bottom-left') {\n        coordinate = getBottomLeft(extent);\n    }\n    else if (corner === 'bottom-right') {\n        coordinate = getBottomRight(extent);\n    }\n    else if (corner === 'top-left') {\n        coordinate = getTopLeft(extent);\n    }\n    else if (corner === 'top-right') {\n        coordinate = getTopRight(extent);\n    }\n    else {\n        assert(false, 13); // Invalid corner\n    }\n    return coordinate;\n}\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Enlarged area.\n */\nexport function getEnlargedArea(extent1, extent2) {\n    var minX = Math.min(extent1[0], extent2[0]);\n    var minY = Math.min(extent1[1], extent2[1]);\n    var maxX = Math.max(extent1[2], extent2[2]);\n    var maxY = Math.max(extent1[3], extent2[3]);\n    return (maxX - minX) * (maxY - minY);\n}\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @param {Extent} [opt_extent] Destination extent.\n * @return {Extent} Extent.\n */\nexport function getForViewAndSize(center, resolution, rotation, size, opt_extent) {\n    var _a = getRotatedViewport(center, resolution, rotation, size), x0 = _a[0], y0 = _a[1], x1 = _a[2], y1 = _a[3], x2 = _a[4], y2 = _a[5], x3 = _a[6], y3 = _a[7];\n    return createOrUpdate(Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3), Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3), opt_extent);\n}\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @return {Array<number>} Linear ring representing the viewport.\n */\nexport function getRotatedViewport(center, resolution, rotation, size) {\n    var dx = (resolution * size[0]) / 2;\n    var dy = (resolution * size[1]) / 2;\n    var cosRotation = Math.cos(rotation);\n    var sinRotation = Math.sin(rotation);\n    var xCos = dx * cosRotation;\n    var xSin = dx * sinRotation;\n    var yCos = dy * cosRotation;\n    var ySin = dy * sinRotation;\n    var x = center[0];\n    var y = center[1];\n    return [\n        x - xCos + ySin,\n        y - xSin - yCos,\n        x - xCos - ySin,\n        y - xSin + yCos,\n        x + xCos - ySin,\n        y + xSin + yCos,\n        x + xCos + ySin,\n        y + xSin - yCos,\n        x - xCos + ySin,\n        y - xSin - yCos,\n    ];\n}\n/**\n * Get the height of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Height.\n * @api\n */\nexport function getHeight(extent) {\n    return extent[3] - extent[1];\n}\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Intersection area.\n */\nexport function getIntersectionArea(extent1, extent2) {\n    var intersection = getIntersection(extent1, extent2);\n    return getArea(intersection);\n}\n/**\n * Get the intersection of two extents.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {Extent} [opt_extent] Optional extent to populate with intersection.\n * @return {Extent} Intersecting extent.\n * @api\n */\nexport function getIntersection(extent1, extent2, opt_extent) {\n    var intersection = opt_extent ? opt_extent : createEmpty();\n    if (intersects(extent1, extent2)) {\n        if (extent1[0] > extent2[0]) {\n            intersection[0] = extent1[0];\n        }\n        else {\n            intersection[0] = extent2[0];\n        }\n        if (extent1[1] > extent2[1]) {\n            intersection[1] = extent1[1];\n        }\n        else {\n            intersection[1] = extent2[1];\n        }\n        if (extent1[2] < extent2[2]) {\n            intersection[2] = extent1[2];\n        }\n        else {\n            intersection[2] = extent2[2];\n        }\n        if (extent1[3] < extent2[3]) {\n            intersection[3] = extent1[3];\n        }\n        else {\n            intersection[3] = extent2[3];\n        }\n    }\n    else {\n        createOrUpdateEmpty(intersection);\n    }\n    return intersection;\n}\n/**\n * @param {Extent} extent Extent.\n * @return {number} Margin.\n */\nexport function getMargin(extent) {\n    return getWidth(extent) + getHeight(extent);\n}\n/**\n * Get the size (width, height) of an extent.\n * @param {Extent} extent The extent.\n * @return {import(\"./size.js\").Size} The extent size.\n * @api\n */\nexport function getSize(extent) {\n    return [extent[2] - extent[0], extent[3] - extent[1]];\n}\n/**\n * Get the top left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top left coordinate.\n * @api\n */\nexport function getTopLeft(extent) {\n    return [extent[0], extent[3]];\n}\n/**\n * Get the top right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top right coordinate.\n * @api\n */\nexport function getTopRight(extent) {\n    return [extent[2], extent[3]];\n}\n/**\n * Get the width of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Width.\n * @api\n */\nexport function getWidth(extent) {\n    return extent[2] - extent[0];\n}\n/**\n * Determine if one extent intersects another.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent.\n * @return {boolean} The two extents intersect.\n * @api\n */\nexport function intersects(extent1, extent2) {\n    return (extent1[0] <= extent2[2] &&\n        extent1[2] >= extent2[0] &&\n        extent1[1] <= extent2[3] &&\n        extent1[3] >= extent2[1]);\n}\n/**\n * Determine if an extent is empty.\n * @param {Extent} extent Extent.\n * @return {boolean} Is empty.\n * @api\n */\nexport function isEmpty(extent) {\n    return extent[2] < extent[0] || extent[3] < extent[1];\n}\n/**\n * @param {Extent} extent Extent.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} Extent.\n */\nexport function returnOrUpdate(extent, opt_extent) {\n    if (opt_extent) {\n        opt_extent[0] = extent[0];\n        opt_extent[1] = extent[1];\n        opt_extent[2] = extent[2];\n        opt_extent[3] = extent[3];\n        return opt_extent;\n    }\n    else {\n        return extent;\n    }\n}\n/**\n * @param {Extent} extent Extent.\n * @param {number} value Value.\n */\nexport function scaleFromCenter(extent, value) {\n    var deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);\n    var deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);\n    extent[0] -= deltaX;\n    extent[2] += deltaX;\n    extent[1] -= deltaY;\n    extent[3] += deltaY;\n}\n/**\n * Determine if the segment between two coordinates intersects (crosses,\n * touches, or is contained by) the provided extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} start Segment start coordinate.\n * @param {import(\"./coordinate.js\").Coordinate} end Segment end coordinate.\n * @return {boolean} The segment intersects the extent.\n */\nexport function intersectsSegment(extent, start, end) {\n    var intersects = false;\n    var startRel = coordinateRelationship(extent, start);\n    var endRel = coordinateRelationship(extent, end);\n    if (startRel === Relationship.INTERSECTING ||\n        endRel === Relationship.INTERSECTING) {\n        intersects = true;\n    }\n    else {\n        var minX = extent[0];\n        var minY = extent[1];\n        var maxX = extent[2];\n        var maxY = extent[3];\n        var startX = start[0];\n        var startY = start[1];\n        var endX = end[0];\n        var endY = end[1];\n        var slope = (endY - startY) / (endX - startX);\n        var x = void 0, y = void 0;\n        if (!!(endRel & Relationship.ABOVE) && !(startRel & Relationship.ABOVE)) {\n            // potentially intersects top\n            x = endX - (endY - maxY) / slope;\n            intersects = x >= minX && x <= maxX;\n        }\n        if (!intersects &&\n            !!(endRel & Relationship.RIGHT) &&\n            !(startRel & Relationship.RIGHT)) {\n            // potentially intersects right\n            y = endY - (endX - maxX) * slope;\n            intersects = y >= minY && y <= maxY;\n        }\n        if (!intersects &&\n            !!(endRel & Relationship.BELOW) &&\n            !(startRel & Relationship.BELOW)) {\n            // potentially intersects bottom\n            x = endX - (endY - minY) / slope;\n            intersects = x >= minX && x <= maxX;\n        }\n        if (!intersects &&\n            !!(endRel & Relationship.LEFT) &&\n            !(startRel & Relationship.LEFT)) {\n            // potentially intersects left\n            y = endY - (endX - minX) * slope;\n            intersects = y >= minY && y <= maxY;\n        }\n    }\n    return intersects;\n}\n/**\n * Apply a transform function to the extent.\n * @param {Extent} extent Extent.\n * @param {import(\"./proj.js\").TransformFunction} transformFn Transform function.\n * Called with `[minX, minY, maxX, maxY]` extent coordinates.\n * @param {Extent} [opt_extent] Destination extent.\n * @param {number} [opt_stops] Number of stops per side used for the transform.\n * By default only the corners are used.\n * @return {Extent} Extent.\n * @api\n */\nexport function applyTransform(extent, transformFn, opt_extent, opt_stops) {\n    var coordinates = [];\n    if (opt_stops > 1) {\n        var width = extent[2] - extent[0];\n        var height = extent[3] - extent[1];\n        for (var i = 0; i < opt_stops; ++i) {\n            coordinates.push(extent[0] + (width * i) / opt_stops, extent[1], extent[2], extent[1] + (height * i) / opt_stops, extent[2] - (width * i) / opt_stops, extent[3], extent[0], extent[3] - (height * i) / opt_stops);\n        }\n    }\n    else {\n        coordinates = [\n            extent[0],\n            extent[1],\n            extent[2],\n            extent[1],\n            extent[2],\n            extent[3],\n            extent[0],\n            extent[3],\n        ];\n    }\n    transformFn(coordinates, coordinates, 2);\n    var xs = [];\n    var ys = [];\n    for (var i = 0, l = coordinates.length; i < l; i += 2) {\n        xs.push(coordinates[i]);\n        ys.push(coordinates[i + 1]);\n    }\n    return _boundingExtentXYs(xs, ys, opt_extent);\n}\n/**\n * Modifies the provided extent in-place to be within the real world\n * extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./proj/Projection.js\").default} projection Projection\n * @return {Extent} The extent within the real world extent.\n */\nexport function wrapX(extent, projection) {\n    var projectionExtent = projection.getExtent();\n    var center = getCenter(extent);\n    if (projection.canWrapX() &&\n        (center[0] < projectionExtent[0] || center[0] >= projectionExtent[2])) {\n        var worldWidth = getWidth(projectionExtent);\n        var worldsAway = Math.floor((center[0] - projectionExtent[0]) / worldWidth);\n        var offset = worldsAway * worldWidth;\n        extent[0] -= offset;\n        extent[2] -= offset;\n    }\n    return extent;\n}\n/**\n * Fits the extent to the real world\n *\n * If the extent does not cross the anti meridian, this will return the extent in an array\n * If the extent crosses the anti meridian, the extent will be sliced, so each part fits within the\n * real world\n *\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./proj/Projection.js\").default} projection Projection\n * @return {Array<Extent>} The extent within the real world extent.\n */\nexport function wrapAndSliceX(extent, projection) {\n    if (projection.canWrapX()) {\n        var projectionExtent = projection.getExtent();\n        if (!isFinite(extent[0]) || !isFinite(extent[2])) {\n            return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];\n        }\n        wrapX(extent, projection);\n        var worldWidth = getWidth(projectionExtent);\n        if (getWidth(extent) > worldWidth) {\n            // the extent wraps around on itself\n            return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];\n        }\n        else if (extent[0] < projectionExtent[0]) {\n            // the extent crosses the anti meridian, so it needs to be sliced\n            return [\n                [extent[0] + worldWidth, extent[1], projectionExtent[2], extent[3]],\n                [projectionExtent[0], extent[1], extent[2], extent[3]],\n            ];\n        }\n        else if (extent[2] > projectionExtent[2]) {\n            // the extent crosses the anti meridian, so it needs to be sliced\n            return [\n                [extent[0], extent[1], projectionExtent[2], extent[3]],\n                [projectionExtent[0], extent[1], extent[2] - worldWidth, extent[3]],\n            ];\n        }\n    }\n    return [extent];\n}\n//# sourceMappingURL=extent.js.map","/**\n * @module ol/extent/Relationship\n */\n/**\n * Relationship to an extent.\n * @enum {number}\n */\nexport default {\n    UNKNOWN: 0,\n    INTERSECTING: 1,\n    ABOVE: 2,\n    RIGHT: 4,\n    BELOW: 8,\n    LEFT: 16,\n};\n//# sourceMappingURL=Relationship.js.map","/**\n * @module ol/math\n */\n/**\n * Takes a number and clamps it to within the provided bounds.\n * @param {number} value The input number.\n * @param {number} min The minimum value to return.\n * @param {number} max The maximum value to return.\n * @return {number} The input number if it is within bounds, or the nearest\n *     number within the bounds.\n */\nexport function clamp(value, min, max) {\n    return Math.min(Math.max(value, min), max);\n}\n/**\n * Return the hyperbolic cosine of a given number. The method will use the\n * native `Math.cosh` function if it is available, otherwise the hyperbolic\n * cosine will be calculated via the reference implementation of the Mozilla\n * developer network.\n *\n * @param {number} x X.\n * @return {number} Hyperbolic cosine of x.\n */\nexport var cosh = (function () {\n    // Wrapped in a iife, to save the overhead of checking for the native\n    // implementation on every invocation.\n    var cosh;\n    if ('cosh' in Math) {\n        // The environment supports the native Math.cosh function, use it…\n        cosh = Math.cosh;\n    }\n    else {\n        // … else, use the reference implementation of MDN:\n        cosh = function (x) {\n            var y = /** @type {Math} */ (Math).exp(x);\n            return (y + 1 / y) / 2;\n        };\n    }\n    return cosh;\n})();\n/**\n * Return the base 2 logarithm of a given number. The method will use the\n * native `Math.log2` function if it is available, otherwise the base 2\n * logarithm will be calculated via the reference implementation of the\n * Mozilla developer network.\n *\n * @param {number} x X.\n * @return {number} Base 2 logarithm of x.\n */\nexport var log2 = (function () {\n    // Wrapped in a iife, to save the overhead of checking for the native\n    // implementation on every invocation.\n    var log2;\n    if ('log2' in Math) {\n        // The environment supports the native Math.log2 function, use it…\n        log2 = Math.log2;\n    }\n    else {\n        // … else, use the reference implementation of MDN:\n        log2 = function (x) {\n            return Math.log(x) * Math.LOG2E;\n        };\n    }\n    return log2;\n})();\n/**\n * Returns the square of the closest distance between the point (x, y) and the\n * line segment (x1, y1) to (x2, y2).\n * @param {number} x X.\n * @param {number} y Y.\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredSegmentDistance(x, y, x1, y1, x2, y2) {\n    var dx = x2 - x1;\n    var dy = y2 - y1;\n    if (dx !== 0 || dy !== 0) {\n        var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n        if (t > 1) {\n            x1 = x2;\n            y1 = y2;\n        }\n        else if (t > 0) {\n            x1 += dx * t;\n            y1 += dy * t;\n        }\n    }\n    return squaredDistance(x, y, x1, y1);\n}\n/**\n * Returns the square of the distance between the points (x1, y1) and (x2, y2).\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredDistance(x1, y1, x2, y2) {\n    var dx = x2 - x1;\n    var dy = y2 - y1;\n    return dx * dx + dy * dy;\n}\n/**\n * Solves system of linear equations using Gaussian elimination method.\n *\n * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)\n *                                     in row-major order.\n * @return {Array<number>} The resulting vector.\n */\nexport function solveLinearSystem(mat) {\n    var n = mat.length;\n    for (var i = 0; i < n; i++) {\n        // Find max in the i-th column (ignoring i - 1 first rows)\n        var maxRow = i;\n        var maxEl = Math.abs(mat[i][i]);\n        for (var r = i + 1; r < n; r++) {\n            var absValue = Math.abs(mat[r][i]);\n            if (absValue > maxEl) {\n                maxEl = absValue;\n                maxRow = r;\n            }\n        }\n        if (maxEl === 0) {\n            return null; // matrix is singular\n        }\n        // Swap max row with i-th (current) row\n        var tmp = mat[maxRow];\n        mat[maxRow] = mat[i];\n        mat[i] = tmp;\n        // Subtract the i-th row to make all the remaining rows 0 in the i-th column\n        for (var j = i + 1; j < n; j++) {\n            var coef = -mat[j][i] / mat[i][i];\n            for (var k = i; k < n + 1; k++) {\n                if (i == k) {\n                    mat[j][k] = 0;\n                }\n                else {\n                    mat[j][k] += coef * mat[i][k];\n                }\n            }\n        }\n    }\n    // Solve Ax=b for upper triangular matrix A (mat)\n    var x = new Array(n);\n    for (var l = n - 1; l >= 0; l--) {\n        x[l] = mat[l][n] / mat[l][l];\n        for (var m = l - 1; m >= 0; m--) {\n            mat[m][n] -= mat[m][l] * x[l];\n        }\n    }\n    return x;\n}\n/**\n * Converts radians to to degrees.\n *\n * @param {number} angleInRadians Angle in radians.\n * @return {number} Angle in degrees.\n */\nexport function toDegrees(angleInRadians) {\n    return (angleInRadians * 180) / Math.PI;\n}\n/**\n * Converts degrees to radians.\n *\n * @param {number} angleInDegrees Angle in degrees.\n * @return {number} Angle in radians.\n */\nexport function toRadians(angleInDegrees) {\n    return (angleInDegrees * Math.PI) / 180;\n}\n/**\n * Returns the modulo of a / b, depending on the sign of b.\n *\n * @param {number} a Dividend.\n * @param {number} b Divisor.\n * @return {number} Modulo.\n */\nexport function modulo(a, b) {\n    var r = a % b;\n    return r * b < 0 ? r + b : r;\n}\n/**\n * Calculates the linearly interpolated value of x between a and b.\n *\n * @param {number} a Number\n * @param {number} b Number\n * @param {number} x Value to be interpolated.\n * @return {number} Interpolated value.\n */\nexport function lerp(a, b, x) {\n    return a + x * (b - a);\n}\n/**\n * Returns a number with a limited number of decimal digits.\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The input number with a limited number of decimal digits.\n */\nexport function toFixed(n, decimals) {\n    var factor = Math.pow(10, decimals);\n    return Math.round(n * factor) / factor;\n}\n/**\n * Rounds a number to the nearest integer value considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The nearest integer.\n */\nexport function round(n, decimals) {\n    return Math.round(toFixed(n, decimals));\n}\n/**\n * Rounds a number to the next smaller integer considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The next smaller integer.\n */\nexport function floor(n, decimals) {\n    return Math.floor(toFixed(n, decimals));\n}\n/**\n * Rounds a number to the next bigger integer considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The next bigger integer.\n */\nexport function ceil(n, decimals) {\n    return Math.ceil(toFixed(n, decimals));\n}\n//# sourceMappingURL=math.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/proj/epsg3857\n */\nimport Projection from './Projection.js';\nimport Units from './Units.js';\nimport { cosh } from '../math.js';\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\nexport var RADIUS = 6378137;\n/**\n * @const\n * @type {number}\n */\nexport var HALF_SIZE = Math.PI * RADIUS;\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport var EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport var WORLD_EXTENT = [-180, -85, 180, 85];\n/**\n * Maximum safe value in y direction\n * @const\n * @type {number}\n */\nexport var MAX_SAFE_Y = RADIUS * Math.log(Math.tan(Math.PI / 2));\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */\nvar EPSG3857Projection = /** @class */ (function (_super) {\n    __extends(EPSG3857Projection, _super);\n    /**\n     * @param {string} code Code.\n     */\n    function EPSG3857Projection(code) {\n        return _super.call(this, {\n            code: code,\n            units: Units.METERS,\n            extent: EXTENT,\n            global: true,\n            worldExtent: WORLD_EXTENT,\n            getPointResolution: function (resolution, point) {\n                return resolution / cosh(point[1] / RADIUS);\n            },\n        }) || this;\n    }\n    return EPSG3857Projection;\n}(Projection));\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport var PROJECTIONS = [\n    new EPSG3857Projection('EPSG:3857'),\n    new EPSG3857Projection('EPSG:102100'),\n    new EPSG3857Projection('EPSG:102113'),\n    new EPSG3857Projection('EPSG:900913'),\n    new EPSG3857Projection('http://www.opengis.net/def/crs/EPSG/0/3857'),\n    new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857'),\n];\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [opt_output] Output array of coordinate values.\n * @param {number} [opt_dimension] Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function fromEPSG4326(input, opt_output, opt_dimension) {\n    var length = input.length;\n    var dimension = opt_dimension > 1 ? opt_dimension : 2;\n    var output = opt_output;\n    if (output === undefined) {\n        if (dimension > 2) {\n            // preserve values beyond second dimension\n            output = input.slice();\n        }\n        else {\n            output = new Array(length);\n        }\n    }\n    for (var i = 0; i < length; i += dimension) {\n        output[i] = (HALF_SIZE * input[i]) / 180;\n        var y = RADIUS * Math.log(Math.tan((Math.PI * (+input[i + 1] + 90)) / 360));\n        if (y > MAX_SAFE_Y) {\n            y = MAX_SAFE_Y;\n        }\n        else if (y < -MAX_SAFE_Y) {\n            y = -MAX_SAFE_Y;\n        }\n        output[i + 1] = y;\n    }\n    return output;\n}\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [opt_output] Output array of coordinate values.\n * @param {number} [opt_dimension] Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function toEPSG4326(input, opt_output, opt_dimension) {\n    var length = input.length;\n    var dimension = opt_dimension > 1 ? opt_dimension : 2;\n    var output = opt_output;\n    if (output === undefined) {\n        if (dimension > 2) {\n            // preserve values beyond second dimension\n            output = input.slice();\n        }\n        else {\n            output = new Array(length);\n        }\n    }\n    for (var i = 0; i < length; i += dimension) {\n        output[i] = (180 * input[i]) / HALF_SIZE;\n        output[i + 1] =\n            (360 * Math.atan(Math.exp(input[i + 1] / RADIUS))) / Math.PI - 90;\n    }\n    return output;\n}\n//# sourceMappingURL=epsg3857.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/proj/epsg4326\n */\nimport Projection from './Projection.js';\nimport Units from './Units.js';\n/**\n * Semi-major radius of the WGS84 ellipsoid.\n *\n * @const\n * @type {number}\n */\nexport var RADIUS = 6378137;\n/**\n * Extent of the EPSG:4326 projection which is the whole world.\n *\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport var EXTENT = [-180, -90, 180, 90];\n/**\n * @const\n * @type {number}\n */\nexport var METERS_PER_UNIT = (Math.PI * RADIUS) / 180;\n/**\n * @classdesc\n * Projection object for WGS84 geographic coordinates (EPSG:4326).\n *\n * Note that OpenLayers does not strictly comply with the EPSG definition.\n * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).\n * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.\n */\nvar EPSG4326Projection = /** @class */ (function (_super) {\n    __extends(EPSG4326Projection, _super);\n    /**\n     * @param {string} code Code.\n     * @param {string} [opt_axisOrientation] Axis orientation.\n     */\n    function EPSG4326Projection(code, opt_axisOrientation) {\n        return _super.call(this, {\n            code: code,\n            units: Units.DEGREES,\n            extent: EXTENT,\n            axisOrientation: opt_axisOrientation,\n            global: true,\n            metersPerUnit: METERS_PER_UNIT,\n            worldExtent: EXTENT,\n        }) || this;\n    }\n    return EPSG4326Projection;\n}(Projection));\n/**\n * Projections equal to EPSG:4326.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport var PROJECTIONS = [\n    new EPSG4326Projection('CRS:84'),\n    new EPSG4326Projection('EPSG:4326', 'neu'),\n    new EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'),\n    new EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'),\n    new EPSG4326Projection('http://www.opengis.net/def/crs/OGC/1.3/CRS84'),\n    new EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'),\n    new EPSG4326Projection('http://www.opengis.net/def/crs/EPSG/0/4326', 'neu'),\n];\n//# sourceMappingURL=epsg4326.js.map","/**\n * @module ol/proj/projections\n */\n/**\n * @type {Object<string, import(\"./Projection.js\").default>}\n */\nvar cache = {};\n/**\n * Clear the projections cache.\n */\nexport function clear() {\n    cache = {};\n}\n/**\n * Get a cached projection by code.\n * @param {string} code The code for the projection.\n * @return {import(\"./Projection.js\").default} The projection (if cached).\n */\nexport function get(code) {\n    return (cache[code] ||\n        cache[code.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\\w+)$/, 'EPSG:$3')] ||\n        null);\n}\n/**\n * Add a projection to the cache.\n * @param {string} code The projection code.\n * @param {import(\"./Projection.js\").default} projection The projection to cache.\n */\nexport function add(code, projection) {\n    cache[code] = projection;\n}\n//# sourceMappingURL=projections.js.map","/**\n * @module ol/sphere\n */\nimport { toDegrees, toRadians } from './math.js';\n/**\n * Object literal with options for the {@link getLength} or {@link getArea}\n * functions.\n * @typedef {Object} SphereMetricOptions\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857']\n * Projection of the  geometry.  By default, the geometry is assumed to be in\n * Web Mercator.\n * @property {number} [radius=6371008.8] Sphere radius.  By default, the\n * [mean Earth radius](https://en.wikipedia.org/wiki/Earth_radius#Mean_radius)\n * for the WGS84 ellipsoid is used.\n */\n/**\n * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.\n * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius\n * @type {number}\n */\nexport var DEFAULT_RADIUS = 6371008.8;\n/**\n * Get the great circle distance (in meters) between two geographic coordinates.\n * @param {Array} c1 Starting coordinate.\n * @param {Array} c2 Ending coordinate.\n * @param {number} [opt_radius] The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {number} The great circle distance between the points (in meters).\n * @api\n */\nexport function getDistance(c1, c2, opt_radius) {\n    var radius = opt_radius || DEFAULT_RADIUS;\n    var lat1 = toRadians(c1[1]);\n    var lat2 = toRadians(c2[1]);\n    var deltaLatBy2 = (lat2 - lat1) / 2;\n    var deltaLonBy2 = toRadians(c2[0] - c1[0]) / 2;\n    var a = Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) +\n        Math.sin(deltaLonBy2) *\n            Math.sin(deltaLonBy2) *\n            Math.cos(lat1) *\n            Math.cos(lat2);\n    return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n}\n/**\n * Get the cumulative great circle length of linestring coordinates (geographic).\n * @param {Array} coordinates Linestring coordinates.\n * @param {number} radius The sphere radius to use.\n * @return {number} The length (in meters).\n */\nfunction getLengthInternal(coordinates, radius) {\n    var length = 0;\n    for (var i = 0, ii = coordinates.length; i < ii - 1; ++i) {\n        length += getDistance(coordinates[i], coordinates[i + 1], radius);\n    }\n    return length;\n}\n/**\n * Get the spherical length of a geometry.  This length is the sum of the\n * great circle distances between coordinates.  For polygons, the length is\n * the sum of all rings.  For points, the length is zero.  For multi-part\n * geometries, the length is the sum of the length of each part.\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\n * @param {SphereMetricOptions} [opt_options] Options for the\n * length calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n * You can change this by providing a `projection` option.\n * @return {number} The spherical length (in meters).\n * @api\n */\nexport function getLength(geometry, opt_options) {\n    var options = opt_options || {};\n    var radius = options.radius || DEFAULT_RADIUS;\n    var projection = options.projection || 'EPSG:3857';\n    var type = geometry.getType();\n    if (type !== 'GeometryCollection') {\n        geometry = geometry.clone().transform(projection, 'EPSG:4326');\n    }\n    var length = 0;\n    var coordinates, coords, i, ii, j, jj;\n    switch (type) {\n        case 'Point':\n        case 'MultiPoint': {\n            break;\n        }\n        case 'LineString':\n        case 'LinearRing': {\n            coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (geometry).getCoordinates();\n            length = getLengthInternal(coordinates, radius);\n            break;\n        }\n        case 'MultiLineString':\n        case 'Polygon': {\n            coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (geometry).getCoordinates();\n            for (i = 0, ii = coordinates.length; i < ii; ++i) {\n                length += getLengthInternal(coordinates[i], radius);\n            }\n            break;\n        }\n        case 'MultiPolygon': {\n            coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (geometry).getCoordinates();\n            for (i = 0, ii = coordinates.length; i < ii; ++i) {\n                coords = coordinates[i];\n                for (j = 0, jj = coords.length; j < jj; ++j) {\n                    length += getLengthInternal(coords[j], radius);\n                }\n            }\n            break;\n        }\n        case 'GeometryCollection': {\n            var geometries = \n            /** @type {import(\"./geom/GeometryCollection.js\").default} */ (geometry).getGeometries();\n            for (i = 0, ii = geometries.length; i < ii; ++i) {\n                length += getLength(geometries[i], opt_options);\n            }\n            break;\n        }\n        default: {\n            throw new Error('Unsupported geometry type: ' + type);\n        }\n    }\n    return length;\n}\n/**\n * Returns the spherical area for a list of coordinates.\n *\n * [Reference](https://trs.jpl.nasa.gov/handle/2014/40409)\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for\n * Polygons on a Sphere\", JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates List of coordinates of a linear\n * ring. If the ring is oriented clockwise, the area will be positive,\n * otherwise it will be negative.\n * @param {number} radius The sphere radius.\n * @return {number} Area (in square meters).\n */\nfunction getAreaInternal(coordinates, radius) {\n    var area = 0;\n    var len = coordinates.length;\n    var x1 = coordinates[len - 1][0];\n    var y1 = coordinates[len - 1][1];\n    for (var i = 0; i < len; i++) {\n        var x2 = coordinates[i][0];\n        var y2 = coordinates[i][1];\n        area +=\n            toRadians(x2 - x1) *\n                (2 + Math.sin(toRadians(y1)) + Math.sin(toRadians(y2)));\n        x1 = x2;\n        y1 = y2;\n    }\n    return (area * radius * radius) / 2.0;\n}\n/**\n * Get the spherical area of a geometry.  This is the area (in meters) assuming\n * that polygon edges are segments of great circles on a sphere.\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\n * @param {SphereMetricOptions} [opt_options] Options for the area\n *     calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n *     You can change this by providing a `projection` option.\n * @return {number} The spherical area (in square meters).\n * @api\n */\nexport function getArea(geometry, opt_options) {\n    var options = opt_options || {};\n    var radius = options.radius || DEFAULT_RADIUS;\n    var projection = options.projection || 'EPSG:3857';\n    var type = geometry.getType();\n    if (type !== 'GeometryCollection') {\n        geometry = geometry.clone().transform(projection, 'EPSG:4326');\n    }\n    var area = 0;\n    var coordinates, coords, i, ii, j, jj;\n    switch (type) {\n        case 'Point':\n        case 'MultiPoint':\n        case 'LineString':\n        case 'MultiLineString':\n        case 'LinearRing': {\n            break;\n        }\n        case 'Polygon': {\n            coordinates = /** @type {import(\"./geom/Polygon.js\").default} */ (geometry).getCoordinates();\n            area = Math.abs(getAreaInternal(coordinates[0], radius));\n            for (i = 1, ii = coordinates.length; i < ii; ++i) {\n                area -= Math.abs(getAreaInternal(coordinates[i], radius));\n            }\n            break;\n        }\n        case 'MultiPolygon': {\n            coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (geometry).getCoordinates();\n            for (i = 0, ii = coordinates.length; i < ii; ++i) {\n                coords = coordinates[i];\n                area += Math.abs(getAreaInternal(coords[0], radius));\n                for (j = 1, jj = coords.length; j < jj; ++j) {\n                    area -= Math.abs(getAreaInternal(coords[j], radius));\n                }\n            }\n            break;\n        }\n        case 'GeometryCollection': {\n            var geometries = \n            /** @type {import(\"./geom/GeometryCollection.js\").default} */ (geometry).getGeometries();\n            for (i = 0, ii = geometries.length; i < ii; ++i) {\n                area += getArea(geometries[i], opt_options);\n            }\n            break;\n        }\n        default: {\n            throw new Error('Unsupported geometry type: ' + type);\n        }\n    }\n    return area;\n}\n/**\n * Returns the coordinate at the given distance and bearing from `c1`.\n *\n * @param {import(\"./coordinate.js\").Coordinate} c1 The origin point (`[lon, lat]` in degrees).\n * @param {number} distance The great-circle distance between the origin\n *     point and the target point.\n * @param {number} bearing The bearing (in radians).\n * @param {number} [opt_radius] The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {import(\"./coordinate.js\").Coordinate} The target point.\n */\nexport function offset(c1, distance, bearing, opt_radius) {\n    var radius = opt_radius || DEFAULT_RADIUS;\n    var lat1 = toRadians(c1[1]);\n    var lon1 = toRadians(c1[0]);\n    var dByR = distance / radius;\n    var lat = Math.asin(Math.sin(lat1) * Math.cos(dByR) +\n        Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing));\n    var lon = lon1 +\n        Math.atan2(Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1), Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat));\n    return [toDegrees(lon), toDegrees(lat)];\n}\n//# sourceMappingURL=sphere.js.map","/**\n * @module ol/proj\n */\n/**\n * The ol/proj module stores:\n * * a list of {@link module:ol/proj/Projection~Projection}\n * objects, one for each projection supported by the application\n * * a list of transform functions needed to convert coordinates in one projection\n * into another.\n *\n * The static functions are the methods used to maintain these.\n * Each transform function can handle not only simple coordinate pairs, but also\n * large arrays of coordinates such as vector geometries.\n *\n * When loaded, the library adds projection objects for EPSG:4326 (WGS84\n * geographic coordinates) and EPSG:3857 (Web or Spherical Mercator, as used\n * for example by Bing Maps or OpenStreetMap), together with the relevant\n * transform functions.\n *\n * Additional transforms may be added by using the http://proj4js.org/\n * library (version 2.2 or later). You can use the full build supplied by\n * Proj4js, or create a custom build to support those projections you need; see\n * the Proj4js website for how to do this. You also need the Proj4js definitions\n * for the required projections. These definitions can be obtained from\n * https://epsg.io/, and are a JS function, so can be loaded in a script\n * tag (as in the examples) or pasted into your application.\n *\n * After all required projection definitions are added to proj4's registry (by\n * using `proj4.defs()`), simply call `register(proj4)` from the `ol/proj/proj4`\n * package. Existing transforms are not changed by this function. See\n * examples/wms-image-custom-proj for an example of this.\n *\n * Additional projection definitions can be registered with `proj4.defs()` any\n * time. Just make sure to call `register(proj4)` again; for example, with user-supplied data where you don't\n * know in advance what projections are needed, you can initially load minimal\n * support and then load whichever are requested.\n *\n * Note that Proj4js does not support projection extents. If you want to add\n * one for creating default tile grids, you can add it after the Projection\n * object has been created with `setExtent`, for example,\n * `get('EPSG:1234').setExtent(extent)`.\n *\n * In addition to Proj4js support, any transform functions can be added with\n * {@link module:ol/proj.addCoordinateTransforms}. To use this, you must first create\n * a {@link module:ol/proj/Projection~Projection} object for the new projection and add it with\n * {@link module:ol/proj.addProjection}. You can then add the forward and inverse\n * functions with {@link module:ol/proj.addCoordinateTransforms}. See\n * examples/wms-custom-proj for an example of this.\n *\n * Note that if no transforms are needed and you only need to define the\n * projection, just add a {@link module:ol/proj/Projection~Projection} with\n * {@link module:ol/proj.addProjection}. See examples/wms-no-proj for an example of\n * this.\n */\nimport Projection from './proj/Projection.js';\nimport Units, { METERS_PER_UNIT } from './proj/Units.js';\nimport { PROJECTIONS as EPSG3857_PROJECTIONS, fromEPSG4326, toEPSG4326, } from './proj/epsg3857.js';\nimport { PROJECTIONS as EPSG4326_PROJECTIONS } from './proj/epsg4326.js';\nimport { add as addProj, clear as clearProj, get as getProj, } from './proj/projections.js';\nimport { add as addTransformFunc, clear as clearTransformFuncs, get as getTransformFunc, } from './proj/transforms.js';\nimport { applyTransform, getWidth } from './extent.js';\nimport { clamp, modulo } from './math.js';\nimport { equals, getWorldsAway } from './coordinate.js';\nimport { getDistance } from './sphere.js';\n/**\n * A projection as {@link module:ol/proj/Projection~Projection}, SRS identifier\n * string or undefined.\n * @typedef {Projection|string|undefined} ProjectionLike\n * @api\n */\n/**\n * A transform function accepts an array of input coordinate values, an optional\n * output array, and an optional dimension (default should be 2).  The function\n * transforms the input coordinate values, populates the output array, and\n * returns the output array.\n *\n * @typedef {function(Array<number>, Array<number>=, number=): Array<number>} TransformFunction\n * @api\n */\nexport { METERS_PER_UNIT };\nexport { Projection };\nvar showCoordinateWarning = true;\n/**\n * @param {boolean} [opt_disable = true] Disable console info about `useGeographic()`\n */\nexport function disableCoordinateWarning(opt_disable) {\n    var hide = opt_disable === undefined ? true : opt_disable;\n    showCoordinateWarning = !hide;\n}\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>} [opt_output] Output array of coordinate values.\n * @param {number} [opt_dimension] Dimension.\n * @return {Array<number>} Output coordinate array (new array, same coordinate\n *     values).\n */\nexport function cloneTransform(input, opt_output, opt_dimension) {\n    var output;\n    if (opt_output !== undefined) {\n        for (var i = 0, ii = input.length; i < ii; ++i) {\n            opt_output[i] = input[i];\n        }\n        output = opt_output;\n    }\n    else {\n        output = input.slice();\n    }\n    return output;\n}\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>} [opt_output] Output array of coordinate values.\n * @param {number} [opt_dimension] Dimension.\n * @return {Array<number>} Input coordinate array (same array as input).\n */\nexport function identityTransform(input, opt_output, opt_dimension) {\n    if (opt_output !== undefined && input !== opt_output) {\n        for (var i = 0, ii = input.length; i < ii; ++i) {\n            opt_output[i] = input[i];\n        }\n        input = opt_output;\n    }\n    return input;\n}\n/**\n * Add a Projection object to the list of supported projections that can be\n * looked up by their code.\n *\n * @param {Projection} projection Projection instance.\n * @api\n */\nexport function addProjection(projection) {\n    addProj(projection.getCode(), projection);\n    addTransformFunc(projection, projection, cloneTransform);\n}\n/**\n * @param {Array<Projection>} projections Projections.\n */\nexport function addProjections(projections) {\n    projections.forEach(addProjection);\n}\n/**\n * Fetches a Projection object for the code specified.\n *\n * @param {ProjectionLike} projectionLike Either a code string which is\n *     a combination of authority and identifier such as \"EPSG:4326\", or an\n *     existing projection object, or undefined.\n * @return {Projection|null} Projection object, or null if not in list.\n * @api\n */\nexport function get(projectionLike) {\n    return typeof projectionLike === 'string'\n        ? getProj(/** @type {string} */ (projectionLike))\n        : /** @type {Projection} */ (projectionLike) || null;\n}\n/**\n * Get the resolution of the point in degrees or distance units.\n * For projections with degrees as the unit this will simply return the\n * provided resolution. For other projections the point resolution is\n * by default estimated by transforming the `point` pixel to EPSG:4326,\n * measuring its width and height on the normal sphere,\n * and taking the average of the width and height.\n * A custom function can be provided for a specific projection, either\n * by setting the `getPointResolution` option in the\n * {@link module:ol/proj/Projection~Projection} constructor or by using\n * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing\n * projection object.\n * @param {ProjectionLike} projection The projection.\n * @param {number} resolution Nominal resolution in projection units.\n * @param {import(\"./coordinate.js\").Coordinate} point Point to find adjusted resolution at.\n * @param {import(\"./proj/Units.js\").default} [opt_units] Units to get the point resolution in.\n * Default is the projection's units.\n * @return {number} Point resolution.\n * @api\n */\nexport function getPointResolution(projection, resolution, point, opt_units) {\n    projection = get(projection);\n    var pointResolution;\n    var getter = projection.getPointResolutionFunc();\n    if (getter) {\n        pointResolution = getter(resolution, point);\n        if (opt_units && opt_units !== projection.getUnits()) {\n            var metersPerUnit = projection.getMetersPerUnit();\n            if (metersPerUnit) {\n                pointResolution =\n                    (pointResolution * metersPerUnit) / METERS_PER_UNIT[opt_units];\n            }\n        }\n    }\n    else {\n        var units = projection.getUnits();\n        if ((units == Units.DEGREES && !opt_units) || opt_units == Units.DEGREES) {\n            pointResolution = resolution;\n        }\n        else {\n            // Estimate point resolution by transforming the center pixel to EPSG:4326,\n            // measuring its width and height on the normal sphere, and taking the\n            // average of the width and height.\n            var toEPSG4326_1 = getTransformFromProjections(projection, get('EPSG:4326'));\n            if (toEPSG4326_1 === identityTransform && units !== Units.DEGREES) {\n                // no transform is available\n                pointResolution = resolution * projection.getMetersPerUnit();\n            }\n            else {\n                var vertices = [\n                    point[0] - resolution / 2,\n                    point[1],\n                    point[0] + resolution / 2,\n                    point[1],\n                    point[0],\n                    point[1] - resolution / 2,\n                    point[0],\n                    point[1] + resolution / 2,\n                ];\n                vertices = toEPSG4326_1(vertices, vertices, 2);\n                var width = getDistance(vertices.slice(0, 2), vertices.slice(2, 4));\n                var height = getDistance(vertices.slice(4, 6), vertices.slice(6, 8));\n                pointResolution = (width + height) / 2;\n            }\n            var metersPerUnit = opt_units\n                ? METERS_PER_UNIT[opt_units]\n                : projection.getMetersPerUnit();\n            if (metersPerUnit !== undefined) {\n                pointResolution /= metersPerUnit;\n            }\n        }\n    }\n    return pointResolution;\n}\n/**\n * Registers transformation functions that don't alter coordinates. Those allow\n * to transform between projections with equal meaning.\n *\n * @param {Array<Projection>} projections Projections.\n * @api\n */\nexport function addEquivalentProjections(projections) {\n    addProjections(projections);\n    projections.forEach(function (source) {\n        projections.forEach(function (destination) {\n            if (source !== destination) {\n                addTransformFunc(source, destination, cloneTransform);\n            }\n        });\n    });\n}\n/**\n * Registers transformation functions to convert coordinates in any projection\n * in projection1 to any projection in projection2.\n *\n * @param {Array<Projection>} projections1 Projections with equal\n *     meaning.\n * @param {Array<Projection>} projections2 Projections with equal\n *     meaning.\n * @param {TransformFunction} forwardTransform Transformation from any\n *   projection in projection1 to any projection in projection2.\n * @param {TransformFunction} inverseTransform Transform from any projection\n *   in projection2 to any projection in projection1..\n */\nexport function addEquivalentTransforms(projections1, projections2, forwardTransform, inverseTransform) {\n    projections1.forEach(function (projection1) {\n        projections2.forEach(function (projection2) {\n            addTransformFunc(projection1, projection2, forwardTransform);\n            addTransformFunc(projection2, projection1, inverseTransform);\n        });\n    });\n}\n/**\n * Clear all cached projections and transforms.\n */\nexport function clearAllProjections() {\n    clearProj();\n    clearTransformFuncs();\n}\n/**\n * @param {Projection|string|undefined} projection Projection.\n * @param {string} defaultCode Default code.\n * @return {Projection} Projection.\n */\nexport function createProjection(projection, defaultCode) {\n    if (!projection) {\n        return get(defaultCode);\n    }\n    else if (typeof projection === 'string') {\n        return get(projection);\n    }\n    else {\n        return /** @type {Projection} */ (projection);\n    }\n}\n/**\n * Creates a {@link module:ol/proj~TransformFunction} from a simple 2D coordinate transform\n * function.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} coordTransform Coordinate\n *     transform.\n * @return {TransformFunction} Transform function.\n */\nexport function createTransformFromCoordinateTransform(coordTransform) {\n    return (\n    /**\n     * @param {Array<number>} input Input.\n     * @param {Array<number>} [opt_output] Output.\n     * @param {number} [opt_dimension] Dimension.\n     * @return {Array<number>} Output.\n     */\n    function (input, opt_output, opt_dimension) {\n        var length = input.length;\n        var dimension = opt_dimension !== undefined ? opt_dimension : 2;\n        var output = opt_output !== undefined ? opt_output : new Array(length);\n        for (var i = 0; i < length; i += dimension) {\n            var point = coordTransform(input.slice(i, i + dimension));\n            var pointLength = point.length;\n            for (var j = 0, jj = dimension; j < jj; ++j) {\n                output[i + j] = j >= pointLength ? input[i + j] : point[j];\n            }\n        }\n        return output;\n    });\n}\n/**\n * Registers coordinate transform functions to convert coordinates between the\n * source projection and the destination projection.\n * The forward and inverse functions convert coordinate pairs; this function\n * converts these into the functions used internally which also handle\n * extents and coordinate arrays.\n *\n * @param {ProjectionLike} source Source projection.\n * @param {ProjectionLike} destination Destination projection.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} forward The forward transform\n *     function (that is, from the source projection to the destination\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} inverse The inverse transform\n *     function (that is, from the destination projection to the source\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}. If the transform function can only\n *     transform less dimensions than the input coordinate, it is supposeed to return a coordinate\n *     with only the length it can transform. The other dimensions will be taken unchanged from the\n *     source.\n * @api\n */\nexport function addCoordinateTransforms(source, destination, forward, inverse) {\n    var sourceProj = get(source);\n    var destProj = get(destination);\n    addTransformFunc(sourceProj, destProj, createTransformFromCoordinateTransform(forward));\n    addTransformFunc(destProj, sourceProj, createTransformFromCoordinateTransform(inverse));\n}\n/**\n * Transforms a coordinate from longitude/latitude to a different projection.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate as longitude and latitude, i.e.\n *     an array with longitude as 1st and latitude as 2nd element.\n * @param {ProjectionLike} [opt_projection] Target projection. The\n *     default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate projected to the target projection.\n * @api\n */\nexport function fromLonLat(coordinate, opt_projection) {\n    disableCoordinateWarning();\n    return transform(coordinate, 'EPSG:4326', opt_projection !== undefined ? opt_projection : 'EPSG:3857');\n}\n/**\n * Transforms a coordinate to longitude/latitude.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Projected coordinate.\n * @param {ProjectionLike} [opt_projection] Projection of the coordinate.\n *     The default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate as longitude and latitude, i.e. an array\n *     with longitude as 1st and latitude as 2nd element.\n * @api\n */\nexport function toLonLat(coordinate, opt_projection) {\n    var lonLat = transform(coordinate, opt_projection !== undefined ? opt_projection : 'EPSG:3857', 'EPSG:4326');\n    var lon = lonLat[0];\n    if (lon < -180 || lon > 180) {\n        lonLat[0] = modulo(lon + 180, 360) - 180;\n    }\n    return lonLat;\n}\n/**\n * Checks if two projections are the same, that is every coordinate in one\n * projection does represent the same geographic point as the same coordinate in\n * the other projection.\n *\n * @param {Projection} projection1 Projection 1.\n * @param {Projection} projection2 Projection 2.\n * @return {boolean} Equivalent.\n * @api\n */\nexport function equivalent(projection1, projection2) {\n    if (projection1 === projection2) {\n        return true;\n    }\n    var equalUnits = projection1.getUnits() === projection2.getUnits();\n    if (projection1.getCode() === projection2.getCode()) {\n        return equalUnits;\n    }\n    else {\n        var transformFunc = getTransformFromProjections(projection1, projection2);\n        return transformFunc === cloneTransform && equalUnits;\n    }\n}\n/**\n * Searches in the list of transform functions for the function for converting\n * coordinates from the source projection to the destination projection.\n *\n * @param {Projection} sourceProjection Source Projection object.\n * @param {Projection} destinationProjection Destination Projection\n *     object.\n * @return {TransformFunction} Transform function.\n */\nexport function getTransformFromProjections(sourceProjection, destinationProjection) {\n    var sourceCode = sourceProjection.getCode();\n    var destinationCode = destinationProjection.getCode();\n    var transformFunc = getTransformFunc(sourceCode, destinationCode);\n    if (!transformFunc) {\n        transformFunc = identityTransform;\n    }\n    return transformFunc;\n}\n/**\n * Given the projection-like objects, searches for a transformation\n * function to convert a coordinates array from the source projection to the\n * destination projection.\n *\n * @param {ProjectionLike} source Source.\n * @param {ProjectionLike} destination Destination.\n * @return {TransformFunction} Transform function.\n * @api\n */\nexport function getTransform(source, destination) {\n    var sourceProjection = get(source);\n    var destinationProjection = get(destination);\n    return getTransformFromProjections(sourceProjection, destinationProjection);\n}\n/**\n * Transforms a coordinate from source projection to destination projection.\n * This returns a new coordinate (and does not modify the original).\n *\n * See {@link module:ol/proj.transformExtent} for extent transformation.\n * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its\n * subclasses for geometry transforms.\n *\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n * @api\n */\nexport function transform(coordinate, source, destination) {\n    var transformFunc = getTransform(source, destination);\n    return transformFunc(coordinate, undefined, coordinate.length);\n}\n/**\n * Transforms an extent from source projection to destination projection.  This\n * returns a new extent (and does not modify the original).\n *\n * @param {import(\"./extent.js\").Extent} extent The extent to transform.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @param {number} [opt_stops] Number of stops per side used for the transform.\n * By default only the corners are used.\n * @return {import(\"./extent.js\").Extent} The transformed extent.\n * @api\n */\nexport function transformExtent(extent, source, destination, opt_stops) {\n    var transformFunc = getTransform(source, destination);\n    return applyTransform(extent, transformFunc, undefined, opt_stops);\n}\n/**\n * Transforms the given point to the destination projection.\n *\n * @param {import(\"./coordinate.js\").Coordinate} point Point.\n * @param {Projection} sourceProjection Source projection.\n * @param {Projection} destinationProjection Destination projection.\n * @return {import(\"./coordinate.js\").Coordinate} Point.\n */\nexport function transformWithProjections(point, sourceProjection, destinationProjection) {\n    var transformFunc = getTransformFromProjections(sourceProjection, destinationProjection);\n    return transformFunc(point);\n}\n/**\n * @type {Projection|null}\n */\nvar userProjection = null;\n/**\n * Set the projection for coordinates supplied from and returned by API methods.\n * This includes all API methods except for those interacting with tile grids.\n * @param {ProjectionLike} projection The user projection.\n * @api\n */\nexport function setUserProjection(projection) {\n    userProjection = get(projection);\n}\n/**\n * Clear the user projection if set.\n * @api\n */\nexport function clearUserProjection() {\n    userProjection = null;\n}\n/**\n * Get the projection for coordinates supplied from and returned by API methods.\n * Note that this method is not yet a part of the stable API.  Support for user\n * projections is not yet complete and should be considered experimental.\n * @return {Projection|null} The user projection (or null if not set).\n * @api\n */\nexport function getUserProjection() {\n    return userProjection;\n}\n/**\n * Use geographic coordinates (WGS-84 datum) in API methods.  This includes all API\n * methods except for those interacting with tile grids.\n * @api\n */\nexport function useGeographic() {\n    setUserProjection('EPSG:4326');\n}\n/**\n * Return a coordinate transformed into the user projection.  If no user projection\n * is set, the original coordinate is returned.\n * @param {Array<number>} coordinate Input coordinate.\n * @param {ProjectionLike} sourceProjection The input coordinate projection.\n * @return {Array<number>} The input coordinate in the user projection.\n */\nexport function toUserCoordinate(coordinate, sourceProjection) {\n    if (!userProjection) {\n        return coordinate;\n    }\n    return transform(coordinate, sourceProjection, userProjection);\n}\n/**\n * Return a coordinate transformed from the user projection.  If no user projection\n * is set, the original coordinate is returned.\n * @param {Array<number>} coordinate Input coordinate.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {Array<number>} The input coordinate transformed.\n */\nexport function fromUserCoordinate(coordinate, destProjection) {\n    if (!userProjection) {\n        if (showCoordinateWarning &&\n            !equals(coordinate, [0, 0]) &&\n            coordinate[0] >= -180 &&\n            coordinate[0] <= 180 &&\n            coordinate[1] >= -90 &&\n            coordinate[1] <= 90) {\n            showCoordinateWarning = false;\n            // eslint-disable-next-line no-console\n            console.warn('Call useGeographic() from ol/proj once to work with [longitude, latitude] coordinates.');\n        }\n        return coordinate;\n    }\n    return transform(coordinate, userProjection, destProjection);\n}\n/**\n * Return an extent transformed into the user projection.  If no user projection\n * is set, the original extent is returned.\n * @param {import(\"./extent.js\").Extent} extent Input extent.\n * @param {ProjectionLike} sourceProjection The input extent projection.\n * @return {import(\"./extent.js\").Extent} The input extent in the user projection.\n */\nexport function toUserExtent(extent, sourceProjection) {\n    if (!userProjection) {\n        return extent;\n    }\n    return transformExtent(extent, sourceProjection, userProjection);\n}\n/**\n * Return an extent transformed from the user projection.  If no user projection\n * is set, the original extent is returned.\n * @param {import(\"./extent.js\").Extent} extent Input extent.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {import(\"./extent.js\").Extent} The input extent transformed.\n */\nexport function fromUserExtent(extent, destProjection) {\n    if (!userProjection) {\n        return extent;\n    }\n    return transformExtent(extent, userProjection, destProjection);\n}\n/**\n * Return the resolution in user projection units per pixel. If no user projection\n * is set, or source or user projection are missing units, the original resolution\n * is returned.\n * @param {number} resolution Resolution in input projection units per pixel.\n * @param {ProjectionLike} sourceProjection The input projection.\n * @return {number} Resolution in user projection units per pixel.\n */\nexport function toUserResolution(resolution, sourceProjection) {\n    if (!userProjection) {\n        return resolution;\n    }\n    var sourceUnits = get(sourceProjection).getUnits();\n    var userUnits = userProjection.getUnits();\n    return sourceUnits && userUnits\n        ? (resolution * METERS_PER_UNIT[sourceUnits]) / METERS_PER_UNIT[userUnits]\n        : resolution;\n}\n/**\n * Return the resolution in user projection units per pixel. If no user projection\n * is set, or source or user projection are missing units, the original resolution\n * is returned.\n * @param {number} resolution Resolution in user projection units per pixel.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {number} Resolution in destination projection units per pixel.\n */\nexport function fromUserResolution(resolution, destProjection) {\n    if (!userProjection) {\n        return resolution;\n    }\n    var sourceUnits = get(destProjection).getUnits();\n    var userUnits = userProjection.getUnits();\n    return sourceUnits && userUnits\n        ? (resolution * METERS_PER_UNIT[userUnits]) / METERS_PER_UNIT[sourceUnits]\n        : resolution;\n}\n/**\n * Creates a safe coordinate transform function from a coordinate transform function.\n * \"Safe\" means that it can handle wrapping of x-coordinates for global projections,\n * and that coordinates exceeding the source projection validity extent's range will be\n * clamped to the validity range.\n * @param {Projection} sourceProj Source projection.\n * @param {Projection} destProj Destination projection.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} transform Transform function (source to destiation).\n * @return {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} Safe transform function (source to destiation).\n */\nexport function createSafeCoordinateTransform(sourceProj, destProj, transform) {\n    return function (coord) {\n        var transformed, worldsAway;\n        if (sourceProj.canWrapX()) {\n            var sourceExtent = sourceProj.getExtent();\n            var sourceExtentWidth = getWidth(sourceExtent);\n            coord = coord.slice(0);\n            worldsAway = getWorldsAway(coord, sourceProj, sourceExtentWidth);\n            if (worldsAway) {\n                // Move x to the real world\n                coord[0] = coord[0] - worldsAway * sourceExtentWidth;\n            }\n            coord[0] = clamp(coord[0], sourceExtent[0], sourceExtent[2]);\n            coord[1] = clamp(coord[1], sourceExtent[1], sourceExtent[3]);\n            transformed = transform(coord);\n        }\n        else {\n            transformed = transform(coord);\n        }\n        if (worldsAway && destProj.canWrapX()) {\n            // Move transformed coordinate back to the offset world\n            transformed[0] += worldsAway * getWidth(destProj.getExtent());\n        }\n        return transformed;\n    };\n}\n/**\n * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called\n * by when this module is executed and should only need to be called again after\n * `clearAllProjections()` is called (e.g. in tests).\n */\nexport function addCommon() {\n    // Add transformations that don't alter coordinates to convert within set of\n    // projections with equal meaning.\n    addEquivalentProjections(EPSG3857_PROJECTIONS);\n    addEquivalentProjections(EPSG4326_PROJECTIONS);\n    // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like\n    // coordinates and back.\n    addEquivalentTransforms(EPSG4326_PROJECTIONS, EPSG3857_PROJECTIONS, fromEPSG4326, toEPSG4326);\n}\naddCommon();\n//# sourceMappingURL=proj.js.map","/**\n * @module ol/proj/Projection\n */\nimport { METERS_PER_UNIT } from './Units.js';\n/**\n * @typedef {Object} Options\n * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.\n * @property {import(\"./Units.js\").default|string} [units] Units. Required unless a\n * proj4 projection is defined for `code`.\n * @property {import(\"../extent.js\").Extent} [extent] The validity extent for the SRS.\n * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.\n * @property {boolean} [global=false] Whether the projection is valid for the whole globe.\n * @property {number} [metersPerUnit] The meters per unit for the SRS.\n * If not provided, the `units` are used to get the meters per unit from the {@link module:ol/proj/Units~METERS_PER_UNIT}\n * lookup table.\n * @property {import(\"../extent.js\").Extent} [worldExtent] The world extent for the SRS.\n * @property {function(number, import(\"../coordinate.js\").Coordinate):number} [getPointResolution]\n * Function to determine resolution at a point. The function is called with a\n * `number` view resolution and a {@link module:ol/coordinate~Coordinate Coordinate} as arguments, and returns\n * the `number` resolution in projection units at the passed coordinate. If this is `undefined`,\n * the default {@link module:ol/proj.getPointResolution getPointResolution()} function will be used.\n */\n/**\n * @classdesc\n * Projection definition class. One of these is created for each projection\n * supported in the application and stored in the {@link module:ol/proj} namespace.\n * You can use these in applications, but this is not required, as API params\n * and options use {@link module:ol/proj~ProjectionLike} which means the simple string\n * code will suffice.\n *\n * You can use {@link module:ol/proj.get} to retrieve the object for a particular\n * projection.\n *\n * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together\n * with the following aliases:\n * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,\n *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,\n *     http://www.opengis.net/gml/srs/epsg.xml#4326,\n *     urn:x-ogc:def:crs:EPSG:4326\n * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,\n *     urn:ogc:def:crs:EPSG:6.18:3:3857,\n *     http://www.opengis.net/gml/srs/epsg.xml#3857\n *\n * If you use [proj4js](https://github.com/proj4js/proj4js), aliases can\n * be added using `proj4.defs()`. After all required projection definitions are\n * added, call the {@link module:ol/proj/proj4.register} function.\n *\n * @api\n */\nvar Projection = /** @class */ (function () {\n    /**\n     * @param {Options} options Projection options.\n     */\n    function Projection(options) {\n        /**\n         * @private\n         * @type {string}\n         */\n        this.code_ = options.code;\n        /**\n         * Units of projected coordinates. When set to `TILE_PIXELS`, a\n         * `this.extent_` and `this.worldExtent_` must be configured properly for each\n         * tile.\n         * @private\n         * @type {import(\"./Units.js\").default}\n         */\n        this.units_ = /** @type {import(\"./Units.js\").default} */ (options.units);\n        /**\n         * Validity extent of the projection in projected coordinates. For projections\n         * with `TILE_PIXELS` units, this is the extent of the tile in\n         * tile pixel space.\n         * @private\n         * @type {import(\"../extent.js\").Extent}\n         */\n        this.extent_ = options.extent !== undefined ? options.extent : null;\n        /**\n         * Extent of the world in EPSG:4326. For projections with\n         * `TILE_PIXELS` units, this is the extent of the tile in\n         * projected coordinate space.\n         * @private\n         * @type {import(\"../extent.js\").Extent}\n         */\n        this.worldExtent_ =\n            options.worldExtent !== undefined ? options.worldExtent : null;\n        /**\n         * @private\n         * @type {string}\n         */\n        this.axisOrientation_ =\n            options.axisOrientation !== undefined ? options.axisOrientation : 'enu';\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this.global_ = options.global !== undefined ? options.global : false;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this.canWrapX_ = !!(this.global_ && this.extent_);\n        /**\n         * @private\n         * @type {function(number, import(\"../coordinate.js\").Coordinate):number|undefined}\n         */\n        this.getPointResolutionFunc_ = options.getPointResolution;\n        /**\n         * @private\n         * @type {import(\"../tilegrid/TileGrid.js\").default}\n         */\n        this.defaultTileGrid_ = null;\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        this.metersPerUnit_ = options.metersPerUnit;\n    }\n    /**\n     * @return {boolean} The projection is suitable for wrapping the x-axis\n     */\n    Projection.prototype.canWrapX = function () {\n        return this.canWrapX_;\n    };\n    /**\n     * Get the code for this projection, e.g. 'EPSG:4326'.\n     * @return {string} Code.\n     * @api\n     */\n    Projection.prototype.getCode = function () {\n        return this.code_;\n    };\n    /**\n     * Get the validity extent for this projection.\n     * @return {import(\"../extent.js\").Extent} Extent.\n     * @api\n     */\n    Projection.prototype.getExtent = function () {\n        return this.extent_;\n    };\n    /**\n     * Get the units of this projection.\n     * @return {import(\"./Units.js\").default} Units.\n     * @api\n     */\n    Projection.prototype.getUnits = function () {\n        return this.units_;\n    };\n    /**\n     * Get the amount of meters per unit of this projection.  If the projection is\n     * not configured with `metersPerUnit` or a units identifier, the return is\n     * `undefined`.\n     * @return {number|undefined} Meters.\n     * @api\n     */\n    Projection.prototype.getMetersPerUnit = function () {\n        return this.metersPerUnit_ || METERS_PER_UNIT[this.units_];\n    };\n    /**\n     * Get the world extent for this projection.\n     * @return {import(\"../extent.js\").Extent} Extent.\n     * @api\n     */\n    Projection.prototype.getWorldExtent = function () {\n        return this.worldExtent_;\n    };\n    /**\n     * Get the axis orientation of this projection.\n     * Example values are:\n     * enu - the default easting, northing, elevation.\n     * neu - northing, easting, up - useful for \"lat/long\" geographic coordinates,\n     *     or south orientated transverse mercator.\n     * wnu - westing, northing, up - some planetary coordinate systems have\n     *     \"west positive\" coordinate systems\n     * @return {string} Axis orientation.\n     * @api\n     */\n    Projection.prototype.getAxisOrientation = function () {\n        return this.axisOrientation_;\n    };\n    /**\n     * Is this projection a global projection which spans the whole world?\n     * @return {boolean} Whether the projection is global.\n     * @api\n     */\n    Projection.prototype.isGlobal = function () {\n        return this.global_;\n    };\n    /**\n     * Set if the projection is a global projection which spans the whole world\n     * @param {boolean} global Whether the projection is global.\n     * @api\n     */\n    Projection.prototype.setGlobal = function (global) {\n        this.global_ = global;\n        this.canWrapX_ = !!(global && this.extent_);\n    };\n    /**\n     * @return {import(\"../tilegrid/TileGrid.js\").default} The default tile grid.\n     */\n    Projection.prototype.getDefaultTileGrid = function () {\n        return this.defaultTileGrid_;\n    };\n    /**\n     * @param {import(\"../tilegrid/TileGrid.js\").default} tileGrid The default tile grid.\n     */\n    Projection.prototype.setDefaultTileGrid = function (tileGrid) {\n        this.defaultTileGrid_ = tileGrid;\n    };\n    /**\n     * Set the validity extent for this projection.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @api\n     */\n    Projection.prototype.setExtent = function (extent) {\n        this.extent_ = extent;\n        this.canWrapX_ = !!(this.global_ && extent);\n    };\n    /**\n     * Set the world extent for this projection.\n     * @param {import(\"../extent.js\").Extent} worldExtent World extent\n     *     [minlon, minlat, maxlon, maxlat].\n     * @api\n     */\n    Projection.prototype.setWorldExtent = function (worldExtent) {\n        this.worldExtent_ = worldExtent;\n    };\n    /**\n     * Set the getPointResolution function (see {@link module:ol/proj.getPointResolution}\n     * for this projection.\n     * @param {function(number, import(\"../coordinate.js\").Coordinate):number} func Function\n     * @api\n     */\n    Projection.prototype.setGetPointResolution = function (func) {\n        this.getPointResolutionFunc_ = func;\n    };\n    /**\n     * Get the custom point resolution function for this projection (if set).\n     * @return {function(number, import(\"../coordinate.js\").Coordinate):number|undefined} The custom point\n     * resolution function (if set).\n     */\n    Projection.prototype.getPointResolutionFunc = function () {\n        return this.getPointResolutionFunc_;\n    };\n    return Projection;\n}());\nexport default Projection;\n//# sourceMappingURL=Projection.js.map","/**\n * @module ol/proj/Units\n */\n/**\n * Projection units: `'degrees'`, `'ft'`, `'m'`, `'pixels'`, `'tile-pixels'` or\n * `'us-ft'`.\n * @enum {string}\n */\nvar Units = {\n    /**\n     * Radians\n     * @api\n     */\n    RADIANS: 'radians',\n    /**\n     * Degrees\n     * @api\n     */\n    DEGREES: 'degrees',\n    /**\n     * Feet\n     * @api\n     */\n    FEET: 'ft',\n    /**\n     * Meters\n     * @api\n     */\n    METERS: 'm',\n    /**\n     * Pixels\n     * @api\n     */\n    PIXELS: 'pixels',\n    /**\n     * Tile Pixels\n     * @api\n     */\n    TILE_PIXELS: 'tile-pixels',\n    /**\n     * US Feet\n     * @api\n     */\n    USFEET: 'us-ft',\n};\n/**\n * See http://duff.ess.washington.edu/data/raster/drg/docs/geotiff.txt\n * @type {Object<number, Units>}\n */\nvar unitByCode = {\n    '9001': Units.METERS,\n    '9002': Units.FEET,\n    '9003': Units.USFEET,\n    '9101': Units.RADIANS,\n    '9102': Units.DEGREES,\n};\n/**\n * @param {number} code Unit code.\n * @return {Units} Units.\n */\nexport function fromCode(code) {\n    return unitByCode[code];\n}\n/**\n * Meters per unit lookup table.\n * @const\n * @type {Object<Units, number>}\n * @api\n */\nexport var METERS_PER_UNIT = {};\n// use the radius of the Normal sphere\nMETERS_PER_UNIT[Units.RADIANS] = 6370997 / (2 * Math.PI);\nMETERS_PER_UNIT[Units.DEGREES] = (2 * Math.PI * 6370997) / 360;\nMETERS_PER_UNIT[Units.FEET] = 0.3048;\nMETERS_PER_UNIT[Units.METERS] = 1;\nMETERS_PER_UNIT[Units.USFEET] = 1200 / 3937;\nexport default Units;\n//# sourceMappingURL=Units.js.map","/**\n * @module ol/proj/proj4\n */\nimport Projection from './Projection.js';\nimport Units from './Units.js';\nimport { addCoordinateTransforms, addEquivalentProjections, addProjection, createSafeCoordinateTransform, get, } from '../proj.js';\nimport { get as getTransform } from './transforms.js';\n/**\n * Make projections defined in proj4 (with `proj4.defs()`) available in\n * OpenLayers.\n *\n * This function should be called whenever changes are made to the proj4\n * registry, e.g. after calling `proj4.defs()`. Existing transforms will not be\n * modified by this function.\n *\n * @param {?} proj4 Proj4.\n * @api\n */\nexport function register(proj4) {\n    var projCodes = Object.keys(proj4.defs);\n    var len = projCodes.length;\n    var i, j;\n    for (i = 0; i < len; ++i) {\n        var code = projCodes[i];\n        if (!get(code)) {\n            var def = proj4.defs(code);\n            var units = def.units;\n            if (!units && def.projName === 'longlat') {\n                units = Units.DEGREES;\n            }\n            addProjection(new Projection({\n                code: code,\n                axisOrientation: def.axis,\n                metersPerUnit: def.to_meter,\n                units: units,\n            }));\n        }\n    }\n    for (i = 0; i < len; ++i) {\n        var code1 = projCodes[i];\n        var proj1 = get(code1);\n        for (j = 0; j < len; ++j) {\n            var code2 = projCodes[j];\n            var proj2 = get(code2);\n            if (!getTransform(code1, code2)) {\n                if (proj4.defs[code1] === proj4.defs[code2]) {\n                    addEquivalentProjections([proj1, proj2]);\n                }\n                else {\n                    var transform = proj4(code1, code2);\n                    addCoordinateTransforms(proj1, proj2, createSafeCoordinateTransform(proj1, proj2, transform.forward), createSafeCoordinateTransform(proj2, proj1, transform.inverse));\n                }\n            }\n        }\n    }\n}\n//# sourceMappingURL=proj4.js.map","/**\n * @module ol/proj/transforms\n */\nimport { isEmpty } from '../obj.js';\n/**\n * @private\n * @type {!Object<string, Object<string, import(\"../proj.js\").TransformFunction>>}\n */\nvar transforms = {};\n/**\n * Clear the transform cache.\n */\nexport function clear() {\n    transforms = {};\n}\n/**\n * Registers a conversion function to convert coordinates from the source\n * projection to the destination projection.\n *\n * @param {import(\"./Projection.js\").default} source Source.\n * @param {import(\"./Projection.js\").default} destination Destination.\n * @param {import(\"../proj.js\").TransformFunction} transformFn Transform.\n */\nexport function add(source, destination, transformFn) {\n    var sourceCode = source.getCode();\n    var destinationCode = destination.getCode();\n    if (!(sourceCode in transforms)) {\n        transforms[sourceCode] = {};\n    }\n    transforms[sourceCode][destinationCode] = transformFn;\n}\n/**\n * Unregisters the conversion function to convert coordinates from the source\n * projection to the destination projection.  This method is used to clean up\n * cached transforms during testing.\n *\n * @param {import(\"./Projection.js\").default} source Source projection.\n * @param {import(\"./Projection.js\").default} destination Destination projection.\n * @return {import(\"../proj.js\").TransformFunction} transformFn The unregistered transform.\n */\nexport function remove(source, destination) {\n    var sourceCode = source.getCode();\n    var destinationCode = destination.getCode();\n    var transform = transforms[sourceCode][destinationCode];\n    delete transforms[sourceCode][destinationCode];\n    if (isEmpty(transforms[sourceCode])) {\n        delete transforms[sourceCode];\n    }\n    return transform;\n}\n/**\n * Get a transform given a source code and a destination code.\n * @param {string} sourceCode The code for the source projection.\n * @param {string} destinationCode The code for the destination projection.\n * @return {import(\"../proj.js\").TransformFunction|undefined} The transform function (if found).\n */\nexport function get(sourceCode, destinationCode) {\n    var transform;\n    if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {\n        transform = transforms[sourceCode][destinationCode];\n    }\n    return transform;\n}\n//# sourceMappingURL=transforms.js.map","/**\n * @module ol/util\n */\n/**\n * @return {?} Any return.\n */\nexport function abstract() {\n    return /** @type {?} */ ((function () {\n        throw new Error('Unimplemented abstract method.');\n    })());\n}\n/**\n * Counter for getUid.\n * @type {number}\n * @private\n */\nvar uidCounter_ = 0;\n/**\n * Gets a unique ID for an object. This mutates the object so that further calls\n * with the same object as a parameter returns the same value. Unique IDs are generated\n * as a strictly increasing sequence. Adapted from goog.getUid.\n *\n * @param {Object} obj The object to get the unique ID for.\n * @return {string} The unique ID for the object.\n * @api\n */\nexport function getUid(obj) {\n    return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));\n}\n/**\n * OpenLayers version.\n * @type {string}\n */\nexport var VERSION = '6.15.1';\n//# sourceMappingURL=util.js.map"],"names":["NUM_100K_SETS","SET_ORIGIN_COLUMN_LETTERS","SET_ORIGIN_ROW_LETTERS","A","I","O","V","Z","forward","inverse","toPoint","ll","accuracy","encode","LLtoUTM","lat","lon","mgrs","bbox","UTMtoLL","decode","toUpperCase","left","bottom","right","top","degToRad","deg","Math","PI","radToDeg","rad","LongOrigin","eccPrimeSquared","N","T","C","M","LongOriginRad","ZoneNumber","Lat","Long","a","eccSquared","k0","LatRad","LongRad","floor","sqrt","sin","tan","cos","UTMEasting","UTMNorthing","northing","round","easting","zoneNumber","zoneLetter","getLetterDesignator","utm","N1","T1","C1","R1","D","mu","phi1Rad","e1","x","y","pow","result","topRight","LetterDesignator","seasting","snorthing","get100kID","substr","length","setParm","get100kSetForZone","setColumn","setRow","getLetter100kID","i","column","row","parm","index","colOrigin","charCodeAt","rowOrigin","colInt","rowInt","rollover","twoLetter","String","fromCharCode","mgrsString","testChar","hunK","sb","test","charAt","parseInt","substring","set","east100k","getEastingFromChar","north100k","getNorthingFromChar","getMinNorthing","remainder","accuracyBonus","sepEastingString","sepNorthingString","sep","sepEasting","sepNorthing","parseFloat","e","curCol","eastingValue","rewindMarker","n","curRow","northingValue","__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","__","this","constructor","create","AssertionError","_super","code","_this","path","message","name","Error","assert","assertion","errorCode","add","coordinate","delta","closestOnCircle","circle","r","getRadius","center","getCenter","x0","y0","x1","y1","dx","dy","closestOnSegment","segment","start","end","x2","y2","along","equals","coordinate1","coordinate2","rotate","angle","cosAngle","sinAngle","scale","squaredDistance","coord1","coord2","distance","squaredDistanceToSegment","wrapX","projection","canWrapX","worldWidth","getExtent","worldsAway","getWorldsAway","opt_sourceExtentWidth","projectionExtent","sourceExtentWidth","boundingExtent","coordinates","extent","createEmpty","ii","extendCoordinate","_boundingExtentXYs","xs","ys","opt_extent","minX","min","apply","minY","maxX","max","maxY","createOrUpdate","buffer","value","clone","slice","closestSquaredDistanceXY","containsCoordinate","containsXY","containsExtent","extent1","extent2","coordinateRelationship","relationship","Infinity","createOrUpdateEmpty","createOrUpdateFromCoordinate","createOrUpdateFromFlatCoordinates","flatCoordinates","offset","stride","extendFlatCoordinates","extend","extendXY","forEachCorner","callback","val","getBottomLeft","getBottomRight","getTopRight","getTopLeft","getArea","area","isEmpty","getWidth","getHeight","getCorner","corner","getForViewAndSize","resolution","rotation","size","_a","getRotatedViewport","x3","y3","cosRotation","sinRotation","xCos","xSin","yCos","ySin","getIntersection","intersection","intersects","returnOrUpdate","intersectsSegment","startRel","endRel","startX","startY","endX","endY","slope","applyTransform","transformFn","opt_stops","width","height","push","l","wrapAndSliceX","isFinite","UNKNOWN","INTERSECTING","ABOVE","RIGHT","BELOW","LEFT","clamp","cosh","exp","log2","log","LOG2E","squaredSegmentDistance","t","solveLinearSystem","mat","maxRow","maxEl","abs","absValue","tmp","j","coef","k","m","toRadians","angleInDegrees","modulo","lerp","toFixed","decimals","factor","ceil","RADIUS","HALF_SIZE","EXTENT","WORLD_EXTENT","MAX_SAFE_Y","EPSG3857Projection","units","Units","global","worldExtent","getPointResolution","point","Projection","PROJECTIONS","fromEPSG4326","input","opt_output","opt_dimension","dimension","output","undefined","toEPSG4326","atan","EPSG4326Projection","opt_axisOrientation","axisOrientation","metersPerUnit","cache","get","replace","DEFAULT_RADIUS","getDistance","c1","c2","opt_radius","radius","lat1","lat2","deltaLatBy2","deltaLonBy2","atan2","showCoordinateWarning","disableCoordinateWarning","opt_disable","hide","cloneTransform","identityTransform","addProjection","getCode","addProjections","projections","forEach","projectionLike","opt_units","pointResolution","getter","getPointResolutionFunc","getUnits","getMetersPerUnit","toEPSG4326_1","getTransformFromProjections","vertices","addEquivalentProjections","source","destination","addEquivalentTransforms","projections1","projections2","forwardTransform","inverseTransform","projection1","projection2","createProjection","defaultCode","createTransformFromCoordinateTransform","coordTransform","pointLength","jj","addCoordinateTransforms","sourceProj","destProj","fromLonLat","opt_projection","transform","equivalent","equalUnits","transformFunc","sourceProjection","destinationProjection","sourceCode","destinationCode","getTransform","transformExtent","userProjection","getUserProjection","toUserCoordinate","fromUserCoordinate","destProjection","console","warn","toUserExtent","fromUserExtent","toUserResolution","sourceUnits","userUnits","createSafeCoordinateTransform","coord","transformed","sourceExtent","addCommon","options","code_","units_","extent_","worldExtent_","axisOrientation_","global_","canWrapX_","getPointResolutionFunc_","defaultTileGrid_","metersPerUnit_","getWorldExtent","getAxisOrientation","isGlobal","setGlobal","getDefaultTileGrid","setDefaultTileGrid","tileGrid","setExtent","setWorldExtent","setGetPointResolution","func","RADIANS","DEGREES","FEET","METERS","PIXELS","TILE_PIXELS","USFEET","unitByCode","fromCode","METERS_PER_UNIT","register","proj4","projCodes","keys","defs","len","def","projName","axis","to_meter","code1","proj1","code2","proj2","transforms","abstract","uidCounter_","getUid","obj","ol_uid","VERSION"],"sourceRoot":""}