{"version":3,"sources":["webpack:///./node_modules/intersects/line-polygon.js","webpack:///./node_modules/intersects/box-box.js","webpack:///./node_modules/intersects/lineToLine.js","webpack:///./node_modules/@openeo/vue-components/components/ModelBuilder.vue?7131","webpack:///./node_modules/@openeo/vue-components/components/ModelBuilder.vue?7da3","webpack:///./node_modules/@openeo/vue-components/components/model-builder/Block.vue?16ea","webpack:///./node_modules/@openeo/vue-components/components/model-builder/BlockParameter.vue?0e46","webpack:///node_modules/@openeo/vue-components/components/model-builder/BlockParameter.vue","webpack:///./node_modules/@openeo/vue-components/components/model-builder/BlockParameter.vue?2b31","webpack:///./node_modules/@openeo/vue-components/components/model-builder/BlockParameter.vue","webpack:///./node_modules/@openeo/vue-components/components/model-builder/config.js","webpack:///node_modules/@openeo/vue-components/components/model-builder/Block.vue","webpack:///./node_modules/@openeo/vue-components/components/model-builder/Block.vue?642a","webpack:///./node_modules/@openeo/vue-components/components/model-builder/Block.vue","webpack:///./node_modules/@openeo/vue-components/components/model-builder/Edge.vue?e98b","webpack:///./node_modules/@openeo/vue-components/components/model-builder/segment.js","webpack:///node_modules/@openeo/vue-components/components/model-builder/Edge.vue","webpack:///./node_modules/@openeo/vue-components/components/model-builder/Edge.vue?966e","webpack:///./node_modules/@openeo/vue-components/components/model-builder/Edge.vue","webpack:///node_modules/@openeo/vue-components/components/ModelBuilder.vue","webpack:///./node_modules/@openeo/vue-components/components/ModelBuilder.vue?1a13","webpack:///./node_modules/@openeo/vue-components/components/ModelBuilder.vue","webpack:///./node_modules/intersects/lineToPolygon.js","webpack:///./node_modules/intersects/line-box.js","webpack:///./node_modules/intersects/polygon-polygon.js","webpack:///./node_modules/intersects/line-point.js","webpack:///./node_modules/intersects/polygon-point.js","webpack:///./node_modules/intersects/box-line.js","webpack:///./node_modules/@openeo/vue-components/components/model-builder/Block.vue?d0fe","webpack:///./node_modules/intersects/line-line.js","webpack:///./node_modules/@openeo/vue-components/components/model-builder/BlockParameter.vue?9055","webpack:///./node_modules/intersects/box-point.js"],"names":["polygonPoint","lineLine","module","exports","x1","y1","x2","y2","points","tolerance","length","i","j","w1","h1","w2","h2","x3","y3","x4","y4","s1_x","s1_y","s2_x","s2_y","s","t","render","_vm","this","_h","$createElement","_c","_self","ref","class","classes","attrs","id","on","onMouseMove","onMouseDown","onMouseWheel","onKeyDown","$event","hasFocus","staticClass","_l","edge","key","parameter1","parameter2","selected","inactive","issues","state","node","mount","updateEdgePos","arguments","_b","linkingLine","_e","selectRect","block","type","spec","position","origin","process_id","namespace","result","description","args","len","updateBlock","apply","concat","startDragBlock","scale","showZoomInfo","_v","parameterViewer","staticRenderFns","containerClasses","style","indexOf","_k","keyCode","preventDefault","stopPropagation","button","emitDrag","plainTitle","directives","name","rawName","value","expression","_s","focus","allowsDescription","showDescriptionField","addDescription","remove","showInfo","isParameter","edit","param","refInFor","optional","deprecated","experimental","default","schema","updateArgument","edgesChanged","outputLabel","updateResult","output","editable","domProps","updateDescription","_g","circleClasses","circleListeners","textListeners","displayLabel","displayValue","props","label","required","data","edges","computed","schemas","hasValue","click","listeners","event","unspecified","formattedValue","isArrayType","isObjectType","isEditable","allowsArgumentChange","allowsMultipleInputs","watch","immediate","handler","methods","updateEdgeStatus","getCirclePosition","console","openEditorForArguments","jsonSchema","setValue","resetValue","getEdgeRef","addRefToValue","removeRefFromValue","removeRefFromValueDeep","addEdge","eraseEdge","isEdgeUsed","hasRefInValue","getEdgeCount","formatProcess","formatValue","formatArray","parts","maxLength","formatArraySimple","formatObject","component","defaultScale","blockWidth","compactParams","compact","normalParams","normal","defaultFontSize","components","BlockParameter","drag","width","styles","marginLeft","marginTop","fontSize","invalid","processId","collectionId","allowsParameterChange","allowsDelete","allowsInfo","showId","hasParametersDefined","parameters","names","fields","mounted","document","beforeDestroy","hasParameter","updatePosition","pos","updateArguments","filter","select","getDimensions","dim","parameter","editParameter","showArguments","getDragPos","startDrag","mouse","stopDrag","dragging","hasOutputEdges","getBlockParameter","isParameterScoped","hiddenParameterRef","line","Segment","x","y","dx","dy","point1","point2","Math","sqrt","pow","point","intersection","distance","alpha","other","a","b","c","d","b0","b1","det","r1","r2","lineWidth","lineColor","position1","position2","segment","scaledLineWidth","lines","mainLine","created","updatePositions","getLineStyle","color","getLine","collide","equals","getDefaultState","root","compactMode","moving","selecting","center","linkFrom","linkTo","MARGIN","selectionChangeWatcher","newVal","oldVal","Block","Edge","ParameterViewer","collections","processes","parent","parentSchema","historySize","explicitZoom","isMounted","allMounted","newBlockOffset","history","historyPointer","process","blocks","hiddenParameterRefEdges","processGraph","nextBlockId","nextEdgeId","clipboard","activeTransactions","height","processRegistry","hasProcesses","processBlocks","selectedBlocks","selectedEdges","selectedSideEdge","hasSelection","processParametersFromSchemas","parentParams","callbackParams","propagate","undoOnError","beforeCreate","Utils","elem","checkAllMounted","updateBlockArguments","updateBlockDescription","updateBlockPos","updateBlockResult","updateBlockSelected","updateBlockSpec","Object","updateHiddenParameterRefEdges","hiddenRefs","$el","parameterRemoved","refreshEdges","refreshEdgesFor","supports","link","unlink","multiSelect","map","e","toJSON","captured","domBoundingBox","rect","getMousePos","start","current","sideSelected","commit","saveHistory","perfectScale","setResultNode","hasOtherBlocks","foundNewResultNode","getPositionForPageXY","addProcess","addBlock","getNewBlockDefaultPosition","getBlockSize","moveCenter","unselectAll","selectEdge","removeEdge","getBlockById","allSuccessors","explored","exploreList","export","process_graph","keys","success","pg","options","getPgParameters","getPgParameterById","imported","maxX","nextNodes","incrementId","xMin","xMax","yMin","yMax","showParameterViewer","values","title","selectParameterName","BlocksProcess","constructor","thickness","angle","atan2","PI","half","cos","sin","boxPoint","xb","yb","wb","hb","points1","points2","minA","maxA","projected","minB","maxB","polygons","polygon","i1","i2","distanceSquared","xp","yp","abs","linePoint","p2x","p2y","p1x","p1y","lineBox","lineToPolygon","polygonPolygon","linePolygon","lineToLine","lineLineThickness","thickness1","thickness2"],"mappings":"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A7C,aACAgD,YAEAF,YACA9C,aACAgD,YAEAD,cACA/C,aACAgD,YAEAA,WACAhB,SACAiB,QACAjD,oBACAgD,cAEAiB,OACAjE,aAEAsD,QACAtD,aACAgD,YAEA1D,OACAU,YACAkE,cAGAC,OACA,OAEAC,WAGAC,UACAC,UACA,iDACA,YAGA,qCAGAC,WACA,4BAEAV,gBACA,iCACA,CACAW,mCAIA,IAGAZ,kBACA,SAuBA,OAtBA,sBACAa,gBACA,aACA,2BACAC,mBACAA,sBAIA,cAEAD,eACA,YACA,yBAMAA,gEACAA,gEAEA,GAEAtG,UACA,OACA,6BACA,YACA,mBACA,uFAKA,OAHA,2BACAA,mBAEA,GAEAwG,cACA,qFAEAhB,gBACA,iBAKA,aAJA,uBACAxF,oBAGA,YACA,WACAA,sBAEA,mBACAA,oBAOA,OAHA,oDACAA,sBAEA,GAEA4F,eACA,kCACA,OACA,wEACA,8DACA,yBACAa,4BAYA,MARA,oBACA,eACAA,oBAIAA,KAEA,GAEAd,eACA,2CACA,GAEA,iEACA,WAGA,WAGAe,cACA,+CAEAC,eACA,gDAEAC,aACA,+CAEAC,uBACA,+CAEAC,uBAEA,oFAGAC,OACAd,QACA,wBACA,4CAEApC,OACAmD,aACAC,UACA,2BAIAC,SACAC,mBACA,gBACA,wBACAvG,gCAIAwG,oBACA,IACA,wDACA,kCACA,sCACA,qCACA,YACA,SAEA,OADAC,gBACA,OAGAC,yBACA,2BACA,uCAGAC,aACA,8BAEAC,YACA,4DACA3D,OAEA,uBAEA4D,aACA,sCAKA,MACA,2BACA5D,WAEA,CACA,oCACA,UACA,aACAA,KACA,MACA,YACAA,KACA,MACA,aACAA,KACA,MACA,cACA,aACAA,IACA,MACA,cACAA,KACA,MACA,QACAA,UAGA,sBA/BA,6BAiCA6D,cACA,mBACA,WAGA,oBAGAC,iBACA,yBACA,KAGA,6BAGA,oBACA,4BACA,mCAEA,mDACA,iBACA9D,UACA,sBAGA,sBAGA,sBACA,8BACA,0CAGA,GACA,kBAHA,sBAWA,sBA7BA,kBAgCA+D,sBACA,iBACA,yBACA,gCACA,mBAEA,sCACA,2DAIAC,4BACA,qBACA,eACA,aACA,sCAGA,0BACAhE,cAGAA,+CAKA,sBACA,eACA,2DAGA,iCACA,KAGAA,0CAIA,UAEAiE,WACA,mBACA,iCACA,uBAGAC,aACA,wBACA,oBAGA,OAFA,2BACA,4BACA,EAGA,UAEAC,cACA,yBACA,yCAGA,kCAEAC,mBACA,2BACA,SAEA,0BACA,SAEA,eACA,8BACA,SAGA,UAEAC,eACA,0BAEAC,mBACA,wDACA,wDAEA,qCACA,oBACA,oCAGA,WAGAC,sBACA,uBACA,gBACA,MAEA,iBACA,wBAGA,yBAGA,wBACA,eACA,yCACA,iEAGA,8BAGA,2BACA,WAEA,oBACA,aAGA,wCAGAC,sBACA,SACA,gBACA,WACA,2BACA,wDAEA,eACA,gBACA,sDAGAC,sCACA,MAIAA,UACAC,cAGA,qBAEAC,4BACA,mBACA,qDACA,yCAGA,UAGAC,uBACA,iCACA,OAEA,iEACA,wBAEA,gBACA,wCAEA,qHACA,4BAEA,wBACA,2BAIA,uFCnfqT,I,wBCQjTC,EAAY,eACd,EACA,EACA,GACA,EACA,KACA,KACA,MAIa,EAAAA,E,QCnBA,GACdC,aAAc,IACdC,WAAY,CACXC,cAAe,IACfC,QAAS,GACTC,aAAc,IACdC,OAAQ,MCiDV,MAAMC,EAAkB,GAET,OACftF,aACAuF,YACAC,kBAEAtD,OACA3F,IACA2B,YACAkE,aAEAlE,MACAA,YACAkE,aAEA/E,UACAa,aACAgD,YAEA9C,UACAF,WACAkE,aAEA9D,YACAJ,aAEAK,WACAL,YACAgD,cAEAzC,aACAP,YACAgD,cAEAxC,MACAR,YACAgD,kBAEA1C,QACAN,aACAgD,YAEA7C,QACAH,YACAgD,cAEA/C,MACAD,YACAgD,kBAEA1D,OACAU,YACAkE,cAGAC,OACA,OACA9B,wBACAkF,YAGArC,OACA,sBACA,mCAEA3E,aACA4E,aACAC,UACA,qDAIAf,UAEAmD,QACA,mBACA,gCACA,sDAGA,2CAGAC,SACA,OACAC,mFACAC,kFACAC,6CACAJ,qDAGA5F,aACA,SAQA,OAPA6E,kBACA,gBACAA,2BAEA,aACAA,oBAEA,YAEA3E,OACA,kBACA,cACA,yBACA,kBAGA,eAEA,gBACA,sBACA,QACA,2BAGAsB,cACA,mBACA,SAEA,iBACA,oBAGA,IAGAjC,mBACA,gBAiBA,OAhBA,kBACAhD,2BAEA,kBACAA,yBAEA,aACAA,uBAEA,eACAA,yBAEA,cACAA,wBAGA,GAEA0J,UACA,qDAGA,SAEA,gDAEA,SAEA,mBACA,SAIA,cACA,SAIA,oEACA,sCACA,uBACA,SAGA,SAGA,UAEAC,YACA,0BACA,mBACA,uBAEA,4CACA,oBAGA,aAEAC,eACA,4FAGA,KAFA,cAIAtF,cACA,+BAEAuF,wBACA,wBACA,8DAGA,oDAGAC,eACA,8FAEAC,aACA,yBACA,wCAEA,iBACA,mEAGA,sCAGA9F,oBAEA,mDAEA+F,SACA,+BAGAC,uBACA,gHAEAC,aACA,SACA,KAKA,GAJA,4BACAA,4DACAC,oBAEA,yBACA,uBACA,eACAD,kCACAvG,OACAvB,kBAKA,UAEAgI,SACA,SACA,6BACAA,YAGA,OADAA,qBACA,GAEAjF,SACA,SACA,6BACA,iBACArD,YAEA,qCACAA,sBAGA,OACA6B,cACAmB,oBACA1C,8BACAsC,YACAS,UACAtB,UAQA,OANA,iBACAsB,yCAGAA,oCAEA,IAGAkF,UAEA,yCACAC,uDAEA,yCACAA,qDAEA,4BAEAC,gBACAD,0DACAA,wDAEA,8BAEApD,SACA3C,OACA,iBACA,qBAGA,sBAGAiG,gBACA,8EAEAlF,qBACA,MAEAzB,EADA,0DACAA,eAGAA,KAEA,mCACA,sBACA,sCAGA4G,uBACAC,wBACA,kDACA,qCAGAC,mBACA,6BACAC,OAAA/J,kFAEA,6BACA,uHACA,UAGA,sCAEAkE,oBACA,kCACA1C,OACA,yBAEA6C,gBACA,sBACA,0EAGA,iBACA,iCAGAlB,QACA,sBAEA3D,eACA,yCAEAwK,kBACA,oCACA,cAEAC,gBACA,kDACA,mCAGA,OAFAC,8BACAA,4BACA,GAEA/F,kBACAgG,qCAEAC,gBACA,mHAEAC,sBACA,+JAEA7G,WACA,kBACA,uDAEA,iBACA,8CAGA,iEAGA,uBACA,cACA,mCACA,iBACA,qCAEA,kBACA,4BACA,mBACA,iBACA,sBAEA8G,gBACA,+DAEAC,aACA,kBACA,OAGA,kCACA,WACApJ,qBACAqJ,yCAGAC,WACA,cAIA,0BACA,qGACA,mCAEA,iBAEAC,YACA,cACA,OAGA,kCACA,qCAEA,2BAGAC,iBACA,8DAGA,qBACA,gCAMAC,qBACA,mCACA,yBAEA,yCACA,kDACA,cACA,YAGA,aAGAC,uBACA,gCACA,4DACA,sBAGAC,sBACA,yBACA,YAEA,qBACA,wBACA,mBACA,yDACA,kCACA,gFACA,UAIA,eC/hB4S,ICQxS,G,UAAY,eACd,EACA,EACA,GACA,EACA,KACA,KACA,OAIa,I,QCnBX,EAAS,WAAa,IAAInM,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,IAAIJ,EAAImB,GAAInB,EAAS,OAAE,SAASoM,EAAKrN,GAAG,OAAOqB,EAAG,OAAOJ,EAAIgC,GAAG,CAACX,IAAItC,GAAG,OAAOqN,GAAK,OAAU,IAC7L,EAAkB,GCDP,MAAMC,EAEjB,YAAYC,EAAGC,EAAGC,EAAIC,GAClBxM,KAAKqM,EAAIA,EACTrM,KAAKsM,EAAIA,EACTtM,KAAKuM,GAAKA,EACVvM,KAAKwM,GAAKA,EAMd,SAASC,EAAQC,GACb,OAAOC,KAAKC,KAAKD,KAAKE,IAAIH,EAAOL,EAAEI,EAAOJ,EAAE,GAAKM,KAAKE,IAAIH,EAAOJ,EAAEG,EAAOH,EAAE,IAMhF,UAAUQ,GACN,IAAIvD,EAASvJ,KAAKuJ,SAClBA,EAAO8C,EAAIS,EAAMT,EACjB9C,EAAO+C,EAAIQ,EAAMR,EACjB,IAAIS,EAAe/M,KAAK+M,aAAaxD,GAErC,MAAO,CAACwD,EAAa,GAAI/M,KAAKgN,SAASzD,EAAO0D,MAAMF,EAAa,IAAKD,IAM1E,SACI,OAAO,IAAIV,EAAQpM,KAAKqM,EAAGrM,KAAKsM,EAAGtM,KAAKwM,IAAKxM,KAAKuM,IAMtD,aAAaW,GACT,IAAIC,EAAInN,KAAKuM,GACTa,GAAKF,EAAMX,GACXc,EAAIrN,KAAKwM,GACTc,GAAKJ,EAAMV,GACXe,EAAKL,EAAMb,EAAErM,KAAKqM,EAClBmB,EAAKN,EAAMZ,EAAEtM,KAAKsM,EAClBmB,EAAMN,EAAEG,EAAIF,EAAEC,EAElB,GAAW,GAAPI,EACA,OAAO,KAGX,IAAIC,GAAMJ,EAAEC,EAAKH,EAAEI,GAAIC,EACnBE,IAAON,EAAEE,EAAKJ,EAAEK,GAAIC,EAExB,MAAO,CAACC,EAAIC,GAMhB,MAAMR,GACF,IAAIL,EAAQ,GAIZ,OAHAA,EAAMT,EAAIrM,KAAKqM,EAAErM,KAAKuM,GAAGY,EACzBL,EAAMR,EAAItM,KAAKsM,EAAEtM,KAAKwM,GAAGW,EAElBL,GCxDA,OACf5I,YACAkC,OACA3F,MACAY,YACAe,YACAkE,aAEAhF,YACAc,YACAkE,aAEA/E,UACAa,aACAgD,YAEA5D,UACAY,aACAgD,YAEA3D,QACAW,WACAgD,gBAEAwI,WACAxL,YACAgD,WAEAyI,WACAzL,WACAgD,2BAEA1D,OACAU,YACAkE,cAGAC,OACA,OACAuH,eACAC,iBAGAtH,UACAuH,UACA,aACA,kBACA,kBACA,oCACA,sCAGAC,kBACA,wCAEAC,QAEA,8CACA,0CAEA,iBACA,cACA,cACA,eACA,eAEA,6GACA,8BACA,0BACA,0BAEA,sEACA,4DAEA,0FACA,4CAEA,IAGA,CACAC,EACA,4CACA,+CAKA7G,OACA,iBACA,wBAEA,gBACA,wBAEA,iBACA,yBAGA8G,UACA,wBAEAxD,UACA,4BAEAE,gBACA,8BAEArD,SACA4G,kBACA,0CACA,sCACA,OAGA,yIACA,gCACA,gCACA,wDAGAC,0BACA,yBACA,iBAOA,OANA,EACAC,cAEA,uBACAA,eAEA,CACA,+BACA,iBACA,0CAaAC,sBACA,sBAAAjQ,KAAAC,KAAAC,KAAAC,MAAA,IAKA+P,aACA,iBACA,SAGA,8BAAApC,IAAAC,MAEA,yBACA,wCACA,MASAoC,UACA,qEAGA,gECvL2S,ICOvS,EAAY,eACd,EACA,EACA,GACA,EACA,KACA,KACA,MAIa,I,8DCoCf,MAAMC,EAAkB,SAAxB,GACA,0BACAC,OACAjJ,YACAkJ,eACAC,YACAC,eACAC,aACApD,YACA1I,qBACA+L,cACAC,eAGMC,EAAS,GAETC,EAAyB,SAAUC,EAAQC,GACjD,yFACA,uEAIe,OACfpL,oBACAuF,YACA8F,QACAC,OACAC,qEAEArJ,OACA3F,IACA2B,YACAkE,aAEAX,UACAvD,aACAgD,YAEAhB,OACAhC,YACAgD,kBAEAsK,aACAtN,WACAgD,gBAEAuK,WACAvN,oBACAgD,gBAEAwK,QACAxN,YACAgD,cAEAyK,cACAzN,YACAgD,cAEA0K,aACA1N,YACAgD,YAEA2K,cACA3N,aACAgD,aAGAmB,OACA,OACAyJ,aACAC,cAGAC,iBAGAC,WACAC,oBAEAC,kCAEAC,UAEA9J,SACA+J,2BAEAC,kBAGAC,cAEAC,aAEAC,eAEAC,qBACA5P,YACAgB,iBACAqB,qBAEAF,+BAGAzB,gBAGA+E,UACAlG,UACA,OACA,gBACA,iBA6BA,OA3BA,eACAA,gBAEA,eACAA,mBAGA,wBACAA,kBAGA,oBACAA,mBAEA,oBACAA,kBAEA,oBACAA,kBAEA,qBACAA,kBAGAA,mBAGA,GAEA2B,aACA,4BAGA,CACAmK,0EACAC,0EACA1C,8EACAiH,+EACA,yBACA,iBACA,yBATA,MAYAC,kBAGA,oIACA,sBAEA,iCACA,gDAGA,kFAGAC,eACA,uCAEAC,gBACA,kDAEAC,iBACA,0CAEAC,gBACA,yCAEAC,mBACA,8EACA,sBAEA,MAEAC,eACA,kEAEAC,+BAGA,SACA,4FACAC,wDAGA,SAEA,oBACAC,6CAIA,+CAEA,qBAGAjK,OACAuI,eACA,qEAEA,eAEA,kBAKA,iBACA,qBACA,eAAA2B,aAAAC,oBAGA9L,UACA4B,aACAC,WACA,wBAGA0J,gBACAD,iBACAhB,aACA,sCAEAD,YACA,yBAGA0B,eACAC,8BAEA,gBACA,wBAEA,iDAEA,gCACA,kEAGA,gBACAA,6BAGA,wBAGA,2DACA9G,oEAEA,0EACA,wBAAA2G,aAAAC,kBACA,oBAEArC,eAEA,mBAEAtE,gBACAD,kEAEApD,SACA5F,mBACAV,iBACAA,kBAEAS,gBACAgQ,QACA,wBAEAC,kBACA,eAIA,0EAHA,oBAMAC,4BACA,YACA,2BAEA,2BACA,cACA,YACA,yCAGAC,4BACA,6BACA,eAEAC,yBACA,0BACA,wBAEAC,uBACA,wBACA,eAEAC,8BACA,GACA,mBAEA,0BACA,yBAEAC,qBACA,uFACA,kCACAC,mBAEA,oBACA,kBACA,WAEA,qBACA,aAEA,uBACA,eAEA,sBACA,eAEAtP,qBACA,UACA,gBACA,iCACA,MACA,kBACA,iCACA,MACA,eACA,2BACA,MACA,aACA,wBACA,MACA,eACA,gCACA,MACA,WACA,0BACA,QAGAuP,gCAIA,oFAEA,YADA,iCAIA,SACA,gCACA,0BACA,qBACA,0DACA,SAGA,mFACA,eACA,IACA,+CACA,SAEA,oDACA,MACA,SAEA,wCACA,6BACA,0BACA,OACA,gCACAC,qCAGAA,MACAC,SACA9R,KACAY,aACAC,eAIA,SACAsG,iBAMA,gCAEA4K,sBACA,iCACA,+DACA,oBAIAvP,kBACA,yBACA,OACAd,oBAIAsQ,eACA,iCACA,mEAEAC,mBACA,eACA,OACAvR,yBAIAwR,YACA,qDAEApO,QACA,wBAEAqO,QACA,oBACA,oBAGA,uBAGAC,eACA,EACA,qBACA,uBAEA,yBACA,yBACA,wBAIA,uBACA,yBACA,wBAGAC,cACA,sBACA,YACA3H,OAAAiC,IACA,qCACA,4BACA,8DAEA,WAEA2F,IAAA3F,kBACA,WACAjC,OAAA6H,sJACAD,IAAAC,mBAEAC,SACA,oBACA,iCAEA,2BACA,2BAGA,uBACA,4CAEA,uBACA,mBACA,2BAEA,oBACA,wBAEA,2CACA,iCACA,UACA,oDACA,SACA,sBAGA,gBAGA,mBACA,wBACA,OAEA,6EACA,eACA,8BACA,OAIA,SACA,uBAEA,qBACA,sBACAC,UAEA,wBACA,oBACA,qCACA,OAGA,IACA,6CACA,0BACA,eACA,SACA,oCAGAA,UAEA,oBACA,qBACA,gBACA5C,oCACA9J,wCAIA,IACA,0BACA,iCACA0M,KACA,SACA,mCAGAA,KAKA,IACApM,mBACAA,sBAGAjG,gBACA,4BAGA,yDACA,0BACA,gCACA,4BACA,uCACA,mCACA,oBACAiG,mBACA,uBAGAqM,kBACA,gCAGA,OAFAC,uFACAA,2FACA,GAEAC,eACA,6CACA,OACAvM,iBACAA,kBAGAnG,eACA,yBAGA,IACA,0BAEA,+CACA,kEACA,MACA,6DACA,OACA,mDACA,uCACA,gBAcA,GATA,uBACA,gCAGA,oBACA,qEACA,qBAGA,qBACA,8CACA,IACA,kBACApC,QACAC,QACAC,QACAC,QACA,yBACA,qCAIA,SACA,wBAGAkC,eACA,wBACA,OAEA,WACA,sBAEA,cAcA,aAbA,WAEA,sBACA0S,QACAC,WAKA,mBAIA,YACA,UAGA,+BACA,SAUA,GATA,4CACA,KACAC,eAEA,OACAA,iBAGA,wBACA,kBACA,sBACA,sBAGA1M,mBACA,OAKA,0CACA,qBAGA,cAGAuE,gBACA,4CAGA,cACA,6CACA,cAEA,sGACA,mBACA,kBACA,gBACA,sCACA,KAIAoI,yBAEA,6BAIA,OACA,oBAEA,OACA,6CACA,sCAGA,sBAOAC,cACA,sBACA,6EACA,sCACA,qBAEA,0CACA,+DAEA,mBACA,sBAEA,mBACA,qBAEA,qBACA,4BACA,kBACA,IACA,sBACA,eAAAA,eAAAjC,eAAAkC,kBACA,gEAIAC,sBAEA,GADAzR,0BACA,iBAIA,4BACA,SACA,KACA,gCACA,mBAMA,GAFA0R,KAEA,EACA,kCAIA,mCACA,6BACAC,KACA,OAKA,SACA,sEAIAC,0BACA,2BAOA,OANA,WACA1H,0DAEA,WACAC,yDAEA,OAGA0H,+BACA,sBACAxR,aACAC,YACAX,YACAQ,cAIA2R,mBACA,kCACA,wCACAxT,+CACA,2BACAA,MAIAA,IAEA,+BACAkB,cAEA,OACAlB,SACA2B,eACAb,YACAe,oBACAE,wBACAC,sBACAX,sBACAa,gCACAD,qBAEA,uBACAP,2DAGA,2BAcA,OAbAA,iFAGA,6DACA,SAGA,gCACAA,aAGA,uCACA,cACA,GAGA+R,8BACA,2BACA,KACA,8EACA,8EAKA,OAHA,0BACA,yBAEA,GAGAC,gBACA,UACA,4BACA,2DAGA,IAMA,EANA,WACAxC,yBACAA,0DAGA,eAGA/H,EADA,IACAA,sDAGAA,0CAGA,2CACA,WAEA,aAGAwK,qBACA,2BACA,oBACA,qCACA,sCAEA,uBAGAC,cACA,yBACA,kCAEA,wBACA,uBAIAC,0BAIA,OAHA,qBACAnT,iBAEA,iBAGA,UACA,0BAEA,oCACA,IAMAoT,cACApT,0BACAA,0BACA,gDAMA,qBAGA,yBACA,WACA,uBACA4D,8BACA,WAEA,KACA,kHAKA,6CACA,2CACA,OACA,SAGA,iCACA,gEACA,mBASA,OALA,UACA,yBAGA,6BACA,KAOAyP,gBACA,sCACA,kBACA,KAEA,MAMA,uBACA,iCAIA,gCAEA,0CACA,0BACA,oBAKA,yCACA,mBAEA,YAIA,8BACA,SACA,mBACA,2BACA,MACA,4BAEA,UACA,iCAEAlE,oBAEA,aACAA,0BACAA,4BAIA,mBACA,UACA,yCAGA,SAIA,wBACA,wCAGA,wBACA,GAAA7P,KAAAc,YAAAC,YAAAC,UAAA8Q,UAYA,GAXA,UACApR,eACAA,iBAIAA,eACAA,gBAIA,0CACA,gDAGA,kEACA,iCAGA,qEACA,wCAIA,wBACA,0BACA,sCAKA,wGACA,mFACAA,iBACA,sBAGA,6CACA,cAGA,sCACAA,wBACAA,wBAGA,6CACA,MAOAsT,iBACA,gBAEA,KACA,MACAC,WAEA,kBACA,cACA,qBACA,yBACA,oBACA,gBACA,eACA,YACAA,WACAC,aAOA,yBAMA,sBACA,+CACA,uDACA,iBACA,qBAGAC,aACA,OACAC,kBAGA,iCACA,oEACA,GAEAC,mBAEA,iCAEA,6BACA,eAEA,qBACA,SAEA,oBACA,YAEA,qBACAvO,qBAGA,iBACAA,gBACA,6BACA,eACAA,0BAMA,gDAOA,oCACA,MACA,0BAEA,IACAwO,aACA,SAGA,GADA,0CACA,kBACA,UACA,YACA,SACA,sCAGAA,KAMA,OAHA,0BACA,4CAEA,GAOA,qBACA,6CAOA,IALA,oBACA,aACA,2DAGA,mBACA,SAIA,MAuBA,OAtBA,gCAEAC,yDACAA,sDAGAA,gDAEAA,eACAA,UACA,yCAEA,8FACA,0DACA,qCAEA,oBACA,oBAGA,0DAEA,GACAC,IAGA,mCACA,qBAC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","file":"js/chunk-796e9818.fddf46f4.js","sourcesContent":["var polygonPoint = require('./polygon-point')\nvar lineLine = require('./lineToLine')\n\n/**\n * line-polygon collision\n @param {number} x1 point 1 of line\n @param {number} y1 point 1 of line\n @param {number} x2 point 2 of line\n @param {number} y2 point 2 of line\n @param {number[]} points of polygon\n @param {tolerance=1} maximum distance of point to polygon's edges that triggers collision (see pointLine)\n */\nmodule.exports = function linePolygon(x1, y1, x2, y2, points, tolerance)\n{\n    var length = points.length\n\n    // check if first point is inside the shape (this covers if the line is completely enclosed by the shape)\n    if (polygonPoint(points, x1, y1, tolerance))\n    {\n        return true\n    }\n\n    // check for intersections for all of the sides\n    for (var i = 0; i < length; i += 2)\n    {\n        var j = (i + 2) % length\n        if (lineLine(x1, y1, x2, y2, points[i], points[i + 1], points[j], points[j + 1]))\n        {\n            return true\n        }\n    }\n    return false\n}\n","'use strict'\n\n/**\n * box-box collision\n * @param {number} x1 top-left corner of first box\n * @param {number} y1 top-left corner of first box\n * @param {number} w1 width of first box\n * @param {number} h1 height of first box\n * @param {number} x2 top-left corner of second box\n * @param {number} y2 top-left corner of second box\n * @param {number} w2 width of second box\n * @param {number} h2 height of second box\n */\nmodule.exports = function boxBox(x1, y1, w1, h1, x2, y2, w2, h2)\n{\n    return x1 < x2 + w2 && x1 + w1 > x2 && y1 < y2 + h2 && y1 + h1 > y2\n}\n","'use strict'\n\n/**\n * lineToLine helper function (to avoid circular dependencies)\n * from http://stackoverflow.com/questions/563198/how-do-you-detect-where-two-line-segments-intersect\n * @param {number} x1 first point in line 1\n * @param {number} y1 first point in line 1\n * @param {number} x2 second point in line 1\n * @param {number} y2 second point in line 1\n * @param {number} x3 first point in line 2\n * @param {number} y3 first point in line 2\n * @param {number} x4 second point in line 2\n * @param {number} y4 second point in line 2\n * @return {boolean}\n */\nmodule.exports = function lineToLine(x1, y1, x2, y2, x3, y3, x4, y4)\n{\n    var s1_x = x2 - x1\n    var s1_y = y2 - y1\n    var s2_x = x4 - x3\n    var s2_y = y4 - y3\n    var s = (-s1_y * (x1 - x3) + s1_x * (y1 - y3)) / (-s2_x * s1_y + s1_x * s2_y)\n    var t = (s2_x * (y1 - y3) - s2_y * (x1 - x3)) / (-s2_x * s1_y + s1_x * s2_y)\n    return s >= 0 && s <= 1 && t >= 0 && t <= 1\n}","export * from \"-!../../../mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../vue-loader/lib/loaders/stylePostLoader.js!../../../postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../cache-loader/dist/cjs.js??ref--1-0!../../../vue-loader/lib/index.js??vue-loader-options!./ModelBuilder.vue?vue&type=style&index=0&lang=scss&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{ref:\"div\",class:_vm.classes,attrs:{\"id\":_vm.id,\"tabindex\":\"0\"},on:{\"mousemove\":_vm.onMouseMove,\"mousedown\":_vm.onMouseDown,\"wheel\":_vm.onMouseWheel,\"keydown\":_vm.onKeyDown,\"focus\":function($event){_vm.hasFocus = true},\"blur\":function($event){_vm.hasFocus = false}}},[_c('svg',{staticClass:\"canvas\",attrs:{\"xmlns\":\"http://www.w3.org/2000/svg\",\"version\":\"1.1\"}},[_vm._l((_vm.edges),function(edge){return _c('Edge',{key:edge.id,attrs:{\"id\":edge.id,\"parameter1\":edge.parameter1,\"parameter2\":edge.parameter2,\"selected\":edge.selected,\"inactive\":edge.inactive,\"issues\":edge.issues,\"state\":_vm.state},on:{\"mounted\":function (node) { return _vm.mount(edge, node); },\"unmounted\":function () { return _vm.mount(edge); },\"position\":function($event){return _vm.updateEdgePos(edge, arguments)}}})}),_vm._l((_vm.hiddenParameterRefEdges),function(edge){return _c('Edge',{key:edge.id,attrs:{\"id\":edge.id,\"parameter1\":edge.parameter1,\"parameter2\":edge.parameter2,\"inactive\":true,\"lineColor\":[200,200,200,1],\"lineWidth\":2,\"state\":_vm.state},on:{\"mounted\":function (node) { return _vm.mount(edge, node); },\"unmounted\":function () { return _vm.mount(edge); }}})}),(_vm.linkingLine)?_c('line',_vm._b({},'line',_vm.linkingLine,false)):_vm._e(),(_vm.selectRect)?_c('rect',_vm._b({},'rect',_vm.selectRect,false)):_vm._e()],2),_c('div',{staticClass:\"blocks\"},_vm._l((_vm.blocks),function(block){return _c('Block',{key:block.id,attrs:{\"id\":block.id,\"type\":block.type,\"spec\":block.spec,\"state\":_vm.state,\"selected\":block.selected,\"position\":block.position,\"origin\":block.origin,\"process_id\":block.process_id,\"namespace\":block.namespace,\"result\":block.result,\"args\":block.arguments,\"description\":block.description},on:{\"update\":function () {\n\tvar args = [], len = arguments.length;\n\twhile ( len-- ) args[ len ] = arguments[ len ];\n\n\treturn _vm.updateBlock.apply(void 0, [ block ].concat( args ));\n},\"mounted\":function (node) { return _vm.mount(block, node); },\"unmounted\":function () { return _vm.mount(block); },\"move\":_vm.startDragBlock}})}),1),(_vm.state.scale < 0.7 || _vm.showZoomInfo)?_c('div',{staticClass:\"zoomInfo\"},[(_vm.state.scale < 0.7)?_c('div',[_vm._v(\" Zoom in for more details. \")]):_vm._e(),(_vm.showZoomInfo)?_c('div',[_vm._v(\" Zoom with \"),_c('kbd',[_vm._v(\"STRG\")]),_vm._v(\" or \"),_c('kbd',[_vm._v(\"Meta\")]),_vm._v(\" key and the mouse wheel. \")]):_vm._e()]):_vm._e(),(_vm.parameterViewer)?_c('ParameterViewer',_vm._b({on:{\"close\":function($event){_vm.parameterViewer = null}}},'ParameterViewer',_vm.parameterViewer,false)):_vm._e()],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{ref:\"div\",class:_vm.containerClasses,style:(_vm.styles),attrs:{\"id\":'block' + this.id},on:{\"mousedown\":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,\"left\",37,$event.key,[\"Left\",\"ArrowLeft\"])){ return null; }$event.preventDefault();$event.stopPropagation();if('button' in $event && $event.button !== 0){ return null; }return _vm.onMouseDown.apply(null, arguments)}}},[_c('div',{staticClass:\"blockTitle\",on:{\"mousedown\":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,\"left\",37,$event.key,[\"Left\",\"ArrowLeft\"])){ return null; }$event.preventDefault();$event.stopPropagation();if('button' in $event && $event.button !== 0){ return null; }return _vm.emitDrag.apply(null, arguments)}}},[_c('span',{staticClass:\"titleText\",attrs:{\"title\":_vm.plainTitle}},[_c('span',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.invalid),expression:\"invalid\"}],staticClass:\"invalid\",attrs:{\"title\":\"Process or Collection not supported!\"}},[_c('i',{staticClass:\"fas fa-exclamation-triangle\"})]),_vm._v(\" \"+_vm._s(_vm.name)+\" \"),(_vm.showId)?_c('span',{staticClass:\"blockId\"},[_vm._v(_vm._s(_vm.id))]):_vm._e()]),_c('div',{staticClass:\"blockicon\",on:{\"mousedown\":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,\"left\",37,$event.key,[\"Left\",\"ArrowLeft\"])){ return null; }$event.preventDefault();$event.stopPropagation();if('button' in $event && $event.button !== 0){ return null; }return _vm.focus()}}},[_c('span',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.allowsDescription && !_vm.showDescriptionField),expression:\"allowsDescription && !showDescriptionField\"}],staticClass:\"addDescription\",attrs:{\"title\":\"Add description\"},on:{\"click\":function($event){$event.stopPropagation();$event.preventDefault();return _vm.addDescription()}}},[_c('i',{staticClass:\"fas fa-comment-medical\"})]),_c('span',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.allowsDelete),expression:\"allowsDelete\"}],staticClass:\"delete\",attrs:{\"title\":\"Remove (DEL)\"},on:{\"click\":function($event){$event.stopPropagation();$event.preventDefault();return _vm.remove()}}},[_c('i',{staticClass:\"fas fa-trash\"})]),_c('span',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.allowsInfo),expression:\"allowsInfo\"}],staticClass:\"info\",attrs:{\"title\":\"Details\"},on:{\"click\":function($event){$event.stopPropagation();$event.preventDefault();return _vm.showInfo()}}},[_c('i',{staticClass:\"fas fa-info\"})]),_c('span',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.allowsParameterChange),expression:\"allowsParameterChange\"}],staticClass:\"settings\",attrs:{\"title\":_vm.isParameter ? 'Edit parameter' : 'Change parameter values'},on:{\"click\":function($event){$event.stopPropagation();$event.preventDefault();return _vm.edit.apply(null, arguments)}}},[_c('i',{staticClass:\"fas fa-edit\"})])])]),_c('div',{staticClass:\"inout\"},[_c('div',{staticClass:\"inputs\"},_vm._l((_vm.parameters),function(param,i){return _c('BlockParameter',{key:i,ref:\"parameters\",refInFor:true,attrs:{\"state\":_vm.state,\"value\":_vm.args[param.name],\"name\":param.name,\"description\":param.description,\"optional\":param.optional,\"deprecated\":param.deprecated,\"experimental\":param.experimental,\"default\":param.default,\"schema\":param.schema},on:{\"input\":function (value) { return _vm.updateArgument(param.name, value); },\"edgesChanged\":function($event){return _vm.edgesChanged(param, $event)}}})}),1),_c('div',{staticClass:\"outputs\"},[_c('BlockParameter',_vm._b({ref:\"output\",attrs:{\"state\":_vm.state,\"label\":_vm.outputLabel},on:{\"input\":_vm.updateResult}},'BlockParameter',_vm.output,false))],1)]),(_vm.showDescriptionField)?_c('textarea',{ref:\"descriptionField\",staticClass:\"editDescription\",attrs:{\"readonly\":!_vm.state.editable,\"placeholder\":\"Type description here...\"},domProps:{\"value\":_vm.description},on:{\"blur\":_vm.updateDescription,\"mousedown\":function($event){$event.stopPropagation();}}}):_vm._e()])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{class:_vm.classes},[(!_vm.output)?_c('div',_vm._g({ref:\"circle\",class:_vm.circleClasses},_vm.circleListeners)):_vm._e(),_c('span',_vm._g({staticClass:\"text\"},_vm.textListeners),[_c('span',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.unspecified),expression:\"unspecified\"}],staticClass:\"unspecified\",attrs:{\"title\":\"Parameter is likely unsupported!\"}},[_c('i',{staticClass:\"fas fa-exclamation-triangle\"})]),_c('span',{staticClass:\"label\"},[_vm._v(_vm._s(_vm.displayLabel))]),(_vm.displayValue.length)?[_vm._v(\": \")]:_vm._e(),_c('span',{staticClass:\"value\",domProps:{\"innerHTML\":_vm._s(_vm.displayValue)}})],2),(_vm.output)?_c('div',_vm._g({ref:\"circle\",class:_vm.circleClasses,attrs:{\"title\":\"Output of the process\"}},_vm.circleListeners)):_vm._e()])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div :class=\"classes\">\r\n        <div v-if=\"!output\" ref=\"circle\" :class=\"circleClasses\" v-on=\"circleListeners\"></div>\r\n        <span class=\"text\" v-on=\"textListeners\">\r\n            <span v-show=\"unspecified\" class=\"unspecified\" title=\"Parameter is likely unsupported!\">\r\n                <i class=\"fas fa-exclamation-triangle\"></i>\r\n            </span>\r\n            <span class=\"label\">{{ displayLabel }}</span><template v-if=\"displayValue.length\">: </template>\r\n            <span class=\"value\" v-html=\"displayValue\"></span>\r\n        </span>\r\n        <div v-if=\"output\" ref=\"circle\" :class=\"circleClasses\" v-on=\"circleListeners\" title=\"Output of the process\"></div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { ProcessSchema } from '@openeo/js-commons';\r\nimport { ProcessGraph } from '@openeo/js-processgraphs';\r\nimport Utils from '../../utils.js';\r\n\r\nexport default {\r\n    name: 'BlockParameter',\r\n    props: {\r\n        name: {\r\n            type: String,\r\n            default: 'output'\r\n        },\r\n        description: {\r\n            type: String,\r\n            default: ''\r\n        },\r\n        optional: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        deprecated: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        experimental: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        default: {},\r\n        value: {},\r\n        schema: {\r\n            type: [Object, Array],\r\n            default: null\r\n        },\r\n        label: {\r\n            type: String\r\n        },\r\n        output: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        state: {\r\n            type: Object,\r\n            required: true\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            // The attached edges\r\n            edges: []\r\n        };\r\n    },\r\n    computed: {\r\n        schemas() {\r\n            if (this.schema instanceof ProcessSchema) {\r\n                return this.schema;\r\n            }\r\n            else {\r\n                return new ProcessSchema(this.schema);\r\n            }\r\n        },\r\n        hasValue() {\r\n            return (this.value !== undefined);\r\n        },\r\n        textListeners() {\r\n            if (this.allowsArgumentChange) {\r\n                return {\r\n                    click: this.openEditorForArguments\r\n                };\r\n            }\r\n            else {\r\n                return {};\r\n            }\r\n        },\r\n        circleListeners() {\r\n            var listeners = {};\r\n            if (this.state.editable) {\r\n                listeners.mousedown = event => {\r\n                    if (event.which == 1) {\r\n                        this.state.root.link(this);\r\n                        event.preventDefault();\r\n                        event.stopPropagation();\r\n                    }\r\n                };\r\n\r\n                if (this.output) {\r\n                    // Allow specifying the result node\r\n                    listeners.dblclick = event => {\r\n                        if (event.which == 1) {\r\n                            this.$emit('input', true);\r\n                        }\r\n                    };\r\n                }\r\n\r\n                // Handle focus on the I/Os\r\n                listeners.mouseover = () => this.state.linkFrom && this.state.root.link(this);\r\n                listeners.mouseout = () => this.state.linkTo && this.state.root.unlink(this);\r\n            }\r\n            return listeners;\r\n        },\r\n        classes() {\r\n            let classes = [\r\n                this.output ? 'output' : 'input',\r\n                'connector',\r\n                'field_' + this.name,\r\n                (this.hasValue || this.optional || this.output || this.getEdgeCount() > 0) ? 'hasValue' : 'noValue',\r\n            ];\r\n            if (this.allowsArgumentChange) {\r\n                classes.push(\"editable\");\r\n            }\r\n            return classes;\r\n        },\r\n        unspecified() {\r\n            return !this.$parent.invalid && this.state.root.hasProcesses && this.schemas.unspecified;\r\n        },\r\n        circleClasses() {\r\n            var classes = ['circle'];\r\n            if (this.getEdgeCount() > 0) {\r\n                classes.push('io_active');\r\n            }\r\n\r\n            for (var edge of this.edges) {\r\n                if (edge.selected) {\r\n                    classes.push('io_selected');\r\n                }\r\n                else if (edge.issues.length > 0) {\r\n                    classes.push('io_issues');\r\n                }\r\n            }\r\n\r\n            if (this.state.linkFrom == this || this.state.linkTo == this) {\r\n                classes.push('io_selected');\r\n            }\r\n            return classes;\r\n        },\r\n        displayValue() {\r\n            var maxLength = 38 - this.displayLabel.length;\r\n            var formattedValue = null;\r\n            if (this.isEditable && !this.state.compactMode && !Utils.isRef(this.value)) {\r\n                let value = typeof this.value !== 'undefined' ? this.value : this.default;\r\n                if (typeof value !== 'undefined') {\r\n                    formattedValue = this.formatValue(value, maxLength, true);\r\n                }\r\n            }\r\n\r\n            if (typeof formattedValue === 'string') {\r\n                if (formattedValue.length === 0) {\r\n                    formattedValue = '<em>Empty</em>';\r\n                }\r\n            }\r\n            else {\r\n                formattedValue = '';\r\n            }\r\n            return formattedValue;\r\n        },\r\n        displayLabel() {\r\n            if (this.output && this.state.compactMode) {\r\n                return '';\r\n            }\r\n            else if (typeof this.label === 'string' && (this.label.length > 0 || this.output)) {\r\n                return this.label;\r\n            }\r\n            else {\r\n                return this.name;\r\n            }\r\n        },\r\n        isArrayType() {\r\n            return this.schemas.nativeDataType() === 'array';\r\n        },\r\n        isObjectType() {\r\n            return this.schemas.nativeDataType() === 'object';\r\n        },\r\n        isEditable() {\r\n            return !this.output && this.schemas.isEditable();\r\n        },\r\n        allowsArgumentChange() {\r\n            return (!this.output && this.schemas.isEditable());\r\n        },\r\n        allowsMultipleInputs() {\r\n            // Is there any type that potentially allows multiple inputs?\r\n            return this.isArrayType || this.isObjectType || this.schemas.nativeDataType() === 'any';\r\n        },\r\n    },\r\n    watch: {\r\n        edges() {\r\n            this.updateEdgeStatus();\r\n            this.$emit('edgesChanged', this.edges, this);\r\n        },\r\n        value: {\r\n            immediate: true,\r\n            handler() {\r\n                this.updateEdgeStatus();\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        updateEdgeStatus() {\r\n            if (!this.output) {\r\n                for(var edge of this.edges) {\r\n                    edge.inactive = !this.isEdgeUsed(edge);\r\n                }\r\n            }\r\n        },\r\n        getCirclePosition() {\r\n            try {\r\n                var dim = this.state.root.domBoundingBox(this.$refs.circle);\r\n                var blocksDim = this.state.root.getDimensions();\r\n                var x = (dim.offsetLeft - blocksDim.offsetLeft) + dim.width / 2;\r\n                var y = (dim.offsetTop - blocksDim.offsetTop) + dim.height / 2;\r\n                return [x, y];\r\n            } catch (error) {\r\n                console.warn(error);\r\n                return null;\r\n            }\r\n        },\r\n        openEditorForArguments() {\r\n            if (this.allowsArgumentChange) {\r\n                this.$parent.showArguments(this.name);\r\n            }\r\n        },\r\n        jsonSchema() {\r\n            return this.schemas.toJSON();\r\n        },\r\n        setValue(value) {\r\n            if (this.schemas.nativeDataType() == 'boolean' && !Utils.isRef(value)) {\r\n                value = !!value;\r\n            }\r\n            this.$emit('input', value);\r\n        },\r\n        resetValue() {\r\n            if (typeof this.default !== 'undefined') {\r\n                this.setValue(this.default);\r\n                return;\r\n            }\r\n            \r\n            var value;\r\n            if (this.schemas.nullable()) {\r\n                value = null;\r\n            }\r\n            else {\r\n                var dataType = this.schemas.nativeDataType();\r\n                switch(dataType) {\r\n                    case 'object':\r\n                        value = {};\r\n                        break;\r\n                    case 'array':\r\n                        value = [];\r\n                        break;\r\n                    case 'string':\r\n                        value = '';\r\n                        break;\r\n                    case 'integer':\r\n                    case 'number':\r\n                        value = 0;\r\n                        break;\r\n                    case 'boolean':\r\n                        value = false;\r\n                        break;\r\n                    default:\r\n                        value = undefined;\r\n                }\r\n            }\r\n            this.setValue(value);\r\n        },\r\n        getEdgeRef(edge) {\r\n            if (this.output) {\r\n                return this.value;\r\n            }\r\n            else {\r\n                return edge.parameter1.value;\r\n            }\r\n        },\r\n        addRefToValue(edge) {\r\n            var ref = this.getEdgeRef(edge);\r\n            if (!ref) {\r\n                return;\r\n            }\r\n            else if (!this.allowsMultipleInputs) {\r\n                this.setValue(ref);\r\n            }\r\n            else if (this.isArrayType) {\r\n                if (Utils.isRef(this.value)) {\r\n                    this.setValue([this.value, ref]);\r\n                }\r\n                else if (Array.isArray(this.value) && this.value.length > 0) {\r\n                    var value = this.value;\r\n                    value.push(ref);\r\n                    this.setValue(value);\r\n                }\r\n                else {\r\n                    this.setValue(ref);\r\n                }\r\n            }\r\n            else if (this.isObjectType) {\r\n                var propertyCount = Utils.size(this.value);\r\n                if (this.getEdgeCount() === 1 && (!this.hasValue || !propertyCount)) {\r\n                    this.setValue(ref);\r\n                }\r\n                else if (!propertyCount) {\r\n                    this.resetValue();\r\n                }\r\n                else {\r\n                    // Don't change value\r\n                }\r\n            }\r\n            else {\r\n                // ToDo: This is probably of data type mixed or any, how to handle?\r\n                this.setValue(ref);\r\n            }\r\n        },\r\n        removeRefFromValue(edge) {\r\n            if (!this.output) {\r\n                var ref = this.getEdgeRef(edge);\r\n                if (Utils.isRefEqual(ref, this.value)) {\r\n                    this.resetValue();\r\n                }\r\n                else if (this.isArrayType || this.isObjectType) {\r\n                    this.setValue(this.removeRefFromValueDeep(this.value, ref));\r\n                }\r\n            }\r\n        },\r\n        removeRefFromValueDeep(value, ref) {\r\n            if (Array.isArray(value)) {\r\n                var i = value.length;\r\n                while(--i >= 0) {\r\n                    if (value[i] === null || typeof value[i] !== 'object') {\r\n                        continue;\r\n                    }\r\n                    else if (Utils.isRefEqual(ref, value[i])) {\r\n                        value.splice(i, 1);\r\n                    }\r\n                    else {\r\n                        value[i] = this.removeRefFromValueDeep(value[i], ref);\r\n                    }\r\n                }\r\n\r\n            }\r\n            else if (Utils.isObject(value)) {\r\n                for(var key in value) {\r\n                    if (!value.hasOwnProperty(key) || value[key] === null || typeof value[key] !== 'object') {\r\n                        continue;\r\n                    }\r\n                    else if (Utils.isRefEqual(ref, value[key])) {\r\n                        delete value[key];\r\n                    }\r\n                    else {\r\n                        value[i] = this.removeRefFromValueDeep(value[key], ref);\r\n                    }\r\n                }\r\n            }\r\n            return value;\r\n        },\r\n        addEdge(edge) {\r\n            this.edges.push(edge);\r\n            if (!this.isEdgeUsed(edge) && !this.output) {\r\n                this.addRefToValue(edge);\r\n            }\r\n        },\r\n        eraseEdge(edge) {\r\n            for (var k in this.edges) {\r\n                if (this.edges[k] == edge) {\r\n                    this.removeRefFromValue(edge);\r\n                    this.$delete(this.edges, k);\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        isEdgeUsed(edge) {\r\n            var ref = this.getEdgeRef(edge);\r\n            if (Utils.isRefEqual(ref, this.value)) {\r\n                return true;\r\n            }\r\n            return this.hasRefInValue(ref, this.value);\r\n        },\r\n        hasRefInValue(ref, value) {\r\n            if (!value || typeof value !== 'object') {\r\n                return false;\r\n            }\r\n            else if (Utils.isRefEqual(ref, value)) {\r\n                return true;\r\n            }\r\n            for(let key in value) {\r\n                if (this.hasRefInValue(ref, value[key])) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        getEdgeCount() {\r\n            return this.edges.length;\r\n        },\r\n        formatProcess(pg, maxLength) {\r\n            if (pg instanceof ProcessGraph && pg.getNodeCount() === 1) {\r\n                return this.formatValue(pg.getResultNode().process_id, maxLength);\r\n            }\r\n            var nodes = Object.values(pg.process_graph);\r\n            if (nodes.length === 1) {\r\n                return this.formatValue(nodes[0].process_id, maxLength);\r\n            }\r\n            else {\r\n                return 'Process';\r\n            }\r\n        },\r\n        formatValue(value, maxLength, html = true) {\r\n            if (typeof value === 'object') {\r\n                if (value === null) {\r\n                    return 'n/a';\r\n                }\r\n                else if (Array.isArray(value)) {\r\n                    return this.formatArray(value, maxLength, html);\r\n                }\r\n                else {\r\n                    return this.formatObject(value, maxLength, html);\r\n                }\r\n            }\r\n            else if (typeof value === 'string') {\r\n                if (value.length > maxLength) {\r\n                    var text = Utils.htmlentities(value.substr(0, maxLength));\r\n                    return html ? text + '<span title=\"' + Utils.htmlentities(value) + '\">…</span>' : text;\r\n                }\r\n                else {\r\n                    return Utils.htmlentities(value);\r\n                }\r\n            }\r\n            else if (typeof value === 'boolean') {\r\n                return value ? '✔️' : '❌';\r\n            }\r\n            else if (typeof value === 'number') {\r\n                return value.toString();\r\n            }\r\n            else {\r\n                return Utils.htmlentities(JSON.stringify(value));\r\n            }\r\n        },\r\n        formatArray(values, maxLength, html = true) {\r\n            let parts = [];\r\n            for(let i in values) {\r\n                let value = values[i];\r\n                let formatted = this.formatValue(value, 10, html);\r\n                let unformatted = Utils.htmlentities_decode(this.formatValue(value, 10, false));\r\n\r\n                if (unformatted.length > maxLength) {\r\n                    if (parts.length === 0) {\r\n                        return this.formatArraySimple(values, 'List(' + values.length + ')');\r\n                    }\r\n                    else {\r\n                        parts.push(this.formatArraySimple(values, '…'));\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                parts.push(formatted);\r\n                maxLength -= unformatted.length + 2;\r\n            }\r\n            \r\n            return parts.join(\", \");\r\n        },\r\n        formatArraySimple(values, text, html = true) {\r\n            if (html && values.length < 10) {\r\n                let title = values.map(v => this.formatValue(v, 25, false)).join(', ');\r\n                return '<span title=\"' + title + '\">' + text + '</span>';\r\n            }\r\n            else {\r\n                return text;\r\n            }\r\n        },\r\n        formatObject(value, maxLength, html = true) {\r\n            if (Object.keys(value).length === 0) {\r\n                return 'None';\r\n            }\r\n            else if (value instanceof ProcessGraph || Utils.isObject(value.process_graph)) {\r\n                return this.formatProcess(value, maxLength);\r\n            }\r\n            else if (Utils.isRef(value)) {\r\n                return this.formatValue(Utils.formatRef(value), maxLength);\r\n            }\r\n            else if (typeof value.west !== 'undefined' && typeof value.east !== 'undefined' && typeof value.south !== 'undefined' && typeof value.north !== 'undefined') {\r\n                return maxLength >= 12 ? 'Bounding Box' : 'BBox';\r\n            }\r\n            else if (Utils.detectGeoJson(value)) {\r\n                return this.formatValue(value.type, maxLength);\r\n            }\r\n\r\n            // Fallback to default\r\n            return html ? '<span title=\"' + Utils.htmlentities(JSON.stringify(value)) + '\">Object</span>' : 'Object';\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.vue-component.model-builder {\r\n    .block .connector {\r\n        font-size: 0.9em;\r\n        margin: 0.2em 0;\r\n        white-space: nowrap;\r\n        \r\n        &.noValue {\r\n            color: red;\r\n        }\r\n        &.editable .label,\r\n        &.editable .value {\r\n            cursor: pointer;\r\n        }\r\n        span[title] {\r\n            cursor: help;\r\n        }\r\n        .input {\r\n            max-width: 100%;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n        }\r\n        .output {\r\n            text-align: right;\r\n        }\r\n        .unspecified {\r\n            color: red;\r\n            margin-right: 0.3em;\r\n        }\r\n        .circle {\r\n            width: 0.8em;\r\n            height: 0.8em;\r\n            margin: 0 0.2em;\r\n            border: 1px solid #888;\r\n            background-color: transparent;\r\n            display: inline-block;\r\n\r\n            &.io_active {\r\n                background-color: #FFC800;\r\n            }\r\n            &.io_selected {\r\n                background-color: #00C800 !important;\r\n            }\r\n            &.io_issues {\r\n                background-color: #FF0000;\r\n            }\r\n        }\r\n    }\r\n\r\n    &.editable .circle {\r\n        cursor: pointer;\r\n    }\r\n}\r\n</style>","import mod from \"-!../../../../cache-loader/dist/cjs.js??ref--13-0!../../../../thread-loader/dist/cjs.js!../../../../babel-loader/lib/index.js!../../../../cache-loader/dist/cjs.js??ref--1-0!../../../../vue-loader/lib/index.js??vue-loader-options!./BlockParameter.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../cache-loader/dist/cjs.js??ref--13-0!../../../../thread-loader/dist/cjs.js!../../../../babel-loader/lib/index.js!../../../../cache-loader/dist/cjs.js??ref--1-0!../../../../vue-loader/lib/index.js??vue-loader-options!./BlockParameter.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./BlockParameter.vue?vue&type=template&id=70b6715c&\"\nimport script from \"./BlockParameter.vue?vue&type=script&lang=js&\"\nexport * from \"./BlockParameter.vue?vue&type=script&lang=js&\"\nimport style0 from \"./BlockParameter.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export default {\r\n\tdefaultScale: 1.3,\r\n\tblockWidth: {\r\n\t\tcompactParams: 110,\r\n\t\tcompact: 60,\r\n\t\tnormalParams: 220,\r\n\t\tnormal: 110\r\n\t}\r\n};","<template>\r\n    <div :id=\"'block' + this.id\" ref=\"div\" :class=\"containerClasses\" @mousedown.prevent.stop.left=\"onMouseDown\" :style=\"styles\">\r\n        <div class=\"blockTitle\" @mousedown.prevent.stop.left=\"emitDrag\">\r\n            <span class=\"titleText\" :title=\"plainTitle\">\r\n                <span v-show=\"invalid\" class=\"invalid\" title=\"Process or Collection not supported!\">\r\n                    <i class=\"fas fa-exclamation-triangle\"></i>\r\n                </span>\r\n                {{ name }}\r\n                <span v-if=\"showId\" class=\"blockId\">{{ id }}</span>\r\n            </span>\r\n            <div class=\"blockicon\" @mousedown.prevent.stop.left=\"focus()\">\r\n                <span v-show=\"allowsDescription && !showDescriptionField\" class=\"addDescription\" title=\"Add description\" @click.stop.prevent=\"addDescription()\">\r\n                    <i class=\"fas fa-comment-medical\"></i>\r\n                </span>\r\n                <span v-show=\"allowsDelete\" class=\"delete\" title=\"Remove (DEL)\" @click.stop.prevent=\"remove()\">\r\n                    <i class=\"fas fa-trash\"></i>\r\n                </span>\r\n                <span v-show=\"allowsInfo\" class=\"info\" title=\"Details\" @click.stop.prevent=\"showInfo()\">\r\n                    <i class=\"fas fa-info\"></i>\r\n                </span>\r\n                <span v-show=\"allowsParameterChange\" class=\"settings\" :title=\"isParameter ? 'Edit parameter' : 'Change parameter values'\" @click.stop.prevent=\"edit\">\r\n                    <i class=\"fas fa-edit\"></i>\r\n                </span>\r\n            </div>\r\n        </div>\r\n        <div class=\"inout\">\r\n            <div class=\"inputs\">\r\n                <BlockParameter v-for=\"(param, i) in parameters\" :key=\"i\" ref=\"parameters\" :state=\"state\" :value=\"args[param.name]\" @input=\"value => updateArgument(param.name, value)\" @edgesChanged=\"edgesChanged(param, $event)\" :name=\"param.name\" :description=\"param.description\" :optional=\"param.optional\" :deprecated=\"param.deprecated\" :experimental=\"param.experimental\" :default=\"param.default\" :schema=\"param.schema\" />\r\n            </div>\r\n            <div class=\"outputs\">\r\n                <BlockParameter ref=\"output\" :state=\"state\" :label=\"outputLabel\" v-bind=\"output\" @input=\"updateResult\" />\r\n            </div>\r\n        </div>\r\n        <textarea ref=\"descriptionField\" v-if=\"showDescriptionField\" :value=\"description\" :readonly=\"!state.editable\" class=\"editDescription\" placeholder=\"Type description here...\" @blur=\"updateDescription\" @mousedown.stop=\"\"></textarea>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport BlockParameter from './BlockParameter.vue';\r\nimport Utils from '../../utils.js';\r\nimport { ProcessParameter, ProcessUtils } from '@openeo/js-commons';\r\nimport { Utils as PgUtils } from '@openeo/js-processgraphs';\r\nimport Config from './config.js';\r\n\r\n/*\r\nEvents:\r\n\r\nEmits locally:\r\n- moved(x, y) - The block has been moved\r\n- input(value) - The value has been updated\r\n- move() - A block is now being moved\r\n- mounted(node) - The block is now part of the DOM.\r\n- unmounted(node) - The block not not part of the DOM anylonger.\r\n*/\r\n\r\nconst defaultFontSize = 10;\r\n\r\nexport default {\r\n    name: 'Block',\r\n    components: {\r\n        BlockParameter\r\n    },\r\n    props: {\r\n        id: {\r\n            type: String,\r\n            required: true\r\n        },\r\n        type: {\r\n            type: String,\r\n            required: true\r\n        },\r\n        selected: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        position: {\r\n            type: Array,\r\n            required: true\r\n        },\r\n        process_id: {\r\n            type: String\r\n        },\r\n        namespace: {\r\n            type: String,\r\n            default: null\r\n        },\r\n        description: {\r\n            type: String,\r\n            default: null\r\n        },\r\n        args: {\r\n            type: Object,\r\n            default: () => ({})\r\n        },\r\n        result: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        origin: {\r\n            type: String,\r\n            default: null\r\n        },\r\n        spec: {\r\n            type: Object,\r\n            default: () => null\r\n        },\r\n        state: {\r\n            type: Object,\r\n            required: true\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            showDescriptionField: false,\r\n            drag: null // Is the user dragging ?\r\n        };\r\n    },\r\n    watch: {\r\n        'state.compactMode'() {\r\n            this.$emit('moved', this.position);\r\n        },\r\n        description: {\r\n            immediate: true,\r\n            handler() {\r\n                this.showDescriptionField = (this.description !== null);\r\n            }\r\n        }\r\n    },\r\n    computed: {\r\n        // Visualizations\r\n        width() {\r\n            let size = Config.blockWidth;\r\n            if (this.parameters.length > 0) {\r\n                return this.state.compactMode ? size.compactParams : size.normalParams;\r\n            }\r\n            else {\r\n                return this.state.compactMode ? size.compact : size.normal;\r\n            }\r\n        },\r\n        styles() {\r\n            return {\r\n                marginLeft: Math.round(this.state.center[0] + this.position[0] * this.state.scale) + 'px',\r\n                marginTop: Math.round(this.state.center[1] + this.position[1] * this.state.scale) + 'px',\r\n                fontSize: Math.round(this.state.scale * defaultFontSize) + 'px',\r\n                width: Math.round(this.state.scale * this.width) + 'px',\r\n            };\r\n        },\r\n        plainTitle() {\r\n            let parts = [];\r\n            parts.push(this.name);\r\n            if (this.namespace) {\r\n                parts.push(`@${this.namespace}`);\r\n            }\r\n            if (this.showId) {\r\n                parts.push(` ${this.id}`);\r\n            }\r\n            return parts.join('');\r\n        },\r\n        name() {\r\n            switch(this.type) {\r\n                case 'process':\r\n                    if (this.collectionId) {\r\n                        return this.collectionId;\r\n                    }\r\n                    else {\r\n                        return this.processId;\r\n                    }\r\n                case 'parameter':\r\n                    return this.spec.name;\r\n                default:\r\n                    return this.id.substr(1);\r\n            }\r\n        },\r\n        outputLabel() {\r\n            if (this.result) {\r\n                return \"Result\";\r\n            }\r\n            else if (this.isParameter) {\r\n                return \"Process Parameter\";\r\n            }\r\n            else {\r\n                return \"\";\r\n            }\r\n        },\r\n        containerClasses() {\r\n            var classes = ['block'];\r\n            if (this.collectionId) {\r\n                classes.push('block_collection');\r\n            }\r\n            else if (this.isParameter) {\r\n                classes.push('block_argument');\r\n            }\r\n            if (this.result) {\r\n                classes.push('block_result');\r\n            }\r\n            if (this.selected) {\r\n                classes.push('block_selected');\r\n            }\r\n            if (this.invalid) {\r\n                classes.push('block_invalid');\r\n            }\r\n\r\n            return classes;\r\n        },\r\n        invalid() {\r\n            if (this.type !== 'process' || !this.$parent.hasProcesses) {\r\n                // We can only check processes for validity\r\n                // Also, don't check for validity if no processes to validate against are given\r\n                return false;\r\n            }\r\n            else if (this.namespace && Utils.isUrl(this.namespace)) {\r\n                // If the namespace is a URL, then don't complain about a missing process\r\n                return false;\r\n            }\r\n            else if (!this.processId) {\r\n                return true;\r\n            }\r\n\r\n            // Check that the process exists\r\n            if (!this.spec) {\r\n                return true;\r\n            }\r\n\r\n            // Check that the collection exists\r\n            if (this.processId === 'load_collection' && !Utils.isRef(this.args.id)) {\r\n                for(let collection of this.$parent.collections) {\r\n                    if (this.args.id === collection.id) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n        processId() {\r\n            if (this.type === 'process') {\r\n                if (this.process_id) {\r\n                    return this.process_id;\r\n                }\r\n                else if (Utils.isObject(this.spec) && this.spec.id) {\r\n                    return this.spec.id;\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        collectionId() {\r\n            if (this.type === 'process' && this.processId === 'load_collection' && !Utils.isRef(this.args.id)) {\r\n                return this.args.id;\r\n            }\r\n            return null;\r\n        },\r\n        isParameter() {\r\n            return this.type === 'parameter';\r\n        },\r\n        allowsParameterChange() {\r\n            if (this.isParameter) {\r\n                return this.state.editable && !!this.$parent.supports('editParameter');\r\n            }\r\n            else {\r\n                return this.parameters.filter(p => p.isEditable()).length > 0;\r\n            }\r\n        },\r\n        allowsDelete() {\r\n            return (this.state.editable && (!this.spec || (Utils.isObject(this.spec) && this.origin !== 'schema')));\r\n        },\r\n        allowsInfo() {\r\n            if (this.collectionId) {\r\n                return this.$parent.supports('showCollection');\r\n            }\r\n            else if (this.isParameter) {\r\n                return Utils.isObject(this.spec) && this.$parent.supports('showParameter');\r\n            }\r\n            else {\r\n                return this.$parent.supports('showProcess');\r\n            }\r\n        },\r\n        allowsDescription() {\r\n            // ToDo: Remove type restriction and store description for parameters.\r\n            return (this.state.editable && this.type === 'process');\r\n        },\r\n        showId() {\r\n            return (this.type !== 'parameter');\r\n        },\r\n        // Parameters and related\r\n        hasParametersDefined() {\r\n            return Boolean(Utils.isObject(this.spec) && Array.isArray(this.spec.parameters) && this.spec.parameters.length > 0);\r\n        },\r\n        parameters() {\r\n            let names = [];\r\n            let parameters = [];\r\n            if (this.hasParametersDefined) {\r\n                parameters = this.spec.parameters.map(p => new ProcessParameter(p));\r\n                names = parameters.map(p => p.name);\r\n            }\r\n            if (Utils.size(this.args) > 0) {\r\n                for(var key in this.args) {\r\n                    if (!names.includes(key)) {\r\n                        parameters.push(new ProcessParameter({\r\n                            name: key,\r\n                            description: ''\r\n                        }));\r\n                    }\r\n                }\r\n            }\r\n            return parameters;\r\n        },\r\n        fields() {\r\n            var fields = {};\r\n            for(var p of this.parameters) {\r\n                fields[p.name] = p;\r\n            }\r\n            fields.output = this.output;\r\n            return fields;\r\n        },\r\n        output() {\r\n            var spec = {};\r\n            if (Utils.isObject(this.spec)) {\r\n                if (this.isParameter) {\r\n                    spec = this.spec;\r\n                }\r\n                else if (Utils.isObject(this.spec.returns)) {\r\n                    spec = this.spec.returns;\r\n                }\r\n            }\r\n            var output = {\r\n                name: \"output\",\r\n                schema: spec.schema || {},\r\n                description: spec.description || '',\r\n                optional: true,\r\n                output: true,\r\n                value: {}\r\n            };\r\n            if (this.isParameter) {\r\n                output.value.from_parameter = this.id.substr(1);\r\n            }\r\n            else {\r\n                output.value.from_node = this.id.substr(1);\r\n            }\r\n            return output;\r\n        }\r\n    },\r\n    mounted() {\r\n        // ToDo: Move mousemove listener for dragging to Blocks?\r\n        this.draggingFn = this.dragging.bind(this);\r\n        document.addEventListener('mousemove', this.draggingFn);\r\n        // ToDO: Replace with mouseleave?\r\n        this.stopDragFn = this.stopDrag.bind(this);\r\n        document.addEventListener('mouseup', this.stopDragFn);\r\n\r\n        this.$emit('mounted', this);\r\n    },\r\n    beforeDestroy() {\r\n        document.removeEventListener('mousemove', this.draggingFn);\r\n        document.removeEventListener('mouseup', this.stopDragFn);\r\n\r\n        this.$emit('unmounted', this);\r\n    },\r\n    methods: {\r\n        edit() {\r\n            if (this.isParameter) {\r\n                this.editParameter();\r\n            }\r\n            else {\r\n                this.showArguments();\r\n            }\r\n        },\r\n        hasParameter(name) {\r\n            return this.hasParametersDefined && !!this.spec.parameters.find(p => p.name === name);\r\n        },\r\n        updateDescription(event) {\r\n            let value;\r\n            if (typeof event.target.value === 'string' && event.target.value.length > 0) {\r\n                value = event.target.value;\r\n            }\r\n            else {\r\n                value = null;\r\n            }\r\n            this.showDescriptionField = (value !== null);\r\n            if (this.description !== value) {\r\n                this.$emit('update', 'description', value);\r\n            }\r\n        },\r\n        updatePosition(pos, saveHistory = true) {\r\n            pos = Utils.ensurePoint(pos);\r\n            if (this.position[0] !== pos[0] || this.position[1] !== pos[1]) {\r\n                this.$emit('update', 'position', pos, saveHistory);\r\n            }\r\n        },\r\n        updateArguments(value) {\r\n            let removeParameters = Object.keys(this.args)\r\n                    .filter(key => typeof value[key] === 'undefined' && (!this.hasParametersDefined || this.hasParameter(key)));\r\n            // Remove default values\r\n            for(let p of this.parameters) {\r\n                if (typeof value[p.name] !== 'undefined' && p.optional && typeof p.default !== 'undefined' && Utils.equals(p.default, value[p.name]))  {\r\n                    delete value[p.name];\r\n                }\r\n            }\r\n            this.$emit('update', 'arguments', value, removeParameters);\r\n        },\r\n        updateArgument(key, value) {\r\n            let args = Utils.deepClone(this.args);\r\n            args[key] = value;\r\n            this.updateArguments(args);\r\n        },\r\n        updateResult(value) {\r\n            if (this.hasOutputEdges()) {\r\n                this.state.root.$emit(\"error\", \"A result node can't have outgoing edges.\");\r\n                return;\r\n            }\r\n            if (value !== this.result) {\r\n                this.$emit('update', 'result', value);\r\n            }\r\n        },\r\n        focus() {\r\n            this.$parent.focus();\r\n        },\r\n        onMouseDown(event) {\r\n            this.select(!this.selected, !event.shiftKey);\r\n        },\r\n        select(selected = true, unselectOthers = true) {\r\n            this.$emit('update', 'selected', selected, unselectOthers);\r\n            this.focus();\r\n        },\r\n        getDimensions() {\r\n            let dim = this.$parent.domBoundingBox(this.$refs.div);\r\n            var blocksDim = this.$parent.getDimensions();\r\n            dim.x = dim.offsetLeft - blocksDim.offsetLeft;\r\n            dim.y = dim.offsetTop - blocksDim.offsetTop;\r\n            return dim;\r\n        },\r\n        edgesChanged(parameter, edges) {\r\n            parameter.refs = edges.map(edge => edge.parameter1.value);\r\n        },\r\n        editParameter() {\r\n            this.$parent.$emit('editParameter', this.spec, \"Edit Parameter: \" + this.plainTitle, data => this.$emit('update', 'spec', data));\r\n        },\r\n        showArguments(parameterName = null) {\r\n            this.$parent.$emit('editArguments', this.parameters.filter(p => p.isEditable()), this.args, this.plainTitle, this.state.editable, parameterName, data => this.updateArguments(data), this);\r\n        },\r\n        showInfo() {\r\n            if(this.collectionId) {\r\n                this.$parent.$emit('showCollection', this.collectionId);\r\n            }\r\n            else if (this.isParameter) {\r\n                this.$parent.$emit('showParameter', this.spec);\r\n            }\r\n            else {\r\n                this.$parent.$emit('showProcess', this.processId, this.namespace);\r\n            }\r\n        },\r\n        async addDescription() {\r\n            this.select();\r\n            this.showDescriptionField = true;\r\n            await this.$nextTick();\r\n            this.$refs.descriptionField.focus();\r\n        },\r\n        async emitDrag(event) {\r\n            this.select(true, !event.shiftKey);\r\n            this.focus();\r\n            await this.$nextTick();\r\n            this.$emit('move', event);\r\n        },\r\n        getDragPos(pos, mouse) {\r\n            return [mouse[0]/this.state.scale-pos[0], mouse[1]/this.state.scale-pos[1]];\r\n        },\r\n        startDrag(event) {\r\n            if (!this.selected) {\r\n                return;\r\n            }\r\n\r\n            let mousePos = this.$parent.getMousePos(event);\r\n            this.drag = {\r\n                origin: this.position,\r\n                mouse: this.getDragPos(this.position, mousePos)\r\n            };\r\n        },\r\n        stopDrag() {\r\n            if (!this.drag) {\r\n                return;\r\n            }\r\n\r\n            var delta = 5 / this.state.scale; // Only store History if block was moved enough\r\n            if (Math.abs(this.drag.origin[0] - this.position[0]) > delta || Math.abs(this.drag.origin[1] - this.position[1]) > delta) {\r\n                this.updatePosition(this.position);\r\n            }\r\n            this.drag = null;\r\n        },\r\n        dragging(event) {\r\n            if (!this.drag) {\r\n                return;\r\n            }\r\n            \r\n            let mousePos = this.$parent.getMousePos(event);\r\n            let drapPos = this.getDragPos(this.drag.mouse, mousePos);\r\n            // Don't store for each run a history step...\r\n            this.updatePosition(drapPos, false);\r\n        },\r\n\r\n        hasOutputEdges() {\r\n            return this.$refs.output && this.$refs.output.getEdgeCount() > 0;\r\n        },\r\n\r\n        async remove() {\r\n            await this.$parent.removeBlock(this);\r\n        },\r\n\r\n        /**\r\n         * Getting a field by name\r\n         */\r\n        getBlockParameter(name) {\r\n            if (name === 'output' && this.$refs.output) {\r\n                return this.$refs.output;\r\n            }\r\n            else if (Array.isArray(this.$refs.parameters)) {\r\n                var params = this.$refs.parameters.filter(param => param.name === name);\r\n                if (params.length > 0) {\r\n                    return params[0];\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n\r\n        isParameterScoped(parameterName, referenceName) {\r\n            let parameterBlock = this.getBlockParameter(parameterName);\r\n            let cbParams = ProcessUtils.getCallbackParameters(parameterBlock).map(cbParam => cbParam.name);\r\n            return cbParams.includes(referenceName);\r\n        },\r\n\r\n        hiddenParameterRef(parameterBlock) {\r\n            if (this.type !== 'process') {\r\n                return null;\r\n            }\r\n            let globalParam = parameterBlock.id.substr(1);\r\n            for (let argName in this.args) {\r\n                let value = this.args[argName];\r\n                if (Utils.isObject(value) && Utils.isObject(value.process_graph)) {\r\n                    let refs = PgUtils.getRefs(value, true, true);\r\n                    if (refs.find(r => r.from_parameter === globalParam && !this.isParameterScoped(argName, r.from_parameter))) {\r\n                        return argName;\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.vue-component.model-builder {\r\n    .block {\r\n        position:absolute;\r\n        border:2px solid #ccc;\r\n        margin-left:0px;\r\n        margin-top:0px;\r\n        background-color:#fafafa;\r\n        opacity:0.8;\r\n        font-size:14px;\r\n        user-select:none;\r\n        -moz-user-select:none;\r\n        -khtml-user-select:none;\r\n        -webkit-user-select:none;\r\n        -o-user-select:none;\r\n\r\n        .description {\r\n            display:none;\r\n            width:200px;\r\n            padding:3px;\r\n            border:1px solid #083776;\r\n            border-radius:5px;\r\n            color:#001531;\r\n            background-color:#91bcf6;\r\n            margin-top:15px;\r\n            position:absolute;\r\n            font-weight:normal;\r\n        }\r\n\r\n        .blockTitle {\r\n            display: flex;\r\n            padding: 0.3em 0.1em;\r\n            font-weight:bold;\r\n            background-color:#ddd;\r\n            margin-bottom: 0.1em;\r\n            cursor: move;\r\n            font-size: 0.9em;\r\n            \r\n            .blockId {\r\n                opacity: 0.4;\r\n                margin-left: 0.25em;\r\n                font-weight: normal;\r\n            }\r\n            \r\n            .namespace {\r\n                font-weight: normal;\r\n            }\r\n\r\n            .titleText {\r\n                flex-grow: 1;\r\n                white-space: nowrap;\r\n                overflow: hidden;\r\n                text-overflow: ellipsis;\r\n            }\r\n            \r\n            .blockicon {\r\n                white-space: nowrap;\r\n                text-align: center;\r\n\r\n                i.fas {\r\n                    min-width: 1.4em;\r\n                    cursor: pointer;\r\n                    opacity: 0.5;\r\n                    margin-left: 0.1em;\r\n\r\n                    &:hover {\r\n                        opacity:1.0;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        .invalid {\r\n            color: red;\r\n            cursor: help;\r\n        }\r\n\r\n        .inout {\r\n            display: flex;\r\n        }\r\n\r\n        .inputs {\r\n            flex-grow: 1;\r\n            max-width: 100%;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n        }\r\n\r\n        .editDescription {\r\n            padding: 0.3em 0.2em;\r\n            box-sizing: border-box;\r\n            font-size: 0.9em;\r\n            line-height: 1em;\r\n            overflow: auto;\r\n            border: 0;\r\n            border-top: 1px dotted #ccc;\r\n            background-color: transparent;\r\n            width: 100%;\r\n            max-width: 100%;\r\n            height: 3.7em;\r\n            min-height: 2.5em;\r\n            resize: none;\r\n\r\n            &:focus {\r\n                outline: 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    .block_collection {\r\n        border:2px solid #6B8DAF;\r\n\r\n        .blockTitle {\r\n            background-color:#A3B7CC;\r\n        }\r\n        .field_id { /* Hide collection ID as it's shown in the title */\r\n            display: none;\r\n        }\r\n    }\r\n\r\n    .block_result {\r\n        border:2px solid #888;\r\n\r\n        .field_output .circle {\r\n            background-color: #888;\r\n            cursor: auto;\r\n        }\r\n    }\r\n\r\n    .block_argument {\r\n        border:2px solid #B28C6B;\r\n\r\n        .blockTitle {\r\n            background-color:#CCB7A3;\r\n        }\r\n    }\r\n\r\n    .block_selected {\r\n        border:2px solid #0a0 !important; /* important is used to override the styles for block_collection and block_argument above */\r\n\r\n        .blockTitle {\r\n            background-color:#0c0 !important;\r\n        }\r\n    }\r\n\r\n    .block_invalid {\r\n        border:2px solid #ff0000 !important; /* important is used to override the styles for block_selected above */\r\n    }\r\n}\r\n</style>","import mod from \"-!../../../../cache-loader/dist/cjs.js??ref--13-0!../../../../thread-loader/dist/cjs.js!../../../../babel-loader/lib/index.js!../../../../cache-loader/dist/cjs.js??ref--1-0!../../../../vue-loader/lib/index.js??vue-loader-options!./Block.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../cache-loader/dist/cjs.js??ref--13-0!../../../../thread-loader/dist/cjs.js!../../../../babel-loader/lib/index.js!../../../../cache-loader/dist/cjs.js??ref--1-0!../../../../vue-loader/lib/index.js??vue-loader-options!./Block.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Block.vue?vue&type=template&id=be4946b6&\"\nimport script from \"./Block.vue?vue&type=script&lang=js&\"\nexport * from \"./Block.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Block.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('g',_vm._l((_vm.lines),function(line,i){return _c('line',_vm._b({key:i},'line',line,false))}),0)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","export default class Segment {\r\n\r\n    constructor(x, y, dx, dy) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.dx = dx;\r\n        this.dy = dy;\r\n    }\r\n\r\n    /**\r\n     * Distance\r\n     */\r\n    distance(point1, point2) {\r\n        return Math.sqrt(Math.pow(point2.x-point1.x,2) + Math.pow(point2.y-point1.y,2));\r\n    }\r\n\r\n    /**\r\n     * Distance with a point\r\n     */\r\n    distanceP(point) {\r\n        var normal = this.normal();\r\n        normal.x = point.x;\r\n        normal.y = point.y;\r\n        var intersection = this.intersection(normal);\r\n\r\n        return [intersection[0], this.distance(normal.alpha(intersection[1]), point)];\r\n    }\r\n\r\n    /**\r\n     * Normal\r\n     */\r\n    normal() {\r\n        return new Segment(this.x, this.y, this.dy, -this.dx);\r\n    }\r\n\r\n    /**\r\n     * Gets the intersection alpha with another \r\n     */\r\n    intersection(other) {\r\n        var a = this.dx;\r\n        var b = -other.dx;\r\n        var c = this.dy;\r\n        var d = -other.dy;\r\n        var b0 = other.x-this.x;\r\n        var b1 = other.y-this.y;\r\n        var det = a*d - b*c;\r\n\r\n        if (det == 0) {\r\n            return null;\r\n        }\r\n\r\n        var r1 = (d*b0 - b*b1)/det;\r\n        var r2 = (-c*b0 + a*b1)/det;\r\n\r\n        return [r1, r2];\r\n    }\r\n\r\n    /**\r\n     * Gets the alpha point\r\n     */\r\n    alpha(a) {\r\n        var point = {};\r\n        point.x = this.x+this.dx*a;\r\n        point.y = this.y+this.dy*a;\r\n\r\n        return point;\r\n    }\r\n\r\n}","<template>\r\n    <g>\r\n        <line v-for=\"(line, i) in lines\" :key=\"i\" v-bind=\"line\" />\r\n    </g>\r\n</template>\r\n\r\n<script>\r\nimport Segment from './segment.js';\r\n\r\nexport default {\r\n    name: 'Edge',\r\n    props: {\r\n        id: {},\r\n        parameter1: {\r\n            type: Object,\r\n            required: true\r\n        },\r\n        parameter2: {\r\n            type: Object,\r\n            required: true\r\n        },\r\n        selected: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        inactive: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        issues: {\r\n            type: Array,\r\n            default: () => ([])\r\n        },\r\n        lineWidth: {\r\n            type: Number,\r\n            default: 3\r\n        },\r\n        lineColor: {\r\n            type: Array,\r\n            default: () => ([255, 200, 0, 1])\r\n        },\r\n        state: {\r\n            type: Object,\r\n            required: true\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            position1: null,\r\n            position2: null\r\n        }\r\n    },\r\n    computed: {\r\n        segment() {\r\n            return new Segment(\r\n                this.position1[0],\r\n                this.position1[1], \r\n                this.position2[0] - this.position1[0],\r\n                this.position2[1] - this.position1[1]\r\n            );\r\n        },\r\n        scaledLineWidth() {\r\n            return this.lineWidth * this.state.scale;\r\n        },\r\n        lines() {\r\n            // Drawing the arrow\r\n            var xM = ((this.position1[0]+this.position2[0])/2.0);\r\n            var yM = ((this.position1[1]+this.position2[1])/2.0);\r\n\r\n            var alpha = (35*Math.PI/180.0);\r\n            var cos = Math.cos(alpha);\r\n            var sin = Math.sin(alpha);\r\n            var cosB = Math.cos(-alpha);\r\n            var sinB = Math.sin(-alpha);\r\n\r\n            var norm = Math.sqrt(Math.pow(this.position1[0]-this.position2[0],2)+Math.pow(this.position1[1]-this.position2[1],2));\r\n            var arrowLength = this.state.scale*10/(norm/1.5);\r\n            var xA = (this.position1[0]-xM)*arrowLength;\r\n            var yA = (this.position1[1]-yM)*arrowLength;\r\n\r\n            var lineStyle = this.getLineStyle(this.scaledLineWidth, this.selected, this.inactive);\r\n            var arrowStyle = this.getLineStyle(this.scaledLineWidth / 1.5, this.selected);\r\n\r\n            var mainLine = this.getLine(this.position1[0], this.position1[1], this.position2[0], this.position2[1], lineStyle);\r\n            if (this.inactive || norm/this.state.scale < 25) {\r\n                // Hide arrow\r\n                return [mainLine];\r\n            }\r\n            else {\r\n                return [\r\n                    mainLine,\r\n                    this.getLine(xM, yM, xM+(xA*cos-yA*sin), yM+(yA*cos+xA*sin), arrowStyle),\r\n                    this.getLine(xM, yM, xM+(xA*cosB-yA*sinB), yM+(yA*cosB+xA*sinB), arrowStyle)\r\n                ];\r\n            }\r\n        }\r\n    },\r\n    watch: {\r\n        'state.center'() {\r\n            this.updatePositions();\r\n        },\r\n        'state.scale'() {\r\n            this.updatePositions();\r\n        },\r\n        'state.moving'() {\r\n            this.updatePositions();\r\n        }\r\n    },\r\n    created() {\r\n        this.updatePositions();\r\n    },\r\n    mounted() {\r\n        this.$emit('mounted', this);\r\n    },\r\n    beforeDestroy() {\r\n        this.$emit('unmounted', this);\r\n    },\r\n    methods: {\r\n        updatePositions() {\r\n            let pos1 = this.parameter1.getCirclePosition();\r\n            let pos2 = this.parameter2.getCirclePosition();\r\n            if (!pos1 || !pos2) {\r\n                return;\r\n            }\r\n            if (!this.position1 || !this.position2 || pos1[0] !== this.position1[0] || pos1[1] !== this.position1[1] || pos2[0] !== this.position2[0] || pos2[1] !== this.position2[1]) {\r\n                this.position1 = Object.freeze(pos1);\r\n                this.position2 = Object.freeze(pos2);\r\n                this.$emit('position', this.position1, this.position2);\r\n            }\r\n        },\r\n        getLineStyle(lineWidth, selected = false, dashed = false) {\r\n            let dashLength = 2 * this.state.scale;\r\n            let color = this.lineColor;\r\n            if (selected) {\r\n                color = [0, 200, 0, 1];\r\n            }\r\n            else if (this.issues.length > 0) {\r\n                color = [255, 0, 0, 1];\r\n            }\r\n            return {\r\n                'stroke': `rgba(${color.join(', ')})`,\r\n                'stroke-width': lineWidth,\r\n                'stroke-dasharray': dashed ? dashLength * 3 + ' ' + dashLength * 2 : 'none'\r\n            }\r\n        },\r\n        /**\r\n         * Get line options.\r\n         * \r\n         * @param x1 {number} The x-coordinate for the start of the line.\r\n         * @param y1 {number} The y-coordinate for the start of the line.\r\n         * @param x2 {number} The x-coordinate for the end of the line.\r\n         * @param y2 {number} The y-coordinate for the end of the line.\r\n         * @param [settings] {object} Additional settings for this node.\r\n         * @return {object} Options for SVG Line\r\n         */\r\n        getLine(x1, y1, x2, y2, settings = {}) {\r\n            return Object.assign({x1, y1, x2, y2}, settings);\r\n        },\r\n        /**\r\n         * Does the position collide the line ?\r\n         */\r\n        collide(x, y) {\r\n            if (!this.segment) {\r\n                return false;\r\n            }\r\n\r\n            var dp = this.segment.distanceP({x: x, y: y});\r\n\r\n            if (dp[0] >= 0 && dp[0] <= 1) {\r\n                if (dp[1] < (this.lineWidth*this.state.scale)*2) {\r\n                    return dp[0];\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n        /**\r\n         * Test if this edge is the same than another\r\n         */\r\n        equals(other) {\r\n            if (this.parameter1 == other.parameter1 && this.parameter2 == other.parameter2) {\r\n                return true;\r\n            }\r\n            else if (this.parameter1 == other.parameter2 && this.parameter2 == other.parameter1) {\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n}\r\n</script>","import mod from \"-!../../../../cache-loader/dist/cjs.js??ref--13-0!../../../../thread-loader/dist/cjs.js!../../../../babel-loader/lib/index.js!../../../../cache-loader/dist/cjs.js??ref--1-0!../../../../vue-loader/lib/index.js??vue-loader-options!./Edge.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../cache-loader/dist/cjs.js??ref--13-0!../../../../thread-loader/dist/cjs.js!../../../../babel-loader/lib/index.js!../../../../cache-loader/dist/cjs.js??ref--1-0!../../../../vue-loader/lib/index.js??vue-loader-options!./Edge.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Edge.vue?vue&type=template&id=83b3fc4e&\"\nimport script from \"./Edge.vue?vue&type=script&lang=js&\"\nexport * from \"./Edge.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<template>\r\n    <div ref=\"div\" :id=\"id\" :class=\"classes\" tabindex=\"0\"\r\n        @mousemove=\"onMouseMove\"\r\n        @mousedown=\"onMouseDown\"\r\n        @wheel=\"onMouseWheel\"\r\n        @keydown=\"onKeyDown\"\r\n        @focus=\"hasFocus = true\"\r\n        @blur=\"hasFocus = false\">\r\n        <!-- tabindex is to allow focus for delete keystroke etc -->\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" class=\"canvas\">\r\n            <Edge v-for=\"edge in edges\" :key=\"edge.id\" :id=\"edge.id\"\r\n                :parameter1=\"edge.parameter1\" :parameter2=\"edge.parameter2\"\r\n                :selected=\"edge.selected\" :inactive=\"edge.inactive\" :issues=\"edge.issues\" :state=\"state\"\r\n                @mounted=\"node => mount(edge, node)\" @unmounted=\"() => mount(edge)\"\r\n                @position=\"updateEdgePos(edge, arguments)\" />\r\n            <Edge v-for=\"edge in hiddenParameterRefEdges\" :key=\"edge.id\" :id=\"edge.id\"\r\n                :parameter1=\"edge.parameter1\" :parameter2=\"edge.parameter2\"\r\n                @mounted=\"node => mount(edge, node)\" @unmounted=\"() => mount(edge)\"\r\n                :inactive=\"true\" :lineColor=\"[200,200,200,1]\" :lineWidth=\"2\" :state=\"state\" />\r\n            <line v-if=\"linkingLine\" v-bind=\"linkingLine\" />\r\n            <rect v-if=\"selectRect\" v-bind=\"selectRect\" />\r\n        </svg>\r\n        <div class=\"blocks\">\r\n            <Block v-for=\"(block) in blocks\" :key=\"block.id\"\r\n                :id=\"block.id\" :type=\"block.type\" :spec=\"block.spec\" :state=\"state\"\r\n                :selected=\"block.selected\" :position=\"block.position\" :origin=\"block.origin\"\r\n                :process_id=\"block.process_id\" :namespace=\"block.namespace\" :result=\"block.result\" :args=\"block.arguments\" :description=\"block.description\" \r\n                @update=\"(...args) => updateBlock(block, ...args)\"\r\n                @mounted=\"node => mount(block, node)\" @unmounted=\"() => mount(block)\"\r\n                @move=\"startDragBlock\" />\r\n        </div>\r\n        <div v-if=\"state.scale < 0.7 || showZoomInfo\" class=\"zoomInfo\">\r\n            <div v-if=\"state.scale < 0.7\">\r\n                Zoom in for more details.\r\n            </div>\r\n            <div v-if=\"showZoomInfo\">\r\n                Zoom with <kbd>STRG</kbd> or <kbd>Meta</kbd> key and the mouse wheel.\r\n            </div>\r\n        </div>\r\n        <ParameterViewer v-if=\"parameterViewer\" v-bind=\"parameterViewer\" @close=\"parameterViewer = null\" />\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport Block from './model-builder/Block.vue';\r\nimport Edge from './model-builder/Edge.vue';\r\nimport Utils from '../utils.js';\r\nimport { ProcessRegistry } from '@openeo/js-commons';\r\nimport { JsonSchemaValidator, ProcessGraph, Utils as PgUtils } from '@openeo/js-processgraphs';\r\nimport Vue from 'vue';\r\nimport boxIntersectsBox from 'intersects/box-box';\r\nimport boxIntersectsLine from 'intersects/box-line';\r\nimport Config from './model-builder/config.js';\r\n\r\nconst getDefaultState = function(blocks) {\r\n    return Vue.observable({\r\n        root: blocks,\r\n        editable: false,\r\n        compactMode: false,\r\n        moving: null, // Is the user dragging the view?\r\n        selecting: null, // Is the user multi-selecting?\r\n        center: [0,0],\r\n        mouse: [0,0],\r\n        scale: Config.defaultScale,\r\n        linkFrom: null, // Array\r\n        linkTo: null // Array\r\n    });\r\n};\r\nconst MARGIN = 20;\r\n\r\nconst selectionChangeWatcher = function (newVal, oldVal) {\r\n    if (!Array.isArray(newVal) || !Array.isArray(oldVal) || newVal.length !== oldVal.length || !newVal.every((value,i) => value.id === oldVal[i].id)) {\r\n        this.$emit('selectionChanged', this.selectedBlocks, this.selectedEdges);\r\n    }\r\n};\r\n\r\nexport default {\r\n    name: 'ModelBuilder',\r\n    components: {\r\n        Block,\r\n        Edge,\r\n        ParameterViewer: () => import('./model-builder/ParameterViewer.vue')\r\n    },\r\n    props: {\r\n        id: {\r\n            type: String,\r\n            required: true\r\n        },\r\n        editable: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        value: {\r\n            type: Object,\r\n            default: () => ({})\r\n        },\r\n        collections: {\r\n            type: Array,\r\n            default: () => []\r\n        },\r\n        processes: {\r\n            type: [Array, Object],\r\n            default: () => []\r\n        },\r\n\t\tparent: {\r\n\t\t\ttype: Object,\r\n\t\t\tdefault: null\r\n\t\t},\r\n\t\tparentSchema: {\r\n\t\t\ttype: Object,\r\n\t\t\tdefault: null\r\n\t\t},\r\n        historySize: {\r\n            type: Number,\r\n            default: 30\r\n        },\r\n        explicitZoom: {\r\n            type: Boolean,\r\n            default: false\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            isMounted: false,\r\n            allMounted: false,\r\n\r\n            // Current offset for block that are generated without specific coordinates so that not all block occur on the same position\r\n            newBlockOffset: 0,\r\n\r\n            // History\r\n            history: [],\r\n            historyPointer: null,\r\n\r\n            process: Object.freeze(this.value),\r\n            // Metadata for blocks to show\r\n            blocks: [],\r\n            // Metadata for edges to show\r\n            edges: [],\r\n            hiddenParameterRefEdges: {},\r\n\r\n            processGraph: null,\r\n\r\n            // Next block id\r\n            nextBlockId: 1,\r\n            // Next edge id\r\n            nextEdgeId: 1,\r\n            // Copy&Paste\r\n            clipboard: null,\r\n\r\n            activeTransactions: 0,\r\n            hasFocus: false,\r\n            linkingLine: null,\r\n            parameterViewer: null,\r\n\r\n            showZoomInfo: this.explicitZoom,\r\n            \r\n            // State specific to this blocks instance including all children\r\n            state: getDefaultState(this)\r\n        };\r\n    },\r\n    computed: {\r\n        classes() {\r\n            let classes = [\r\n                'vue-component',\r\n                'model-builder'\r\n            ];\r\n            if (this.hasFocus) {\r\n                classes.push('focus');\r\n            }\r\n            if (this.editable) {\r\n                classes.push('editable');\r\n            }\r\n\r\n            if (this.state.compactMode) {\r\n                classes.push('compact');\r\n            }\r\n\r\n            if (this.state.scale < 0.5) {\r\n                classes.push('scale_xs');\r\n            }\r\n            else if (this.state.scale < 0.7) {\r\n                classes.push('scale_s');\r\n            }\r\n            else if (this.state.scale < 0.9) {\r\n                classes.push('scale_m');\r\n            }\r\n            else if (this.state.scale < 1.1) {\r\n                classes.push('scale_l');\r\n            }\r\n            else {\r\n                classes.push('scale_xl');\r\n            }\r\n\r\n            return classes;\r\n        },\r\n        selectRect() {\r\n            if (!this.state.selecting) {\r\n                return null;\r\n            }\r\n            return {\r\n                x: Math.min(this.state.selecting.current[0], this.state.selecting.start[0]),\r\n                y: Math.min(this.state.selecting.current[1], this.state.selecting.start[1]),\r\n                width: Math.abs(this.state.selecting.current[0] - this.state.selecting.start[0]),\r\n                height: Math.abs(this.state.selecting.current[1] - this.state.selecting.start[1]),\r\n                'stroke': 'rgba(0,0,0,0.8)',\r\n                'stroke-width': 1,\r\n                'fill': 'rgba(0,0,0,0.05)'\r\n            };\r\n        },\r\n        processRegistry() {\r\n            // If I link between openeo-web-editor and openeo-vue-components, instanceof ProcessRegistry fails.\r\n            // Webpack seems to mangle names and thus I need to check for specific processes alternatively to detect whether this could be a ProcessRegistry.\r\n            if (this.processes instanceof ProcessRegistry || (typeof this.processes.count === 'function' && typeof this.processes.get === 'function')) {\r\n                return this.processes;\r\n            }\r\n            else if (Array.isArray(this.processes)) {\r\n                return new ProcessRegistry(this.processes);\r\n            }\r\n            else {\r\n                throw new Error('Invalid processes specified, must be ProcessRegistry or Array');\r\n            }\r\n        },\r\n        hasProcesses() {\r\n            return this.processRegistry.count() > 0;\r\n        },\r\n        processBlocks() {\r\n            return this.blocks.filter(b => b.type === 'process');\r\n        },\r\n        selectedBlocks() {\r\n            return this.blocks.filter(block => block.selected);\r\n        },\r\n        selectedEdges() {\r\n            return this.edges.filter(edge => edge.selected);\r\n        },\r\n        selectedSideEdge() {\r\n            if (this.selectedEdges.length === 1 && this.selectedEdges[0].selectedParameter) {\r\n                return this.selectedEdges[0];\r\n            }\r\n            return null;\r\n        },\r\n        hasSelection() {\r\n            return this.selectedBlocks.length > 0 || this.selectedEdges.length > 0;\r\n        },\r\n        processParametersFromSchemas() {\r\n            // Get all process parameters from the parent process\r\n            // this.parent.$parent => ModelBuilder instance\r\n\t\t\tlet parentParams = [];\r\n\t\t\tif (this.parent && this.parent.$parent && typeof this.parent.$parent.getPgParameters === 'function') {\r\n\t\t\t\tparentParams = this.parent.$parent.getPgParameters().map(block => block.spec);\r\n\t\t\t}\r\n\r\n            let callbackParams = [];\r\n            // If we have a parameter schema given, go through the parameter schema and get the available process parameters from there.\r\n            if (this.parentSchema) {\r\n\t\t\t    callbackParams = this.parentSchema.getCallbackParameters();\r\n            }\r\n\r\n            // Remove all parameters from the parent that are overridden by the more specific parameters.\r\n            let filteredParentParams = parentParams.filter(p1 => !callbackParams.find(p2 => p1.name === p2.name));\r\n            // Add the filtered parameters from the parent to the more specific parameters\r\n            return callbackParams.concat(filteredParentParams);\r\n        }\r\n    },\r\n    watch: {\r\n        parentSchema() {\r\n            this.importPgParameters(this.processParametersFromSchemas, 'schema');\r\n        },\r\n        async value(value) {\r\n            // Only run if component has been mounted\r\n            if (!this.allMounted) {\r\n                return;\r\n            }\r\n\r\n            // Only import when user changes data (i.e. not a BlocksProcess exported from export())\r\n            if (!(value instanceof BlocksProcess)) {\r\n                this.process = value;\r\n                await this.import(value, { propagate: false, undoOnError: false }); // don't propagate, otherwise results in an infinite loop\r\n            }\r\n        },\r\n        editable: {\r\n            immediate: true,\r\n            handler(editable) {\r\n                this.state.editable = editable;\r\n            }\r\n        },\r\n        selectedEdges: selectionChangeWatcher,\r\n        selectedBlocks: selectionChangeWatcher,\r\n        allMounted() {\r\n            this.updateHiddenParameterRefEdges();\r\n        },\r\n        isMounted() {\r\n            this.checkAllMounted();\r\n        }\r\n    },\r\n\tbeforeCreate() {\r\n\t\tUtils.enableHtmlProps(this);\r\n\t},\r\n    async created() {\r\n        if (!this.supports('error')) {\r\n            // Print error to console if event is not supported by implementing context\r\n            this.$on('error', (msg, title = null) => console.error(msg, title));\r\n        }\r\n        if (!this.supports('editArguments')) {\r\n            this.$on('editArguments', (...args) => this.showParameterViewer(...args));\r\n        }\r\n    },\r\n    async mounted() {\r\n        Utils.loadFontAwesome(this);\r\n\r\n        // Setting up default viewer center\r\n        this.moveCenter(0, 0, true);\r\n\r\n        // ToDo: Replace with mouseleave?\r\n        this.onDocumentMouseUpFn = this.onDocumentMouseUp.bind(this)\r\n        document.addEventListener('mouseup', this.onDocumentMouseUpFn);\r\n\r\n        await this.importPgParameters(this.processParametersFromSchemas, 'schema');\r\n        if (!await this.import(this.value, { propagate: false, undoOnError: false })) {\r\n            this.perfectScale();\r\n        }\r\n        selectionChangeWatcher.bind(this)();\r\n\r\n        this.isMounted = true;\r\n    },\r\n    beforeDestroy() {\r\n        document.removeEventListener('mouseup', this.onDocumentMouseUpFn);\r\n    },\r\n    methods: {\r\n        updateEdgePos(edge, pos) {\r\n            edge.position1 = pos[0];\r\n            edge.position2 = pos[1];\r\n        },\r\n        mount(elem, node = null) {\r\n            elem.$el = node;\r\n            this.checkAllMounted();\r\n        },\r\n        checkAllMounted() {\r\n            if (!this.isMounted) {\r\n                this.allMounted = false;\r\n            }\r\n            else {\r\n                this.allMounted = !this.blocks.find(block => !block.$el) || !this.edges.find(edge => !edge.$el);\r\n            }\r\n        },\r\n        updateBlockArguments(block, args, removedParams) {\r\n            if (removedParams.length > 0) {\r\n                this.parameterRemoved(block, removedParams);\r\n            }\r\n            this.$set(block, 'arguments', args);\r\n            this.commit();\r\n            if(removedParams.length > 0) {\r\n                this.$nextTick(() => this.refreshEdges());\r\n            }\r\n        },\r\n        updateBlockDescription(block, description) {\r\n            this.$set(block, 'description', description);\r\n            this.commit();\r\n        },\r\n        updateBlockPos(block, pos, saveHistory = true) {\r\n            this.$set(block, 'position', pos);\r\n            this.commit(null, saveHistory, false);\r\n        },\r\n        updateBlockResult(block, result) {\r\n            this.$set(block, 'result', result);\r\n            this.commit();\r\n        },\r\n        updateBlockSelected(block, selected, unselectOthers = true) {\r\n            if (unselectOthers) {\r\n                this.unselectAll();\r\n            }\r\n            this.$set(block, 'selected', selected);\r\n            this.commit(null, false, false);\r\n        },\r\n        updateBlockSpec(block, data) {\r\n            let parameterFields = ['name', 'schema', 'description', 'optional', 'deprecated', 'experimental', 'default'];\r\n            let newBlock = Utils.omitFromObject(block.spec, parameterFields);\r\n            Object.assign(newBlock, data);\r\n            // Remove default values (and unset default value if parameter is required)\r\n            if (!newBlock.optional) {\r\n                delete newBlock.optional;\r\n                delete newBlock.default;\r\n            }\r\n            if (!newBlock.deprecated) {\r\n                delete newBlock.deprecated;\r\n            }\r\n            if (!newBlock.experimental) {\r\n                delete newBlock.experimental;\r\n            }\r\n            this.$set(block, 'spec', newBlock);\r\n            this.commit();\r\n        },\r\n        updateBlock(block, key, value, extra) {\r\n            switch(key) {\r\n                case 'arguments':\r\n                    this.updateBlockArguments(block, value, extra);\r\n                    break;\r\n                case 'description':\r\n                    this.updateBlockDescription(block, value);\r\n                    break;\r\n                case 'position':\r\n                    this.updateBlockPos(block, value, extra);\r\n                    break;\r\n                case 'result':\r\n                    this.setResultNode(block, value);\r\n                    break;\r\n                case 'selected':\r\n                    this.updateBlockSelected(block, value, extra);\r\n                    break;\r\n                case 'spec':\r\n                    this.updateBlockSpec(block, value);\r\n                    break;\r\n            }\r\n        },\r\n        updateHiddenParameterRefEdges() {\r\n            // We can only reliably detect parameter refs if we know which parameters a process makes available to the child process\r\n            // So if we don't have process schemas, don't offer this functionality.\r\n            // Also don't execute (yet) if no parameters are given or not all elements are mounted yet.\r\n            if (!this.hasProcesses || !this.allMounted || !this.blocks.find(block => block.type === 'parameter')) {\r\n                this.hiddenParameterRefEdges = {};\r\n                return;\r\n            }\r\n\r\n            let hiddenRefs = {};\r\n            for(let process of this.processBlocks) {\r\n                for (let argName in process.arguments) {\r\n                    let value = process.arguments[argName];\r\n                    if (!Utils.isObject(value) || !Utils.isObject(value.process_graph)) {\r\n                        continue; // Process can only have hidden refs it it contains a process graph\r\n                    }\r\n                    \r\n                    let refs = PgUtils.getRefs(value, true, true).filter(ref => typeof ref.from_parameter !== 'undefined');\r\n                    for(let ref of refs) {\r\n                        try {\r\n                            if (process.$el.isParameterScoped(argName, ref.from_parameter)) {\r\n                                continue; // Skip if the parameter usage is scoped (i.e. defined as process parameetr for the children)\r\n                            }\r\n                            let parameter = this.getPgParameterById('$' + ref.from_parameter);\r\n                            if (!parameter) {\r\n                                continue; // Skip if parameter can't be found\r\n                            }\r\n                            let parameter1 = parameter.$el.getBlockParameter('output');\r\n                            let parameter2 = process.$el.getBlockParameter(argName);\r\n                            let id = `${parameter.id}->${process.id}:${argName}`;\r\n                            if (parameter1 && parameter2) {\r\n                                if (this.hiddenParameterRefEdges[id]) {\r\n                                    hiddenRefs[id] = this.hiddenParameterRefEdges[id];\r\n                                }\r\n                                else {\r\n                                    hiddenRefs[id] = {\r\n                                        $el: null,\r\n                                        id,\r\n                                        parameter1,\r\n                                        parameter2\r\n                                    };\r\n                                }\r\n                            }\r\n                        } catch(error) {\r\n                             console.warn(error);\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n            this.hiddenParameterRefEdges = hiddenRefs;\r\n        },\r\n        parameterRemoved(block, parameterNames) {\r\n            for(let edge of this.edges.slice(0)) {\r\n                if(edge.parameter2.$parent.id === block.id && parameterNames.includes(edge.parameter2.name)) {\r\n                    this.removeEdge(edge);\r\n                }\r\n            }\r\n        },\r\n        startDragBlock(event) {\r\n            for(let block of this.blocks) {\r\n                if (block.$el) {\r\n                    block.$el.startDrag(event);\r\n                }\r\n            }\r\n        },\r\n        refreshEdges() {\r\n            this.refreshEdgesFor(this.edges);\r\n            this.refreshEdgesFor(Object.values(this.hiddenParameterRefEdges));\r\n        },\r\n        refreshEdgesFor(edges) {\r\n            for(let edge of edges) {\r\n                if (edge.$el) {\r\n                    edge.$el.updatePositions();\r\n                }\r\n            }\r\n        },\r\n        supports(event) {\r\n            return Boolean(this.$listeners && this.$listeners[event]);\r\n        },\r\n        focus() {\r\n            this.$refs.div.focus();\r\n        },\r\n        link(parameter) {\r\n            if (this.state.linkFrom) {\r\n                this.state.linkTo = parameter;\r\n            }\r\n            else {\r\n                this.state.linkFrom = parameter;\r\n            }\r\n        },\r\n        unlink(parameter = null) {\r\n            if (parameter) {\r\n                if (this.state.linkTo == parameter) {\r\n                    this.state.linkTo = null;\r\n                }\r\n                else if (this.state.linkFrom == parameter) {\r\n                    this.state.linkFrom = null;\r\n                    this.linkingLine = null;\r\n                }\r\n            }\r\n            else {\r\n                this.state.linkTo = null;\r\n                this.state.linkFrom = null;\r\n                this.linkingLine = null;\r\n            }\r\n        },\r\n        multiSelect() {\r\n            let box = this.selectRect;\r\n            this.blocks\r\n                .filter(b => {\r\n                    if (Array.isArray(b.position) && b.$el) {\r\n                        let pos = b.$el.getDimensions();\r\n                        return boxIntersectsBox(box.x, box.y, box.width, box.height, pos.x, pos.y, pos.width, pos.height);\r\n                    }\r\n                    return false;\r\n                })\r\n                .map(b => b.selected = true);\r\n            this.edges\r\n                .filter(e => Array.isArray(e.position1) && Array.isArray(e.position2) && boxIntersectsLine(box.x, box.y, box.width, box.height, e.position1[0], e.position1[1], e.position2[0], e.position2[1]))\r\n                .map(e => e.selected = true);\r\n        },\r\n        toJSON() {\r\n            let process = this.export();\r\n            return JSON.stringify(process, null, 2);\r\n        },\r\n        async onDocumentMouseUp(event) {\r\n            if (this.parameterViewer) {\r\n                return;\r\n            }\r\n            if (this.selectedSideEdge) {\r\n                this.selectEdge(this.selectedSideEdge, null); // Reset selectedParameter, but don't change selected state.\r\n            }\r\n            if (this.state.selecting) {\r\n                this.multiSelect();\r\n                this.state.selecting = null;\r\n            }\r\n            if (this.state.moving) {\r\n                this.state.moving = null;\r\n            }\r\n            if (this.state.editable && this.state.linkFrom) {\r\n                if (event.which == 1 && this.state.linkTo) {\r\n                    try {\r\n                        await this.addEdge(this.state.linkFrom, this.state.linkTo);\r\n                    } catch (error) {\r\n                        this.$emit(\"error\", error);\r\n                    }\r\n                }\r\n                this.unlink();\r\n            }\r\n        },\r\n        async onKeyDown(event) {\r\n            if (this.parameterViewer) {\r\n                return;\r\n            }\r\n            var allInputs = document.querySelectorAll('input, textarea, button, select, datalist');\r\n            for(let el of allInputs) {\r\n                if (el === document.activeElement) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            let captured = false;\r\n            if (this.state.editable) {\r\n                // delete selected blocks/edges\r\n                if (event.code === 'Delete') {\r\n                    this.deleteSelected();\r\n                    captured = true;\r\n                }\r\n                else if (event.ctrlKey || event.metaKey) { // STRG for Win/Linux, meta/cmd from Mac\r\n                    if (event.code === 'KeyV') {\r\n                        if (this.hasSelection && this.clipboard) {\r\n                            return; // ToDo: Implement pasting for selected blocks\r\n                        }\r\n                        else {\r\n                            try {\r\n                                const text = await navigator.clipboard.readText();\r\n                                let process = JSON.parse(text);\r\n                                await this.import(process);\r\n                            } catch(error) {\r\n                                this.$emit('error', error, 'Paste Error');\r\n                            }\r\n                        }\r\n                        captured = true;\r\n                    }\r\n                    else if (event.code === 'KeyC') {\r\n                        if (this.hasSelection) {\r\n                            this.clipboard = {\r\n                                blocks: this.selectedBlocks.slice(0),\r\n                                edges: this.selectedEdges.slice(0)\r\n                            };\r\n                        }\r\n                        else {\r\n                            try {\r\n                                let json = this.toJSON();\r\n                                await navigator.clipboard.writeText(json);\r\n                                captured = true;\r\n                            } catch(error) {\r\n                                this.$emit('error', error, 'Copy Error');\r\n                            }\r\n                        }\r\n                        captured = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (captured) {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n            }\r\n        },\r\n        onMouseWheel(event) {\r\n            if (this.parameterViewer) {\r\n                return;\r\n            }\r\n            if (!this.explicitZoom || this.hasFocus || event.ctrlKey || event.metaKey) { // STRG for Win/Linux, meta/cmd for Mac\r\n                let mouse = this.getMousePos(event);\r\n                var dX = mouse[0] - this.state.center[0];\r\n                var dY = mouse[1] - this.state.center[1];\r\n                var deltaScale = Math.pow(1.1, Math.sign(event.deltaY)*-1);\r\n                this.moveCenter(-dX*(deltaScale-1), -dY*(deltaScale-1));\r\n                this.state.scale *= deltaScale;\r\n                event.preventDefault();\r\n                this.showZoomInfo = false;\r\n            }\r\n        },\r\n        domBoundingBox(el) {\r\n            var rect = el.getBoundingClientRect();\r\n            rect.offsetTop = rect.top + Math.max(document.documentElement.scrollTop, document.body.scrollTop);\r\n            rect.offsetLeft = rect.left + Math.max(document.documentElement.scrollLeft, document.body.scrollLeft);\r\n            return rect;\r\n        },\r\n        getMousePos(event) {\r\n            let root = this.$refs.div.getBoundingClientRect();\r\n            return [\r\n                event.clientX - root.left,\r\n                event.clientY - root.top\r\n            ];\r\n        },\r\n        onMouseMove(event) {\r\n            if (this.parameterViewer) {\r\n                return;\r\n            }\r\n            try {\r\n                let mousePos = this.getMousePos(event);\r\n\r\n                if (this.state.editable && this.selectedSideEdge) {\r\n                    var origin = this.selectedSideEdge.selectedParameter.getCirclePosition();\r\n                    if (origin) {\r\n                        var distance = Math.sqrt(Math.pow(mousePos[0]-origin[0], 2)+Math.pow(mousePos[1]-origin[1], 2));\r\n                        if (distance > 10) {\r\n                            this.link(this.selectedSideEdge.selectedParameter);\r\n                            this.removeEdge(this.selectedSideEdge);\r\n                            this.commit();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (this.state.selecting) {\r\n                    this.state.selecting.current = mousePos;\r\n                }\r\n\r\n                if (this.state.moving) {\r\n                    this.moveCenter((mousePos[0]-this.state.moving[0]), (mousePos[1]-this.state.moving[1]));\r\n                    this.state.moving = mousePos;\r\n                }\r\n\r\n                if (this.state.linkFrom) {\r\n                    var position = this.state.linkFrom.getCirclePosition();\r\n                    if (position) {\r\n                        this.linkingLine = {\r\n                            x1: position[0],\r\n                            y1: position[1],\r\n                            x2: mousePos[0],\r\n                            y2: mousePos[1],\r\n                            'stroke': 'rgba(0,0,0,0.4)',\r\n                            'stroke-width': 3 * this.state.scale\r\n                        };\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                this.$emit(\"error\", error);\r\n            }\r\n        },\r\n        onMouseDown(event) {\r\n            if (this.parameterViewer) {\r\n                return;\r\n            }\r\n            let sideSelected = null;\r\n            let mousePos = this.getMousePos(event);\r\n\r\n            if (event.which == 1) {\r\n                if (event.shiftKey) {\r\n                    // Start multi select via box\r\n                    this.state.selecting = {\r\n                        start: mousePos,\r\n                        current: mousePos\r\n                    }\r\n                }\r\n                else {\r\n                    // No multiselect: unselect all\r\n                    this.unselectAll();\r\n                }\r\n\r\n                // Select edges\r\n                for (var edge of this.edges) {\r\n                    if (!edge.$el) {\r\n                        continue;\r\n                    }\r\n                    var collide = edge.$el.collide(mousePos[0], mousePos[1]);\r\n                    if (collide != false) {\r\n                        if (this.selectedEdges.length === 0 && !event.shiftKey) {\r\n                            if (collide < 0.3) {\r\n                                sideSelected = edge.parameter2;\r\n                            }\r\n                            else if (collide > 0.7) {\r\n                                sideSelected = edge.parameter1;\r\n                            }\r\n                        }\r\n                        this.selectEdge(edge, true, sideSelected);\r\n                        if (edge.issues.length > 0) {\r\n                            for(let issue of edge.issues) {\r\n                                this.$emit('error', issue);\r\n                            }\r\n                        }\r\n                        event.preventDefault();\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (event.which == 2 || (event.which == 1 && !sideSelected && !event.shiftKey)) {\r\n                this.state.moving = mousePos;\r\n            }\r\n\r\n            this.focus();\r\n        },\r\n\r\n        getDimensions() {\r\n            return this.domBoundingBox(this.$refs.div);\r\n        },\r\n\r\n        async clear() {\r\n            return await this.startTransaction(async () => {\r\n                this.edges = [];\r\n                // Don't remove parameters injected by props (fixed callback parameters)\r\n                this.blocks = this.blocks.filter(b => b.type === 'parameter' && Utils.isObject(b.spec) && b.origin === 'schema');\r\n                this.nextBlockId = 1;\r\n                this.nextEdgeId = 1;\r\n                this.process = {};\r\n                this.updateHiddenParameterRefEdges();\r\n                return true;\r\n            });\r\n        },\r\n\r\n        commit(data = null, history = true, propagate = true) {\r\n            // Don't commit when in a transaction\r\n            if (this.activeTransactions > 0) {\r\n                return;\r\n            }\r\n\r\n            if (history !== false) {\r\n                this.saveHistory();\r\n            }\r\n            if (propagate !== false) {\r\n                this.$emit('input', data === null ? this.export() : data);\r\n                this.updateHiddenParameterRefEdges();\r\n            }\r\n            else {\r\n                this.refreshEdges();\r\n            }\r\n        },\r\n    \r\n        /**\r\n         * Save the current situation to the history\r\n         */\r\n        saveHistory() {\r\n            var data = this.export(true);\r\n            this.history.splice(this.historyPointer + 1, this.historySize, Object.freeze(data));\r\n            if (this.history.length > this.historySize) {\r\n                this.history.shift();\r\n            }\r\n            this.historyPointer = this.history.length - 1;\r\n            this.$emit('historyChanged', this.history, this.historyPointer);\r\n        },\r\n        async undo() {\r\n            await this.historyStep(-1);\r\n        },\r\n        async redo() {\r\n            await this.historyStep(1);\r\n        },\r\n        async historyStep(step) {\r\n            var index = this.historyPointer + step;\r\n            var element = this.history[index];\r\n            if (element) {\r\n                this.historyPointer = index;\r\n                this.import(element, { saveHistory: false, undoOnError: false, perfectScale: false });\r\n                this.$emit('historyChanged', this.history, this.historyPointer);\r\n            }\r\n        },\r\n\r\n        setResultNode(block, result = true) {\r\n            block = this.getBlockById(block.id);\r\n            if (!block || block.result === result) {\r\n                return; // Nothing to change\r\n            }\r\n\r\n            this.updateBlockResult(block, result);\r\n            var foundNewResultNode = false;\r\n            var hasOtherBlocks = false;\r\n            for(var other of this.processBlocks) {\r\n                if (block && other.id === block.id) {\r\n                    continue;\r\n                }\r\n                \r\n                hasOtherBlocks = true;\r\n                // If we set a new result node, ensure that only that node is a result node and no other.\r\n                if (result) {\r\n                    this.updateBlockResult(other, false);\r\n                }\r\n                // Find a potential result node if we don't want this to be the result node\r\n                else {\r\n                    if (other.$el && !other.$el.hasOutputEdges()) {\r\n                        this.updateBlockResult(other, true);\r\n                        foundNewResultNode = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            // If we have no new potential result node, communicate to the user.\r\n            if (hasOtherBlocks && !result && !foundNewResultNode) {\r\n                this.$emit(\"error\", \"No result node available, please specify one.\");\r\n            }\r\n        },\r\n\r\n        getPositionForPageXY(x, y) {\r\n            var rect = this.getDimensions();\r\n            if (x !== null) {\r\n                x = (x - rect.offsetLeft - this.state.center[0]) / this.state.scale;\r\n            }\r\n            if (y !== null) {\r\n                y = (y - rect.offsetTop - this.state.center[1]) / this.state.scale;\r\n            }\r\n            return [x, y];\r\n        },\r\n\r\n        addProcess(process_id, args = {}, position = [], namespace = null) {\r\n            return this.addBlock({\r\n                process_id,\r\n                namespace,\r\n                arguments: args,\r\n                position\r\n            });\r\n        },\r\n\r\n        addBlock(node, id = null) {\r\n            let num = String(this.incrementId(id));\r\n            if (id === null && Utils.hasText(node.process_id)) {\r\n                id = node.process_id.replace(/^([a-z]*).*$/i, \"$1\") + num;\r\n                if (this.getBlockById('#' + id)) {\r\n                    id = num;\r\n                }\r\n            }\r\n            else {\r\n                id = num;\r\n            }\r\n            if (typeof node.toJSON === 'function') {\r\n                node = node.toJSON();\r\n            }\r\n            var block = {\r\n                id: '#' + id,\r\n                type: 'process',\r\n                selected: false,\r\n                position: node.position,\r\n                process_id: node.process_id,\r\n                namespace: node.namespace,\r\n                arguments: node.arguments,\r\n                description: node.description || null,\r\n                result: node.result || false\r\n            };\r\n            if (this.processRegistry) {\r\n                block.spec = this.processRegistry.get(node.process_id, node.namespace);\r\n            }\r\n\r\n            var size = this.getBlockSize(block);\r\n            block.position = Utils.ensurePoint(block.position, () => this.getNewBlockDefaultPosition(size));\r\n\r\n            // If there's already a result node, remove the flag here\r\n            if (block.result && this.blocks.filter(b => b.result === true).length) {\r\n                delete block.result;\r\n            }\r\n            // Make this the result node if there's no node yet\r\n            else if (this.processBlocks.length === 0) {\r\n                block.result = true;\r\n            }\r\n            \r\n            this.blocks.push(Vue.observable(block));\r\n            this.commit();\r\n            return block;\r\n        },\r\n\r\n        getNewBlockDefaultPosition(blockSize) {\r\n            var rect = this.getDimensions();\r\n            var position = [\r\n                (-this.state.center[0] + rect.width/2)/this.state.scale - blockSize[0]/2 + this.newBlockOffset,\r\n                (-this.state.center[1] + rect.height/2)/this.state.scale - blockSize[1]/2 + this.newBlockOffset\r\n            ];\r\n            if (this.newBlockOffset < 150) {\r\n                this.newBlockOffset += 10;\r\n            }\r\n            return position;\r\n        },\r\n\r\n        getBlockSize(block) {\r\n            if (block.$el) {\r\n                let dim = block.$el.getDimensions();\r\n                return [dim.width / this.state.scale, dim.height / this.state.scale];\r\n            }\r\n\r\n            let inputs = Math.max(\r\n                Utils.size(block.arguments),\r\n                Utils.isObject(block.spec) ? Utils.size(block.spec.parameters) : 0\r\n            );\r\n\r\n            let size = Config.blockWidth;\r\n            let width;\r\n            if (inputs > 0) {\r\n                width = this.state.compactMode ? size.compactParams : size.normalParams;\r\n            }\r\n            else {\r\n                width = this.state.compactMode ? size.compact : size.normal;\r\n            }\r\n\r\n            let commentHeight = typeof block.description === 'string' ? 40 : 0;\r\n            let height = MARGIN + inputs * 15 + commentHeight;\r\n\r\n            return [width, height];\r\n        },\r\n\r\n        moveCenter(dX, dY, reset = false) {\r\n            var rect = this.getDimensions();\r\n            this.state.center = [\r\n                (reset ? rect.width/2 : this.state.center[0]) + dX,\r\n                (reset ? rect.height/2 : this.state.center[1]) + dY\r\n            ];\r\n            this.newBlockOffset = 0;\r\n        },\r\n\r\n        unselectAll() {\r\n            for(var block of this.blocks) {\r\n                this.updateBlockSelected(block, false, false);\r\n            }\r\n            for(var edge of this.edges) {\r\n                this.selectEdge(edge, false);\r\n            }\r\n        },\r\n\r\n        selectEdge(edge, select = true, parameter = null) {\r\n            if (!Utils.isObject(edge)) {\r\n                edge = this.edges[edge];\r\n            }\r\n            if (edge.selected === select) {\r\n                return false; // Nothing to change\r\n            }\r\n            if (select !== null) {\r\n                this.$set(edge, \"selected\", select);\r\n            }\r\n            this.$set(edge, \"selectedParameter\", parameter);\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Edge to remove\r\n         */\r\n        removeEdge(edge) {\r\n            edge.parameter1.eraseEdge(edge);\r\n            edge.parameter2.eraseEdge(edge);\r\n            this.$delete(this.edges, this.edges.indexOf(edge));\r\n        },\r\n            \r\n        /**\r\n         * Remove a block\r\n         */\r\n        async removeBlock(block) {\r\n            // Check if the parameter for this block is used in child processes (callbacks).\r\n            // Then don't delete, but give error instead.\r\n            if (block.type === 'parameter') {\r\n                let param = null;\r\n                let conflictBlock = this.blocks.find(otherBlock => {\r\n                    param = otherBlock.$el.hiddenParameterRef(block);\r\n                    return (param !== null);\r\n                });\r\n                if (conflictBlock) {\r\n                    throw new Error(`Parameter is still used in '${conflictBlock.id}', parameter '${param}'. Only unused parameters can be deleted.`);\r\n                }\r\n            }\r\n\r\n            // now start deleting the block\r\n            return await this.startTransaction(async () => {\r\n                var i = this.blocks.findIndex(b => b.id == block.id);\r\n                if (i < 0) {\r\n                    return false;\r\n                }\r\n\r\n                for (var edge of this.edges.slice(0)) {\r\n                    if (edge.parameter1.$parent.id === block.id || edge.parameter2.$parent.id === block.id) {\r\n                        this.removeEdge(edge);\r\n                    }\r\n                }\r\n\r\n                if (block.result) {\r\n                    this.setResultNode(block, false);\r\n                }\r\n\r\n                this.$delete(this.blocks, i);\r\n                return true;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Retreive a block by ID\r\n         */\r\n        getBlockById(blockId) {\r\n            var blocks = this.blocks.filter(block => block.id === blockId);\r\n            if (blocks.length > 0) {\r\n                return blocks[0];\r\n            }\r\n            return null;\r\n        },\r\n\r\n        /**\r\n         * Delete the current link\r\n         */\r\n        async deleteSelected() {\r\n            if (!this.hasSelection) {\r\n                return false;\r\n            }\r\n\r\n            return await this.startTransaction(async () => {\r\n                // Remove the selected blocks and its edges\r\n                for(var block of this.selectedBlocks.slice(0)) { // copy to avoid race condition\r\n                    if (block.$el.allowsDelete) {\r\n                        await this.removeBlock(block);\r\n                    }\r\n                }\r\n\r\n                // Removes the selected edges\r\n                for(var edge of this.selectedEdges.slice(0)) { // copy to avoid race condition\r\n                    this.removeEdge(edge);\r\n                }\r\n                return true;\r\n            });\r\n        },\r\n\r\n        async addEdgeByNames(b1, p1, b2, p2) {\r\n            var blocks = [];\r\n            for(var id of [b1, b2]) {\r\n                var block = this.getBlockById(id);\r\n                if (!block) {\r\n                    throw \"Can't find block: \" + id;\r\n                }\r\n                else if (!block.$el) {\r\n                    throw \"Block not mounted yet: \" + id;\r\n                }\r\n                blocks.push(block.$el);\r\n            }\r\n            await this.addEdge(\r\n                blocks[0].getBlockParameter(p1),\r\n                blocks[1].getBlockParameter(p2)\r\n            );\r\n        },\r\n \r\n        async addEdge(p1, p2) {\r\n            if (!p1 || !p2) {\r\n                throw 'One of the parameters is invalid.';\r\n            }\r\n            // Check whether you want to connect the same parameters\r\n            if (p1 == p2) {\r\n                return; // Probably by mistake, don't show an error to not annoy people\r\n            }\r\n            // Check whether you want to connect the block to itself\r\n            if (p1.$parent == p2.$parent) {\r\n                throw 'You can\\'t link a block to itself';\r\n            }\r\n\r\n            var id = this.nextEdgeId++;\r\n            var edge = {id, selected: false, inactive: false, issues: [], $el: null};\r\n            if (p1.output) {\r\n                edge.parameter1 = p1;\r\n                edge.parameter2 = p2;\r\n            }\r\n            else {\r\n                // Reverse the order of in and out\r\n                edge.parameter1 = p2;\r\n                edge.parameter2 = p1;\r\n            }\r\n\r\n            // You have to link an input with an output\r\n            if (edge.parameter1.output === edge.parameter2.output) {\r\n                throw 'You have to link an input with an output';\r\n            }\r\n            // Check for non-recursiveness\r\n            if (this.allSuccessors(edge.parameter1).indexOf(edge.parameter2.id) !== -1) {\r\n                throw 'You can not create a loop';\r\n            }\r\n            // Check whether the data type allows multiple input edges\r\n            if (edge.parameter2.getEdgeCount() > 0 && !edge.parameter2.allowsMultipleInputs) {\r\n                throw 'Parameter accepts only one input';\r\n            }\r\n\r\n            // Check whether the edge exists\r\n            for (var other of this.edges) {\r\n                if (other.$el && other.$el.equals(edge)) {\r\n                    throw 'This connection exists already';\r\n                }\r\n            }\r\n\r\n            // Check type compatibility\r\n            if (!JsonSchemaValidator.isSchemaCompatible(edge.parameter2.schema || {}, edge.parameter1.schema || {}, false, true)) {\r\n                let issue = 'Incoming data type is not compatible for parameter \"' + edge.parameter2.name + '\"';\r\n                edge.issues.push(issue);\r\n                this.$emit('error', issue);\r\n            }\r\n\r\n            return await this.startTransaction(async () => {\r\n                this.unlink();\r\n\r\n                // Create edge\r\n                this.edges.push(Vue.observable(edge));\r\n                edge.parameter1.addEdge(edge);\r\n                edge.parameter2.addEdge(edge);\r\n\r\n                // Update result node\r\n                this.setResultNode(edge.parameter1.$parent, false);\r\n                return true;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Find all successors of a block, and their successors\r\n         */\r\n        allSuccessors(outputParameter) {\r\n            var block = outputParameter.$parent;\r\n            // Blocks already explored\r\n            var explored = {};\r\n            var exploreList = [block];\r\n            explored[block.id] = true;\r\n        \r\n            while (exploreList.length > 0) {\r\n                var currentBlock = exploreList.pop();\r\n                for (var key in currentBlock.edges) {\r\n                    for (var i in currentBlock.edges[key]) {\r\n                        var edge = currentBlock.edges[key][i];\r\n                        if (edge.block1 == currentBlock) {\r\n                            var target = edge.block2;\r\n                            if (!(target.id in explored)) {\r\n                                explored[target.id] = true;\r\n                                exploreList.push(target);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return Object.values(explored);\r\n        },\r\n\r\n        /**\r\n         * Changing the compact mode\r\n         */\r\n        async toggleCompact() {\r\n            this.state.compactMode = !this.state.compactMode;\r\n            this.$emit('compactMode', this.state.compactMode);\r\n            await this.$nextTick();\r\n            this.refreshEdges();\r\n        },\r\n\r\n        export(internal = false) {\r\n            let data = {\r\n                process_graph: {}\r\n            };\r\n\r\n            for(let block of this.processBlocks) {\r\n                let keys = ['process_id', 'namespace', 'arguments', 'description', 'result'];\r\n                if (internal) {\r\n                    // Keep internal state for history\r\n                    keys.push('position');\r\n                }\r\n                let copy = Utils.pickFromObject(block, keys);\r\n                // Remove default values for simplicity\r\n                if (copy.description === null) {\r\n                    delete copy.description;\r\n                }\r\n                if (copy.result !== true) {\r\n                    delete copy.result;\r\n                }\r\n                if (!copy.namespace) {\r\n                    delete copy.namespace;\r\n                }\r\n                let nodeId = block.id.substr(1);\r\n                data.process_graph[nodeId] = copy;\r\n            }\r\n\r\n            if (!this.parent) {\r\n                data.parameters = [];\r\n                let parameterBlocks = this.getPgParameters();\r\n                for(let param of parameterBlocks) {\r\n                    data.parameters.push(param.spec);\r\n                }\r\n            }\r\n\r\n            // ToDo: Currently, we just use the id, categories, result value etc from the original process.\r\n            // Implement to allow custom settings from users.\r\n            return new BlocksProcess(Object.assign({}, this.process, data));\r\n        },\r\n\r\n        // Options may contain:\r\n        // - undoOnError: don't undo changes when an error occured (default: true)\r\n        // - saveHistory: commit the changes to the history (default: true)\r\n        // - propagate: emit the changes to the parent v-model (default: true)\r\n        async startTransaction(fn, options = {}, ...args) {\r\n            let success;\r\n            this.activeTransactions++;\r\n\r\n            try {\r\n                success = await fn(args);\r\n            } catch (error) {\r\n                // If an error occured: show it and restore the last working state from history.\r\n                this.$emit('error', error, \"Model is invalid\");\r\n                if (options.undoOnError !== false) {\r\n                    try {\r\n                        await this.undo();\r\n                    } catch (error2) {\r\n                        this.$emit('error', error, \"Revert failed\");\r\n                    }\r\n                }\r\n                success = false;\r\n            }\r\n\r\n            this.activeTransactions--;\r\n            this.commit(null, options.saveHistory, options.propagate);\r\n\r\n            return success;\r\n        },\r\n\r\n        // Options may contain:\r\n        // - all from startTransaction()\r\n        // - clear: Clear the model builder before import (default: true)\r\n        // - perfectScale: Apply perfect scale after import (default: true)\r\n        async import(process, options = {}) {\r\n            return await this.startTransaction(async () => {\r\n                // clear screen...\r\n                if (options.clear !== false) {\r\n                    await this.clear();\r\n                    this.process = process instanceof ProcessGraph ? process.toJSON() : process;\r\n                }\r\n\r\n                if (!Utils.isObject(process)) {\r\n                    return false;\r\n                }\r\n\r\n                // Parse process\r\n                let pg;\r\n                if (process instanceof ProcessGraph) {\r\n                    // Make a copy\r\n                    pg = new ProcessGraph(process.toJSON(), this.processRegistry);\r\n                    pg.setParent(process.parentProcessId, process.parentParameterName);\r\n                }\r\n                else {\r\n                    pg = new ProcessGraph(process, this.processRegistry);\r\n                }\r\n                pg.allowEmpty();\r\n                pg.parse();\r\n                this.processGraph = Object.freeze(pg);\r\n\r\n                await this.importPgParameters(this.processGraph.getProcessParameters(true), 'user', options.clear !== false);\r\n                await this.importNodes(this.processGraph.getStartNodes());\r\n                await this.importEdges(this.processGraph);\r\n\r\n                if (options.perfectScale !== false) {\r\n                    this.perfectScale();\r\n                }\r\n\r\n                this.$nextTick(() => this.updateHiddenParameterRefEdges());\r\n\r\n                return true;\r\n            }, options);\r\n        },\r\n\r\n        async importPgParameters(params, origin, clear = true) {\r\n            if (!Array.isArray(params)) {\r\n                return;\r\n            }\r\n\r\n            let options = {\r\n                undoOnError: false,\r\n                saveHistory: false,\r\n                propagate: false\r\n            };\r\n            return await this.startTransaction(async () => {\r\n                // Remove existing parameters from the given origin\r\n                if (clear) {\r\n                    this.blocks = this.blocks.filter(b => b.type !== 'parameter' || b.origin !== origin);\r\n                }\r\n\r\n                let size = this.getBlockSize({}); // Estimate base size for an empty block\r\n                let position = [0,0];\r\n                for(var i in params) {\r\n                    position = [\r\n                        -size[0] - MARGIN,\r\n                        i * (size[1] + MARGIN)\r\n                    ];\r\n\r\n                    await this.addPgParameter(params[i], origin, position);\r\n                }\r\n            }, options);\r\n        },\r\n\r\n        async addPgParameter(param, origin = 'user', position = null) {\r\n            return await this.startTransaction(async () => {\r\n                let id = '$' + param.name;\r\n                // Check a parameter with the same name exists\r\n                if (this.blocks.findIndex(p => p.type === 'parameter' && p.id == id) >= 0) {\r\n                    return false;\r\n                }\r\n                param = Utils.deepClone(param);\r\n                if (typeof param.schema === 'undefined') {\r\n                    param.schema = {};\r\n                }\r\n                this.blocks.push(Vue.observable({\r\n                    id,\r\n                    type: 'parameter',\r\n                    origin,\r\n                    position: Utils.ensurePoint(position, () => this.getNewBlockDefaultPosition(this.getBlockSize({}))),\r\n                    spec: Object.freeze(param)\r\n                }));\r\n                return true;\r\n            });\r\n        },\r\n\r\n        getPgParameters() {\r\n            return this.blocks.filter(b => b.type === 'parameter');\r\n        },\r\n\r\n        getPgParameterById(id) {\r\n            return this.blocks.find(b => b.type === 'parameter' && b.id === id);\r\n        },\r\n\r\n        async importEdges(pg) {\r\n            var nodes = pg.getNodes();\r\n            for(var node of Object.values(nodes)) {\r\n                var args = node.getArgumentNames();\r\n                for(let i in args) {\r\n                    var val = node.getRawArgument(args[i]);\r\n                    switch(node.getArgumentType(args[i])) {\r\n                        case 'result':\r\n                            await this.addEdgeByNames('#' + pg.getNode(val.from_node).id, \"output\", '#' + node.id, args[i], false);\r\n                            break;\r\n                        case 'parameter':\r\n                            await this.addEdgeByNames('$' + val.from_parameter, \"output\", '#' + node.id, args[i], false);\r\n                            break;\r\n                        case 'object':\r\n                        case 'array':\r\n                            await this.importEdgeDeep(val, pg, node, args, i);\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        async importEdgeDeep(val, pg, node, args, i) {\r\n            for(let k in val) {\r\n                // k !== 'process_graph' prevents importing sub process graphs like in load_collection, see #118\r\n                if(val[k] && typeof val[k] === \"object\" && k !== 'process_graph') {\r\n                    await this.importEdgeDeep(val[k], pg, node, args, i);\r\n                }\r\n                else if (!Utils.isRef(val)) {\r\n                    continue;\r\n                }\r\n                else if (val.from_node) {\r\n                    await this.addEdgeByNames('#' + pg.getNode(val.from_node).id, \"output\", '#' + node.id, args[i], false);\r\n                }\r\n                else if (val.from_parameter) {\r\n                    await this.addEdgeByNames('$' + val.from_parameter, \"output\", '#' + node.id, args[i], false);\r\n                }\r\n            }\r\n        },\r\n\r\n        async importNodes(nodes, x = 0, y = 0, imported = []) {\r\n            let nextNodes = [];\r\n            let maxX = 0;\r\n            for(let node of nodes) {\r\n                // `node` is a Node class instance as defined by the js-processgraphs library\r\n                // `data` is the simple object that is defined by JSON process graphs\r\n                // `block` is the representation used by the Block component to render the block\r\n\r\n                // To get a better layout, only add the block once all previous nodes are added\r\n                if (imported.includes(node.id) || node.getPreviousNodes().find(prev => !imported.includes(prev.id)) !== undefined) {\r\n                    y += MARGIN / 2; // add a small offset so that lines going through a box are easier to see\r\n                    continue;\r\n                }\r\n\r\n                let data = typeof node.toJSON === 'function' ? node.toJSON() : node;\r\n                data.position = Utils.ensurePoint(data.position, () => [x,y]);\r\n\r\n                let block = this.addBlock(data, node.id);\r\n                imported.push(node.id);\r\n\r\n                let size = this.getBlockSize(block);\r\n                maxX = Math.max(maxX, data.position[0] + size[0]);\r\n                y = data.position[1] + size[1] + MARGIN;\r\n\r\n                nextNodes = nextNodes.concat(node.getNextNodes());\r\n            }\r\n            if (nextNodes.length) {\r\n                await this.importNodes(nextNodes, maxX + MARGIN, 0, imported);\r\n            }\r\n        },\r\n\r\n        incrementId(id = null) {\r\n            if (typeof id !== 'number' && (typeof id !== 'string' || id.length === 0)) {\r\n                id = this.nextBlockId;\r\n                this.nextBlockId++;\r\n            }\r\n            let int = Number.parseInt(id, 10);\r\n            if (!Number.isNaN(int)) {\r\n                this.nextBlockId = Math.max(this.nextBlockId, int+1);\r\n            }\r\n            return id;\r\n        },\r\n\r\n        /**\r\n         * Go to the perfect scale\r\n         */\r\n        perfectScale() {\r\n            if (!this.$refs.div || this.blocks.length === 0) {\r\n                return;\r\n            }\r\n\r\n            var xMin = null, xMax = null;\r\n            var yMin = null, yMax = null;\r\n\r\n            for (let block of this.blocks) {\r\n                let size = this.getBlockSize(block);\r\n                let pos = Utils.ensurePoint(block.position);\r\n                if (xMin == null) {\r\n                    xMin = pos[0]-15\r\n                    xMax = pos[0]+size[0]+15;\r\n                    yMin = pos[1]-15\r\n                    yMax = pos[1]+size[1]+15;\r\n                } else {\r\n                    xMin = Math.min(xMin, pos[0]-15);\r\n                    xMax = Math.max(xMax, pos[0]+size[0]+15);\r\n                    yMin = Math.min(yMin, pos[1]-15);\r\n                    yMax = Math.max(yMax, pos[1]+size[1]+15);\r\n                }\r\n            }\r\n\r\n            var rect = this.$refs.div.getBoundingClientRect();\r\n            var scaleA = rect.width/(xMax-xMin);\r\n            var scaleB = rect.height/(yMax-yMin);\r\n            this.state.scale = Math.min(scaleA, scaleB, 1.5); // Don't scale higher than 1.5\r\n            this.state.center = [\r\n                rect.width/2 - this.state.scale*(xMin+xMax)/2.0,\r\n                rect.height/2 - this.state.scale*(yMin+yMax)/2.0\r\n            ];\r\n            this.newBlockOffset = 0;\r\n        },\r\n\r\n        showParameterViewer(parameters, values, title, isEditable, selectParameterName, saveCallback, parent) {\r\n            this.parameterViewer = {\r\n                parameters,\r\n                values,\r\n                title,\r\n                selectParameterName,\r\n                parent\r\n            };\r\n        }\r\n    }\r\n};\r\n\r\nclass BlocksProcess {\r\n    constructor(process) {\r\n        Object.assign(this, process);\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.vue-component.model-builder {\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tposition: relative;\r\n\r\n    &.editable.focus .blocks {\r\n        border-color: rgba(22, 102, 182, 0.3);\r\n    }\r\n\r\n    &:focus,\r\n    .blocks:focus,\r\n    .canvas:focus {\r\n        outline: 0;\r\n    }\r\n    \r\n    .canvas {\r\n        width: 100%;\r\n        height: 100%;\r\n        position: absolute;\r\n        z-index: 1;\r\n    }\r\n    \r\n    .blocks {\r\n        box-sizing: border-box;\r\n        border: 1px solid transparent;\r\n        overflow: hidden;\r\n        position: absolute;\r\n        z-index: 3;\r\n        width: 100%;\r\n        height: 100%;\r\n    }\r\n\r\n    &.compact .blockicon .delete,\r\n    &.compact .blockicon .info,\r\n    &.compact .blockicon .addDescription,\r\n    &.compact .blockId,\r\n    &.compact .editDescription, \r\n    &.scale_xs .blockicon,\r\n    &.scale_s .blockicon,\r\n    &.scale_xs .connector .text {\r\n        display: none;\r\n    }\r\n    .zoomInfo {\r\n        position: absolute;\r\n        top: 0;\r\n        right: 0;\r\n        display: inline-block;\r\n        padding: 0.3em;\r\n        background-color: #f9f9f9;\r\n        border-radius: 0 0 0 0.3em;\r\n        z-index: 5;\r\n    }\r\n    &.scale_xs .editDescription {\r\n        visibility: hidden;\r\n    }\r\n}\r\n</style>","import mod from \"-!../../../cache-loader/dist/cjs.js??ref--13-0!../../../thread-loader/dist/cjs.js!../../../babel-loader/lib/index.js!../../../cache-loader/dist/cjs.js??ref--1-0!../../../vue-loader/lib/index.js??vue-loader-options!./ModelBuilder.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../cache-loader/dist/cjs.js??ref--13-0!../../../thread-loader/dist/cjs.js!../../../babel-loader/lib/index.js!../../../cache-loader/dist/cjs.js??ref--1-0!../../../vue-loader/lib/index.js??vue-loader-options!./ModelBuilder.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ModelBuilder.vue?vue&type=template&id=46a53729&\"\nimport script from \"./ModelBuilder.vue?vue&type=script&lang=js&\"\nexport * from \"./ModelBuilder.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ModelBuilder.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","'use strict'\n\n/**\n * turns a line into a polygon using thickness\n * @param {number} x1 first point of line\n * @param {number} y1 first point of line\n * @param {number} x2 second point of line\n * @param {number} y2 second point of line\n * @param {number} thickness of line\n */\nmodule.exports = function lineToPolygon(x1, y1, x2, y2, thickness)\n{\n    const angle = Math.atan2(y2 - y1, x2 - x1) - Math.PI / 2\n    const half = thickness / 2\n    const cos = Math.cos(angle) * half\n    const sin = Math.sin(angle) * half\n    return [\n        x1 - cos, y1 - sin,\n        x2 - cos, y2 - sin,\n        x2 + cos, y2 + sin,\n        x1 + cos, y1 + sin\n    ]\n}","'use strict'\n\nvar boxPoint = require('./box-point')\nvar lineLine = require('./line-line')\n\n/**\n * line-box collision\n number @param {number} x1 point 1 of line\n number @param {number} y1 point 1 of line\n number @param {number} x2 point 2 of line\n number @param {number} y2 point 2 of line\n number @param {number} xb top-left of box\n number @param {number} yb top-left of box\n number @param {number} wb width of box\n number @param {number} hb height of box\n */\nmodule.exports = function lineBox(x1, y1, x2, y2, xb, yb, wb, hb)\n{\n    if (boxPoint(xb, yb, wb, hb, x1, y1) || boxPoint(xb, yb, wb, hb, x2, y2))\n    {\n        return true\n    }\n    return lineLine(x1, y1, x2, y2, xb, yb, xb + wb, yb) ||\n        lineLine(x1, y1, x2, y2, xb + wb, yb, xb + wb, yb + hb) ||\n        lineLine(x1, y1, x2, y2, xb, yb + hb, xb + wb, yb + hb) ||\n        lineLine(x1, y1, x2, y2, xb, yb, xb, yb + hb)\n}\n","'use strict'\n\n/**\n * polygon-polygon collision\n * based on http://stackoverflow.com/questions/10962379/how-to-check-intersection-between-2-rotated-rectangles\n * @param {number[]} points1 [x1, y1, x2, y2, ... xn, yn] of first polygon\n * @param {number[]} points2 [x1, y1, x2, y2, ... xn, yn] of second polygon\n * @return {boolean}\n */\nmodule.exports = function polygonPolygon(points1, points2)\n{\n    var a = points1\n    var b = points2\n    var polygons = [a, b]\n    var minA, maxA, projected, minB, maxB, j\n    for (var i = 0; i < polygons.length; i++)\n    {\n        var polygon = polygons[i]\n        for (var i1 = 0; i1 < polygon.length; i1 += 2)\n        {\n            var i2 = (i1 + 2) % polygon.length\n            var normal = { x: polygon[i2 + 1] - polygon[i1 + 1], y: polygon[i1] - polygon[i2] }\n            minA = maxA = null\n            for (j = 0; j < a.length; j += 2)\n            {\n                projected = normal.x * a[j] + normal.y * a[j + 1]\n                if (minA === null || projected < minA)\n                {\n                    minA = projected\n                }\n                if (maxA === null || projected > maxA)\n                {\n                    maxA = projected\n                }\n            }\n            minB = maxB = null\n            for (j = 0; j < b.length; j += 2)\n            {\n                projected = normal.x * b[j] + normal.y * b[j + 1]\n                if (minB === null || projected < minB)\n                {\n                    minB = projected\n                }\n                if (maxB === null || projected > maxB)\n                {\n                    maxB = projected\n                }\n            }\n            if (maxA < minB || maxB < minA)\n            {\n                return false\n            }\n        }\n    }\n    return true\n}\n","'use strict'\n\nfunction distanceSquared(x1, y1, x2, y2)\n{\n    return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2))\n}\n\n/**\n * line-point collision\n * from https://stackoverflow.com/a/17693146/1955997\n * @param {number} x1 first point in line\n * @param {number} y1 first point in line\n * @param {number} x2 second point in line\n * @param {number} y2 second point in line\n * @param {number} xp point\n * @param {number} yp point\n * @param {number} [tolerance=1]\n * @return {boolean}\n */\nmodule.exports = function linePoint(x1, y1, x2, y2, xp, yp, tolerance)\n{\n    tolerance = tolerance || 1\n    return Math.abs(distanceSquared(x1, y1, x2, y2) - (distanceSquared(x1, y1, xp, yp) + distanceSquared(x2, y2, xp, yp))) <= tolerance\n}","'use strict'\n\nconst linePoint = require('./line-point')\n\n/**\n * polygon-point collision\n * based on https://stackoverflow.com/a/17490923/1955997\n * @param {number[]} points [x1, y1, x2, y2, ... xn, yn] of polygon\n * @param {number} x of point\n * @param {number} y of point\n * @param {number} [tolerance=1] maximum distance of point to polygon's edges that triggers collision (see pointLine)\n */\nmodule.exports = function polygonPoint(points, x, y, tolerance)\n{\n    var length = points.length\n    var c = false\n    var i, j\n    for (i = 0, j = length - 2; i < length; i += 2)\n    {\n        if (((points[i + 1] > y) !== (points[j + 1] > y)) && (x < (points[j] - points[i]) * (y - points[i + 1]) / (points[j + 1] - points[i + 1]) + points[i]))\n        {\n            c = !c\n        }\n        j = i\n    }\n    if (c)\n    {\n        return true\n    }\n    for (i = 0; i < length; i += 2)\n    {\n        var p1x = points[i]\n        var p1y = points[i + 1]\n        var p2x, p2y\n        if (i === length - 2)\n        {\n            p2x = points[0]\n            p2y = points[1]\n        }\n        else\n        {\n            p2x = points[i + 2]\n            p2y = points[i + 3]\n        }\n        if (linePoint(p1x, p1y, p2x, p2y, x, y, tolerance))\n        {\n            return true\n        }\n    }\n    return false\n}\n","'use strict'\n\nvar lineBox = require('./line-box')\n\n/**\n * box-line collision\n * @param {number} xb top-left corner of box\n * @param {number} yb top-left corner of box\n * @param {number} wb width of box\n * @param {number} hb height of box\n * @param {number} x1 first point of line\n * @param {number} y1 first point of line\n * @param {number} x2 second point of line\n * @param {number} y2 second point of line\n */\nmodule.exports = function boxLine(xb, yb, wb, hb, x1, y1, x2, y2)\n{\n    return lineBox(x1, y1, x2, y2, xb, yb, wb, hb)\n}\n","export * from \"-!../../../../mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../../css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../../sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../../cache-loader/dist/cjs.js??ref--1-0!../../../../vue-loader/lib/index.js??vue-loader-options!./Block.vue?vue&type=style&index=0&lang=scss&\"","'use strict'\n\nconst lineToPolygon = require('./lineToPolygon')\nconst polygonPolygon = require('./polygon-polygon')\nconst linePolygon = require('./line-polygon')\nconst lineToLine = require('./lineToLine')\n\n/**\n * line-line collision\n * from http://stackoverflow.com/questions/563198/how-do-you-detect-where-two-line-segments-intersect\n * @param {number} x1 first point in line 1\n * @param {number} y1 first point in line 1\n * @param {number} x2 second point in line 1\n * @param {number} y2 second point in line 1\n * @param {number} x3 first point in line 2\n * @param {number} y3 first point in line 2\n * @param {number} x4 second point in line 2\n * @param {number} y4 second point in line 2\n * @param {number} [thickness1] of line 1 (the line is centered in its thickness--see demo)\n * @param {number} [thickness2] of line 2 (the line is centered in its thickness--see demo)\n * @return {boolean}\n */\nmodule.exports = function lineLine(x1, y1, x2, y2, x3, y3, x4, y4, thickness1, thickness2)\n{\n    if (thickness1 || thickness2)\n    {\n        return lineLineThickness(x1, y1, x2, y2, x3, y3, x4, y4, thickness1, thickness2)\n    }\n    else\n    {\n        return lineToLine(x1, y1, x2, y2, x3, y3, x4, y4)\n    }\n}\n\nfunction lineLineThickness(x1, y1, x2, y2, x3, y3, x4, y4, thickness1, thickness2)\n{\n    if (thickness1 && thickness2)\n    {\n        return polygonPolygon(lineToPolygon(x1, y1, x2, y2, thickness1), lineToPolygon(x3, y3, x4, y4, thickness2))\n    }\n    else if (thickness1)\n    {\n        return linePolygon(x3, y3, x4, y4, lineToPolygon(x1, y1, x2, y2, thickness1))\n    }\n    else if (thickness2)\n    {\n        return linePolygon(x1, y1, x2, y2, lineToPolygon(x3, y3, x4, y4, thickness1))\n    }\n}","export * from \"-!../../../../mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../../css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../../sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../../cache-loader/dist/cjs.js??ref--1-0!../../../../vue-loader/lib/index.js??vue-loader-options!./BlockParameter.vue?vue&type=style&index=0&lang=scss&\"","'use strict'\n\n/**\n * box-point collision\n * @param {number} x1 top-left corner of box\n * @param {number} y1 top-left corner of box\n * @param {number} w1 width of box\n * @param {number} h1 height of box\n * @param {number} x2 of point\n * @param {number} y2 of point\n * @return {boolean}\n */\nmodule.exports = function boxPoint(x1, y1, w1, h1, x2, y2)\n{\n    return x2 >= x1 && x2 <= x1 + w1 && y2 >= y1 && y2 <= y1 + h1\n}\n"],"sourceRoot":""}