{"version":3,"file":"js/4738.04d7fa03.js","mappings":"4JAAA,IAAIA,EAAS,WAAkB,IAAIC,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,MAAM,CAACE,YAAY,6BAA6B,CAACF,EAAG,iBAAiB,CAACG,MAAM,CAAC,KAAOL,EAAIM,YAAY,cAAgB,KAAK,WAAa,QAAQ,YAAc,WAAW,aAAeN,EAAIO,aAAa,qBAAsB,EAAM,mBAAqBP,EAAIQ,WAAW,KAAOR,EAAIS,KAAK,aAAeT,EAAIU,aAAa,QAAUV,EAAIW,QAAQ,UAAYX,EAAIY,UAAU,mBAAqBZ,EAAIa,mBAAmB,UAAY,IAAIC,GAAG,CAAC,eAAiBd,EAAIe,gBAAgBC,YAAYhB,EAAIiB,GAAG,CAAC,CAACC,IAAI,UAAUC,GAAG,SAASC,GAAO,MAAO,CAACpB,EAAIqB,GAAG,UAAU,KAAK,KAAKD,GAAO,GAAIpB,EAAW,QAAE,CAACkB,IAAI,gBAAgBC,GAAG,WAAW,MAAO,CAACjB,EAAG,0BAA0B,CAACG,MAAM,CAAC,QAAUL,EAAIsB,QAAQ,WAAatB,EAAIuB,cAAc,EAAEC,OAAM,GAAM,KAAK,CAACN,IAAI,UAAUC,GAAG,SAASC,GAAO,MAAO,CAACpB,EAAIqB,GAAG,UAAU,KAAK,KAAKD,GAAO,GAAG,CAACF,IAAI,UAAUC,GAAG,SAASM,GAAM,MAAO,CAACvB,EAAG,aAAa,CAACG,MAAM,CAAC,KAAOoB,EAAKC,KAAK,WAAa1B,EAAI2B,WAAW,WAAa3B,EAAIuB,YAAYP,YAAYhB,EAAIiB,GAAG,CAAC,CAACC,IAAI,QAAQC,GAAG,WAAW,MAAO,CAACjB,EAAG,OAAO,CAACE,YAAY,WAAW,EAAEoB,OAAM,GAAM,CAACN,IAAI,qBAAqBC,GAAG,SAASC,GAAO,MAAO,CAACpB,EAAIqB,GAAG,gCAAgC,KAAK,KAAKD,GAAO,GAAG,CAACF,IAAI,MAAMC,GAAG,SAASC,GAAO,MAAO,CAACpB,EAAIqB,GAAG,iBAAiB,KAAK,KAAKD,GAAO,GAAG,CAACF,IAAI,kBAAkBC,GAAG,SAASC,GAAO,MAAO,CAACpB,EAAIqB,GAAG,6BAA6B,KAAK,KAAKD,GAAO,GAAG,CAACF,IAAI,mBAAmBC,GAAG,SAASC,GAAO,MAAO,CAACpB,EAAIqB,GAAG,8BAA8B,KAAK,KAAKD,GAAO,IAAI,MAAK,KAAQ,IAAI,MAAK,MAAS,EACphD,EACIQ,EAAkB,G,sBCqBtB,SACCC,KAAM,cACNC,WAAY,CACXC,WAAY,IAAM,uBAAyB,wFAC3CC,eAAgB,IAAM,uBAAyB,kCAEhDC,OAAQ,CACPC,EAAA,GAEDC,MAAO,CACN7B,YAAa,CACZ8B,KAAMC,MACNC,QAAS,IAAM,IAEhBX,WAAY,CACXS,KAAMG,OACND,QAAS,KAAM,CAAG,IAEnB9B,WAAY,CACX4B,KAAMI,OACNF,QAAS,MAEV7B,KAAM,CACL2B,KAAMK,QACNH,SAAS,GAEV5B,aAAc,CACb0B,KAAMK,QACNH,SAAS,GAEV3B,QAAS,CACRyB,KAAMI,OACNF,QAAS,eAEV1B,UAAW,CACVwB,KAAMK,QACNH,QAAS,MAEVzB,mBAAoB,CACnBuB,KAAMM,SACNJ,QAAS,MAEV/B,aAAc,CACb6B,KAAMK,QACNH,SAAS,GAEVhB,QAAS,CACRc,KAAMC,MACNC,QAAS,SAEPJ,EAAA,SAEJS,eACC,oBAAsB1C,KACvB,EACA2C,QAAS,CACR7B,kBAAkB8B,GACjB5C,KAAK6C,MAAM,oBAAqBD,EACjC,ICjF4H,I,cCQ1HE,GAAY,OACd,EACAhD,EACA6B,GACA,EACA,KACA,KACA,MAIF,QAAemB,EAAiB,O,mCCnBhC,IAAIhD,EAAS,WAAkB,IAAIC,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,MAAM,CAACE,YAAY,4BAA4B,CAACF,EAAG,MAAM,CAACE,YAAY,QAAQ,CAACF,EAAG,MAAM,CAACE,YAAY,WAAW,CAACJ,EAAIqB,GAAG,YAAY,GAAIrB,EAAW,QAAEE,EAAG,MAAM,CAACE,YAAY,UAAU,CAACF,EAAG,YAAY,CAACG,MAAM,CAAC,SAAU,GAAM2C,MAAM,CAACC,MAAOjD,EAAe,YAAEkD,SAAS,SAAUC,GAAMnD,EAAIoD,YAAYD,CAAG,EAAEE,WAAW,kBAAkB,GAAGrD,EAAIsD,OAAQtD,EAAW,QAAEE,EAAG,QAAQ,CAACA,EAAG,QAAQ,CAACA,EAAG,KAAKF,EAAIuD,GAAIvD,EAAW,SAAE,SAASwD,EAAIC,GAAI,OAAOvD,EAAG,KAAK,CAACwD,WAAW,CAAC,CAAC7B,KAAK,OAAO8B,QAAQ,SAASV,OAAQO,EAAII,KAAMP,WAAW,cAAcnC,IAAIsC,EAAI3B,KAAKgC,MAAM7D,EAAI8D,UAAUL,GAAIpD,MAAM,CAAC,MAAQL,EAAI+D,QAAQN,IAAK3C,GAAG,CAAC,MAAQ,SAASkD,GAAQ,OAAOhE,EAAIiE,WAAWR,EAAG,IAAI,CAACzD,EAAIkE,GAAGlE,EAAImE,GAAGX,EAAI3B,QAAQ,IAAG,KAAK3B,EAAG,QAAQ,CAACF,EAAIuD,GAAIvD,EAAQ,MAAE,SAASoE,EAAIC,GAAG,OAAOnE,EAAG,KAAK,CAACgB,IAAImD,GAAGrE,EAAIuD,GAAIvD,EAAW,SAAE,SAASwD,EAAIC,GAAI,OAAOvD,EAAG,KAAK,CAACwD,WAAW,CAAC,CAAC7B,KAAK,OAAO8B,QAAQ,SAASV,OAAQO,EAAII,KAAMP,WAAW,cAAcnC,IAAI,GAAGsC,EAAI3B,QAAQwC,IAAIR,MAAM,CAACJ,EAAI,CAAC,KAAQzD,EAAIsE,QAAQd,KAAOnD,MAAM,CAAC,QAAQL,EAAIsE,QAAQd,IAAO,mCAA2C,eAAaA,EAAIe,UAAWvE,EAAIiD,MAAMmB,EAAKZ,EAAKC,IAAa3C,GAAG,CAAC,SAAW,SAASkD,GAAQ,OAAOhE,EAAIwE,WAAWR,EAAQI,EAAKZ,EAAKC,EAAG,IAAI,CAACzD,EAAIqB,GAAGoC,GAAG,WAAW,MAAO,CAAEzD,EAAIyE,cAAcL,EAAKZ,EAAKC,GAAK,CAACvD,EAAG,OAAO,CAACY,GAAG,CAAC,OAAS,SAASkD,GAAyD,OAAjDA,EAAOU,iBAAiBV,EAAOW,kBAAyB3E,EAAI4E,cAAcZ,EAAQI,EAAKZ,EAAKC,EAAG,IAAI,CAACvD,EAAG,QAAQ,CAAC2E,IAAI,YAAYC,UAAS,EAAKzE,MAAM,CAAC,KAAO,QAAQ0E,SAAS,CAAC,MAAQ/E,EAAIiD,MAAMmB,EAAKZ,EAAKC,IAAK3C,GAAG,CAAC,KAAO,SAASkD,GAAQ,OAAOhE,EAAI4E,cAAcZ,EAAQI,EAAKZ,EAAKC,EAAG,EAAE,MAAQ,SAASO,GAAQ,OAAOhE,EAAIgF,kBAAkBhB,EAAQI,EAAKZ,EAAKC,EAAG,QAAQvD,EAAG,OAAO,CAAC6E,SAAS,CAAC,UAAY/E,EAAImE,GAAGnE,EAAIiF,eAAeb,EAAKZ,EAAKC,OAAQ,GAAE,CAAC,IAAMW,EAAI,IAAMZ,EAAI,GAAKC,KAAM,EAAE,IAAG,EAAE,IAAIzD,EAAIkF,SAA8B,GAAnBlF,EAAImF,KAAKC,OAAalF,EAAG,KAAK,CAACE,YAAY,cAAc,CAACF,EAAG,KAAK,CAACG,MAAM,CAAC,QAAUL,EAAIqF,cAAc,CAACrF,EAAIkE,GAAG,gDAAgDlE,EAAIsD,MAAM,KAAKpD,EAAG,MAAM,CAACE,YAAY,WAAW,CAACJ,EAAIkE,GAAGlE,EAAImE,GAAGnE,EAAIsF,mBAC/hE,EACI1D,EAAkB,G,iCC4CtB,SACCC,KAAM,YACNC,WAAY,CACXyD,UAAW,IAAM,yCAElBpD,MAAO,CACNqD,QAAS,CACRpD,KAAMG,OACND,QAAS,KAAM,CAAG,IAEnBmD,KAAM,CACLrD,KAAMC,MACNC,QAAS,IAAM,KAGjBmD,OACC,MAAO,CACNN,KAAM,GACN/B,YAAa,KACbsC,WAAY,KACZJ,cAAe,qBACfK,UAAW,KACXC,UAAW,CACVnC,GAAI,KACJoC,UAAW,MAGd,EACAC,MAAO,CACNL,OACCxF,KAAK8F,YACN,EACA3C,cACCnD,KAAK8F,YACN,EACAH,YACC3F,KAAK8F,YACN,EACAP,QAAS,CACRQ,WAAW,EACXC,UACC,IAAI,IAAIxC,KAAMxD,KAAKuF,QAAS,CAC3B,IAAIK,EAAY5F,KAAKuF,QAAQ/B,GAAIhD,KACjC,GAAI,CAAC,MAAO,QAAQyF,SAASL,GAAY,CACxC5F,KAAKgE,WAAWR,EAAIoC,GACpB,KACD,CACD,CACD,IAGFM,SAAU,CACTd,cACC,OAAO9C,OAAO6D,KAAKnG,KAAKuF,SAASJ,MAClC,EACAF,UACC,OAAOjF,KAAKwF,KAAKL,OAAS,CAC3B,EACAiB,YACC,MAAoC,kBAArBpG,KAAKmD,aAA4BnD,KAAKmD,YAAYgC,OAAS,CAC3E,GAEDzC,eACC,oBAAsB1C,KACvB,EACAqG,UACCrG,KAAKsG,qBACN,EACA3D,QAAS,CACR0B,QAAQd,GACP,MAA4B,oBAAbA,EAAIgD,IACpB,EACA/B,cAAcL,EAAKZ,EAAKC,GACvB,OAAOxD,KAAKqE,QAAQd,IAA0B,MAAlBvD,KAAK0F,WAAqB1F,KAAK0F,UAAU,IAAMvB,GAAOnE,KAAK0F,UAAU,IAAMlC,CACxG,EACAe,WAAWiC,EAAOrC,EAAKZ,EAAKC,GAC3B,GAAKxD,KAAKqE,QAAQd,GAAlB,CAIA,IAAIP,EAAQhD,KAAKgD,MAAMmB,EAAKZ,EAAKC,GACjC,GAAqB,mBAAVR,EAAqB,CAC/B,IAAIyD,EAASzG,KAAKuF,QAAQ/B,GAAI+C,KAC9BE,EAAOtC,EACR,MAECnE,KAAK0F,UAAY,CAACvB,EAAKX,GACvBxD,KAAK0G,WAAU,IAAM1G,KAAK2G,MAAMjB,UAAU,GAAGkB,UAE9CJ,EAAM/B,iBACN+B,EAAM9B,iBAZN,CAaD,EACAC,cAAc6B,EAAOrC,EAAKZ,EAAKC,GAC9B,GAAuB,OAAnBxD,KAAK0F,WAAsB1F,KAAKqE,QAAQd,GAAM,CACjD,IAAIkD,EAASzG,KAAKuF,QAAQ/B,GAAI+C,KAC9BE,EAAOtC,EAAKnE,KAAK2G,MAAMjB,UAAU,GAAG1C,OAEpChD,KAAK0F,UAAY,KACjBc,EAAM/B,iBACN+B,EAAM9B,iBACP,CACD,EACAK,kBAAkByB,EAAOrC,EAAKZ,EAAKC,GACjB,UAAbgD,EAAMvF,MACTjB,KAAK0F,UAAY,KAEnB,EACAY,sBACC,IAAI,IAAI/C,KAAOvD,KAAKuF,QACnB,GAAIvF,KAAKuF,QAAQhC,GAAKkC,WAAY,CACjCzF,KAAKyF,WAAalC,EAClB,KACD,CAEF,EACAsD,UAAUC,GACW,iBAATA,EAIF,aAAeA,KACG,kBAAfA,EAAMtB,MAA6C,kBAAjBsB,EAAMC,QAAgD,kBAAlBD,EAAME,UAEtFF,EAAQA,EAAMtB,MAEX,aAAesB,IAAmC,kBAAlBA,EAAMG,SACzCjH,KAAKqF,cAAgByB,EAAMG,SAI7BC,EAAQC,KAAKL,GACb9G,KAAKqF,cAAgB,wCAdpBrF,KAAKqF,cAAgByB,CAevB,EACA9D,MAAMmB,EAAKZ,EAAKC,GACf,IAAIgC,EAUJ,OARCA,EADkB,kBAARrB,EACHA,EAAIX,GAGJW,EAEJ,aAAeZ,IAAqC,oBAAtBA,EAAI6D,gBACrC5B,EAAOjC,EAAI6D,cAAcjD,EAAKqB,IAExBA,CACR,EACAR,eAAeb,EAAKZ,EAAKC,GACxB,OAAOxD,KAAKqH,OAAOrH,KAAKgD,MAAMmB,EAAKZ,EAAKC,GAAKD,EAC9C,EACAM,UAAUL,GACT,IAAID,EAAMvD,KAAKuF,QAAQ/B,GACnB8D,EAAU,CAAC9D,GAOf,OANiB,IAAbD,EAAI/C,OACP8G,EAAQC,KAAK,YACTvH,KAAK2F,UAAUnC,KAAOA,GACzB8D,EAAQC,KAAK,QAAUvH,KAAK2F,UAAUC,YAGjC0B,CACR,EACAxD,QAAQN,GACP,IAAID,EAAMvD,KAAKuF,QAAQ/B,GACvB,OAAiB,IAAbD,EAAI/C,KACHR,KAAK2F,UAAUnC,KAAOA,GAAmC,QAA7BxD,KAAK2F,UAAUC,UACvC,2CAGA,0CAGF,IACR,EACA5B,WAAWR,EAAIoC,EAAY,OACI,IAA1B5F,KAAKuF,QAAQ/B,GAAIhD,OAGH,OAAdoF,IACHA,EAAY5F,KAAK2F,UAAUnC,KAAOA,GAAmC,QAA7BxD,KAAK2F,UAAUC,UAAsB,OAAS,OAEvF5F,KAAK2F,UAAY,CAACnC,KAAIoC,aACvB,EACApF,KAAKgF,GACJ,IAAIgC,EAAQxH,KAAK2F,UAAUnC,GAC3B,GAAc,OAAVgE,IAAmBxH,KAAKuF,QAAQiC,GACnC,OAAOhC,EAER,IAAIjC,EAAMvD,KAAKuF,QAAQiC,GACvB,OAAiB,IAAbjE,EAAI/C,KACAgF,EAGDA,EAAKiC,MAAM,GAAGjH,MAAK,CAACkH,EAAEC,KAC5B,IAAIzG,EAA2B,oBAAfqC,EAAIqE,OAAwBrE,EAAIqE,OAAS,iCACrDC,EAAS3G,EAAGwG,EAAEF,GAAQG,EAAEH,IAC5B,MAAoC,SAA7BxH,KAAK2F,UAAUC,WAAiC,EAAViC,EAAcA,CAAM,GAEnE,EACAC,OAAOtC,GACN,IAAKxF,KAAKoG,UACT,OAAOZ,EAER,IAAIjF,EAAaP,KAAKmD,YAAY4E,cAElC,OAAOvC,EAAKsC,QAAO3D,IAClB,IAAI6D,EAAS,GACb,IAAI,IAAI/G,KAAOkD,EAAK,CACnB,IAAIZ,EAAMvD,KAAKuF,QAAQtE,GACvB,KAAmB,qBAARsC,GAAuBA,EAAI0E,eAAe,gBAAoC,IAAnB1E,EAAI2E,YAA1E,CAGA,IAAIlF,EAAQhD,KAAKgD,MAAMmB,EAAKZ,EAAKtC,GACZ,kBAAV+B,GAAuC,kBAAVA,GAAuC,mBAAVA,IACpEA,EAAQA,EAAMmF,WAKfH,EAAOT,KAAKvE,GARZ,CASD,CACA,OAAO,WAAazC,EAAYyH,EAAO,GAEzC,EACAI,cACCpI,KAAKmD,YAAc,GACnBnD,KAAK8F,YACN,EACAA,aACM1D,MAAMiG,QAAQrI,KAAKwF,MAIxBxF,KAAKkF,KAAOlF,KAAKQ,KAAKR,KAAK8H,OAAO9H,KAAKwF,OAHtCxF,KAAKkF,KAAO,EAId,EACAmC,OAAOrE,EAAOO,GACb,MAA0B,kBAAfA,EAAI8D,OAQgB,oBAAf9D,EAAI8D,OACZ9D,EAAI8D,OAAOiB,KAAKtI,KAAMgD,EAAOO,GAG7B,EAAAgF,UAAA,OAAiBvF,GAXyB,oBAAtC,EAAAwF,WAAW,SAAWjF,EAAI8D,QAC7B,EAAAmB,WAAW,SAAWjF,EAAI8D,QAAQrE,EAAOO,QAGhD2D,EAAQC,KAAK5D,EAAI8D,OAAS,4BAS7B,ICtS0H,I,cCQxHvE,GAAY,OACd,EACAhD,EACA6B,GACA,EACA,KACA,KACA,MAIF,QAAemB,EAAiB,O,mCCnBhC,IAAIhD,EAAS,WAAkB,IAAIC,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,MAAM,CAACE,YAAY,8BAA8B,CAACF,EAAG,iBAAiB,CAACG,MAAM,CAAC,KAAOL,EAAI0I,YAAY,WAAa,QAAQ,YAAc,iBAAiB,qBAAsB,EAAM,mBAAqB1I,EAAIQ,WAAW,KAAOR,EAAIS,KAAK,aAAeT,EAAIU,aAAa,QAAUV,EAAIW,QAAQ,UAAYX,EAAIY,WAAWE,GAAG,CAAC,eAAiBd,EAAIe,gBAAgBC,YAAYhB,EAAIiB,GAAG,CAAC,CAACC,IAAI,UAAUC,GAAG,SAASC,GAAO,MAAO,CAACpB,EAAIqB,GAAG,UAAU,KAAK,KAAKD,GAAO,GAAIpB,EAAW,QAAE,CAACkB,IAAI,gBAAgBC,GAAG,WAAW,MAAO,CAACjB,EAAG,0BAA0B,CAACG,MAAM,CAAC,QAAUL,EAAIsB,QAAQ,WAAatB,EAAIuB,cAAc,EAAEC,OAAM,GAAM,KAAK,CAACN,IAAI,UAAUC,GAAG,SAASM,GAAM,MAAO,CAACzB,EAAIqB,GAAG,WAAU,WAAW,MAAO,CAACnB,EAAG,SAAS,CAACE,YAAY,UAAU,CAACJ,EAAIkE,GAAGlE,EAAImE,GAAG1C,EAAKC,KAAKG,SAAS3B,EAAG,KAAK,CAACE,YAAY,uBAAuB,CAAEJ,EAAI2I,SAA8B,UAAnBlH,EAAKC,KAAKU,KAAkBlC,EAAG,KAAK,CAACE,YAAY,iBAAiB,CAACJ,EAAIkE,GAAG,YAAYlE,EAAIsD,KAAMtD,EAAI2I,SAA8B,WAAnBlH,EAAKC,KAAKU,KAAmBlC,EAAG,KAAK,CAACE,YAAY,iBAAiB,CAACJ,EAAIkE,GAAG,YAAYlE,EAAIsD,KAAMjB,MAAMiG,QAAQ7G,EAAKC,KAAKkH,gBAAiB5I,EAAIuD,GAAI9B,EAAKC,KAAmB,gBAAE,SAASU,GAAM,OAAOlC,EAAG,KAAK,CAACgB,IAAIkB,EAAKhC,YAAY,aAAa,CAACJ,EAAIkE,GAAGlE,EAAImE,GAAG/B,KAAQ,IAAGpC,EAAIsD,MAAM,GAAGpD,EAAG,MAAMA,EAAG,QAAQ,CAACF,EAAIkE,GAAGlE,EAAImE,GAAG1C,EAAKoH,QAAQA,YAAY,GAAE,KAAKpH,GAAM,GAAG,CAACP,IAAI,UAAUC,GAAG,SAASM,GAAM,MAAO,CAACvB,EAAG,aAAa,CAACG,MAAM,CAAC,GAAKoB,EAAKoH,QAAQC,WAAW,OAASrH,EAAKC,KAAK,KAAOD,EAAKC,KAAKU,KAAK,WAAapC,EAAIuB,YAAYP,YAAYhB,EAAIiB,GAAG,CAAC,CAACC,IAAI,QAAQC,GAAG,WAAW,MAAO,CAACjB,EAAG,OAAO,CAACE,YAAY,WAAW,EAAEoB,OAAM,GAAM,CAACN,IAAI,SAASC,GAAG,WAAW,MAAO,CAACjB,EAAG,OAAO,CAACE,YAAY,WAAW,EAAEoB,OAAM,GAAM,CAACN,IAAI,qBAAqBC,GAAG,SAASC,GAAO,MAAO,CAACpB,EAAIqB,GAAG,iCAAiC,KAAK,KAAKD,GAAO,GAAG,CAACF,IAAI,MAAMC,GAAG,SAASC,GAAO,MAAO,CAACpB,EAAIqB,GAAG,kBAAkB,KAAK,KAAKD,GAAO,IAAI,MAAK,KAAQ,IAAI,MAAK,MAAS,EACn5D,EACIQ,EAAkB,G,sBCgCtB,SACCC,KAAM,cACNC,WAAY,CACXE,eAAgB,IAAM,uBAAyB,iCAC/C+G,WAAY,IAAM,uBAAyB,kCAE5C9G,OAAQ,CACPC,EAAA,GAEDC,MAAO,CACN6G,QAAS,CACR5G,KAAMG,OACND,QAAS,KAAM,CAAG,IAEnB2G,UAAW,CACV7G,KAAMK,QACNH,SAAS,GAEV4G,WAAY,CACX9G,KAAMK,QACNH,SAAS,GAEV9B,WAAY,CACX4B,KAAMI,OACNF,QAAS,MAEV7B,KAAM,CACL2B,KAAMK,QACNH,SAAS,GAEV5B,aAAc,CACb0B,KAAMK,QACNH,SAAS,GAEV3B,QAAS,CACRyB,KAAMI,OACNF,QAAS,gBAEV1B,UAAW,CACVwB,KAAMK,QACNH,QAAS,MAEVhB,QAAS,CACRc,KAAMC,MACNC,QAAS,SAEPJ,EAAA,SAEJiE,SAAU,CACTwC,UACC,OAAO1I,KAAKgJ,WAAahJ,KAAKiJ,UAC/B,EACAC,cACC,IAAIC,EAAQ,GAOZ,OANInJ,KAAKgJ,WACRG,EAAM5B,KAAK,SAERvH,KAAKiJ,YACRE,EAAM5B,KAAK,UAEL4B,CACR,EACAV,cACC,IAAIjD,EAAO,GACX,IAAI,IAAIrD,KAAQnC,KAAKkJ,YACpB,IAAI,IAAItH,KAAQ5B,KAAK+I,QAAQ5G,GAAO,CACnC,IAAIkF,EAAS/E,OAAO8G,OAAO,CAAC5F,GAAI,GAAG5B,KAAQO,IAAQP,OAAMO,QAAOnC,KAAK+I,QAAQ5G,GAAMP,IACnF4D,EAAK+B,KAAKF,EACX,CAED,OAAO7B,CACR,GAED9C,eACC,oBAAsB1C,KACvB,EACA2C,QAAS,CACR7B,kBAAkB8B,GACjB5C,KAAK6C,MAAM,oBAAqBD,EACjC,ICjH4H,I,cCQ1HE,GAAY,OACd,EACAhD,EACA6B,GACA,EACA,KACA,KACA,MAIF,QAAemB,EAAiB,O,mCCnBhC,MAAMuG,EAAW,IAAIC,IAEd,SAASC,EAAWC,EAAOC,GAC3BrH,MAAMiG,QAAQmB,KACjBA,EAAQ,CAACA,IAEXA,EAAME,SAASC,GAAMN,EAASO,IAAID,EAAGF,IACvC,CAEOI,eAAeC,EAAWC,GAC/B,MAAMN,EAAWJ,EAASW,IAAID,EAAcE,aAC5C,IAAKR,EACH,MAAM,IAAIS,MAAM,0CAA0CH,EAAcE,eAE1E,MAAME,QAAgBV,IACtB,OAAO,IAAIU,EAAQJ,EACrB,CAGAR,EAAW,MAACa,EAAW,IAAI,IAAM,gCAAmBC,MAAMC,GAAMA,EAAEjI,YAClEkH,EAAW,GAAG,IAAM,+BAAmBc,MAAMC,GAAMA,EAAEjI,YACrDkH,EAAW,GAAG,KACZ,MAAM,IAAIW,MAAM,+CAA+C,IAEjEX,EAAW,GAAG,IAAM,gCAAoBc,MAAMC,GAAMA,EAAEjI,YACtDkH,EAAW,CAAC,EAAG,QAAQ,IAAM,yDAAuBc,MAAMC,GAAMA,EAAEjI,YAClEkH,EAAW,OAAO,IAAM,gCAAwBc,MAAMC,GAAMA,EAAEjI,YAC9DkH,EAAW,OAAO,IAAM,yDAAoBc,MAAMC,GAAMA,EAAEjI,YAC1DkH,EAAW,OAAO,IAAM,gCAAwBc,MAAMC,GAAMA,EAAEjI,W,iFC1B/C,MAAMkI,EACnBC,YAAYC,GACVzK,KAAK0K,UAAY,IAAIC,SAASF,EAChC,CAEIG,aACF,OAAO5K,KAAK0K,UAAUE,MACxB,CAEAC,UAAUC,EAAQC,GAChB,MAAMC,EAAOhL,KAAKiL,UAAUH,EAAQC,GAC9BG,EAAQlL,KAAKiL,UAAUH,EAAS,EAAGC,GACzC,IAAII,EACJ,GAAIJ,EAAc,CAEhB,GADAI,EAAWH,EAAS,GAAK,GAAME,GAC1BE,OAAOC,cAAcF,GACxB,MAAM,IAAIjB,MACR,GAAGiB,8IAIP,OAAOA,CACT,CAEA,GADAA,EAAa,GAAK,GAAMH,EAAQE,GAC3BE,OAAOC,cAAcF,GACxB,MAAM,IAAIjB,MACR,GAAGiB,8IAKP,OAAOA,CACT,CAGAG,SAASR,EAAQC,GACf,IAAI/H,EAAQ,EACZ,MAAMuI,GAAyE,IAA3DvL,KAAK0K,UAAUc,SAASV,GAAUC,EAAe,EAAI,KAAc,EACvF,IAAIU,GAAW,EACf,IAAK,IAAIrH,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAIsH,EAAO1L,KAAK0K,UAAUc,SAASV,GAAUC,EAAe3G,EAAI,EAAIA,IAChEmH,IACEE,EACW,IAATC,IACFA,EAAqB,MAAZA,EAAO,GAChBD,GAAW,GAGbC,EAAe,KAAPA,GAGZ1I,GAAS0I,EAAQ,KAAOtH,CAC1B,CAIA,OAHImH,IACFvI,GAASA,GAEJA,CACT,CAEAwI,SAASV,EAAQC,GACf,OAAO/K,KAAK0K,UAAUc,SAASV,EAAQC,EACzC,CAEAY,QAAQb,EAAQC,GACd,OAAO/K,KAAK0K,UAAUiB,QAAQb,EAAQC,EACxC,CAEAa,UAAUd,EAAQC,GAChB,OAAO/K,KAAK0K,UAAUkB,UAAUd,EAAQC,EAC1C,CAEAc,SAASf,EAAQC,GACf,OAAO/K,KAAK0K,UAAUmB,SAASf,EAAQC,EACzC,CAEAE,UAAUH,EAAQC,GAChB,OAAO/K,KAAK0K,UAAUO,UAAUH,EAAQC,EAC1C,CAEAe,SAAShB,EAAQC,GACf,OAAO/K,KAAK0K,UAAUoB,SAAShB,EAAQC,EACzC,CAEAgB,WAAWjB,EAAQC,GACjB,OAAO,IAAAiB,GAAWhM,KAAK0K,UAAWI,EAAQC,EAC5C,CAEAkB,WAAWnB,EAAQC,GACjB,OAAO/K,KAAK0K,UAAUuB,WAAWnB,EAAQC,EAC3C,CAEAmB,WAAWpB,EAAQC,GACjB,OAAO/K,KAAK0K,UAAUwB,WAAWpB,EAAQC,EAC3C,EC/Fa,MAAMoB,EACnB3B,YAAYC,EAAa2B,EAAarB,EAAcsB,GAClDrM,KAAK0K,UAAY,IAAIC,SAASF,GAC9BzK,KAAKsM,aAAeF,EACpBpM,KAAKuM,cAAgBxB,EACrB/K,KAAKwM,SAAWH,CAClB,CAEID,kBACF,OAAOpM,KAAKsM,YACd,CAEIG,eACF,OAAOzM,KAAKsM,aAAetM,KAAK4K,OAAO8B,UACzC,CAEI3B,mBACF,OAAO/K,KAAKuM,aACd,CAEIF,cACF,OAAOrM,KAAKwM,QACd,CAEI5B,aACF,OAAO5K,KAAK0K,UAAUE,MACxB,CAEA+B,OAAO7B,EAAQ3F,GACb,OAAOnF,KAAKoM,aAAetB,GAAU9K,KAAKyM,UAAY3B,EAAS3F,CACjE,CAEAyH,UAAU9B,GACR,OAAO9K,KAAK0K,UAAUc,SACpBV,EAAS9K,KAAKsM,aAActM,KAAKuM,cAErC,CAEAM,SAAS/B,GACP,OAAO9K,KAAK0K,UAAUiB,QACpBb,EAAS9K,KAAKsM,aAActM,KAAKuM,cAErC,CAEAO,WAAWhC,GACT,OAAO9K,KAAK0K,UAAUkB,UACpBd,EAAS9K,KAAKsM,aAActM,KAAKuM,cAErC,CAEAQ,UAAUjC,GACR,OAAO9K,KAAK0K,UAAUmB,SACpBf,EAAS9K,KAAKsM,aAActM,KAAKuM,cAErC,CAEAS,WAAWlC,GACT,OAAO9K,KAAK0K,UAAUO,UACpBH,EAAS9K,KAAKsM,aAActM,KAAKuM,cAErC,CAEAU,UAAUnC,GACR,OAAO9K,KAAK0K,UAAUoB,SACpBhB,EAAS9K,KAAKsM,aAActM,KAAKuM,cAErC,CAEAW,YAAYpC,GACV,OAAO9K,KAAK0K,UAAUuB,WACpBnB,EAAS9K,KAAKsM,aAActM,KAAKuM,cAErC,CAEAY,YAAYrC,GACV,OAAO9K,KAAK0K,UAAUwB,WACpBpB,EAAS9K,KAAKsM,aAActM,KAAKuM,cAErC,CAEAa,WAAWtC,GACT,MAAME,EAAOhL,KAAKgN,WAAWlC,GACvBI,EAAQlL,KAAKgN,WAAWlC,EAAS,GACvC,IAAIK,EACJ,GAAInL,KAAKuM,cAAe,CAEtB,GADApB,EAAWH,EAAS,GAAK,GAAME,GAC1BE,OAAOC,cAAcF,GACxB,MAAM,IAAIjB,MACR,GAAGiB,8IAIP,OAAOA,CACT,CAEA,GADAA,EAAa,GAAK,GAAMH,EAAQE,GAC3BE,OAAOC,cAAcF,GACxB,MAAM,IAAIjB,MACR,GAAGiB,8IAKP,OAAOA,CACT,CAGAkC,UAAUvC,GACR,IAAI9H,EAAQ,EACZ,MAAMuI,GAA+E,IAAjEvL,KAAK0K,UAAUc,SAASV,GAAU9K,KAAKuM,cAAgB,EAAI,KAC3E,EACJ,IAAId,GAAW,EACf,IAAK,IAAIrH,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAIsH,EAAO1L,KAAK0K,UAAUc,SACxBV,GAAU9K,KAAKuM,cAAgBnI,EAAI,EAAIA,IAErCmH,IACEE,EACW,IAATC,IACFA,EAAqB,MAAZA,EAAO,GAChBD,GAAW,GAGbC,EAAe,KAAPA,GAGZ1I,GAAS0I,EAAQ,KAAOtH,CAC1B,CAIA,OAHImH,IACFvI,GAASA,GAEJA,CACT,CAEAsK,WAAWxC,GACT,OAAI9K,KAAKwM,SACAxM,KAAKoN,WAAWtC,GAElB9K,KAAKgN,WAAWlC,EACzB,EC1IF,MAAMyC,EAAW,WAKjB,SAASC,EAAcC,GACrB,GAAkC,qBAAvBnL,OAAOoL,YAChB,OAAOpL,OAAOoL,YAAYD,GAE5B,MAAME,EAAM,CAAC,EACb,IAAK,MAAO1M,EAAK+B,KAAUyK,EACzBE,EAAI1M,EAAI8G,eAAiB/E,EAE3B,OAAO2K,CACT,CAOA,SAASC,EAAaC,GACpB,MAAMJ,EAAQI,EACXC,MAAM,QACNC,KAAKC,IACJ,MAAMC,EAAKD,EAAKF,MAAM,KAAKC,KAAKG,GAAQA,EAAIC,SAE5C,OADAF,EAAG,GAAKA,EAAG,GAAGlG,cACPkG,CAAE,IAGb,OAAOT,EAAcC,EACvB,CAOO,SAASW,EAAiBC,GAC/B,MAAOlM,KAASmM,GAAaD,EAAeP,MAAM,KAAKC,KAAKQ,GAAMA,EAAEJ,SAC9DK,EAAcF,EAAUP,KAAKU,GAAUA,EAAMX,MAAM,OACzD,MAAO,CAAE3L,OAAMuM,OAAQlB,EAAcgB,GACvC,CAOO,SAASG,EAAkBC,GAChC,IAAIC,EACAC,EACAC,EASJ,OAPIH,KACD,CAAEC,EAAOC,EAAKC,GAASH,EAAgBI,MAAM,4BAC9CH,EAAQI,SAASJ,EAAO,IACxBC,EAAMG,SAASH,EAAK,IACpBC,EAAQE,SAASF,EAAO,KAGnB,CAAEF,QAAOC,MAAKC,QACvB,CAaO,SAASG,EAAgBC,EAAqBC,GACnD,IAAItE,EAAS,KACb,MAAMuE,EAAU,IAAIC,YAAY,SAC1BC,EAAM,GAENC,EAAgB,KAAKJ,IACrBK,EAAc,GAAGD,MAIvB,IAAK,IAAIpL,EAAI,EAAGA,EAAI,KAAMA,EAAG,CAC3B,MAAMyJ,EAAOwB,EAAQK,OACnB,IAAIC,WAAWR,EAAqB/K,EAAGoL,EAAcrK,SAEnD0I,IAAS2B,IACX1E,EAAS1G,EAEb,CAEA,GAAe,OAAX0G,EACF,MAAM,IAAIZ,MAAM,mCAGlB,MAAOY,EAASqE,EAAoBzC,WAAY,CAC9C,MAAMmB,EAAOwB,EAAQK,OACnB,IAAIC,WAAWR,EAAqBrE,EAClC8E,KAAKC,IAAIL,EAAcrK,OAAS,KAAMgK,EAAoBzC,WAAa5B,KAK3E,GAAoB,IAAhB+C,EAAK1I,QAAgB0I,EAAKiC,WAAWL,GACvC,MAIF,IAAK5B,EAAKiC,WAAWN,GACnB,MAAM,IAAItF,MAAM,qCAIlB,MAAM6F,EAAYlC,EAAKmC,OAAOR,EAAcrK,OAAS,GAErD,GAAyB,IAArB4K,EAAU5K,OACZ,MAIF,MAAM8K,EAAeF,EAAUG,QAAQ3C,GAGjCvG,EAAU4G,EAAamC,EAAUC,OAAO,EAAGC,KAC3C,MAAEpB,EAAK,IAAEC,EAAG,MAAEC,GAAUJ,EAAkB3H,EAAQ,kBAGlDmJ,EAAcrF,EAAS0E,EAAcrK,OAAS8K,EAAe1C,EAASpI,OACtEA,EAAS8J,SAASH,EAAK,IAAM,EAAIG,SAASJ,EAAO,IACvDU,EAAIhI,KAAK,CACPP,UACAxB,KAAM2J,EAAoB1H,MAAM0I,EAAaA,EAAchL,GAC3D2F,OAAQ+D,EACR1J,SACAiL,SAAUrB,IAGZjE,EAASqF,EAAchL,EAAS,CAClC,CAEA,OAAOoK,CACT,CC1IO,MAAMc,EAMXxG,YAAYyG,EAAQC,OAASnG,GAC3B,OAAOoG,QAAQC,IACbH,EAAOvC,KAAKtG,GAAUzH,KAAK0Q,WAAWjJ,EAAO8I,KAEjD,CAOA1G,iBAAiBpC,GACf,MAAM,IAAIyC,MAAM,qBAAqBzC,kCACvC,CAKI2I,eACF,OAAO,IACT,CAEAvG,cAEA,E,eCuFKA,eAAe8G,EAAKC,GACzB,OAAO,IAAIJ,SAASK,GAAYC,WAAWD,EAASD,IACtD,CAEO,SAASG,EAAIrJ,EAAGC,GACrB,MAAMqJ,EAAI5O,MAAMiG,QAAQX,GAAKA,EAAItF,MAAM6O,KAAKvJ,GACtCwJ,EAAI9O,MAAMiG,QAAQV,GAAKA,EAAIvF,MAAM6O,KAAKtJ,GAC5C,OAAOqJ,EAAEjD,KAAI,CAACoD,EAAG/M,IAAM,CAAC+M,EAAGD,EAAE9M,KAC/B,CAGO,MAAMgN,UAAmBlH,MAC9BM,YAAYkE,GAEV2C,MAAM3C,GAGFxE,MAAMoH,mBACRpH,MAAMoH,kBAAkBtR,KAAMoR,GAGhCpR,KAAK4B,KAAO,YACd,EAGK,MAAM2P,UAA6BrH,MACxCM,YAAYgH,EAAQvK,GAClBoK,MAAMpK,GACNjH,KAAKwR,OAASA,EACdxR,KAAKiH,QAAUA,EACfjH,KAAK4B,KAAO,gBACd,EAGK,MAAM6P,EAAiBF,ECzJ9B,MAAMG,EAOJlH,YAAYM,EAAQ3F,EAAQK,EAAO,MACjCxF,KAAK8K,OAASA,EACd9K,KAAKmF,OAASA,EACdnF,KAAKwF,KAAOA,CACd,CAKImM,UACF,OAAO3R,KAAK8K,OAAS9K,KAAKmF,MAC5B,EAGF,MAAMyM,EAOJpH,YAAYM,EAAQ3F,EAAQ0M,GAC1B7R,KAAK8K,OAASA,EACd9K,KAAKmF,OAASA,EACdnF,KAAK6R,SAAWA,CAClB,EAGK,MAAMC,UAAsBzB,EAQjC7F,YAAYuH,GAAQ,UAAEC,EAAY,MAAK,UAAEC,EAAY,KAAQ,CAAC,GAC5DZ,QACArR,KAAK+R,OAASA,EACd/R,KAAKgS,UAAYA,EAEjBhS,KAAKkS,WAAa,IAAI,IAAS,CAC7BC,QAASF,EACTG,WAAY,CAACC,EAASC,KACpBtS,KAAKuS,cAAc3I,IAAIyI,EAASC,EAAM,IAK1CtS,KAAKuS,cAAgB,IAAIjJ,IAGzBtJ,KAAKwS,cAAgB,IAAIlJ,IAGzBtJ,KAAKyS,gBAAkB,IAAIC,IAE3B1S,KAAK2S,gBAAkB,IAAID,GAC7B,CAEItC,eACF,OAAOpQ,KAAK+R,OAAO3B,QACrB,CAMAvG,YAAYyG,EAAQC,GAClB,MAAMiC,EAAgB,GAChBI,EAAkB,GAClBC,EAAc,GACpB7S,KAAKuS,cAAcO,QAEnB,IAAK,MAAM,OAAEhI,EAAM,OAAE3F,KAAYmL,EAAQ,CACvC,IAAIqB,EAAM7G,EAAS3F,EAEnB,MAAM,SAAEiL,GAAapQ,KACJ,OAAboQ,IACFuB,EAAM/B,KAAKC,IAAI8B,EAAKvB,IAGtB,MAAM2C,EAAmBnD,KAAKoD,MAAMlI,EAAS9K,KAAKgS,WAAahS,KAAKgS,UAEpE,IAAK,IAAIiB,EAAUF,EAAkBE,EAAUtB,EAAKsB,GAAWjT,KAAKgS,UAAW,CAC7E,MAAMK,EAAUzC,KAAKoD,MAAMC,EAAUjT,KAAKgS,WACrChS,KAAKkS,WAAWgB,IAAIb,IAAarS,KAAKwS,cAAcU,IAAIb,KAC3DrS,KAAKyS,gBAAgBU,IAAId,GACzBO,EAAgBrL,KAAK8K,IAEnBrS,KAAKwS,cAAcU,IAAIb,IACzBG,EAAcjL,KAAKvH,KAAKwS,cAAcxI,IAAIqI,IAE5CQ,EAAYtL,KAAK8K,EACnB,CACF,OAGM1B,IACN3Q,KAAKoT,YAAY7C,GAGjB,MAAM8C,EAAkB,GACxB,IAAK,MAAMhB,KAAWO,EAGhB5S,KAAKwS,cAAcU,IAAIb,IACzBgB,EAAgB9L,KAAKvH,KAAKwS,cAAcxI,IAAIqI,UAK1C7B,QAAQ8C,WAAWd,SACnBhC,QAAQ8C,WAAWD,GAGzB,MAAME,EAAuB,GACvBZ,EAAkBE,EACrB/K,QAAQtE,GAAOxD,KAAK2S,gBAAgBO,IAAI1P,KAAQxD,KAAKkS,WAAWgB,IAAI1P,KAGvE,GAFAmP,EAAgBjJ,SAASlG,GAAOxD,KAAKyS,gBAAgBU,IAAI3P,KAErDmP,EAAgBxN,OAAS,GAAKoL,IAAWA,EAAOiD,QAAS,CAC3DxT,KAAKoT,YAAY,MACjB,IAAK,MAAMf,KAAWM,EAAiB,CACrC,MAAML,EAAQtS,KAAKwS,cAAcxI,IAAIqI,GACrC,IAAKC,EACH,MAAM,IAAIpI,MAAM,SAASmI,kCAE3BkB,EAAqBhM,KAAK+K,EAC5B,OACM9B,QAAQ8C,WAAWC,EAC3B,CAGA,GAAIhD,GAAUA,EAAOiD,QACnB,MAAM,IAAIpC,EAAW,uBAGvB,MAAMqC,EAASZ,EAAY9E,KAAKvK,GAAOxD,KAAKkS,WAAWlI,IAAIxG,IAAOxD,KAAKuS,cAAcvI,IAAIxG,KACnFkQ,EAAeD,EAAO3L,QAAQ1D,IAAOA,IAC3C,GAAIsP,EAAavO,OACf,MAAM,IAAIsM,EAAeiC,EAAc,kBAIzC,MAAMC,EAAiB,IAAIrK,IAAIyH,EAAI8B,EAAaY,IAGhD,OAAOzT,KAAK4T,cAActD,EAAQqD,EACpC,CAMAP,YAAY7C,GAEV,GAAIvQ,KAAKyS,gBAAgBoB,KAAO,EAAG,CACjC,MAAMC,EAAS9T,KAAK+T,YAAY/T,KAAKyS,iBAG/BuB,EAAgBhU,KAAK+R,OAAOkC,MAAMH,EAAQvD,GAEhD,IAAK,IAAI2D,EAAa,EAAGA,EAAaJ,EAAO3O,SAAU+O,EAAY,CACjE,MAAMC,EAAQL,EAAOI,GAErB,IAAK,MAAM7B,KAAW8B,EAAMtC,SAE1B7R,KAAKwS,cAAc5I,IAAIyI,EAAS,WAC9B,IACE,MAAM+B,SAAkBJ,GAAeE,GACjCG,EAAchC,EAAUrS,KAAKgS,UAC7BsC,EAAID,EAAcD,EAAStJ,OAC3ByJ,EAAI3E,KAAKC,IAAIyE,EAAItU,KAAKgS,UAAWoC,EAAS5O,KAAKkH,YAC/ClH,EAAO4O,EAAS5O,KAAKiC,MAAM6M,EAAGC,GAC9BjC,EAAQ,IAAIZ,EAChB2C,EACA7O,EAAKkH,WACLlH,EACA6M,GAEFrS,KAAKkS,WAAWtI,IAAIyI,EAASC,GAC7BtS,KAAK2S,gBAAgB6B,OAAOnC,EAC9B,CAAE,MAAOoC,GACP,GAAiB,eAAbA,EAAI7S,KAON,MAAM6S,EAJNA,EAAIlE,OAASA,EACbvQ,KAAKkS,WAAWsC,OAAOnC,GACvBrS,KAAK2S,gBAAgBQ,IAAId,EAI7B,CAAE,QACArS,KAAKwS,cAAcgC,OAAOnC,EAC5B,CACD,EA5B+B,GA8BpC,CACArS,KAAKyS,gBAAgBK,OACvB,CACF,CAOAiB,YAAYlC,GACV,MAAM6C,EAAiBtS,MAAM6O,KAAKY,GAAUrR,MAAK,CAACkH,EAAGC,IAAMD,EAAIC,IAC/D,GAA8B,IAA1B+M,EAAevP,OACjB,MAAO,GAET,IAAI8N,EAAU,GACV0B,EAAc,KAClB,MAAMb,EAAS,GAEf,IAAK,MAAMzB,KAAWqC,EACA,OAAhBC,GAAwBA,EAAc,IAAMtC,GAC9CY,EAAQ1L,KAAK8K,GACbsC,EAActC,IAEdyB,EAAOvM,KAAK,IAAIqK,EACdqB,EAAQ,GAAKjT,KAAKgS,UAClBiB,EAAQ9N,OAASnF,KAAKgS,UACtBiB,IAEFA,EAAU,CAACZ,GACXsC,EAActC,GAUlB,OANAyB,EAAOvM,KAAK,IAAIqK,EACdqB,EAAQ,GAAKjT,KAAKgS,UAClBiB,EAAQ9N,OAASnF,KAAKgS,UACtBiB,IAGKa,CACT,CAOAF,cAActD,EAAQmD,GACpB,OAAOnD,EAAOvC,KAAKtG,IACjB,IAAIkK,EAAMlK,EAAMqD,OAASrD,EAAMtC,OACT,OAAlBnF,KAAKoQ,WACPuB,EAAM/B,KAAKC,IAAI7P,KAAKoQ,SAAUuB,IAEhC,MAAMiD,EAAahF,KAAKoD,MAAMvL,EAAMqD,OAAS9K,KAAKgS,WAC5C6C,EAAcjF,KAAKoD,MAAMrB,EAAM3R,KAAKgS,WACpC8C,EAAY,IAAIC,YAAYtN,EAAMtC,QAClC6P,EAAY,IAAIrF,WAAWmF,GAEjC,IAAK,IAAIzC,EAAUuC,EAAYvC,GAAWwC,IAAexC,EAAS,CAChE,MAAMC,EAAQmB,EAAOzJ,IAAIqI,GACnB4C,EAAQ3C,EAAMxH,OAASrD,EAAMqD,OAC7BoK,EAAW5C,EAAMX,IAAMA,EAC7B,IAEIwD,EAFAC,EAAmB,EACnBC,EAAmB,EAGnBJ,EAAQ,EACVG,GAAoBH,EACXA,EAAQ,IACjBI,EAAmBJ,GAInBE,EADED,EAAW,EACK5C,EAAMnN,OAASiQ,EAEfzD,EAAMW,EAAMxH,OAASsK,EAGzC,MAAME,EAAY,IAAI3F,WAAW2C,EAAM9M,KAAM4P,EAAkBD,GAC/DH,EAAUpL,IAAI0L,EAAWD,EAC3B,CAEA,OAAOP,CAAS,GAEpB,ECtSK,MAAMS,EAIPC,SACF,OAAOxV,KAAKyV,QAAU,KAAOzV,KAAKyV,QAAU,GAC9C,CAKIA,aACF,MAAM,IAAIvL,MAAM,kBAClB,CAOAwL,UAAUC,GACR,MAAM,IAAIzL,MAAM,kBAClB,CAKAL,gBACE,MAAM,IAAIK,MAAM,kBAClB,EAGK,MAAM0L,EACXpL,YAAYqL,GACV7V,KAAK6V,IAAMA,CACb,CAMAhM,eAAc,QAAE7C,EAAO,YAAE8O,EAAW,OAAEvF,GAAW,CAAC,GAChD,MAAM,IAAIrG,MAAM,6BAClB,ECzCF,MAAM6L,UAAsBR,EAK1B/K,YAAY4J,GACV/C,QACArR,KAAKoU,SAAWA,CAClB,CAEIqB,aACF,OAAOzV,KAAKoU,SAASqB,MACvB,CAEAC,UAAU9T,GACR,OAAO5B,KAAKoU,SAASpN,QAAQgD,IAAIpI,EACnC,CAEAiI,gBACE,MAAMrE,EAAOxF,KAAKoU,SAAS3J,kBACjBzK,KAAKoU,SAAS3J,qBACbzK,KAAKoU,SAASxJ,UAAUA,OACnC,OAAOpF,CACT,EAGK,MAAMwQ,UAAoBJ,EAC/BpL,YAAYqL,EAAKC,GACfzE,MAAMwE,GACN7V,KAAK8V,YAAcA,CACrB,CAEAjM,eAAc,QAAE7C,EAAO,YAAE8O,EAAW,OAAEvF,GAAW,CAAC,GAChD,MAAM6D,QAAiBH,MAAMjU,KAAK6V,IAAK,CACrC7O,UAAS8O,cAAavF,WAExB,OAAO,IAAIwF,EAAc3B,EAC3B,ECpCF,MAAM6B,UAAoBV,EAMxB/K,YAAY0L,EAAK1Q,GACf6L,QACArR,KAAKkW,IAAMA,EACXlW,KAAKwF,KAAOA,CACd,CAEIiQ,aACF,OAAOzV,KAAKkW,IAAIT,MAClB,CAEAC,UAAU9T,GACR,OAAO5B,KAAKkW,IAAIC,kBAAkBvU,EACpC,CAEAiI,gBACE,OAAO7J,KAAKwF,IACd,EAGK,MAAM4Q,UAAkBR,EAC7BS,iBAAiBrP,EAASuJ,GACxB,OAAO,IAAIC,SAAQ,CAACK,EAASyF,KAC3B,MAAMJ,EAAM,IAAIK,eAChBL,EAAIM,KAAK,MAAOxW,KAAK6V,KACrBK,EAAIO,aAAe,cACnB,IAAK,MAAOxV,EAAK+B,KAAUV,OAAOoU,QAAQ1P,GACxCkP,EAAIS,iBAAiB1V,EAAK+B,GAI5BkT,EAAIU,OAAS,KACX,MAAMpR,EAAO0Q,EAAI9B,SACjBvD,EAAQ,IAAIoF,EAAYC,EAAK1Q,GAAM,EAErC0Q,EAAIW,QAAUP,EACdJ,EAAIY,QAAU,IAAMR,EAAO,IAAIlF,EAAW,oBAC1C8E,EAAIa,OAEAxG,IACEA,EAAOiD,SACT0C,EAAIc,QAENzG,EAAO0G,iBAAiB,SAAS,IAAMf,EAAIc,UAC7C,GAEJ,CAEAnN,eAAc,QAAE7C,EAAO,OAAEuJ,GAAW,CAAC,GACnC,MAAM6D,QAAiBpU,KAAKqW,iBAAiBrP,EAASuJ,GACtD,OAAO6D,CACT,E,0DCpDF,MAAM8C,UAAqB3B,EAKzB/K,YAAY4J,EAAU+C,GACpB9F,QACArR,KAAKoU,SAAWA,EAChBpU,KAAKmX,YAAcA,CACrB,CAEI1B,aACF,OAAOzV,KAAKoU,SAASgD,UACvB,CAEA1B,UAAU9T,GACR,OAAO5B,KAAKoU,SAASpN,QAAQpF,EAC/B,CAEAiI,gBACE,MAAMrE,QAAaxF,KAAKmX,YACxB,OAAO3R,CACT,EAGK,MAAM6R,UAAmBzB,EAC9BpL,YAAYqL,GACVxE,MAAMwE,GACN7V,KAAKsX,UAAY,QAAatX,KAAK6V,KACnC7V,KAAKuX,QAAuC,UAA5BvX,KAAKsX,UAAUE,SAAuB,EAAO,CAC/D,CAEAnB,iBAAiBrP,EAASuJ,GACxB,OAAO,IAAIC,SAAQ,CAACK,EAASyF,KAC3B,MAAMmB,EAAUzX,KAAKuX,QAAQvN,IAC3B,IACKhK,KAAKsX,UACRtQ,YAEDoN,IACC,MAAM+C,EAAc,IAAI3G,SAASkH,IAC/B,MAAMC,EAAS,GAGfvD,EAASvT,GAAG,QAAS+W,IACnBD,EAAOpQ,KAAKqQ,EAAM,IAIpBxD,EAASvT,GAAG,OAAO,KACjB,MAAM2E,EAAOqS,EAAOC,OAAOH,GAAQ/M,OACnC8M,EAAYlS,EAAK,IAEnB4O,EAASvT,GAAG,QAASyV,EAAO,IAE9BzF,EAAQ,IAAIqG,EAAa9C,EAAU+C,GAAa,IAGpDM,EAAQ5W,GAAG,QAASyV,GAEhB/F,IACEA,EAAOiD,SACTiE,EAAQM,QAAQ,IAAI3G,EAAW,oBAEjCb,EAAO0G,iBAAiB,SAAS,IAAMQ,EAAQM,QAAQ,IAAI3G,EAAW,sBACxE,GAEJ,CAEAvH,eAAc,QAAE7C,EAAO,OAAEuJ,GAAW,CAAC,GACnC,MAAM6D,QAAiBpU,KAAKqW,iBAAiBrP,EAASuJ,GACtD,OAAO6D,CACT,ECvEF,MAAM4D,UAAqB3H,EAQzB7F,YAAYyN,EAAQjR,EAASkR,EAAWC,GACtC9G,QACArR,KAAKiY,OAASA,EACdjY,KAAKgH,QAAUA,EACfhH,KAAKkY,UAAYA,EACjBlY,KAAKmY,cAAgBA,EACrBnY,KAAKoY,UAAY,IACnB,CAMAvO,YAAYyG,EAAQC,GAGlB,OAAIvQ,KAAKkY,WAAa5H,EAAOnL,OACpBnF,KAAKqY,YAAY/H,EAAQC,IACvBvQ,KAAKkY,UAAY,GAAK5H,EAAOnL,OAajCqL,QAAQC,IACbH,EAAOvC,KAAKtG,GAAUzH,KAAK0Q,WAAWjJ,EAAO8I,MAEjD,CAEA1G,kBAAkByG,EAAQC,GACxB,MAAM6D,QAAiBpU,KAAKiY,OAAOR,QAAQ,CACzCzQ,QAAS,IACJhH,KAAKgH,QACRsR,MAAO,SAAShI,EACbvC,KAAI,EAAGjD,SAAQ3F,YAAa,GAAG2F,KAAUA,EAAS3F,MAClDoT,KAAK,QAGVhI,WAGF,GAAK6D,EAASoB,GAEP,IAAwB,MAApBpB,EAASqB,OAAgB,CAClC,MAAM,KAAEtT,EAAI,OAAEuM,GAAWN,EAAiBgG,EAASsB,UAAU,iBAC7D,GAAa,yBAATvT,EAAiC,CACnC,MAAMqW,EAAatJ,QAAsBkF,EAASqE,UAAW/J,EAAOU,UAEpE,OADApP,KAAKoY,UAAYI,EAAW,GAAGpI,UAAY,KACpCoI,CACT,CAEA,MAAMhT,QAAa4O,EAASqE,WAEtB,MAAE5J,EAAK,IAAEC,EAAG,MAAEC,GAAUJ,EAAkByF,EAASsB,UAAU,kBACnE1V,KAAKoY,UAAYrJ,GAAS,KAC1B,MAAM2J,EAAQ,CAAC,CACblT,OACAsF,OAAQ+D,EACR1J,OAAQ2J,EAAMD,IAGhB,GAAIyB,EAAOnL,OAAS,EAAG,CAMrB,MAAMwT,QAAenI,QAAQC,IAAIH,EAAO7I,MAAM,GAAGsG,KAAKtG,GAAUzH,KAAK0Q,WAAWjJ,EAAO8I,MACvF,OAAOmI,EAAMZ,OAAOa,EACtB,CACA,OAAOD,CACT,CAAO,CACL,IAAK1Y,KAAKmY,cACR,MAAM,IAAIjO,MAAM,mCAElB,MAAM1E,QAAa4O,EAASqE,UAE5B,OADAzY,KAAKoY,UAAY5S,EAAKkH,WACf,CAAC,CACNlH,OACAsF,OAAQ,EACR3F,OAAQK,EAAKkH,YAEjB,EAxCE,MAAM,IAAIxC,MAAM,uBAyCpB,CAEAL,iBAAiBpC,EAAO8I,GACtB,MAAM,OAAEzF,EAAM,OAAE3F,GAAWsC,EACrB2M,QAAiBpU,KAAKiY,OAAOR,QAAQ,CACzCzQ,QAAS,IACJhH,KAAKgH,QACRsR,MAAO,SAASxN,KAAUA,EAAS3F,KAErCoL,WAIF,GAAK6D,EAASoB,GAEP,IAAwB,MAApBpB,EAASqB,OAAgB,CAClC,MAAMjQ,QAAa4O,EAASqE,WAEtB,MAAE1J,GAAUJ,EAAkByF,EAASsB,UAAU,kBAEvD,OADA1V,KAAKoY,UAAYrJ,GAAS,KACnB,CACLvJ,OACAsF,SACA3F,SAEJ,CAAO,CACL,IAAKnF,KAAKmY,cACR,MAAM,IAAIjO,MAAM,mCAGlB,MAAM1E,QAAa4O,EAASqE,UAG5B,OADAzY,KAAKoY,UAAY5S,EAAKkH,WACf,CACLlH,OACAsF,OAAQ,EACR3F,OAAQK,EAAKkH,WAEjB,EAxBE,MAAM,IAAIxC,MAAM,uBAyBpB,CAEIkG,eACF,OAAOpQ,KAAKoY,SACd,EAGF,SAASQ,EAAyB7G,GAAQ,UAAEC,EAAS,UAAEC,IACrD,OAAkB,OAAdD,EACKD,EAEF,IAAID,EAAcC,EAAQ,CAAEC,YAAWC,aAChD,CAEO,SAAS4G,EAAgBhD,GAAK,QAAE7O,EAAU,CAAC,EAAC,YAAE8O,EAAW,UAAEoC,EAAY,EAAC,cAAEC,GAAgB,KAAUW,GAAiB,CAAC,GAC3H,MAAMb,EAAS,IAAIjC,EAAYH,EAAKC,GAC9B/D,EAAS,IAAIiG,EAAaC,EAAQjR,EAASkR,EAAWC,GAC5D,OAAOS,EAAyB7G,EAAQ+G,EAC1C,CAEO,SAASC,EAAclD,GAAK,QAAE7O,EAAU,CAAC,EAAC,UAAEkR,EAAY,EAAC,cAAEC,GAAgB,KAAUW,GAAiB,CAAC,GAC5G,MAAMb,EAAS,IAAI7B,EAAUP,GACvB9D,EAAS,IAAIiG,EAAaC,EAAQjR,EAASkR,EAAWC,GAC5D,OAAOS,EAAyB7G,EAAQ+G,EAC1C,CAEO,SAASE,EAAenD,GAAK,QAAE7O,EAAU,CAAC,EAAC,UAAEkR,EAAY,EAAC,cAAEC,GAAgB,KAAUW,GAAiB,CAAC,GAC7G,MAAMb,EAAS,IAAIZ,EAAWxB,GACxB9D,EAAS,IAAIiG,EAAaC,EAAQjR,EAASkR,EAAWC,GAC5D,OAAOS,EAAyB7G,EAAQ+G,EAC1C,CAOO,SAASG,EAAiBpD,GAAK,SAAEqD,GAAW,KAAUC,GAAkB,CAAC,GAC9E,MAAqB,oBAAVlF,OAAyBiF,EAGN,qBAAnB3C,eACFwC,EAAclD,EAAKsD,GAErBH,EAAenD,EAAKsD,GALlBN,EAAgBhD,EAAKsD,EAMhC,CC5LA,MAAMC,UAAyB/I,EAC7B7F,YAAY6O,GACVhI,QACArR,KAAKqZ,KAAOA,CACd,CAEAxP,iBAAiBpC,EAAO8I,GACtB,OAAO,IAAIC,SAAQ,CAACK,EAASyF,KAC3B,MAAMgD,EAAOtZ,KAAKqZ,KAAK5R,MAAMA,EAAMqD,OAAQrD,EAAMqD,OAASrD,EAAMtC,QAC1DoU,EAAS,IAAIC,WACnBD,EAAO3C,OAAUpQ,GAAUqK,EAAQrK,EAAMiT,OAAO5R,QAChD0R,EAAO1C,QAAUP,EACjBiD,EAAOzC,QAAUR,EACjBiD,EAAOG,kBAAkBJ,GAErB/I,GACFA,EAAO0G,iBAAiB,SAAS,IAAMsC,EAAOvC,SAChD,GAEJ,EAQK,SAAS2C,EAAqBN,GACnC,OAAO,IAAID,EAAiBC,EAC9B,C,eCuBA,SAASO,EAAmBC,GAC1B,OAAQA,GACN,KAAK,UAAiB,KAAK,WAAkB,KAAK,WAAkB,KAAK,eACvE,OAAO,EACT,KAAK,WAAkB,KAAK,YAC1B,OAAO,EACT,KAAK,UAAiB,KAAK,WAAkB,KAAK,WAAkB,KAAK,SACvE,OAAO,EACT,KAAK,cAAqB,KAAK,eAAsB,KAAK,YAC1D,KAAK,WAAkB,KAAK,YAAmB,KAAK,UAClD,OAAO,EACT,QACE,MAAM,IAAIC,WAAW,uBAAuBD,KAElD,CAEA,SAASE,EAAqBhQ,GAC5B,MAAMiQ,EAAqBjQ,EAAckQ,gBACzC,IAAKD,EACH,OAAO,KAGT,MAAME,EAAkB,CAAC,EACzB,IAAK,IAAI9V,EAAI,EAAGA,GAA6B,EAAxB4V,EAAmB,GAAQ5V,GAAK,EAAG,CACtD,MAAMnD,EAAM,KAAY+Y,EAAmB5V,IACrC+V,EAAYH,EAAmB5V,EAAI,GACpC,IAAc4V,EAAmB5V,EAAI,IAAO,KAC3CgW,EAAQJ,EAAmB5V,EAAI,GAC/B0G,EAASkP,EAAmB5V,EAAI,GAEtC,IAAIpB,EAAQ,KACZ,GAAKmX,EAEE,CAEL,GADAnX,EAAQ+G,EAAcoQ,GACD,qBAAVnX,GAAmC,OAAVA,EAClC,MAAM,IAAIkH,MAAM,kCAAkCjJ,OACxB,kBAAV+B,EAChBA,EAAQA,EAAMqX,UAAUvP,EAAQA,EAASsP,EAAQ,GACxCpX,EAAMsX,WACftX,EAAQA,EAAMsX,SAASxP,EAAQA,EAASsP,GAC1B,IAAVA,IACFpX,EAAQA,EAAM,IAGpB,MAbEA,EAAQ8H,EAcVoP,EAAgBjZ,GAAO+B,CACzB,CACA,OAAOkX,CACT,CAEA,SAASK,EAAUC,EAAWX,EAAWO,EAAOtP,GAC9C,IAAI9C,EAAS,KACTyS,EAAa,KACjB,MAAMC,EAAkBd,EAAmBC,GAE3C,OAAQA,GACN,KAAK,UAAiB,KAAK,WAAkB,KAAK,eAChD7R,EAAS,IAAI2H,WAAWyK,GAAQK,EAAaD,EAAU5N,UACvD,MACF,KAAK,WACH5E,EAAS,IAAI2S,UAAUP,GAAQK,EAAaD,EAAU3N,SACtD,MACF,KAAK,WACH7E,EAAS,IAAI4S,YAAYR,GAAQK,EAAaD,EAAU1N,WACxD,MACF,KAAK,YACH9E,EAAS,IAAI6S,WAAWT,GAAQK,EAAaD,EAAUzN,UACvD,MACF,KAAK,UAAiB,KAAK,SACzB/E,EAAS,IAAI8S,YAAYV,GAAQK,EAAaD,EAAUxN,WACxD,MACF,KAAK,WACHhF,EAAS,IAAI+S,WAAWX,GAAQK,EAAaD,EAAUvN,UACvD,MACF,KAAK,WAAkB,KAAK,UAC1BjF,EAAS,IAAI5F,MAAMgY,GAAQK,EAAaD,EAAUpN,WAClD,MACF,KAAK,YACHpF,EAAS,IAAI5F,MAAMgY,GAAQK,EAAaD,EAAUnN,UAClD,MACF,KAAK,cACHrF,EAAS,IAAI8S,YAAoB,EAARV,GAAYK,EAAaD,EAAUxN,WAC5D,MACF,KAAK,eACHhF,EAAS,IAAI+S,WAAmB,EAARX,GAAYK,EAAaD,EAAUvN,UAC3D,MACF,KAAK,WACHjF,EAAS,IAAIgT,aAAaZ,GAAQK,EAAaD,EAAUtN,YACzD,MACF,KAAK,YACHlF,EAAS,IAAIiT,aAAab,GAAQK,EAAaD,EAAUrN,YACzD,MACF,QACE,MAAM,IAAI2M,WAAW,uBAAuBD,KAIhD,GAAMA,IAAc,eAAuBA,IAAc,eACvD,IAAK,IAAIzV,EAAI,EAAGA,EAAIgW,IAAShW,EAC3B4D,EAAO5D,GAAKqW,EAAWnS,KACrBkS,EAAW1P,EAAU1G,EAAIsW,QAI7B,IAAK,IAAItW,EAAI,EAAGA,EAAIgW,EAAOhW,GAAK,EAC9B4D,EAAO5D,GAAKqW,EAAWnS,KACrBkS,EAAW1P,EAAU1G,EAAIsW,GAE3B1S,EAAO5D,EAAI,GAAKqW,EAAWnS,KACzBkS,EAAW1P,GAAW1G,EAAIsW,EAAmB,IAKnD,OAAIb,IAAc,WACT,IAAIvK,YAAY,SAASI,OAAO1H,GAElCA,CACT,CAMA,MAAMkT,EACJ1Q,YAAYT,EAAemQ,EAAiBiB,GAC1Cnb,KAAK+J,cAAgBA,EACrB/J,KAAKka,gBAAkBA,EACvBla,KAAKmb,kBAAoBA,CAC3B,EAOF,MAAMC,UAA+BlR,MACnCM,YAAY6Q,GACVhK,MAAM,qBAAqBgK,KAC3Brb,KAAKqb,MAAQA,CACf,EAGF,MAAMC,EAaJzR,kBAAkB0R,EAAU,CAAC,GAC3B,MAAQC,OAAQC,EAAW,MAAEC,EAAK,OAAEC,GAAWJ,EAC/C,IAAI,KAAEK,EAAI,KAAEC,EAAI,KAAEC,GAASP,EAE3B,MAAMQ,QAAmB/b,KAAKgc,WAC9B,IAAIC,EAAYF,EAChB,MAAMG,QAAmBlc,KAAKmc,gBACxBC,EAAUL,EAAWM,iBAE3B,GAAIZ,GAAeK,EACjB,MAAM,IAAI5R,MAAM,oCAIlB,GAAIwR,GAASC,EAAQ,CAGnB,GAAIF,EAAa,CACf,MAAOa,EAAIC,GAAMR,EAAWS,aACrBC,EAAIC,GAAMX,EAAWY,gBAE5Bb,EAAO,CACLQ,EAAMb,EAAY,GAAKgB,EACvBF,EAAMd,EAAY,GAAKiB,EACvBJ,EAAMb,EAAY,GAAKgB,EACvBF,EAAMd,EAAY,GAAKiB,EAE3B,CAIA,MAAME,EAAWd,GAAQM,EAEzB,GAAIV,EAAO,CACT,GAAIE,EACF,MAAM,IAAI1R,MAAM,8BAElB0R,GAAQgB,EAAS,GAAKA,EAAS,IAAMlB,CACvC,CACA,GAAIC,EAAQ,CACV,GAAIE,EACF,MAAM,IAAI3R,MAAM,8BAElB2R,GAAQe,EAAS,GAAKA,EAAS,IAAMjB,CACvC,CACF,CAGA,GAAIC,GAAQC,EAAM,CAChB,MAAMgB,EAAY,GAClB,IAAK,IAAIzY,EAAI,EAAGA,EAAI8X,IAAc9X,EAAG,CACnC,MAAM0Y,QAAc9c,KAAKgc,SAAS5X,IAC1B2Y,YAAaC,EAAaC,eAAgBC,GAAmBJ,EAAM/S,eACjE,IAAN3F,GAA2B,IAAhB4Y,GAAsC,EAAjBE,IAClCL,EAAUtV,KAAKuV,EAEnB,CAEAD,EAAUrc,MAAK,CAACkH,EAAGC,IAAMD,EAAEyV,WAAaxV,EAAEwV,aAC1C,IAAK,IAAI/Y,EAAI,EAAGA,EAAIyY,EAAU1X,SAAUf,EAAG,CACzC,MAAM0Y,EAAQD,EAAUzY,GAClBgZ,GAAWhB,EAAQ,GAAKA,EAAQ,IAAMU,EAAMK,WAC5CE,GAAWjB,EAAQ,GAAKA,EAAQ,IAAMU,EAAMQ,YAGlD,GADArB,EAAYa,EACPlB,GAAQA,EAAOwB,GAAavB,GAAQA,EAAOwB,EAC9C,KAEJ,CACF,CAEA,IAAIE,EAAM9B,EACV,GAAIK,EAAM,CACR,MAAOQ,EAAIC,GAAMR,EAAWS,aACrBgB,EAAWC,GAAaxB,EAAUU,cAAcZ,GAEvDwB,EAAM,CACJ3N,KAAK8N,OAAO5B,EAAK,GAAKQ,GAAMkB,GAC5B5N,KAAK8N,OAAO5B,EAAK,GAAKS,GAAMkB,GAC5B7N,KAAK8N,OAAO5B,EAAK,GAAKQ,GAAMkB,GAC5B5N,KAAK8N,OAAO5B,EAAK,GAAKS,GAAMkB,IAE9BF,EAAM,CACJ3N,KAAKC,IAAI0N,EAAI,GAAIA,EAAI,IACrB3N,KAAKC,IAAI0N,EAAI,GAAIA,EAAI,IACrB3N,KAAK+N,IAAIJ,EAAI,GAAIA,EAAI,IACrB3N,KAAK+N,IAAIJ,EAAI,GAAIA,EAAI,IAEzB,CAEA,OAAOtB,EAAU2B,YAAY,IAAKrC,EAASC,OAAQ+B,GACrD,EAYF,MAAMM,UAAgBvC,EAUpB9Q,YAAYuH,EAAQhH,EAAcsB,EAASyR,EAAgBvC,EAAU,CAAC,GACpElK,QACArR,KAAK+R,OAASA,EACd/R,KAAK+K,aAAeA,EACpB/K,KAAKqM,QAAUA,EACfrM,KAAK8d,eAAiBA,EACtB9d,KAAK+d,MAAQxC,EAAQwC,QAAS,EAC9B/d,KAAKge,YAAc,GACnBhe,KAAKie,YAAc,IACrB,CAEApU,eAAeiB,EAAQ+I,GACrB,MAAMqK,EAAele,KAAKqM,QAAU,KAAO,KAC3C,OAAO,IAAIF,SACFnM,KAAK+R,OAAOkC,MAAM,CAAC,CACxBnJ,SACA3F,OAAwB,qBAAT0O,EAAuBA,EAAOqK,MAC1C,GACLpT,EACA9K,KAAK+K,aACL/K,KAAKqM,QAET,CAUAxC,2BAA2BiB,GACzB,MAAMqT,EAAYne,KAAKqM,QAAU,GAAK,GAChC+R,EAAape,KAAKqM,QAAU,EAAI,EAEtC,IAAImO,QAAkBxa,KAAKqe,SAASvT,GACpC,MAAMwT,EAAgBte,KAAKqM,QACvBmO,EAAUpN,WAAWtC,GACrB0P,EAAU1N,WAAWhC,GAInByT,EAAYD,EAAgBH,GAAcne,KAAKqM,QAAU,GAAK,GAC/DmO,EAAU7N,OAAO7B,EAAQyT,KAC5B/D,QAAkBxa,KAAKqe,SAASvT,EAAQyT,IAG1C,MAAMxU,EAAgB,CAAC,EAGvB,IAAI3F,EAAI0G,GAAU9K,KAAKqM,QAAU,EAAI,GACrC,IAAK,IAAImS,EAAa,EAAGA,EAAaF,EAAela,GAAK+Z,IAAaK,EAAY,CACjF,MAAMC,EAAWjE,EAAU1N,WAAW1I,GAChCyV,EAAYW,EAAU1N,WAAW1I,EAAI,GACrCsa,EAAY1e,KAAKqM,QACnBmO,EAAUpN,WAAWhJ,EAAI,GACzBoW,EAAUxN,WAAW5I,EAAI,GAE7B,IAAIua,EACA3b,EACJ,MAAM0X,EAAkBd,EAAmBC,GACrC+E,EAAcxa,GAAKpE,KAAKqM,QAAU,GAAK,GAI7C,GAAIqO,EAAkBgE,IAAc1e,KAAKqM,QAAU,EAAI,GACrDsS,EAAcpE,EAAUC,EAAWX,EAAW6E,EAAWE,OACpD,CAEL,MAAMC,EAAerE,EAAUlN,WAAWsR,GACpCzZ,EAASyU,EAAmBC,GAAa6E,EAI/C,GAAIlE,EAAU7N,OAAOkS,EAAc1Z,GACjCwZ,EAAcpE,EAAUC,EAAWX,EAAW6E,EAAWG,OACpD,CACL,MAAMC,QAAuB9e,KAAKqe,SAASQ,EAAc1Z,GACzDwZ,EAAcpE,EAAUuE,EAAgBjF,EAAW6E,EAAWG,EAChE,CACF,CAKE7b,EAFgB,IAAd0b,IAAsD,IAAnC,aAAoBD,IACpC5E,IAAc,eAAuBA,IAAc,eAChD8E,EAAY,GAEZA,EAIV5U,EAAc,IAAc0U,IAAazb,CAC3C,CACA,MAAMkX,EAAkBH,EAAqBhQ,GACvCoR,EAAoBX,EAAUlN,WAClCxC,EAASsT,EAAcD,EAAYG,GAGrC,OAAO,IAAIpD,EACTnR,EACAmQ,EACAiB,EAEJ,CAEAtR,iBAAiBwR,GAEf,GAAIrb,KAAKge,YAAY3C,GAEnB,OAAOrb,KAAKge,YAAY3C,GACnB,GAAc,IAAVA,EAGT,OADArb,KAAKge,YAAY3C,GAASrb,KAAK+e,qBAAqB/e,KAAK8d,gBAClD9d,KAAKge,YAAY3C,GACnB,IAAKrb,KAAKge,YAAY3C,EAAQ,GAGnC,IACErb,KAAKge,YAAY3C,EAAQ,GAAKrb,KAAKgf,WAAW3D,EAAQ,EACxD,CAAE,MAAO4D,GAGP,GAAIA,aAAa7D,EACf,MAAM,IAAIA,EAAuBC,GAGnC,MAAM4D,CACR,CAWF,OAPAjf,KAAKge,YAAY3C,GAAS,WACxB,MAAM6D,QAAoBlf,KAAKge,YAAY3C,EAAQ,GACnD,GAAsC,IAAlC6D,EAAY/D,kBACd,MAAM,IAAIC,EAAuBC,GAEnC,OAAOrb,KAAK+e,qBAAqBG,EAAY/D,kBAC9C,EANyB,GAOnBnb,KAAKge,YAAY3C,EAC1B,CAQAxR,eAAewR,EAAQ,GACrB,MAAM8D,QAAYnf,KAAKgf,WAAW3D,GAClC,OAAO,IAAI,IACT8D,EAAIpV,cAAeoV,EAAIjF,gBACvBla,KAAKof,SAAUpf,KAAK+K,aAAc/K,KAAK+d,MAAO/d,KAAK+R,OAEvD,CAOAlI,sBACE,IAAIwR,EAAQ,EAERgE,GAAU,EACd,MAAOA,EACL,UACQrf,KAAKgf,WAAW3D,KACpBA,CACJ,CAAE,MAAO4D,GACP,KAAIA,aAAa7D,GAGf,MAAM6D,EAFNI,GAAU,CAId,CAEF,OAAOhE,CACT,CAOAxR,uBACE,MAAMiB,EAAS9K,KAAKqM,QAAU,GAAK,EACnC,GAAIrM,KAAKie,YACP,OAAOje,KAAKie,YAEd,MAAMqB,EAAkB,iCAClBC,EAAoBD,EAAgBna,OAAS,IACnD,IAAIsC,QAAczH,KAAKqe,SAASvT,EAAQyU,GACxC,GAAID,IAAoB/E,EAAU9S,EAAO,WAAkB6X,EAAgBna,OAAQ2F,GAAS,CAC1F,MAAM0U,EAAejF,EAAU9S,EAAO,WAAkB8X,EAAmBzU,GACrE2U,EAAYD,EAAa1R,MAAM,MAAM,GACrC4R,EAAetU,OAAOqU,EAAU3R,MAAM,KAAK,GAAGA,MAAM,KAAK,IAAM2R,EAAUta,OAC3Eua,EAAeH,IACjB9X,QAAczH,KAAKqe,SAASvT,EAAQ4U,IAEtC,MAAMC,EAAapF,EAAU9S,EAAO,WAAkBiY,EAAc5U,GACpE9K,KAAKie,YAAc,CAAC,EACpB0B,EACG7R,MAAM,MACNhG,QAAQkG,GAASA,EAAK7I,OAAS,IAC/B4I,KAAKC,GAASA,EAAKF,MAAM,OACzBpE,SAAQ,EAAEzI,EAAK+B,MACdhD,KAAKie,YAAYhd,GAAO+B,CAAK,GAEnC,CACA,OAAOhD,KAAKie,WACd,CAUA2B,wBAAwB7N,EAAQwJ,EAAShL,GACvC,MAAMsP,SAAoB9N,EAAOkC,MAAM,CAAC,CAAEnJ,OAAQ,EAAG3F,OAAQ,OAASoL,IAAS,GACzE6O,EAAW,IAAI7U,EAAWsV,GAE1BC,EAAMV,EAASxT,UAAU,EAAG,GAClC,IAAIb,EACJ,GAAY,QAAR+U,EACF/U,GAAe,MACV,IAAY,QAAR+U,EAGT,MAAM,IAAIC,UAAU,6BAFpBhV,GAAe,CAGjB,CAEA,MAAMiV,EAAcZ,EAASxT,UAAU,EAAGb,GAC1C,IAAIsB,EACJ,GAAoB,KAAhB2T,EACF3T,GAAU,MACL,IAAoB,KAAhB2T,EAOT,MAAM,IAAID,UAAU,yBAPS,CAC7B1T,GAAU,EACV,MAAM4T,EAAiBb,EAASxT,UAAU,EAAGb,GAC7C,GAAuB,IAAnBkV,EACF,MAAM,IAAI/V,MAAM,gCAEpB,CAEA,CAEA,MAAM4T,EAAiBzR,EACnB+S,EAASvU,UAAU,EAAGE,GACtBqU,EAASnU,UAAU,EAAGF,GAC1B,OAAO,IAAI8S,EAAQ9L,EAAQhH,EAAcsB,EAASyR,EAAgBvC,EACpE,CAOA2E,QACE,MAAiC,oBAAtBlgB,KAAK+R,OAAOmO,OACdlgB,KAAK+R,OAAOmO,OAGvB,EAUF,MAAMC,UAAqB7E,EAMzB9Q,YAAY4V,EAAUC,GACpBhP,QACArR,KAAKogB,SAAWA,EAChBpgB,KAAKqgB,cAAgBA,EACrBrgB,KAAKsgB,WAAa,CAACF,GAAUtI,OAAOuI,GAEpCrgB,KAAKugB,uBAAyB,KAC9BvgB,KAAKwgB,8BAAgC,KACrCxgB,KAAKkc,WAAa,IACpB,CAEArS,oCACE,MAAM4W,EAAW,CAACzgB,KAAKogB,SAASrB,qBAAqB/e,KAAKogB,SAAStC,iBAChEhG,OAAO9X,KAAKqgB,cAActS,KAAKsL,GAASA,EAAK0F,qBAAqB1F,EAAKyE,mBAG1E,OADA9d,KAAKugB,6BAA+B/P,QAAQC,IAAIgQ,GACzCzgB,KAAKugB,sBACd,CAQA1W,eAAewR,EAAQ,SACfrb,KAAKmc,sBACLnc,KAAK0gB,8BACX,IAAIC,EAAU,EACVC,EAAgB,EACpB,IAAK,IAAIxc,EAAI,EAAGA,EAAIpE,KAAKsgB,WAAWnb,OAAQf,IAAK,CAC/C,MAAMyc,EAAY7gB,KAAKsgB,WAAWlc,GAClC,IAAK,IAAI0c,EAAK,EAAGA,EAAK9gB,KAAK+gB,YAAY3c,GAAI0c,IAAM,CAC/C,GAAIzF,IAAUsF,EAAS,CACrB,MAAMxB,QAAY0B,EAAU7B,WAAW4B,GACvC,OAAO,IAAI,IACTzB,EAAIpV,cAAeoV,EAAIjF,gBACvB2G,EAAUzB,SAAUyB,EAAU9V,aAAc8V,EAAU9C,MAAO8C,EAAU9O,OAE3E,CACA4O,IACAC,GACF,CACAA,EAAgB,CAClB,CAEA,MAAM,IAAI9G,WAAW,sBACvB,CAOAjQ,sBACE,GAAwB,OAApB7J,KAAKkc,WACP,OAAOlc,KAAKkc,WAEd,MAAMuE,EAAW,CAACzgB,KAAKogB,SAASjE,iBAC7BrE,OAAO9X,KAAKqgB,cAActS,KAAKsL,GAASA,EAAK8C,mBAGhD,OAFAnc,KAAK+gB,kBAAoBvQ,QAAQC,IAAIgQ,GACrCzgB,KAAKkc,WAAalc,KAAK+gB,YAAYC,QAAO,CAAC5G,EAAO6G,IAAS7G,EAAQ6G,GAAM,GAClEjhB,KAAKkc,UACd,EAcKrS,eAAeqX,EAAQrL,EAAK0F,EAAU,CAAC,EAAGhL,GAC/C,OAAOsN,EAAQsD,WAAWlI,EAAiBpD,EAAK0F,GAAUhL,EAC5D,CAwCO1G,eAAeuX,EAAS9H,EAAM/I,GACnC,OAAOsN,EAAQsD,WAAWxH,EAAqBL,GAAO/I,EACxD,CAaO1G,eAAewX,GAASC,EAASC,EAAe,GAAIhG,EAAU,CAAC,EAAGhL,GACvE,MAAM6P,QAAiBvC,EAAQsD,WAAWlI,EAAiBqI,EAAS/F,GAAUhL,GACxE8P,QAAsB7P,QAAQC,IAClC8Q,EAAaxT,KAAK8H,GAAQgI,EAAQsD,WAAWlI,EAAiBpD,EAAK0F,OAGrE,OAAO,IAAI4E,EAAaC,EAAUC,EACpC,C,mFC1uBO,SAASmB,EAAgBC,EAAQ9D,GACtC,MAAM,MAAEjC,EAAK,OAAEC,GAAW8F,EACpBC,EAAY,IAAI/R,WAAW+L,EAAQC,EAAS,GAClD,IAAI3Y,EACJ,IAAK,IAAIoB,EAAI,EAAGud,EAAI,EAAGvd,EAAIqd,EAAOtc,SAAUf,EAAGud,GAAK,EAClD3e,EAAQ,IAAOye,EAAOrd,GAAKuZ,EAAM,IACjC+D,EAAUC,GAAK3e,EACf0e,EAAUC,EAAI,GAAK3e,EACnB0e,EAAUC,EAAI,GAAK3e,EAErB,OAAO0e,CACT,CAEO,SAASE,EAAgBH,EAAQ9D,GACtC,MAAM,MAAEjC,EAAK,OAAEC,GAAW8F,EACpBC,EAAY,IAAI/R,WAAW+L,EAAQC,EAAS,GAClD,IAAI3Y,EACJ,IAAK,IAAIoB,EAAI,EAAGud,EAAI,EAAGvd,EAAIqd,EAAOtc,SAAUf,EAAGud,GAAK,EAClD3e,EAAQye,EAAOrd,GAAKuZ,EAAM,IAC1B+D,EAAUC,GAAK3e,EACf0e,EAAUC,EAAI,GAAK3e,EACnB0e,EAAUC,EAAI,GAAK3e,EAErB,OAAO0e,CACT,CAEO,SAASG,EAAYJ,EAAQK,GAClC,MAAM,MAAEpG,EAAK,OAAEC,GAAW8F,EACpBC,EAAY,IAAI/R,WAAW+L,EAAQC,EAAS,GAC5CoG,EAAcD,EAAS3c,OAAS,EAChC6c,EAAaF,EAAS3c,OAAS,EAAI,EACzC,IAAK,IAAIf,EAAI,EAAGud,EAAI,EAAGvd,EAAIqd,EAAOtc,SAAUf,EAAGud,GAAK,EAAG,CACrD,MAAMM,EAAWR,EAAOrd,GACxBsd,EAAUC,GAAKG,EAASG,GAAY,MAAQ,IAC5CP,EAAUC,EAAI,GAAKG,EAASG,EAAWF,GAAe,MAAQ,IAC9DL,EAAUC,EAAI,GAAKG,EAASG,EAAWD,GAAc,MAAQ,GAC/D,CACA,OAAON,CACT,CAEO,SAASQ,EAASC,GACvB,MAAM,MAAEzG,EAAK,OAAEC,GAAWwG,EACpBT,EAAY,IAAI/R,WAAW+L,EAAQC,EAAS,GAClD,IAAK,IAAIvX,EAAI,EAAGud,EAAI,EAAGvd,EAAI+d,EAAWhd,OAAQf,GAAK,EAAGud,GAAK,EAAG,CAC5D,MAAMhY,EAAIwY,EAAW/d,GACfkG,EAAI6X,EAAW/d,EAAI,GACnBge,EAAID,EAAW/d,EAAI,GACnB+M,EAAIgR,EAAW/d,EAAI,GAEzBsd,EAAUC,IAAa,IAAMhY,GAAK,IAAnB,MAA4B,IAAMwH,GAAK,KACtDuQ,EAAUC,EAAI,IAAa,IAAMrX,GAAK,IAAnB,MAA4B,IAAM6G,GAAK,KAC1DuQ,EAAUC,EAAI,IAAa,IAAMS,GAAK,IAAnB,MAA4B,IAAMjR,GAAK,IAC5D,CACA,OAAOuQ,CACT,CAEO,SAASW,EAAUC,GACxB,MAAM,MAAE5G,EAAK,OAAEC,GAAW2G,EACpBZ,EAAY,IAAIa,kBAAkB7G,EAAQC,EAAS,GACzD,IAAK,IAAIvX,EAAI,EAAGud,EAAI,EAAGvd,EAAIke,EAAYnd,OAAQf,GAAK,EAAGud,GAAK,EAAG,CAC7D,MAAMS,EAAIE,EAAYle,GAChBoe,EAAKF,EAAYle,EAAI,GACrBqe,EAAKH,EAAYle,EAAI,GAE3Bsd,EAAUC,GAAMS,EAAK,OAAWK,EAAK,KACrCf,EAAUC,EAAI,GAAMS,EAAK,QAAWI,EAAK,KAAU,QAAWC,EAAK,KACnEf,EAAUC,EAAI,GAAMS,EAAK,OAAWI,EAAK,IAC3C,CACA,OAAOd,CACT,CAEA,MAAMgB,EAAK,OACLC,EAAK,EACLC,EAAK,QAIJ,SAASC,EAAWC,GACzB,MAAM,MAAEpH,EAAK,OAAEC,GAAWmH,EACpBpB,EAAY,IAAI/R,WAAW+L,EAAQC,EAAS,GAElD,IAAK,IAAIvX,EAAI,EAAGud,EAAI,EAAGvd,EAAI0e,EAAa3d,OAAQf,GAAK,EAAGud,GAAK,EAAG,CAC9D,MAAMoB,EAAID,EAAa1e,EAAI,GACrB4e,EAAKF,EAAa1e,EAAI,IAAM,IAAM,GAClC6e,EAAKH,EAAa1e,EAAI,IAAM,IAAM,GAExC,IAGI8e,EACAlX,EACArE,EALAya,GAAKW,EAAI,IAAM,IACfI,EAAKH,EAAK,IAAOZ,EACjBgB,EAAIhB,EAAKa,EAAK,IAKlBE,EAAIT,GAAOS,EAAIA,EAAIA,EAAI,QAAYA,EAAIA,EAAIA,GAAKA,EAAK,GAAK,KAAQ,OAClEf,EAAIO,GAAOP,EAAIA,EAAIA,EAAI,QAAYA,EAAIA,EAAIA,GAAKA,EAAK,GAAK,KAAQ,OAClEgB,EAAIR,GAAOQ,EAAIA,EAAIA,EAAI,QAAYA,EAAIA,EAAIA,GAAKA,EAAK,GAAK,KAAQ,OAElEF,EAAS,OAAJC,GAAoB,OAALf,GAAqB,MAALgB,EACpCpX,GAAU,MAALmX,EAAoB,OAAJf,EAAmB,MAAJgB,EACpCzb,EAAS,MAAJwb,GAAoB,KAALf,EAAoB,MAAJgB,EAEpCF,EAAKA,EAAI,SAAe,MAASA,IAAM,EAAI,KAAS,KAAS,MAAQA,EACrElX,EAAKA,EAAI,SAAe,MAASA,IAAM,EAAI,KAAS,KAAS,MAAQA,EACrErE,EAAKA,EAAI,SAAe,MAASA,IAAM,EAAI,KAAS,KAAS,MAAQA,EAErE+Z,EAAUC,GAAmC,IAA9B/R,KAAK+N,IAAI,EAAG/N,KAAKC,IAAI,EAAGqT,IACvCxB,EAAUC,EAAI,GAAmC,IAA9B/R,KAAK+N,IAAI,EAAG/N,KAAKC,IAAI,EAAG7D,IAC3C0V,EAAUC,EAAI,GAAmC,IAA9B/R,KAAK+N,IAAI,EAAG/N,KAAKC,IAAI,EAAGlI,GAC7C,CACA,OAAO+Z,CACT,C,eC1GA,SAAS2B,EAAYC,EAAO5H,EAAOC,EAAQ4H,EAAkB,GAC3D,OAAO,IAAKjhB,OAAOkhB,eAAeF,GAAkB,aAAE5H,EAAQC,EAAS4H,EACzE,CAWO,SAASE,EAAgBC,EAAaC,EAASC,EAAUC,EAAUC,GACxE,MAAMC,EAAOJ,EAAUE,EACjBG,EAAOJ,EAAWE,EACxB,OAAOJ,EAAY3V,KAAKuV,IACtB,MAAMW,EAAWZ,EAAYC,EAAOO,EAAUC,GAC9C,IAAK,IAAI1B,EAAI,EAAGA,EAAI0B,IAAa1B,EAAG,CAClC,MAAM8B,EAAKtU,KAAKC,IAAID,KAAK8N,MAAMsG,EAAO5B,GAAIwB,EAAW,GACrD,IAAK,IAAIT,EAAI,EAAGA,EAAIU,IAAYV,EAAG,CACjC,MAAMgB,EAAKvU,KAAKC,IAAID,KAAK8N,MAAMqG,EAAOZ,GAAIQ,EAAU,GAC9C3gB,EAAQsgB,EAAOY,EAAKP,EAAWQ,GACrCF,EAAU7B,EAAIyB,EAAYV,GAAKngB,CACjC,CACF,CACA,OAAOihB,CAAQ,GAEnB,CAIA,SAASG,EAAKC,EAAIC,EAAI/P,GACpB,OAAS,EAAIA,GAAK8P,EAAO9P,EAAI+P,CAC/B,CAWO,SAASC,EAAiBb,EAAaC,EAASC,EAAUC,EAAUC,GACzE,MAAMC,EAAOJ,EAAUE,EACjBG,EAAOJ,EAAWE,EAExB,OAAOJ,EAAY3V,KAAKuV,IACtB,MAAMW,EAAWZ,EAAYC,EAAOO,EAAUC,GAC9C,IAAK,IAAI1B,EAAI,EAAGA,EAAI0B,IAAa1B,EAAG,CAClC,MAAMoC,EAAOR,EAAO5B,EAEdqC,EAAK7U,KAAKoD,MAAMwR,GAChBE,EAAK9U,KAAKC,IAAID,KAAK+U,KAAKH,GAAQZ,EAAW,GAEjD,IAAK,IAAIT,EAAI,EAAGA,EAAIU,IAAYV,EAAG,CACjC,MAAMyB,EAAOb,EAAOZ,EACd0B,EAAKD,EAAO,EAEZE,EAAKlV,KAAKoD,MAAM4R,GAChBG,EAAKnV,KAAKC,IAAID,KAAK+U,KAAKC,GAAQjB,EAAU,GAE1CqB,EAAK1B,EAAOmB,EAAKd,EAAWmB,GAC5BG,EAAK3B,EAAOmB,EAAKd,EAAWoB,GAC5BG,EAAK5B,EAAOoB,EAAKf,EAAWmB,GAC5BK,EAAK7B,EAAOoB,EAAKf,EAAWoB,GAE5B/hB,EAAQohB,EACZA,EAAKY,EAAIC,EAAIJ,GACbT,EAAKc,EAAIC,EAAIN,GACbL,EAAO,GAETP,EAAU7B,EAAIyB,EAAYV,GAAKngB,CACjC,CACF,CACA,OAAOihB,CAAQ,GAEnB,CAYO,SAASmB,EAAS1B,EAAaC,EAASC,EAAUC,EAAUC,EAAWuB,EAAS,WACrF,OAAQA,EAAOtd,eACb,IAAK,UACH,OAAO0b,EAAgBC,EAAaC,EAASC,EAAUC,EAAUC,GACnE,IAAK,WACL,IAAK,SACH,OAAOS,EAAiBb,EAAaC,EAASC,EAAUC,EAAUC,GACpE,QACE,MAAM,IAAI5Z,MAAM,mCAAmCmb,MAEzD,CAaO,SAASC,EACdC,EAAY5B,EAASC,EAAUC,EAAUC,EAAW0B,GACpD,MAAMzB,EAAOJ,EAAUE,EACjBG,EAAOJ,EAAWE,EAElBG,EAAWZ,EAAYkC,EAAY1B,EAAUC,EAAW0B,GAC9D,IAAK,IAAIpD,EAAI,EAAGA,EAAI0B,IAAa1B,EAAG,CAClC,MAAM8B,EAAKtU,KAAKC,IAAID,KAAK8N,MAAMsG,EAAO5B,GAAIwB,EAAW,GACrD,IAAK,IAAIT,EAAI,EAAGA,EAAIU,IAAYV,EAAG,CACjC,MAAMgB,EAAKvU,KAAKC,IAAID,KAAK8N,MAAMqG,EAAOZ,GAAIQ,EAAU,GACpD,IAAK,IAAIvf,EAAI,EAAGA,EAAIohB,IAAWphB,EAAG,CAChC,MAAMpB,EAAQuiB,EAAYrB,EAAKP,EAAU6B,EAAYrB,EAAKqB,EAAWphB,GACrE6f,EAAU7B,EAAIyB,EAAW2B,EAAYrC,EAAIqC,EAAWphB,GAAKpB,CAC3D,CACF,CACF,CACA,OAAOihB,CACT,CAaO,SAASwB,EACdF,EAAY5B,EAASC,EAAUC,EAAUC,EAAW0B,GACpD,MAAMzB,EAAOJ,EAAUE,EACjBG,EAAOJ,EAAWE,EAClBG,EAAWZ,EAAYkC,EAAY1B,EAAUC,EAAW0B,GAC9D,IAAK,IAAIpD,EAAI,EAAGA,EAAI0B,IAAa1B,EAAG,CAClC,MAAMoC,EAAOR,EAAO5B,EAEdqC,EAAK7U,KAAKoD,MAAMwR,GAChBE,EAAK9U,KAAKC,IAAID,KAAK+U,KAAKH,GAAQZ,EAAW,GAEjD,IAAK,IAAIT,EAAI,EAAGA,EAAIU,IAAYV,EAAG,CACjC,MAAMyB,EAAOb,EAAOZ,EACd0B,EAAKD,EAAO,EAEZE,EAAKlV,KAAKoD,MAAM4R,GAChBG,EAAKnV,KAAKC,IAAID,KAAK+U,KAAKC,GAAQjB,EAAU,GAEhD,IAAK,IAAIvf,EAAI,EAAGA,EAAIohB,IAAWphB,EAAG,CAChC,MAAM4gB,EAAKO,EAAYd,EAAKd,EAAU6B,EAAYV,EAAKU,EAAWphB,GAC5D6gB,EAAKM,EAAYd,EAAKd,EAAU6B,EAAYT,EAAKS,EAAWphB,GAC5D8gB,EAAKK,EAAYb,EAAKf,EAAU6B,EAAYV,EAAKU,EAAWphB,GAC5D+gB,EAAKI,EAAYb,EAAKf,EAAU6B,EAAYT,EAAKS,EAAWphB,GAE5DpB,EAAQohB,EACZA,EAAKY,EAAIC,EAAIJ,GACbT,EAAKc,EAAIC,EAAIN,GACbL,EAAO,GAETP,EAAU7B,EAAIyB,EAAW2B,EAAYrC,EAAIqC,EAAWphB,GAAKpB,CAC3D,CACF,CACF,CACA,OAAOihB,CACT,CAcO,SAASyB,EAAoBH,EAAY5B,EAASC,EAAUC,EAAUC,EAAW0B,EAASH,EAAS,WACxG,OAAQA,EAAOtd,eACb,IAAK,UACH,OAAOud,EACLC,EAAY5B,EAASC,EAAUC,EAAUC,EAAW0B,GAExD,IAAK,WACL,IAAK,SACH,OAAOC,EACLF,EAAY5B,EAASC,EAAUC,EAAUC,EAAW0B,GAExD,QACE,MAAM,IAAItb,MAAM,mCAAmCmb,MAEzD,CC9KA,SAASM,EAAIrC,EAAOzU,EAAOC,GACzB,IAAIP,EAAI,EACR,IAAK,IAAInK,EAAIyK,EAAOzK,EAAI0K,IAAO1K,EAC7BmK,GAAK+U,EAAMlf,GAEb,OAAOmK,CACT,CAEA,SAASqX,EAAave,EAAQwe,EAAehS,GAC3C,OAAQxM,GACN,KAAK,EACH,GAAIwe,GAAiB,EACnB,OAAO,IAAIlW,WAAWkE,GACjB,GAAIgS,GAAiB,GAC1B,OAAO,IAAIjL,YAAY/G,GAClB,GAAIgS,GAAiB,GAC1B,OAAO,IAAI/K,YAAYjH,GAEzB,MACF,KAAK,EACH,GAAsB,IAAlBgS,EACF,OAAO,IAAIlL,UAAU9G,GAChB,GAAsB,KAAlBgS,EACT,OAAO,IAAIhL,WAAWhH,GACjB,GAAsB,KAAlBgS,EACT,OAAO,IAAI9K,WAAWlH,GAExB,MACF,KAAK,EACH,OAAQgS,GACN,KAAK,GACL,KAAK,GACH,OAAO,IAAI7K,aAAanH,GAC1B,KAAK,GACH,OAAO,IAAIoH,aAAapH,GAC1B,QACE,MAEJ,MACF,QACE,MAEJ,MAAM3J,MAAM,wCACd,CAEA,SAAS4b,EAAmBze,EAAQwe,GAClC,OAAgB,IAAXxe,GAA2B,IAAXA,KAAiBwe,GAAiB,KAAMA,EAAgB,IAAM,KAE7D,IAAXxe,GAAmC,KAAlBwe,GAA0C,KAAlBA,GAA0C,KAAlBA,EAI9E,CAEA,SAASE,EAAeC,EAAU3e,EAAQ4e,EAAqB1C,EAAiBsC,EAAeK,EAAWC,GAExG,MAAMjhB,EAAO,IAAIyF,SAASqb,GACpBI,EAAkC,IAAxBH,EACZE,EAAaD,EACbC,EAAaD,EAAY3C,EACvB8C,EAA4C,IAAxBJ,EACtB,EAAI1C,EACF+C,EAAWV,EAAave,EAAQwe,EAAeO,GAG/CG,EAAUtX,SAAS,IAAIuX,OAAOX,GAAgB,GAEpD,GAAe,IAAXxe,EAAc,CAEhB,IAAIof,EAGFA,EAD0B,IAAxBR,EACa1C,EAAkBsC,EAGlBA,EAIjB,IAAIa,EAAcR,EAAYO,EACJ,KAAP,EAAdC,KACHA,EAAeA,EAAc,GAAK,GAGpC,IAAK,IAAItE,EAAI,EAAGA,EAAI+D,IAAc/D,EAAG,CACnC,MAAMuE,EAAgBvE,EAAIsE,EAC1B,IAAK,IAAIvD,EAAI,EAAGA,EAAI+C,IAAa/C,EAAG,CAClC,MAAMyD,EAAiBD,EAAiBxD,EAAIkD,EAAoBR,EAChE,IAAK,IAAIzhB,EAAI,EAAGA,EAAIiiB,IAAqBjiB,EAAG,CAC1C,MAAMyiB,EAAYD,EAAkBxiB,EAAIyhB,EAClCiB,GAAc1E,EAAI8D,EAAa/C,GAAKkD,EAAqBjiB,EAEzD2iB,EAAanX,KAAKoD,MAAM6T,EAAY,GACpCG,EAAiBH,EAAY,EACnC,GAAIG,EAAiBnB,GAAiB,EACpCS,EAASQ,GAAa5hB,EAAKsG,SAASub,IAAgB,EAAIlB,EAAiBmB,EAAkBT,OACtF,GAAIS,EAAiBnB,GAAiB,GAC3CS,EAASQ,GAAa5hB,EAAK0G,UAAUmb,IAAgB,GAAKlB,EAAiBmB,EAAkBT,OACxF,GAAIS,EAAiBnB,GAAiB,GAAI,CAC/C,MAAMoB,EAAO/hB,EAAK0G,UAAUmb,IAAe,EAAM7hB,EAAKsG,SAASub,EAAa,GAC5ET,EAASQ,GAAaG,GAAQ,GAAKpB,EAAiBmB,EAAkBT,CACxE,MACED,EAASQ,GAAa5hB,EAAK+F,UAAU8b,IAAgB,GAAKlB,EAAiBmB,EAAkBT,CAejG,CAEF,CACF,CACF,CAYA,OAAOD,EAAS1b,MAClB,CAKA,MAAMsc,EAUJ1c,YAAYT,EAAeod,EAAS/H,EAAUrU,EAAcgT,EAAOhM,GACjE/R,KAAK+J,cAAgBA,EACrB/J,KAAKmnB,QAAUA,EACfnnB,KAAKof,SAAWA,EAChBpf,KAAK+K,aAAeA,EACpB/K,KAAKonB,MAAQrJ,EAAQ,CAAC,EAAI,KAC1B/d,KAAKqnB,SAAWtd,EAAcud,aAC9B,MAAMrB,EAAsBlc,EAAcwd,oBAE1C,GADAvnB,KAAKimB,oBAAsD,qBAAxBA,EAAuC,EAAIA,EAC7C,IAA7BjmB,KAAKimB,qBAA0D,IAA7BjmB,KAAKimB,oBACzC,MAAM,IAAI/b,MAAM,iCAGlBlK,KAAK+R,OAASA,CAChB,CAMAyV,mBACE,OAAOxnB,KAAK+J,aACd,CAMA0d,aACE,OAAOznB,KAAKmnB,OACd,CAMAhK,WACE,OAAOnd,KAAK+J,cAAc2d,UAC5B,CAMApK,YACE,OAAOtd,KAAK+J,cAAc4d,WAC5B,CAMAC,qBACE,MAAqD,qBAAvC5nB,KAAK+J,cAAc8d,gBAC7B7nB,KAAK+J,cAAc8d,gBAAkB,CAC3C,CAMAC,eACE,OAAO9nB,KAAKqnB,QAAUrnB,KAAK+J,cAAcge,UAAY/nB,KAAKmd,UAC5D,CAMA6K,gBACE,OAAIhoB,KAAKqnB,QACArnB,KAAK+J,cAAcke,WAEmB,qBAApCjoB,KAAK+J,cAAcme,aACrBtY,KAAKC,IAAI7P,KAAK+J,cAAcme,aAAcloB,KAAKsd,aAEjDtd,KAAKsd,WACd,CAEA6K,gBACE,OAAOnoB,KAAK8nB,cACd,CAEAM,eAAehG,GACb,OAAIpiB,KAAKqnB,UAAYjF,EAAI,GAAKpiB,KAAKgoB,iBAAmBhoB,KAAKsd,YAClDtd,KAAKgoB,gBAELhoB,KAAKsd,YAAe8E,EAAIpiB,KAAKgoB,eAExC,CAOAK,mBACE,IAAIC,EAAQ,EACZ,IAAK,IAAIlkB,EAAI,EAAGA,EAAIpE,KAAK+J,cAAcwe,cAAcpjB,SAAUf,EAC7DkkB,GAAStoB,KAAKwoB,kBAAkBpkB,GAElC,OAAOkkB,CACT,CAEAE,kBAAkBpkB,GAChB,GAAIA,GAAKpE,KAAK+J,cAAcwe,cAAcpjB,OACxC,MAAM,IAAI2U,WAAW,gBAAgB1V,sBAEvC,OAAOwL,KAAK+U,KAAK3kB,KAAK+J,cAAcwe,cAAcnkB,GAAK,EACzD,CAEAqkB,mBAAmBC,GACjB,MAAMrhB,EAASrH,KAAK+J,cAAc4e,aAC9B3oB,KAAK+J,cAAc4e,aAAaD,GAAe,EAC7C7C,EAAgB7lB,KAAK+J,cAAcwe,cAAcG,GACvD,OAAQrhB,GACN,KAAK,EACH,GAAIwe,GAAiB,EACnB,OAAOlb,SAASie,UAAUpd,SACrB,GAAIqa,GAAiB,GAC1B,OAAOlb,SAASie,UAAUhd,UACrB,GAAIia,GAAiB,GAC1B,OAAOlb,SAASie,UAAU3d,UAE5B,MACF,KAAK,EACH,GAAI4a,GAAiB,EACnB,OAAOlb,SAASie,UAAUjd,QACrB,GAAIka,GAAiB,GAC1B,OAAOlb,SAASie,UAAU/c,SACrB,GAAIga,GAAiB,GAC1B,OAAOlb,SAASie,UAAU9c,SAE5B,MACF,KAAK,EACH,OAAQ+Z,GACN,KAAK,GACH,OAAO,SAAU/a,EAAQC,GACvB,OAAO,IAAAiB,GAAWhM,KAAM8K,EAAQC,EAClC,EACF,KAAK,GACH,OAAOJ,SAASie,UAAU3c,WAC5B,KAAK,GACH,OAAOtB,SAASie,UAAU1c,WAC5B,QACE,MAEJ,MACF,QACE,MAEJ,MAAMhC,MAAM,wCACd,CAEA2e,gBAAgBH,EAAc,GAC5B,OAAO1oB,KAAK+J,cAAc4e,aACtB3oB,KAAK+J,cAAc4e,aAAaD,GAAe,CACrD,CAEAI,iBAAiBJ,EAAc,GAC7B,OAAO1oB,KAAK+J,cAAcwe,cAAcG,EAC1C,CAEAK,kBAAkBL,EAAa7U,GAC7B,MAAMxM,EAASrH,KAAK6oB,gBAAgBH,GAC9B7C,EAAgB7lB,KAAK8oB,iBAAiBJ,GAC5C,OAAO9C,EAAave,EAAQwe,EAAehS,EAC7C,CAYAhK,qBAAqBsZ,EAAGf,EAAG4G,EAAQC,EAAe1Y,GAChD,MAAM2Y,EAAiBtZ,KAAK+U,KAAK3kB,KAAKmd,WAAand,KAAK8nB,gBAClDqB,EAAiBvZ,KAAK+U,KAAK3kB,KAAKsd,YAActd,KAAKgoB,iBACzD,IAAI3M,EACJ,MAAM,MAAE+L,GAAUpnB,KAOlB,IAAI8K,EACAse,EAP6B,IAA7BppB,KAAKimB,oBACP5K,EAAS+G,EAAI8G,EAAkB/F,EACO,IAA7BnjB,KAAKimB,sBACd5K,EAAS2N,EAASE,EAAiBC,EAAmB/G,EAAI8G,EAAkB/F,GAK1EnjB,KAAKqnB,SACPvc,EAAS9K,KAAK+J,cAAcsf,YAAYhO,GACxC+N,EAAYppB,KAAK+J,cAAcuf,eAAejO,KAE9CvQ,EAAS9K,KAAK+J,cAAcud,aAAajM,GACzC+N,EAAYppB,KAAK+J,cAAcwf,gBAAgBlO,IAEjD,MAAM5T,SAAezH,KAAK+R,OAAOkC,MAAM,CAAC,CAAEnJ,SAAQ3F,OAAQikB,IAAc7Y,IAAS,GAEjF,IAAIkH,EA+BJ,OA9Bc,OAAV2P,GAAmBA,EAAM/L,GA0B3B5D,EAAU2P,EAAM/L,IAxBhB5D,EAAU,WACR,IAAIjS,QAAayjB,EAAcvZ,OAAO1P,KAAK+J,cAAetC,GAC1D,MAAM+hB,EAAexpB,KAAK6oB,kBACpBhD,EAAgB7lB,KAAK8oB,mBAY3B,OAXIhD,EAAmB0D,EAAc3D,KACnCrgB,EAAOugB,EACLvgB,EACAgkB,EACAxpB,KAAKimB,oBACLjmB,KAAK4nB,qBACL/B,EACA7lB,KAAK8nB,eACL9nB,KAAKooB,eAAehG,KAGjB5c,CACR,EAhBS,GAmBI,OAAV4hB,IACFA,EAAM/L,GAAS5D,IAQZ,CAAE0L,IAAGf,IAAG4G,SAAQxjB,WAAYiS,EACrC,CAiBA5N,kBAAkB4R,EAAa+J,EAAS9B,EAAa+F,EAAYR,EAAevN,EAC9EC,EAAQ+N,EAAgBnZ,GACxB,MAAM2V,EAAYlmB,KAAK8nB,eACjB3B,EAAanmB,KAAKgoB,gBAClB2B,EAAa3pB,KAAKmd,WAClByM,EAAc5pB,KAAKsd,YAEnBuM,EAAWja,KAAK+N,IAAI/N,KAAKoD,MAAMyI,EAAY,GAAKyK,GAAY,GAC5D4D,EAAWla,KAAKC,IACpBD,KAAK+U,KAAKlJ,EAAY,GAAKyK,GAC3BtW,KAAK+U,KAAKgF,EAAazD,IAEnB6D,EAAWna,KAAK+N,IAAI/N,KAAKoD,MAAMyI,EAAY,GAAK0K,GAAa,GAC7D6D,EAAWpa,KAAKC,IACpBD,KAAK+U,KAAKlJ,EAAY,GAAK0K,GAC3BvW,KAAK+U,KAAKiF,EAAczD,IAEpB8D,EAAcxO,EAAY,GAAKA,EAAY,GAEjD,IAAIyO,EAAgBlqB,KAAKqoB,mBAEzB,MAAM8B,EAAmB,GACnBC,EAAgB,GACtB,IAAK,IAAIhmB,EAAI,EAAGA,EAAIohB,EAAQrgB,SAAUf,EACH,IAA7BpE,KAAKimB,oBACPkE,EAAiB5iB,KAAKoe,EAAI3lB,KAAK+J,cAAcwe,cAAe,EAAG/C,EAAQphB,IAAM,GAE7E+lB,EAAiB5iB,KAAK,GAExB6iB,EAAc7iB,KAAKvH,KAAKyoB,mBAAmBjD,EAAQphB,KAGrD,MAAMimB,EAAW,IACX,aAAEtf,GAAiB/K,KAEzB,IAAK,IAAIsqB,EAAQP,EAAUO,EAAQN,IAAYM,EAC7C,IAAK,IAAIC,EAAQV,EAAUU,EAAQT,IAAYS,EAC7C,IAAK,IAAI7B,EAAc,EAAGA,EAAclD,EAAQrgB,SAAUujB,EAAa,CACrE,MAAM8B,EAAK9B,EACLM,EAASxD,EAAQkD,GACU,IAA7B1oB,KAAKimB,sBACPiE,EAAgBlqB,KAAKwoB,kBAAkBE,IAEzC,MAAM+B,EAAUzqB,KAAK0qB,eAAeH,EAAOD,EAAOtB,EAAQC,EAAe1Y,GAAQlG,MAAMsgB,IACrF,MAAM/f,EAAS+f,EAAKnlB,KACd4Z,EAAW,IAAIzU,SAASC,GACxBggB,EAAc5qB,KAAKooB,eAAeuC,EAAKvI,GACvC3C,EAAYkL,EAAKvI,EAAI+D,EACrB0E,EAAWF,EAAKxH,EAAI+C,EACpB4E,EAAWrL,EAAYmL,EACvBG,GAAWJ,EAAKxH,EAAI,GAAK+C,EACzB3M,EAAS6Q,EAAcI,GAEvBQ,EAAOpb,KAAKC,IAAI+a,EAAaA,GAAeE,EAAWrP,EAAY,IAAKmO,EAAcnK,GACtFwL,EAAOrb,KAAKC,IAAIqW,EAAWA,GAAa6E,EAAUtP,EAAY,IAAKkO,EAAakB,GAEtF,IAAK,IAAIzI,EAAIxS,KAAK+N,IAAI,EAAGlC,EAAY,GAAKgE,GAAY2C,EAAI4I,IAAQ5I,EAChE,IAAK,IAAIe,EAAIvT,KAAK+N,IAAI,EAAGlC,EAAY,GAAKoP,GAAW1H,EAAI8H,IAAQ9H,EAAG,CAClE,MAAM+H,GAAgB9I,EAAI8D,EAAa/C,GAAK+G,EACtClnB,EAAQuW,EAAOjR,KACnB8W,EAAU8L,EAAcf,EAAiBK,GAAKzf,GAEhD,IAAIogB,EACA1B,GACF0B,GAAqB/I,EAAI3C,EAAYhE,EAAY,IAAMwO,EAAczE,EAAQrgB,QACvEge,EAAI0H,EAAWpP,EAAY,IAAM+J,EAAQrgB,OAC3CqlB,EACJ9G,EAAYyH,GAAoBnoB,IAEhCmoB,GACG/I,EAAI3C,EAAYhE,EAAY,IAAMwO,EACjC9G,EAAI0H,EAAWpP,EAAY,GAC/BiI,EAAY8G,GAAIW,GAAoBnoB,EAExC,CACF,IAEFqnB,EAAS9iB,KAAKkjB,EAChB,CAKJ,SAFMja,QAAQC,IAAI4Z,GAEb3O,GAAUD,EAAY,GAAKA,EAAY,KAAQC,GAC5CC,GAAWF,EAAY,GAAKA,EAAY,KAAQE,EAAS,CAC/D,IAAIyP,EAqBJ,OAnBEA,EADE3B,EACU/D,EACVhC,EACAjI,EAAY,GAAKA,EAAY,GAC7BA,EAAY,GAAKA,EAAY,GAC7BC,EAAOC,EACP6J,EAAQrgB,OACRukB,GAGUtE,EACV1B,EACAjI,EAAY,GAAKA,EAAY,GAC7BA,EAAY,GAAKA,EAAY,GAC7BC,EAAOC,EACP+N,GAGJ0B,EAAU1P,MAAQA,EAClB0P,EAAUzP,OAASA,EACZyP,CACT,CAKA,OAHA1H,EAAYhI,MAAQA,GAASD,EAAY,GAAKA,EAAY,GAC1DiI,EAAY/H,OAASA,GAAUF,EAAY,GAAKA,EAAY,GAErDiI,CACT,CAWA7Z,mBACE2R,OAAQ+B,EAAG,QAAEiI,EAAU,GAAE,WAAEiE,EAAU,KAAE4B,EAAO,KAAI,MAClD3P,EAAK,OAAEC,EAAM,eAAE+N,EAAc,UAAE4B,EAAS,OAAE/a,GACxC,CAAC,GACH,MAAMkL,EAAc8B,GAAO,CAAC,EAAG,EAAGvd,KAAKmd,WAAYnd,KAAKsd,aAGxD,GAAI7B,EAAY,GAAKA,EAAY,IAAMA,EAAY,GAAKA,EAAY,GAClE,MAAM,IAAIvR,MAAM,mBAGlB,MAAMqhB,EAAmB9P,EAAY,GAAKA,EAAY,GAChD+P,EAAoB/P,EAAY,GAAKA,EAAY,GACjDgQ,EAAYF,EAAmBC,EAC/BjI,EAAkBvjB,KAAK4nB,qBAE7B,GAAKpC,GAAYA,EAAQrgB,QAKvB,IAAK,IAAIf,EAAI,EAAGA,EAAIohB,EAAQrgB,SAAUf,EACpC,GAAIohB,EAAQphB,IAAMmf,EAChB,OAAO/S,QAAQ8F,OAAO,IAAIwD,WAAW,yBAAyB0L,EAAQphB,cAN1E,IAAK,IAAIA,EAAI,EAAGA,EAAImf,IAAmBnf,EACrCohB,EAAQje,KAAKnD,GASjB,IAAIsf,EACJ,GAAI+F,EAAY,CACd,MAAMpiB,EAASrH,KAAK+J,cAAc4e,aAC9B/Y,KAAK+N,IAAI+N,MAAM,KAAM1rB,KAAK+J,cAAc4e,cAAgB,EACtD9C,EAAgBjW,KAAK+N,IAAI+N,MAAM,KAAM1rB,KAAK+J,cAAcwe,eAC9D7E,EAAckC,EAAave,EAAQwe,EAAe4F,EAAYjG,EAAQrgB,QAClEmmB,GACF5H,EAAYiI,KAAKL,EAErB,KAAO,CACL5H,EAAc,GACd,IAAK,IAAItf,EAAI,EAAGA,EAAIohB,EAAQrgB,SAAUf,EAAG,CACvC,MAAMmhB,EAAavlB,KAAK+oB,kBAAkBvD,EAAQphB,GAAIqnB,GAClDrpB,MAAMiG,QAAQijB,IAAclnB,EAAIknB,EAAUnmB,OAC5CogB,EAAWoG,KAAKL,EAAUlnB,IACjBknB,IAAclpB,MAAMiG,QAAQijB,IACrC/F,EAAWoG,KAAKL,GAElB5H,EAAYnc,KAAKge,EACnB,CACF,CAEA,MAAM0D,EAAgBoC,SAAc,OAAWrrB,KAAK+J,eAE9ClC,QAAe7H,KAAK4rB,YACxBnQ,EAAa+J,EAAS9B,EAAa+F,EAAYR,EAAevN,EAAOC,EAAQ+N,EAAgBnZ,GAE/F,OAAO1I,CACT,CA0BAgC,eAAc,OAAE2R,EAAM,WAAEiO,GAAa,EAAI,KAAE4B,EAAO,KAAI,MAAE3P,EAAK,OAAEC,EAAM,eACnE+N,EAAc,YAAEmC,GAAc,EAAK,OAAEtb,GAAW,CAAC,GACjD,MAAMkL,EAAcD,GAAU,CAAC,EAAG,EAAGxb,KAAKmd,WAAYnd,KAAKsd,aAG3D,GAAI7B,EAAY,GAAKA,EAAY,IAAMA,EAAY,GAAKA,EAAY,GAClE,MAAM,IAAIvR,MAAM,mBAGlB,MAAM4hB,EAAK9rB,KAAK+J,cAAcgiB,0BAE9B,GAAID,IAAO,SAAgC,CACzC,IAAIvd,EAAI,CAAC,EAAG,EAAG,GACf,GAAOvO,KAAK+J,cAAciiB,eAAiB,kBAAoCH,EAAa,CAC1Ftd,EAAI,GACJ,IAAK,IAAInK,EAAI,EAAGA,EAAIpE,KAAK+J,cAAcwe,cAAcpjB,OAAQf,GAAK,EAChEmK,EAAEhH,KAAKnD,EAEX,CACA,OAAOpE,KAAK4d,YAAY,CACtBpC,SACAiO,aACAjE,QAASjX,EACT8c,OACA3P,QACAC,SACA+N,iBACAnZ,UAEJ,CAEA,IAAIiV,EACJ,OAAQsG,GACN,KAAK,iBACL,KAAK,iBACL,KAAK,aACHtG,EAAU,CAAC,GACX,MACF,KAAK,UACHA,EAAU,CAAC,EAAG,EAAG,EAAG,GACpB,MACF,KAAK,WACL,KAAK,YACHA,EAAU,CAAC,EAAG,EAAG,GACjB,MACF,QACE,MAAM,IAAItb,MAAM,sDAGpB,MAAM+hB,EAAa,CACjBzQ,OAAQC,EACRgO,YAAY,EACZjE,UACA6F,OACA3P,QACAC,SACA+N,iBACAnZ,WAEI,cAAExG,GAAkB/J,KACpByhB,QAAezhB,KAAK4d,YAAYqO,GAEhCtO,EAAM,GAAK3d,KAAK+J,cAAcwe,cAAc,GAClD,IAAI/iB,EACJ,OAAQsmB,GACN,KAAK,iBACHtmB,EAAOgc,EAAgBC,EAAQ9D,GAC/B,MACF,KAAK,iBACHnY,EAAOoc,EAAgBH,EAAQ9D,GAC/B,MACF,KAAK,aACHnY,EAAOqc,EAAYJ,EAAQ1X,EAAcmiB,UACzC,MACF,KAAK,UACH1mB,EAAO0c,EAAST,GAChB,MACF,KAAK,WACHjc,EAAO6c,EAAUZ,GACjB,MACF,KAAK,YACHjc,EAAOqd,EAAWpB,GAClB,MACF,QACE,MAAM,IAAIvX,MAAM,2CAKpB,IAAKuf,EAAY,CACf,MAAM0C,EAAM,IAAIxc,WAAWnK,EAAKL,OAAS,GACnCinB,EAAQ,IAAIzc,WAAWnK,EAAKL,OAAS,GACrCknB,EAAO,IAAI1c,WAAWnK,EAAKL,OAAS,GAC1C,IAAK,IAAIf,EAAI,EAAGud,EAAI,EAAGvd,EAAIoB,EAAKL,OAAQf,GAAK,IAAKud,EAChDwK,EAAIxK,GAAKnc,EAAKpB,GACdgoB,EAAMzK,GAAKnc,EAAKpB,EAAI,GACpBioB,EAAK1K,GAAKnc,EAAKpB,EAAI,GAErBoB,EAAO,CAAC2mB,EAAKC,EAAOC,EACtB,CAIA,OAFA7mB,EAAKkW,MAAQ+F,EAAO/F,MACpBlW,EAAKmW,OAAS8F,EAAO9F,OACdnW,CACT,CAMA8mB,eACE,IAAKtsB,KAAK+J,cAAcwiB,cACtB,MAAO,GAGT,MAAMC,EAAY,GAClB,IAAK,IAAIpoB,EAAI,EAAGA,EAAIpE,KAAK+J,cAAcwiB,cAAcpnB,OAAQf,GAAK,EAChEooB,EAAUjlB,KAAK,CACbnD,EAAGpE,KAAK+J,cAAcwiB,cAAcnoB,GACpCud,EAAG3hB,KAAK+J,cAAcwiB,cAAcnoB,EAAI,GACxC+M,EAAGnR,KAAK+J,cAAcwiB,cAAcnoB,EAAI,GACxC+e,EAAGnjB,KAAK+J,cAAcwiB,cAAcnoB,EAAI,GACxCge,EAAGpiB,KAAK+J,cAAcwiB,cAAcnoB,EAAI,GACxCgf,EAAGpjB,KAAK+J,cAAcwiB,cAAcnoB,EAAI,KAG5C,OAAOooB,CACT,CAWAC,gBAAgBzD,EAAS,MACvB,MAAM0D,EAAW,CAAC,EAClB,IAAK1sB,KAAK+J,cAAc4iB,cACtB,OAAO,KAET,MAAMC,EAAS5sB,KAAK+J,cAAc4iB,cAElC,IAAIlf,EAAQ,EAAemf,EAAQ,QAGjCnf,EADa,OAAXub,EACMvb,EAAM3F,QAAQrG,QAA0C2I,IAAjC,EAAa3I,EAAM,YAE1CgM,EAAM3F,QAAQrG,GAAS2J,OAAO,EAAa3J,EAAM,aAAeunB,IAG1E,IAAK,IAAI5kB,EAAI,EAAGA,EAAIqJ,EAAMtI,SAAUf,EAAG,CACrC,MAAM3C,EAAOgM,EAAMrJ,GACnBsoB,EAAS,EAAajrB,EAAM,SAAWA,EAAKorB,KAC9C,CACA,OAAOH,CACT,CAMAI,gBACE,IAAK9sB,KAAK+J,cAAcgjB,YACtB,OAAO,KAET,MAAMH,EAAS5sB,KAAK+J,cAAcgjB,YAClC,OAAO3hB,OAAOwhB,EAAOvS,UAAU,EAAGuS,EAAOznB,OAAS,GACpD,CAOAqX,YACE,MAAMgQ,EAAYxsB,KAAK+J,cAAcwiB,cAC/BS,EAAsBhtB,KAAK+J,cAAckjB,oBAC/C,GAAIT,GAAkC,IAArBA,EAAUrnB,OACzB,MAAO,CACLqnB,EAAU,GACVA,EAAU,GACVA,EAAU,IAGd,GAAIQ,EACF,MAAO,CACLA,EAAoB,GACpBA,EAAoB,GACpBA,EAAoB,KAGxB,MAAM,IAAI9iB,MAAM,oDAClB,CAUAyS,cAAcuQ,EAAiB,MAC7B,MAAMC,EAAkBntB,KAAK+J,cAAcqjB,gBACrCJ,EAAsBhtB,KAAK+J,cAAckjB,oBAE/C,GAAIE,EACF,MAAO,CACLA,EAAgB,IACfA,EAAgB,GACjBA,EAAgB,IAGpB,GAAIH,EACF,MAAO,CACLA,EAAoB,GACpBA,EAAoB,GACpBA,EAAoB,KAIxB,GAAIE,EAAgB,CAClB,MAAOG,EAASC,EAASC,GAAWL,EAAevQ,gBACnD,MAAO,CACL0Q,EAAUH,EAAe/P,WAAand,KAAKmd,WAC3CmQ,EAAUJ,EAAe5P,YAActd,KAAKsd,YAC5CiQ,EAAUL,EAAe/P,WAAand,KAAKmd,WAE/C,CAEA,MAAM,IAAIjT,MAAM,oDAClB,CAMAsjB,cACE,OAA2C,IAApCxtB,KAAKmnB,QAAQsG,kBACtB,CAQApR,iBACE,MAAMqR,EAAS1tB,KAAKwc,YACdmR,EAAa3tB,KAAK2c,gBAElBiR,EAAKF,EAAO,GACZG,EAAKH,EAAO,GAEZI,EAAKF,EAAMD,EAAW,GAAK3tB,KAAKmd,WAChC4Q,EAAKF,EAAMF,EAAW,GAAK3tB,KAAKsd,YAEtC,MAAO,CACL1N,KAAKC,IAAI+d,EAAIE,GACble,KAAKC,IAAIge,EAAIE,GACbne,KAAK+N,IAAIiQ,EAAIE,GACble,KAAK+N,IAAIkQ,EAAIE,GAEjB,EAGF,S,kGC74BO,MAAMC,EAAgB,CAE3B,IAAQ,SACR,IAAQ,gBACR,IAAQ,aACR,IAAQ,YACR,IAAQ,WACR,IAAQ,cACR,MAAQ,YACR,IAAQ,WACR,IAAQ,eACR,IAAQ,YACR,IAAQ,iBACR,IAAQ,cACR,IAAQ,oBACR,IAAQ,mBACR,IAAQ,eACR,IAAQ,mBACR,IAAQ,cACR,IAAQ,aACR,IAAQ,OACR,IAAQ,iBACR,IAAQ,iBACR,IAAQ,QACR,IAAQ,iBACR,IAAQ,cACR,IAAQ,4BACR,IAAQ,sBACR,IAAQ,iBACR,IAAQ,eACR,IAAQ,kBACR,IAAQ,WACR,IAAQ,kBACR,IAAQ,eACR,IAAQ,cACR,IAAQ,gBACR,IAAQ,cACR,IAAQ,cAGR,IAAQ,cACR,IAAQ,eACR,IAAQ,WACR,IAAQ,yBACR,IAAQ,SACR,IAAQ,oBACR,IAAQ,eACR,IAAQ,WACR,IAAQ,gBACR,IAAQ,UACR,IAAQ,aACR,IAAQ,WACR,IAAQ,aACR,IAAQ,YACR,IAAQ,wBACR,IAAQ,sBACR,IAAQ,eACR,IAAQ,kBACR,IAAQ,kBACR,IAAQ,iBACR,IAAQ,UACR,IAAQ,YACR,IAAQ,YACR,IAAQ,iBACR,IAAQ,aACR,IAAQ,cACR,IAAQ,YACR,IAAQ,mBACR,IAAQ,aACR,IAAQ,iBACR,IAAQ,YACR,IAAQ,oBACR,IAAQ,mBACR,IAAQ,mBACR,IAAQ,iBACR,IAAQ,YAGR,MAAQ,gBACR,MAAQ,aACR,MAAQ,oBACR,MAAQ,mBACR,MAAQ,WACR,MAAQ,cACR,MAAQ,eACR,MAAQ,aACR,MAAQ,QACR,MAAQ,kBACR,MAAQ,UACR,MAAQ,gBACR,MAAQ,cACR,MAAQ,YACR,MAAQ,oBACR,MAAQ,cAGR,MAAQ,OAGR,MAAQ,cAGR,IAAQ,MAGR,MAAQ,gBACR,MAAQ,cAGR,MAAQ,YAGR,MAAQ,kBACR,MAAQ,gBACR,MAAQ,sBACR,MAAQ,kBACR,MAAQ,kBACR,MAAQ,iBAGR,MAAQ,kBAGGC,EAAY,CAAC,EAC1B,IAAK,MAAMhtB,KAAO+sB,EACZA,EAAc/lB,eAAehH,KAC/BgtB,EAAUD,EAAc/sB,IAAQgO,SAAShO,EAAK,KAI3C,MAsCMitB,EAAc,CACzBD,EAAU1F,cACV0F,EAAUjC,aACViC,EAAUtF,aACVsF,EAAU1E,gBACV0E,EAAU3G,aACV2G,EAAUE,eACVF,EAAU3E,eACV2E,EAAU5E,YACV4E,EAAUG,SAGCC,EAAiB,CAC5B,EAAQ,OACR,EAAQ,QACR,EAAQ,QACR,EAAQ,OACR,EAAQ,WACR,EAAQ,QACR,EAAQ,YACR,EAAQ,SACR,EAAQ,QACR,GAAQ,YACR,GAAQ,QACR,GAAQ,SAER,GAAQ,MAER,GAAQ,QACR,GAAQ,SACR,GAAQ,QAGGC,EAAa,CAAC,EAC3B,IAAK,MAAMrtB,KAAOotB,EACZA,EAAepmB,eAAehH,KAChCqtB,EAAWD,EAAeptB,IAAQgO,SAAShO,EAAK,KAI7C,MAAMstB,EAA6B,CACxCC,YAAa,EACbC,YAAa,EACbC,IAAK,EACLC,QAAS,EACTC,iBAAkB,EAClBC,KAAM,EACNC,MAAO,EAEPC,OAAQ,EACRC,OAAQ,GAGGC,EAAqB,CAChCC,YAAa,EACbC,WAAY,EACZC,WAAY,GAGDC,EAAiB,CAC5BC,QAAS,EACTC,eAAgB,GAGLC,EAAqB,CAChCC,KAAM,EACNC,QAAS,GAGEC,EAAc,CACzB,KAAM,oBACN,KAAM,qBACN,KAAM,mBACN,KAAM,uBACN,KAAM,qBACN,KAAM,0BACN,KAAM,0BACN,KAAM,wBACN,KAAM,2BACN,KAAM,yBACN,KAAM,4BACN,KAAM,sBACN,KAAM,0BACN,KAAM,0BACN,KAAM,0BACN,KAAM,yBACN,KAAM,8BACN,KAAM,oBACN,KAAM,wBACN,KAAM,oBACN,KAAM,mBACN,KAAM,uBACN,KAAM,wBACN,KAAM,2BACN,KAAM,yBACN,KAAM,yBACN,KAAM,0BACN,KAAM,yBACN,KAAM,yBACN,KAAM,0BACN,KAAM,4BACN,KAAM,2BACN,KAAM,+BACN,KAAM,gCACN,KAAM,uBACN,KAAM,sBACN,KAAM,0BACN,KAAM,2BACN,KAAM,6BACN,KAAM,0BACN,KAAM,yBACN,KAAM,iCACN,KAAM,+BACN,KAAM,uBACN,KAAM,yBACN,KAAM,sBACN,KAAM,uBAGKxI,EAAU,CAAC,EACxB,IAAK,MAAMlmB,KAAO0uB,EACZA,EAAY1nB,eAAehH,KAC7BkmB,EAAQwI,EAAY1uB,IAAQgO,SAAShO,EAAK,I","sources":["webpack://@openeo/web-editor/./node_modules/@openeo/vue-components/components/Collections.vue?1eeb","webpack://@openeo/web-editor/node_modules/@openeo/vue-components/components/Collections.vue","webpack://@openeo/web-editor/./node_modules/@openeo/vue-components/components/Collections.vue?2a37","webpack://@openeo/web-editor/./node_modules/@openeo/vue-components/components/Collections.vue","webpack://@openeo/web-editor/./node_modules/@openeo/vue-components/components/DataTable.vue?f37d","webpack://@openeo/web-editor/node_modules/@openeo/vue-components/components/DataTable.vue","webpack://@openeo/web-editor/./node_modules/@openeo/vue-components/components/DataTable.vue?eef3","webpack://@openeo/web-editor/./node_modules/@openeo/vue-components/components/DataTable.vue","webpack://@openeo/web-editor/./node_modules/@openeo/vue-components/components/FileFormats.vue?d82d","webpack://@openeo/web-editor/node_modules/@openeo/vue-components/components/FileFormats.vue","webpack://@openeo/web-editor/./node_modules/@openeo/vue-components/components/FileFormats.vue?2145","webpack://@openeo/web-editor/./node_modules/@openeo/vue-components/components/FileFormats.vue","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/compression/index.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/dataview64.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/dataslice.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/httputils.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/basesource.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/utils.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/blockedsource.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/client/base.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/client/fetch.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/client/xhr.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/client/http.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/remote.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/filereader.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/geotiff.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/rgb.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/resample.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/geotiffimage.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/globals.js"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"vue-component collections\"},[_c('SearchableList',{attrs:{\"data\":_vm.collections,\"identifierKey\":\"id\",\"summaryKey\":\"title\",\"keywordsKey\":\"keywords\",\"showKeywords\":_vm.showKeywords,\"showSummaryOnExpand\":false,\"externalSearchTerm\":_vm.searchTerm,\"sort\":_vm.sort,\"offerDetails\":_vm.offerDetails,\"heading\":_vm.heading,\"collapsed\":_vm.collapsed,\"loadAdditionalData\":_vm.loadAdditionalData,\"allowCopy\":\"\"},on:{\"detailsToggled\":_vm.detailsToggled},scopedSlots:_vm._u([{key:\"heading\",fn:function(scope){return [_vm._t(\"heading\",null,null,scope)]}},(_vm.missing)?{key:\"content-start\",fn:function(){return [_c('FederationMissingNotice',{attrs:{\"missing\":_vm.missing,\"federation\":_vm.federation}})]},proxy:true}:null,{key:\"summary\",fn:function(scope){return [_vm._t(\"summary\",null,null,scope)]}},{key:\"details\",fn:function(slot){return [_c('Collection',{attrs:{\"data\":slot.item,\"mapOptions\":_vm.mapOptions,\"federation\":_vm.federation},scopedSlots:_vm._u([{key:\"title\",fn:function(){return [_c('span',{staticClass:\"hidden\"})]},proxy:true},{key:\"before-description\",fn:function(scope){return [_vm._t(\"collection-before-description\",null,null,scope)]}},{key:\"end\",fn:function(scope){return [_vm._t(\"collection-end\",null,null,scope)]}},{key:\"spatial-extents\",fn:function(scope){return [_vm._t(\"collection-spatial-extents\",null,null,scope)]}},{key:\"temporal-extents\",fn:function(scope){return [_vm._t(\"collection-temporal-extents\",null,null,scope)]}}],null,true)})]}}],null,true)})],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n\t<div class=\"vue-component collections\">\n\t\t<SearchableList :data=\"collections\" identifierKey=\"id\" summaryKey=\"title\" keywordsKey=\"keywords\" :showKeywords=\"showKeywords\"  :showSummaryOnExpand=\"false\" :externalSearchTerm=\"searchTerm\" :sort=\"sort\" :offerDetails=\"offerDetails\" :heading=\"heading\" :collapsed=\"collapsed\" :loadAdditionalData=\"loadAdditionalData\" @detailsToggled=\"detailsToggled\" allowCopy>\n\t\t\t<template #heading=\"scope\"><slot name=\"heading\" v-bind=\"scope\" /></template>\n\t\t\t<template v-if=\"missing\" #content-start><FederationMissingNotice :missing=\"missing\" :federation=\"federation\" /></template>\n\t\t\t<template #summary=\"scope\"><slot name=\"summary\" v-bind=\"scope\" /></template>\n\t\t\t<template #details=\"slot\">\n\t\t\t\t<Collection :data=\"slot.item\" :mapOptions=\"mapOptions\" :federation=\"federation\">\n\t\t\t\t\t<template #title><span class=\"hidden\" /></template>\n\t\t\t\t\t<template #before-description=\"scope\"><slot name=\"collection-before-description\" v-bind=\"scope\" /></template>\n\t\t\t\t\t<template #end=\"scope\"><slot name=\"collection-end\" v-bind=\"scope\" /></template>\n\t\t\t\t\t<template #spatial-extents=\"scope\"><slot name=\"collection-spatial-extents\" v-bind=\"scope\" /></template>\n\t\t\t\t\t<template #temporal-extents=\"scope\"><slot name=\"collection-temporal-extents\" v-bind=\"scope\" /></template>\n\t\t\t\t</Collection>\n\t\t\t</template>\n\t\t</SearchableList>\n\t</div>\n</template>\n\n<script>\nimport Utils from '../utils';\nimport FederationMixin from './internal/FederationMixin.js';\n\nexport default {\n\tname: 'Collections',\n\tcomponents: {\n\t\tCollection: () => Utils.loadAsyncComponent(import('./Collection.vue')),\n\t\tSearchableList: () => Utils.loadAsyncComponent(import('./SearchableList.vue'))\n\t},\n\tmixins: [\n\t\tFederationMixin\n\t],\n\tprops: {\n\t\tcollections: {\n\t\t\ttype: Array,\n\t\t\tdefault: () => ([])\n\t\t},\n\t\tmapOptions: {\n\t\t\ttype: Object,\n\t\t\tdefault: () => ({})\n\t\t},\n\t\tsearchTerm: {\n\t\t\ttype: String,\n\t\t\tdefault: null\n\t\t},\n\t\tsort: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: true\n\t\t},\n\t\tofferDetails: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: true\n\t\t},\n\t\theading: {\n\t\t\ttype: String,\n\t\t\tdefault: 'Collections'\n\t\t},\n\t\tcollapsed: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: null\n\t\t},\n\t\tloadAdditionalData: {\n\t\t\ttype: Function,\n\t\t\tdefault: null\n\t\t},\n\t\tshowKeywords: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false\n\t\t},\n\t\tmissing: {\n\t\t\ttype: Array,\n\t\t\tdefault: null\n\t\t},\n\t\t...FederationMixin.props\n\t},\n\tbeforeCreate() {\n\t\tUtils.enableHtmlProps(this);\n\t},\n\tmethods: {\n\t\tdetailsToggled(...args) {\n\t\t\tthis.$emit('detailsToggled', ...args);\n\t\t}\n\t}\n}\n</script>\n\n<style lang=\"scss\">\n@import './base.scss';\n</style>","import mod from \"-!../../../@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Collections.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Collections.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Collections.vue?vue&type=template&id=44143d0e&\"\nimport script from \"./Collections.vue?vue&type=script&lang=js&\"\nexport * from \"./Collections.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Collections.vue?vue&type=style&index=0&id=44143d0e&prod&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"vue-component data-table\"},[_c('div',{staticClass:\"menu\"},[_c('div',{staticClass:\"toolbar\"},[_vm._t(\"toolbar\")],2),(_vm.hasData)?_c('div',{staticClass:\"filter\"},[_c('SearchBox',{attrs:{\"compact\":true},model:{value:(_vm.filterValue),callback:function ($$v) {_vm.filterValue=$$v},expression:\"filterValue\"}})],1):_vm._e()]),(_vm.hasData)?_c('table',[_c('thead',[_c('tr',_vm._l((_vm.columns),function(col,id){return _c('th',{directives:[{name:\"show\",rawName:\"v-show\",value:(!col.hide),expression:\"!col.hide\"}],key:col.name,class:_vm.thClasses(id),attrs:{\"title\":_vm.thTitle(id)},on:{\"click\":function($event){return _vm.enableSort(id)}}},[_vm._v(_vm._s(col.name))])}),0)]),_c('tbody',[_vm._l((_vm.view),function(row,i){return _c('tr',{key:i},_vm._l((_vm.columns),function(col,id){return _c('td',{directives:[{name:\"show\",rawName:\"v-show\",value:(!col.hide),expression:\"!col.hide\"}],key:`${col.name}_${i}`,class:[id, {'edit': _vm.canEdit(col)}],attrs:{\"title\":_vm.canEdit(col) ? 'Double-click to change the value' : false,\"data-value\":col.stylable ? _vm.value(row, col, id) : false},on:{\"dblclick\":function($event){return _vm.onDblClick($event, row, col, id)}}},[_vm._t(id,function(){return [(_vm.showEditField(row, col, id))?[_c('form',{on:{\"submit\":function($event){$event.preventDefault();$event.stopPropagation();return _vm.saveEditField($event, row, col, id)}}},[_c('input',{ref:\"editField\",refInFor:true,attrs:{\"type\":\"text\"},domProps:{\"value\":_vm.value(row, col, id)},on:{\"blur\":function($event){return _vm.saveEditField($event, row, col, id)},\"keyup\":function($event){return _vm.resetEditFieldEsc($event, row, col, id)}}})])]:_c('span',{domProps:{\"innerHTML\":_vm._s(_vm.formattedValue(row, col, id))}})]},{\"row\":row,\"col\":col,\"id\":id})],2)}),0)}),(_vm.hasData && _vm.view.length == 0)?_c('tr',{staticClass:\"no-results\"},[_c('td',{attrs:{\"colspan\":_vm.columnCount}},[_vm._v(\"No element matches your search criteria.\")])]):_vm._e()],2)]):_c('div',{staticClass:\"no-data\"},[_vm._v(_vm._s(_vm.noDataMessage))])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n\t<div class=\"vue-component data-table\">\n\t\t<div class=\"menu\">\n\t\t\t<div class=\"toolbar\">\n\t\t\t\t<slot name=\"toolbar\"></slot>\n\t\t\t</div>\n\t\t\t<div class=\"filter\" v-if=\"hasData\">\n\t\t\t\t<SearchBox v-model=\"filterValue\" :compact=\"true\" />\n\t\t\t</div>\n\t\t</div>\n\t\t<table v-if=\"hasData\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th v-for=\"(col, id) in columns\" v-show=\"!col.hide\" :key=\"col.name\" :class=\"thClasses(id)\" @click=\"enableSort(id)\" :title=\"thTitle(id)\">{{ col.name }}</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t<tr v-for=\"(row, i) in view\" :key=\"i\">\n\t\t\t\t\t<td v-for=\"(col, id) in columns\" v-show=\"!col.hide\" :key=\"`${col.name}_${i}`\" \n\t\t\t\t\t\t:class=\"[id, {'edit': canEdit(col)}]\"\n\t\t\t\t\t\t:title=\"canEdit(col) ? 'Double-click to change the value' : false\"\n\t\t\t\t\t\t@dblclick=\"onDblClick($event, row, col, id)\"\n\t\t\t\t\t\t:data-value=\"col.stylable ? value(row, col, id) : false\">\n\t\t\t\t\t\t<slot :name=\"id\" :row=\"row\" :col=\"col\" :id=\"id\">\n\t\t\t\t\t\t\t<template v-if=\"showEditField(row, col, id)\">\n\t\t\t\t\t\t\t\t<form @submit.prevent.stop=\"saveEditField($event, row, col, id)\">\n\t\t\t\t\t\t\t\t\t<input type=\"text\" ref=\"editField\" :value=\"value(row, col, id)\" @blur=\"saveEditField($event, row, col, id)\" @keyup=\"resetEditFieldEsc($event, row, col, id)\" />\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t<span v-else v-html=\"formattedValue(row, col, id)\" />\n\t\t\t\t\t\t</slot>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr v-if=\"hasData && view.length == 0\" class=\"no-results\">\n\t\t\t\t\t<td :colspan=\"columnCount\">No element matches your search criteria.</td>\n\t\t\t\t</tr>\n\t\t\t</tbody>\n\t\t</table>\n\t\t<div class=\"no-data\" v-else>{{ noDataMessage }}</div>\n\t</div>\n</template>\n\n<script>\nimport Utils from '../utils.js';\nimport { DataTypes, Formatters } from '@radiantearth/stac-fields';\n\nexport default {\n\tname: 'DataTable',\n\tcomponents: {\n\t\tSearchBox: () => import('./SearchBox.vue')\n\t},\n\tprops: {\n\t\tcolumns: {\n\t\t\ttype: Object,\n\t\t\tdefault: () => ({})\n\t\t},\n\t\tdata: {\n\t\t\ttype: Array,\n\t\t\tdefault: () => ([])\n\t\t}\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tview: [],\n\t\t\tfilterValue: null,\n\t\t\tprimaryKey: null,\n\t\t\tnoDataMessage: 'No data available.',\n\t\t\teditField: null,\n\t\t\tsortState: {\n\t\t\t\tid: null,\n\t\t\t\tdirection: null\n\t\t\t}\n\t\t};\n\t},\n\twatch: {\n\t\tdata() {\n\t\t\tthis.updateView();\n\t\t},\n\t\tfilterValue() {\n\t\t\tthis.updateView();\n\t\t},\n\t\tsortState() {\n\t\t\tthis.updateView();\n\t\t},\n\t\tcolumns: {\n\t\t\timmediate: true,\n\t\t\thandler() {\n\t\t\t\tfor(let id in this.columns) {\n\t\t\t\t\tlet direction = this.columns[id].sort;\n\t\t\t\t\tif (['asc', 'desc'].includes(direction)) {\n\t\t\t\t\t\tthis.enableSort(id, direction);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\tcomputed: {\n\t\tcolumnCount() {\n\t\t\treturn Object.keys(this.columns).length;\n\t\t},\n\t\thasData() {\n\t\t\treturn this.data.length > 0;\n\t\t},\n\t\thasFilter() {\n\t\t\treturn (typeof this.filterValue === 'string' && this.filterValue.length > 0) ? true : false;\n\t\t}\n\t},\n\tbeforeCreate() {\n\t\tUtils.enableHtmlProps(this);\n\t},\n\tcreated() {\n\t\tthis.determinePrimaryKey();\n\t},\n\tmethods: {\n\t\tcanEdit(col) {\n\t\t\treturn (typeof col.edit === 'function');\n\t\t},\n\t\tshowEditField(row, col, id) {\n\t\t\treturn this.canEdit(col) && this.editField != null && this.editField[0] == row && this.editField[1] == id;\n\t\t},\n\t\tonDblClick(event, row, col, id) {\n\t\t\tif (!this.canEdit(col)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar value = this.value(row, col, id);\n\t\t\tif (typeof value === 'boolean') {\n\t\t\t\tvar action = this.columns[id].edit;\n\t\t\t\taction(row);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.editField = [row, id];\n\t\t\t\tthis.$nextTick(() => this.$refs.editField[0].focus());\n\t\t\t}\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\t\t},\n\t\tsaveEditField(event, row, col, id) {\n\t\t\tif (this.editField !== null && this.canEdit(col)) {\n\t\t\t\tvar action = this.columns[id].edit;\n\t\t\t\taction(row, this.$refs.editField[0].value);\n\n\t\t\t\tthis.editField = null;\n\t\t\t\tevent.preventDefault();\n\t\t\t\tevent.stopPropagation();\n\t\t\t}\n\t\t},\n\t\tresetEditFieldEsc(event, row, col, id) {\n\t\t\tif (event.key == \"Escape\") {\n\t\t\t\tthis.editField = null;\n\t\t\t}\n\t\t},\n\t\tdeterminePrimaryKey() {\n\t\t\tfor(var col in this.columns) {\n\t\t\t\tif (this.columns[col].primaryKey) {\n\t\t\t\t\tthis.primaryKey = col;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tsetNoData(error) {\n\t\t\tif (typeof error == 'string') {\n\t\t\t\tthis.noDataMessage = error;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (Utils.isObject(error)) {\n\t\t\t\tif (typeof error.data === 'object' && typeof error.config === 'object' && typeof error.headers === 'object') {\n\t\t\t\t\t// Axios response, handle the data only.\n\t\t\t\t\terror = error.data;\n\t\t\t\t}\n\t\t\t\tif (Utils.isObject(error) && typeof error.message === 'string') {\n\t\t\t\t\tthis.noDataMessage = error.message;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.warn(error);\n\t\t\tthis.noDataMessage = \"Sorry, an unknown error has occured.\";\n\t\t},\n\t\tvalue(row, col, id) {\n\t\t\tvar data;\n\t\t\tif (typeof row === 'object') {\n\t\t\t\tdata = row[id];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdata = row;\n\t\t\t}\n\t\t\tif (Utils.isObject(col) && typeof col.computedValue === 'function') {\n\t\t\t\tdata = col.computedValue(row, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t},\n\t\tformattedValue(row, col, id) {\n\t\t\treturn this.format(this.value(row, col, id), col);\n\t\t},\n\t\tthClasses(id) {\n\t\t\tlet col = this.columns[id];\n\t\t\tlet classes = [id];\n\t\t\tif (col.sort !== false) {\n\t\t\t\tclasses.push('sortable');\n\t\t\t\tif (this.sortState.id === id) {\n\t\t\t\t\tclasses.push('sort-' + this.sortState.direction);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn classes;\n\t\t},\n\t\tthTitle(id) {\n\t\t\tlet col = this.columns[id];\n\t\t\tif (col.sort !== false) {\n\t\t\t\tif (this.sortState.id === id && this.sortState.direction === 'asc') {\n\t\t\t\t\treturn \"Click to sort column in descending order\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn \"Click to sort column in ascending order\";\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tenableSort(id, direction = null) {\n\t\t\tif (this.columns[id].sort === false) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (direction === null) {\n\t\t\t\tdirection = this.sortState.id === id && this.sortState.direction === 'asc' ? 'desc' : 'asc';\n\t\t\t}\n\t\t\tthis.sortState = {id, direction};\n\t\t},\n\t\tsort(data) {\n\t\t\tlet colId = this.sortState.id;\n\t\t\tif (colId === null || !this.columns[colId]) {\n\t\t\t\treturn data;\n\t\t\t}\n\t\t\tlet col = this.columns[colId];\n\t\t\tif (col.sort === false) {\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\treturn data.slice(0).sort((a,b) => {\n\t\t\t\tlet fn = typeof col.sortFn === 'function' ? col.sortFn : Utils.compareStringCaseInsensitive;\n\t\t\t\tlet result = fn(a[colId], b[colId]);\n\t\t\t\treturn this.sortState.direction === 'desc' ? result * -1 : result;\n\t\t\t});\n\t\t},\n\t\tfilter(data) {\n\t\t\tif (!this.hasFilter) {\n\t\t\t\treturn data;\n\t\t\t}\n\t\t\tvar searchTerm = this.filterValue.toLowerCase();\n\n\t\t\treturn data.filter(row => {\n\t\t\t\tlet values = [];\n\t\t\t\tfor(var key in row) {\n\t\t\t\t\tvar col = this.columns[key];\n\t\t\t\t\tif (typeof col === 'undefined' || col.hasOwnProperty('filterable') && col.filterable === false) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tvar value = this.value(row, col, key);\n\t\t\t\t\tif (typeof value === 'number' || typeof value === 'string' || typeof value === 'boolean') {\n\t\t\t\t\t\tvalue = value.toString();\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tvalues.push(value);\n\t\t\t\t}\n\t\t\t\treturn Utils.search(searchTerm, values);\n\t\t\t});\n\t\t},\n\t\tclearFilter() {\n\t\t\tthis.filterValue = '';\n\t\t\tthis.updateView();\n\t\t},\n\t\tupdateView() {\n\t\t\tif (!Array.isArray(this.data)) {\n\t\t\t\tthis.view = [];\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.view = this.sort(this.filter(this.data));\n\t\t},\n\t\tformat(value, col) {\n\t\t\tif (typeof col.format === 'string') {\n\t\t\t\tif (typeof Formatters['format' + col.format] === 'function') {\n\t\t\t\t\treturn Formatters['format' + col.format](value, col);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconsole.warn(col.format + ' is an invalid formatter.');\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (typeof col.format === 'function') {\n\t\t\t\treturn col.format.call(this, value, col);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn DataTypes.format(value);\n\t\t\t}\n\t\t}\n\t}\n}\n</script>\n\n<style lang=\"scss\">\n.vue-component.data-table {\n\ttable {\n\t\twidth: 100%;\n\t\tborder-collapse: collapse;\n\t\ttd, th {\n\t\t\tborder: 1px solid #ddd;\n\t\t\tpadding: 0.2em;\n\t\t}\n\t\tth {\n\t\t\ttext-align: left !important;\n\t\t\t\n\t\t\t&.sortable {\n\t\t\t\tcursor: pointer;\n\n\t\t\t\t&:hover {\n\t\t\t\t\tbackground-color: #eee;\n\t\t\t\t}\n\t\t\t}\n\t\t\t&.sort-asc:after,\n\t\t\t&.sortable:after {\n\t\t\t\tvisibility: hidden;\n\t\t\t\tmargin-left: 5px;\n\t\t\t\tfont-weight: 100;\n\t\t\t\tcontent: \"⇑\";\n\t\t\t}\n\t\t\t&.sort-asc:after,\n\t\t\t&.sortable:hover:after {\n\t\t\t\tvisibility: visible;\n\t\t\t}\n\t\t\t&.sort-desc:after {\n\t\t\t\tvisibility: visible;\n\t\t\t\tmargin-left: 5px;\n\t\t\t\tfont-weight: 100;\n\t\t\t\tcontent: \"⇓\";\n\t\t\t}\n\t\t\t&.sort-asc:hover:after,\n\t\t\t&.sort-desc:hover:after {\n\t\t\t\tvisibility: visible;\n\t\t\t\tmargin-left: 5px;\n\t\t\t\tfont-weight: 100;\n\t\t\t\tcontent: \"⇕\";\n\t\t\t}\n\t\t}\n\t}\n\t.filter-icon {\n\t\tmargin-right: 3px;\n\t}\n\t.no-results td {\n\t\ttext-align: center;\n\t}\n\t.menu {\n\t\tmargin-bottom: 5px;\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t}\n\t.filter {\n\t\tflex-grow: 1;\n\t\ttext-align: right;\n\t\tpadding-left: 1em;\n\t\tmin-width: 4em;\n\t\tmax-width: 20em;\n\t\t.edit {\n\t\t\tcursor: pointer;\n\t\t}\n\t}\n}\n</style>","import mod from \"-!../../../@vue/vue-loader-v15/lib/index.js??vue-loader-options!./DataTable.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../@vue/vue-loader-v15/lib/index.js??vue-loader-options!./DataTable.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./DataTable.vue?vue&type=template&id=aed041f4&\"\nimport script from \"./DataTable.vue?vue&type=script&lang=js&\"\nexport * from \"./DataTable.vue?vue&type=script&lang=js&\"\nimport style0 from \"./DataTable.vue?vue&type=style&index=0&id=aed041f4&prod&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"vue-component file-formats\"},[_c('SearchableList',{attrs:{\"data\":_vm.fileFormats,\"summaryKey\":\"title\",\"keywordsKey\":\"gis_data_types\",\"showSummaryOnExpand\":false,\"externalSearchTerm\":_vm.searchTerm,\"sort\":_vm.sort,\"offerDetails\":_vm.offerDetails,\"heading\":_vm.heading,\"collapsed\":_vm.collapsed},on:{\"detailsToggled\":_vm.detailsToggled},scopedSlots:_vm._u([{key:\"heading\",fn:function(scope){return [_vm._t(\"heading\",null,null,scope)]}},(_vm.missing)?{key:\"content-start\",fn:function(){return [_c('FederationMissingNotice',{attrs:{\"missing\":_vm.missing,\"federation\":_vm.federation}})]},proxy:true}:null,{key:\"summary\",fn:function(slot){return [_vm._t(\"summary\",function(){return [_c('strong',{staticClass:\"inline\"},[_vm._v(_vm._s(slot.item.name))]),_c('ul',{staticClass:\"badges small inline\"},[(_vm.showAll && slot.item.type === 'input')?_c('li',{staticClass:\"badge option1\"},[_vm._v(\"Import\")]):_vm._e(),(_vm.showAll && slot.item.type === 'output')?_c('li',{staticClass:\"badge option2\"},[_vm._v(\"Export\")]):_vm._e(),(Array.isArray(slot.item.gis_data_types))?_vm._l((slot.item.gis_data_types),function(type){return _c('li',{key:type,staticClass:\"badge gis\"},[_vm._v(_vm._s(type))])}):_vm._e()],2),_c('br'),_c('small',[_vm._v(_vm._s(slot.summary.summary))])]},null,slot)]}},{key:\"details\",fn:function(slot){return [_c('FileFormat',{attrs:{\"id\":slot.summary.identifier,\"format\":slot.item,\"type\":slot.item.type,\"federation\":_vm.federation},scopedSlots:_vm._u([{key:\"title\",fn:function(){return [_c('span',{staticClass:\"hidden\"})]},proxy:true},{key:\"badges\",fn:function(){return [_c('span',{staticClass:\"hidden\"})]},proxy:true},{key:\"before-description\",fn:function(scope){return [_vm._t(\"file-format-before-description\",null,null,scope)]}},{key:\"end\",fn:function(scope){return [_vm._t(\"file-format-end\",null,null,scope)]}}],null,true)})]}}],null,true)})],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n\t<div class=\"vue-component file-formats\">\n\t\t<SearchableList :data=\"fileFormats\" summaryKey=\"title\" keywordsKey=\"gis_data_types\" :showSummaryOnExpand=\"false\" :externalSearchTerm=\"searchTerm\" :sort=\"sort\" :offerDetails=\"offerDetails\" :heading=\"heading\" :collapsed=\"collapsed\" @detailsToggled=\"detailsToggled\">\n\t\t\t<template #heading=\"scope\"><slot name=\"heading\" v-bind=\"scope\" /></template>\n\t\t\t<template v-if=\"missing\" #content-start><FederationMissingNotice :missing=\"missing\" :federation=\"federation\" /></template>\n\t\t\t<template #summary=\"slot\">\n\t\t\t\t<slot name=\"summary\" v-bind=\"slot\">\n\t\t\t\t\t<strong class=\"inline\">{{ slot.item.name }}</strong>\n\t\t\t\t\t<ul class=\"badges small inline\">\n\t\t\t\t\t\t<li class=\"badge option1\" v-if=\"showAll && slot.item.type === 'input'\">Import</li>\n\t\t\t\t\t\t<li class=\"badge option2\" v-if=\"showAll && slot.item.type === 'output'\">Export</li>\n\t\t\t\t\t\t<template v-if=\"Array.isArray(slot.item.gis_data_types)\">\n\t\t\t\t\t\t\t<li class=\"badge gis\" v-for=\"type in slot.item.gis_data_types\" :key=\"type\">{{ type }}</li>\n\t\t\t\t\t\t</template>\n\t\t\t\t\t</ul><br />\n\t\t\t\t\t<small>{{ slot.summary.summary }}</small>\n\t\t\t\t</slot>\n\t\t\t</template>\n\t\t\t<template #details=\"slot\">\n\t\t\t\t<FileFormat :id=\"slot.summary.identifier\" :format=\"slot.item\" :type=\"slot.item.type\" :federation=\"federation\">\n\t\t\t\t\t<template #title><span class=\"hidden\" /></template>\n\t\t\t\t\t<template #badges><span class=\"hidden\" /></template>\n\t\t\t\t\t<template #before-description=\"scope\"><slot name=\"file-format-before-description\" v-bind=\"scope\" /></template>\n\t\t\t\t\t<template #end=\"scope\"><slot name=\"file-format-end\" v-bind=\"scope\" /></template>\n\t\t\t\t</FileFormat>\n\t\t\t</template>\n\t\t</SearchableList>\n\t</div>\n</template>\n\n<script>\nimport Utils from '../utils.js';\nimport FederationMixin from './internal/FederationMixin.js';\n\nexport default {\n\tname: 'FileFormats',\n\tcomponents: {\n\t\tSearchableList: () => Utils.loadAsyncComponent(import('./SearchableList.vue')),\n\t\tFileFormat: () => Utils.loadAsyncComponent(import('./FileFormat.vue'))\n\t},\n\tmixins: [\n\t\tFederationMixin\n\t],\n\tprops: {\n\t\tformats: {\n\t\t\ttype: Object,\n\t\t\tdefault: () => ({})\n\t\t},\n\t\tshowInput: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: true\n\t\t},\n\t\tshowOutput: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: true\n\t\t},\n\t\tsearchTerm: {\n\t\t\ttype: String,\n\t\t\tdefault: null\n\t\t},\n\t\tsort: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: true\n\t\t},\n\t\tofferDetails: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: true\n\t\t},\n\t\theading: {\n\t\t\ttype: String,\n\t\t\tdefault: 'File Formats'\n\t\t},\n\t\tcollapsed: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: null\n\t\t},\n\t\tmissing: {\n\t\t\ttype: Array,\n\t\t\tdefault: null\n\t\t},\n\t\t...FederationMixin.props\n\t},\n\tcomputed: {\n\t\tshowAll() {\n\t\t\treturn this.showInput && this.showOutput;\n\t\t},\n\t\ttypesToShow() {\n\t\t\tlet types = [];\n\t\t\tif (this.showInput) {\n\t\t\t\ttypes.push('input');\n\t\t\t}\n\t\t\tif (this.showOutput) {\n\t\t\t\ttypes.push('output');\n\t\t\t}\n\t\t\treturn types;\n\t\t},\n\t\tfileFormats() {\n\t\t\tlet data = [];\n\t\t\tfor(let type of this.typesToShow) {\n\t\t\t\tfor(var name in this.formats[type]) {\n\t\t\t\t\tlet format = Object.assign({id: `${name}-${type}`, name, type}, this.formats[type][name]);\n\t\t\t\t\tdata.push(format);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn data;\n\t\t}\n\t},\n\tbeforeCreate() {\n\t\tUtils.enableHtmlProps(this);\n\t},\n\tmethods: {\n\t\tdetailsToggled(...args) {\n\t\t\tthis.$emit('detailsToggled', ...args);\n\t\t}\n\t}\n}\n</script>\n\n<style lang=\"scss\">\n@import './base.scss';\n</style>","import mod from \"-!../../../@vue/vue-loader-v15/lib/index.js??vue-loader-options!./FileFormats.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../@vue/vue-loader-v15/lib/index.js??vue-loader-options!./FileFormats.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./FileFormats.vue?vue&type=template&id=9d030978&\"\nimport script from \"./FileFormats.vue?vue&type=script&lang=js&\"\nexport * from \"./FileFormats.vue?vue&type=script&lang=js&\"\nimport style0 from \"./FileFormats.vue?vue&type=style&index=0&id=9d030978&prod&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","const registry = new Map();\n\nexport function addDecoder(cases, importFn) {\n  if (!Array.isArray(cases)) {\n    cases = [cases]; // eslint-disable-line no-param-reassign\n  }\n  cases.forEach((c) => registry.set(c, importFn));\n}\n\nexport async function getDecoder(fileDirectory) {\n  const importFn = registry.get(fileDirectory.Compression);\n  if (!importFn) {\n    throw new Error(`Unknown compression method identifier: ${fileDirectory.Compression}`);\n  }\n  const Decoder = await importFn();\n  return new Decoder(fileDirectory);\n}\n\n// Add default decoders to registry (end-user may override with other implementations)\naddDecoder([undefined, 1], () => import('./raw.js').then((m) => m.default));\naddDecoder(5, () => import('./lzw.js').then((m) => m.default));\naddDecoder(6, () => {\n  throw new Error('old style JPEG compression is not supported.');\n});\naddDecoder(7, () => import('./jpeg.js').then((m) => m.default));\naddDecoder([8, 32946], () => import('./deflate.js').then((m) => m.default));\naddDecoder(32773, () => import('./packbits.js').then((m) => m.default));\naddDecoder(34887, () => import('./lerc.js').then((m) => m.default));\naddDecoder(50001, () => import('./webimage.js').then((m) => m.default));\n","import { getFloat16 } from '@petamoriken/float16';\n\nexport default class DataView64 {\n  constructor(arrayBuffer) {\n    this._dataView = new DataView(arrayBuffer);\n  }\n\n  get buffer() {\n    return this._dataView.buffer;\n  }\n\n  getUint64(offset, littleEndian) {\n    const left = this.getUint32(offset, littleEndian);\n    const right = this.getUint32(offset + 4, littleEndian);\n    let combined;\n    if (littleEndian) {\n      combined = left + ((2 ** 32) * right);\n      if (!Number.isSafeInteger(combined)) {\n        throw new Error(\n          `${combined} exceeds MAX_SAFE_INTEGER. `\n          + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n        );\n      }\n      return combined;\n    }\n    combined = ((2 ** 32) * left) + right;\n    if (!Number.isSafeInteger(combined)) {\n      throw new Error(\n        `${combined} exceeds MAX_SAFE_INTEGER. `\n        + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n      );\n    }\n\n    return combined;\n  }\n\n  // adapted from https://stackoverflow.com/a/55338384/8060591\n  getInt64(offset, littleEndian) {\n    let value = 0;\n    const isNegative = (this._dataView.getUint8(offset + (littleEndian ? 7 : 0)) & 0x80) > 0;\n    let carrying = true;\n    for (let i = 0; i < 8; i++) {\n      let byte = this._dataView.getUint8(offset + (littleEndian ? i : 7 - i));\n      if (isNegative) {\n        if (carrying) {\n          if (byte !== 0x00) {\n            byte = ~(byte - 1) & 0xff;\n            carrying = false;\n          }\n        } else {\n          byte = ~byte & 0xff;\n        }\n      }\n      value += byte * (256 ** i);\n    }\n    if (isNegative) {\n      value = -value;\n    }\n    return value;\n  }\n\n  getUint8(offset, littleEndian) {\n    return this._dataView.getUint8(offset, littleEndian);\n  }\n\n  getInt8(offset, littleEndian) {\n    return this._dataView.getInt8(offset, littleEndian);\n  }\n\n  getUint16(offset, littleEndian) {\n    return this._dataView.getUint16(offset, littleEndian);\n  }\n\n  getInt16(offset, littleEndian) {\n    return this._dataView.getInt16(offset, littleEndian);\n  }\n\n  getUint32(offset, littleEndian) {\n    return this._dataView.getUint32(offset, littleEndian);\n  }\n\n  getInt32(offset, littleEndian) {\n    return this._dataView.getInt32(offset, littleEndian);\n  }\n\n  getFloat16(offset, littleEndian) {\n    return getFloat16(this._dataView, offset, littleEndian);\n  }\n\n  getFloat32(offset, littleEndian) {\n    return this._dataView.getFloat32(offset, littleEndian);\n  }\n\n  getFloat64(offset, littleEndian) {\n    return this._dataView.getFloat64(offset, littleEndian);\n  }\n}\n","export default class DataSlice {\n  constructor(arrayBuffer, sliceOffset, littleEndian, bigTiff) {\n    this._dataView = new DataView(arrayBuffer);\n    this._sliceOffset = sliceOffset;\n    this._littleEndian = littleEndian;\n    this._bigTiff = bigTiff;\n  }\n\n  get sliceOffset() {\n    return this._sliceOffset;\n  }\n\n  get sliceTop() {\n    return this._sliceOffset + this.buffer.byteLength;\n  }\n\n  get littleEndian() {\n    return this._littleEndian;\n  }\n\n  get bigTiff() {\n    return this._bigTiff;\n  }\n\n  get buffer() {\n    return this._dataView.buffer;\n  }\n\n  covers(offset, length) {\n    return this.sliceOffset <= offset && this.sliceTop >= offset + length;\n  }\n\n  readUint8(offset) {\n    return this._dataView.getUint8(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readInt8(offset) {\n    return this._dataView.getInt8(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readUint16(offset) {\n    return this._dataView.getUint16(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readInt16(offset) {\n    return this._dataView.getInt16(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readUint32(offset) {\n    return this._dataView.getUint32(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readInt32(offset) {\n    return this._dataView.getInt32(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readFloat32(offset) {\n    return this._dataView.getFloat32(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readFloat64(offset) {\n    return this._dataView.getFloat64(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readUint64(offset) {\n    const left = this.readUint32(offset);\n    const right = this.readUint32(offset + 4);\n    let combined;\n    if (this._littleEndian) {\n      combined = left + ((2 ** 32) * right);\n      if (!Number.isSafeInteger(combined)) {\n        throw new Error(\n          `${combined} exceeds MAX_SAFE_INTEGER. `\n          + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n        );\n      }\n      return combined;\n    }\n    combined = ((2 ** 32) * left) + right;\n    if (!Number.isSafeInteger(combined)) {\n      throw new Error(\n        `${combined} exceeds MAX_SAFE_INTEGER. `\n        + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n      );\n    }\n\n    return combined;\n  }\n\n  // adapted from https://stackoverflow.com/a/55338384/8060591\n  readInt64(offset) {\n    let value = 0;\n    const isNegative = (this._dataView.getUint8(offset + (this._littleEndian ? 7 : 0)) & 0x80)\n      > 0;\n    let carrying = true;\n    for (let i = 0; i < 8; i++) {\n      let byte = this._dataView.getUint8(\n        offset + (this._littleEndian ? i : 7 - i),\n      );\n      if (isNegative) {\n        if (carrying) {\n          if (byte !== 0x00) {\n            byte = ~(byte - 1) & 0xff;\n            carrying = false;\n          }\n        } else {\n          byte = ~byte & 0xff;\n        }\n      }\n      value += byte * (256 ** i);\n    }\n    if (isNegative) {\n      value = -value;\n    }\n    return value;\n  }\n\n  readOffset(offset) {\n    if (this._bigTiff) {\n      return this.readUint64(offset);\n    }\n    return this.readUint32(offset);\n  }\n}\n","const CRLFCRLF = '\\r\\n\\r\\n';\n\n/*\n * Shim for 'Object.fromEntries'\n */\nfunction itemsToObject(items) {\n  if (typeof Object.fromEntries !== 'undefined') {\n    return Object.fromEntries(items);\n  }\n  const obj = {};\n  for (const [key, value] of items) {\n    obj[key.toLowerCase()] = value;\n  }\n  return obj;\n}\n\n/**\n * Parse HTTP headers from a given string.\n * @param {String} text the text to parse the headers from\n * @returns {Object} the parsed headers with lowercase keys\n */\nfunction parseHeaders(text) {\n  const items = text\n    .split('\\r\\n')\n    .map((line) => {\n      const kv = line.split(':').map((str) => str.trim());\n      kv[0] = kv[0].toLowerCase();\n      return kv;\n    });\n\n  return itemsToObject(items);\n}\n\n/**\n * Parse a 'Content-Type' header value to the content-type and parameters\n * @param {String} rawContentType the raw string to parse from\n * @returns {Object} the parsed content type with the fields: type and params\n */\nexport function parseContentType(rawContentType) {\n  const [type, ...rawParams] = rawContentType.split(';').map((s) => s.trim());\n  const paramsItems = rawParams.map((param) => param.split('='));\n  return { type, params: itemsToObject(paramsItems) };\n}\n\n/**\n * Parse a 'Content-Range' header value to its start, end, and total parts\n * @param {String} rawContentRange the raw string to parse from\n * @returns {Object} the parsed parts\n */\nexport function parseContentRange(rawContentRange) {\n  let start;\n  let end;\n  let total;\n\n  if (rawContentRange) {\n    [, start, end, total] = rawContentRange.match(/bytes (\\d+)-(\\d+)\\/(\\d+)/);\n    start = parseInt(start, 10);\n    end = parseInt(end, 10);\n    total = parseInt(total, 10);\n  }\n\n  return { start, end, total };\n}\n\n/**\n * Parses a list of byteranges from the given 'multipart/byteranges' HTTP response.\n * Each item in the list has the following properties:\n * - headers: the HTTP headers\n * - data: the sliced ArrayBuffer for that specific part\n * - offset: the offset of the byterange within its originating file\n * - length: the length of the byterange\n * @param {ArrayBuffer} responseArrayBuffer the response to be parsed and split\n * @param {String} boundary the boundary string used to split the sections\n * @returns {Object[]} the parsed byteranges\n */\nexport function parseByteRanges(responseArrayBuffer, boundary) {\n  let offset = null;\n  const decoder = new TextDecoder('ascii');\n  const out = [];\n\n  const startBoundary = `--${boundary}`;\n  const endBoundary = `${startBoundary}--`;\n\n  // search for the initial boundary, may be offset by some bytes\n  // TODO: more efficient to check for `--` in bytes directly\n  for (let i = 0; i < 10; ++i) {\n    const text = decoder.decode(\n      new Uint8Array(responseArrayBuffer, i, startBoundary.length),\n    );\n    if (text === startBoundary) {\n      offset = i;\n    }\n  }\n\n  if (offset === null) {\n    throw new Error('Could not find initial boundary');\n  }\n\n  while (offset < responseArrayBuffer.byteLength) {\n    const text = decoder.decode(\n      new Uint8Array(responseArrayBuffer, offset,\n        Math.min(startBoundary.length + 1024, responseArrayBuffer.byteLength - offset),\n      ),\n    );\n\n    // break if we arrived at the end\n    if (text.length === 0 || text.startsWith(endBoundary)) {\n      break;\n    }\n\n    // assert that we are actually dealing with a byterange and are at the correct offset\n    if (!text.startsWith(startBoundary)) {\n      throw new Error('Part does not start with boundary');\n    }\n\n    // get a substring from where we read the headers\n    const innerText = text.substr(startBoundary.length + 2);\n\n    if (innerText.length === 0) {\n      break;\n    }\n\n    // find the double linebreak that denotes the end of the headers\n    const endOfHeaders = innerText.indexOf(CRLFCRLF);\n\n    // parse the headers to get the content range size\n    const headers = parseHeaders(innerText.substr(0, endOfHeaders));\n    const { start, end, total } = parseContentRange(headers['content-range']);\n\n    // calculate the length of the slice and the next offset\n    const startOfData = offset + startBoundary.length + endOfHeaders + CRLFCRLF.length;\n    const length = parseInt(end, 10) + 1 - parseInt(start, 10);\n    out.push({\n      headers,\n      data: responseArrayBuffer.slice(startOfData, startOfData + length),\n      offset: start,\n      length,\n      fileSize: total,\n    });\n\n    offset = startOfData + length + 4;\n  }\n\n  return out;\n}\n","/**\n * @typedef Slice\n * @property {number} offset\n * @property {number} length\n */\n\nexport class BaseSource {\n  /**\n   *\n   * @param {Slice[]} slices\n   * @returns {ArrayBuffer[]}\n   */\n  async fetch(slices, signal = undefined) {\n    return Promise.all(\n      slices.map((slice) => this.fetchSlice(slice, signal)),\n    );\n  }\n\n  /**\n   *\n   * @param {Slice} slice\n   * @returns {ArrayBuffer}\n   */\n  async fetchSlice(slice) {\n    throw new Error(`fetching of slice ${slice} not possible, not implemented`);\n  }\n\n  /**\n   * Returns the filesize if already determined and null otherwise\n   */\n  get fileSize() {\n    return null;\n  }\n\n  async close() {\n    // no-op by default\n  }\n}\n","export function assign(target, source) {\n  for (const key in source) {\n    if (source.hasOwnProperty(key)) {\n      target[key] = source[key];\n    }\n  }\n}\n\nexport function chunk(iterable, length) {\n  const results = [];\n  const lengthOfIterable = iterable.length;\n  for (let i = 0; i < lengthOfIterable; i += length) {\n    const chunked = [];\n    for (let ci = i; ci < i + length; ci++) {\n      chunked.push(iterable[ci]);\n    }\n    results.push(chunked);\n  }\n  return results;\n}\n\nexport function endsWith(string, expectedEnding) {\n  if (string.length < expectedEnding.length) {\n    return false;\n  }\n  const actualEnding = string.substr(string.length - expectedEnding.length);\n  return actualEnding === expectedEnding;\n}\n\nexport function forEach(iterable, func) {\n  const { length } = iterable;\n  for (let i = 0; i < length; i++) {\n    func(iterable[i], i);\n  }\n}\n\nexport function invert(oldObj) {\n  const newObj = {};\n  for (const key in oldObj) {\n    if (oldObj.hasOwnProperty(key)) {\n      const value = oldObj[key];\n      newObj[value] = key;\n    }\n  }\n  return newObj;\n}\n\nexport function range(n) {\n  const results = [];\n  for (let i = 0; i < n; i++) {\n    results.push(i);\n  }\n  return results;\n}\n\nexport function times(numTimes, func) {\n  const results = [];\n  for (let i = 0; i < numTimes; i++) {\n    results.push(func(i));\n  }\n  return results;\n}\n\nexport function toArray(iterable) {\n  const results = [];\n  const { length } = iterable;\n  for (let i = 0; i < length; i++) {\n    results.push(iterable[i]);\n  }\n  return results;\n}\n\nexport function toArrayRecursively(input) {\n  if (input.length) {\n    return toArray(input).map(toArrayRecursively);\n  }\n  return input;\n}\n\n// copied from https://github.com/academia-de-codigo/parse-content-range-header/blob/master/index.js\nexport function parseContentRange(headerValue) {\n  if (!headerValue) {\n    return null;\n  }\n\n  if (typeof headerValue !== 'string') {\n    throw new Error('invalid argument');\n  }\n\n  const parseInt = (number) => Number.parseInt(number, 10);\n\n  // Check for presence of unit\n  let matches = headerValue.match(/^(\\w*) /);\n  const unit = matches && matches[1];\n\n  // check for start-end/size header format\n  matches = headerValue.match(/(\\d+)-(\\d+)\\/(\\d+|\\*)/);\n  if (matches) {\n    return {\n      unit,\n      first: parseInt(matches[1]),\n      last: parseInt(matches[2]),\n      length: matches[3] === '*' ? null : parseInt(matches[3]),\n    };\n  }\n\n  // check for size header format\n  matches = headerValue.match(/(\\d+|\\*)/);\n  if (matches) {\n    return {\n      unit,\n      first: null,\n      last: null,\n      length: matches[1] === '*' ? null : parseInt(matches[1]),\n    };\n  }\n\n  return null;\n}\n\n/*\n * Promisified wrapper around 'setTimeout' to allow 'await'\n */\nexport async function wait(milliseconds) {\n  return new Promise((resolve) => setTimeout(resolve, milliseconds));\n}\n\nexport function zip(a, b) {\n  const A = Array.isArray(a) ? a : Array.from(a);\n  const B = Array.isArray(b) ? b : Array.from(b);\n  return A.map((k, i) => [k, B[i]]);\n}\n\n// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\nexport class AbortError extends Error {\n  constructor(params) {\n    // Pass remaining arguments (including vendor specific ones) to parent constructor\n    super(params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, AbortError);\n    }\n\n    this.name = 'AbortError';\n  }\n}\n\nexport class CustomAggregateError extends Error {\n  constructor(errors, message) {\n    super(message);\n    this.errors = errors;\n    this.message = message;\n    this.name = 'AggregateError';\n  }\n}\n\nexport const AggregateError = CustomAggregateError;\n","import QuickLRU from 'quick-lru';\nimport { BaseSource } from './basesource.js';\nimport { AbortError, AggregateError, wait, zip } from '../utils.js';\n\nclass Block {\n  /**\n   *\n   * @param {number} offset\n   * @param {number} length\n   * @param {ArrayBuffer} [data]\n   */\n  constructor(offset, length, data = null) {\n    this.offset = offset;\n    this.length = length;\n    this.data = data;\n  }\n\n  /**\n   * @returns {number} the top byte border\n   */\n  get top() {\n    return this.offset + this.length;\n  }\n}\n\nclass BlockGroup {\n  /**\n   *\n   * @param {number} offset\n   * @param {number} length\n   * @param {number[]} blockIds\n   */\n  constructor(offset, length, blockIds) {\n    this.offset = offset;\n    this.length = length;\n    this.blockIds = blockIds;\n  }\n}\n\nexport class BlockedSource extends BaseSource {\n  /**\n   *\n   * @param {BaseSource} source The underlying source that shall be blocked and cached\n   * @param {object} options\n   * @param {number} [options.blockSize]\n   * @param {number} [options.cacheSize]\n   */\n  constructor(source, { blockSize = 65536, cacheSize = 100 } = {}) {\n    super();\n    this.source = source;\n    this.blockSize = blockSize;\n\n    this.blockCache = new QuickLRU({\n      maxSize: cacheSize,\n      onEviction: (blockId, block) => {\n        this.evictedBlocks.set(blockId, block);\n      },\n    });\n\n    /** @type {Map<number, Block>} */\n    this.evictedBlocks = new Map();\n\n    // mapping blockId -> Block instance\n    this.blockRequests = new Map();\n\n    // set of blockIds missing for the current requests\n    this.blockIdsToFetch = new Set();\n\n    this.abortedBlockIds = new Set();\n  }\n\n  get fileSize() {\n    return this.source.fileSize;\n  }\n\n  /**\n   *\n   * @param {import(\"./basesource\").Slice[]} slices\n   */\n  async fetch(slices, signal) {\n    const blockRequests = [];\n    const missingBlockIds = [];\n    const allBlockIds = [];\n    this.evictedBlocks.clear();\n\n    for (const { offset, length } of slices) {\n      let top = offset + length;\n\n      const { fileSize } = this;\n      if (fileSize !== null) {\n        top = Math.min(top, fileSize);\n      }\n\n      const firstBlockOffset = Math.floor(offset / this.blockSize) * this.blockSize;\n\n      for (let current = firstBlockOffset; current < top; current += this.blockSize) {\n        const blockId = Math.floor(current / this.blockSize);\n        if (!this.blockCache.has(blockId) && !this.blockRequests.has(blockId)) {\n          this.blockIdsToFetch.add(blockId);\n          missingBlockIds.push(blockId);\n        }\n        if (this.blockRequests.has(blockId)) {\n          blockRequests.push(this.blockRequests.get(blockId));\n        }\n        allBlockIds.push(blockId);\n      }\n    }\n\n    // allow additional block requests to accumulate\n    await wait();\n    this.fetchBlocks(signal);\n\n    // Gather all of the new requests that this fetch call is contributing to `fetch`.\n    const missingRequests = [];\n    for (const blockId of missingBlockIds) {\n      // The requested missing block could already be in the cache\n      // instead of having its request still be outstanding.\n      if (this.blockRequests.has(blockId)) {\n        missingRequests.push(this.blockRequests.get(blockId));\n      }\n    }\n\n    // Actually await all pending requests that are needed for this `fetch`.\n    await Promise.allSettled(blockRequests);\n    await Promise.allSettled(missingRequests);\n\n    // Perform retries if a block was interrupted by a previous signal\n    const abortedBlockRequests = [];\n    const abortedBlockIds = allBlockIds\n      .filter((id) => this.abortedBlockIds.has(id) || !this.blockCache.has(id));\n    abortedBlockIds.forEach((id) => this.blockIdsToFetch.add(id));\n    // start the retry of some blocks if required\n    if (abortedBlockIds.length > 0 && signal && !signal.aborted) {\n      this.fetchBlocks(null);\n      for (const blockId of abortedBlockIds) {\n        const block = this.blockRequests.get(blockId);\n        if (!block) {\n          throw new Error(`Block ${blockId} is not in the block requests`);\n        }\n        abortedBlockRequests.push(block);\n      }\n      await Promise.allSettled(abortedBlockRequests);\n    }\n\n    // throw an  abort error\n    if (signal && signal.aborted) {\n      throw new AbortError('Request was aborted');\n    }\n\n    const blocks = allBlockIds.map((id) => this.blockCache.get(id) || this.evictedBlocks.get(id));\n    const failedBlocks = blocks.filter((i) => !i);\n    if (failedBlocks.length) {\n      throw new AggregateError(failedBlocks, 'Request failed');\n    }\n\n    // create a final Map, with all required blocks for this request to satisfy\n    const requiredBlocks = new Map(zip(allBlockIds, blocks));\n\n    // TODO: satisfy each slice\n    return this.readSliceData(slices, requiredBlocks);\n  }\n\n  /**\n   *\n   * @param {AbortSignal} signal\n   */\n  fetchBlocks(signal) {\n    // check if we still need to\n    if (this.blockIdsToFetch.size > 0) {\n      const groups = this.groupBlocks(this.blockIdsToFetch);\n\n      // start requesting slices of data\n      const groupRequests = this.source.fetch(groups, signal);\n\n      for (let groupIndex = 0; groupIndex < groups.length; ++groupIndex) {\n        const group = groups[groupIndex];\n\n        for (const blockId of group.blockIds) {\n          // make an async IIFE for each block\n          this.blockRequests.set(blockId, (async () => {\n            try {\n              const response = (await groupRequests)[groupIndex];\n              const blockOffset = blockId * this.blockSize;\n              const o = blockOffset - response.offset;\n              const t = Math.min(o + this.blockSize, response.data.byteLength);\n              const data = response.data.slice(o, t);\n              const block = new Block(\n                blockOffset,\n                data.byteLength,\n                data,\n                blockId,\n              );\n              this.blockCache.set(blockId, block);\n              this.abortedBlockIds.delete(blockId);\n            } catch (err) {\n              if (err.name === 'AbortError') {\n                // store the signal here, we need it to determine later if an\n                // error was caused by this signal\n                err.signal = signal;\n                this.blockCache.delete(blockId);\n                this.abortedBlockIds.add(blockId);\n              } else {\n                throw err;\n              }\n            } finally {\n              this.blockRequests.delete(blockId);\n            }\n          })());\n        }\n      }\n      this.blockIdsToFetch.clear();\n    }\n  }\n\n  /**\n   *\n   * @param {Set} blockIds\n   * @returns {BlockGroup[]}\n   */\n  groupBlocks(blockIds) {\n    const sortedBlockIds = Array.from(blockIds).sort((a, b) => a - b);\n    if (sortedBlockIds.length === 0) {\n      return [];\n    }\n    let current = [];\n    let lastBlockId = null;\n    const groups = [];\n\n    for (const blockId of sortedBlockIds) {\n      if (lastBlockId === null || lastBlockId + 1 === blockId) {\n        current.push(blockId);\n        lastBlockId = blockId;\n      } else {\n        groups.push(new BlockGroup(\n          current[0] * this.blockSize,\n          current.length * this.blockSize,\n          current,\n        ));\n        current = [blockId];\n        lastBlockId = blockId;\n      }\n    }\n\n    groups.push(new BlockGroup(\n      current[0] * this.blockSize,\n      current.length * this.blockSize,\n      current,\n    ));\n\n    return groups;\n  }\n\n  /**\n   *\n   * @param {import(\"./basesource\").Slice[]} slices\n   * @param {Map} blocks\n   */\n  readSliceData(slices, blocks) {\n    return slices.map((slice) => {\n      let top = slice.offset + slice.length;\n      if (this.fileSize !== null) {\n        top = Math.min(this.fileSize, top);\n      }\n      const blockIdLow = Math.floor(slice.offset / this.blockSize);\n      const blockIdHigh = Math.floor(top / this.blockSize);\n      const sliceData = new ArrayBuffer(slice.length);\n      const sliceView = new Uint8Array(sliceData);\n\n      for (let blockId = blockIdLow; blockId <= blockIdHigh; ++blockId) {\n        const block = blocks.get(blockId);\n        const delta = block.offset - slice.offset;\n        const topDelta = block.top - top;\n        let blockInnerOffset = 0;\n        let rangeInnerOffset = 0;\n        let usedBlockLength;\n\n        if (delta < 0) {\n          blockInnerOffset = -delta;\n        } else if (delta > 0) {\n          rangeInnerOffset = delta;\n        }\n\n        if (topDelta < 0) {\n          usedBlockLength = block.length - blockInnerOffset;\n        } else {\n          usedBlockLength = top - block.offset - blockInnerOffset;\n        }\n\n        const blockView = new Uint8Array(block.data, blockInnerOffset, usedBlockLength);\n        sliceView.set(blockView, rangeInnerOffset);\n      }\n\n      return sliceData;\n    });\n  }\n}\n","export class BaseResponse {\n  /**\n   * Returns whether the response has an ok'ish status code\n   */\n  get ok() {\n    return this.status >= 200 && this.status <= 299;\n  }\n\n  /**\n   * Returns the status code of the response\n   */\n  get status() {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * Returns the value of the specified header\n   * @param {string} headerName the header name\n   * @returns {string} the header value\n   */\n  getHeader(headerName) { // eslint-disable-line no-unused-vars\n    throw new Error('not implemented');\n  }\n\n  /**\n   * @returns {ArrayBuffer} the response data of the request\n   */\n  async getData() {\n    throw new Error('not implemented');\n  }\n}\n\nexport class BaseClient {\n  constructor(url) {\n    this.url = url;\n  }\n\n  /**\n   * Send a request with the options\n   * @param {object} [options]\n   */\n  async request({ headers, credentials, signal } = {}) { // eslint-disable-line no-unused-vars\n    throw new Error('request is not implemented');\n  }\n}\n","import { BaseClient, BaseResponse } from './base.js';\n\nclass FetchResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for fetch API Response\n   * @param {Response} response\n   */\n  constructor(response) {\n    super();\n    this.response = response;\n  }\n\n  get status() {\n    return this.response.status;\n  }\n\n  getHeader(name) {\n    return this.response.headers.get(name);\n  }\n\n  async getData() {\n    const data = this.response.arrayBuffer\n      ? await this.response.arrayBuffer()\n      : (await this.response.buffer()).buffer;\n    return data;\n  }\n}\n\nexport class FetchClient extends BaseClient {\n  constructor(url, credentials) {\n    super(url);\n    this.credentials = credentials;\n  }\n\n  async request({ headers, credentials, signal } = {}) {\n    const response = await fetch(this.url, {\n      headers, credentials, signal,\n    });\n    return new FetchResponse(response);\n  }\n}\n","import { BaseClient, BaseResponse } from './base.js';\nimport { AbortError } from '../../utils.js';\n\nclass XHRResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for XMLHttpRequest\n   * @param {XMLHttpRequest} xhr\n   * @param {ArrayBuffer} data\n   */\n  constructor(xhr, data) {\n    super();\n    this.xhr = xhr;\n    this.data = data;\n  }\n\n  get status() {\n    return this.xhr.status;\n  }\n\n  getHeader(name) {\n    return this.xhr.getResponseHeader(name);\n  }\n\n  async getData() {\n    return this.data;\n  }\n}\n\nexport class XHRClient extends BaseClient {\n  constructRequest(headers, signal) {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.open('GET', this.url);\n      xhr.responseType = 'arraybuffer';\n      for (const [key, value] of Object.entries(headers)) {\n        xhr.setRequestHeader(key, value);\n      }\n\n      // hook signals\n      xhr.onload = () => {\n        const data = xhr.response;\n        resolve(new XHRResponse(xhr, data));\n      };\n      xhr.onerror = reject;\n      xhr.onabort = () => reject(new AbortError('Request aborted'));\n      xhr.send();\n\n      if (signal) {\n        if (signal.aborted) {\n          xhr.abort();\n        }\n        signal.addEventListener('abort', () => xhr.abort());\n      }\n    });\n  }\n\n  async request({ headers, signal } = {}) {\n    const response = await this.constructRequest(headers, signal);\n    return response;\n  }\n}\n","import http from 'http';\nimport https from 'https';\nimport urlMod from 'url';\n\nimport { BaseClient, BaseResponse } from './base.js';\nimport { AbortError } from '../../utils.js';\n\nclass HttpResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for node HTTP/HTTPS API Response\n   * @param {http.ServerResponse} response\n   */\n  constructor(response, dataPromise) {\n    super();\n    this.response = response;\n    this.dataPromise = dataPromise;\n  }\n\n  get status() {\n    return this.response.statusCode;\n  }\n\n  getHeader(name) {\n    return this.response.headers[name];\n  }\n\n  async getData() {\n    const data = await this.dataPromise;\n    return data;\n  }\n}\n\nexport class HttpClient extends BaseClient {\n  constructor(url) {\n    super(url);\n    this.parsedUrl = urlMod.parse(this.url);\n    this.httpApi = (this.parsedUrl.protocol === 'http:' ? http : https);\n  }\n\n  constructRequest(headers, signal) {\n    return new Promise((resolve, reject) => {\n      const request = this.httpApi.get(\n        {\n          ...this.parsedUrl,\n          headers,\n        },\n        (response) => {\n          const dataPromise = new Promise((resolveData) => {\n            const chunks = [];\n\n            // collect chunks\n            response.on('data', (chunk) => {\n              chunks.push(chunk);\n            });\n\n            // concatenate all chunks and resolve the promise with the resulting buffer\n            response.on('end', () => {\n              const data = Buffer.concat(chunks).buffer;\n              resolveData(data);\n            });\n            response.on('error', reject);\n          });\n          resolve(new HttpResponse(response, dataPromise));\n        },\n      );\n      request.on('error', reject);\n\n      if (signal) {\n        if (signal.aborted) {\n          request.destroy(new AbortError('Request aborted'));\n        }\n        signal.addEventListener('abort', () => request.destroy(new AbortError('Request aborted')));\n      }\n    });\n  }\n\n  async request({ headers, signal } = {}) {\n    const response = await this.constructRequest(headers, signal);\n    return response;\n  }\n}\n","import { parseByteRanges, parseContentRange, parseContentType } from './httputils.js';\nimport { BaseSource } from './basesource.js';\nimport { BlockedSource } from './blockedsource.js';\n\nimport { FetchClient } from './client/fetch.js';\nimport { XHRClient } from './client/xhr.js';\nimport { HttpClient } from './client/http.js';\n\nclass RemoteSource extends BaseSource {\n  /**\n   *\n   * @param {BaseClient} client\n   * @param {object} headers\n   * @param {numbers} maxRanges\n   * @param {boolean} allowFullFile\n   */\n  constructor(client, headers, maxRanges, allowFullFile) {\n    super();\n    this.client = client;\n    this.headers = headers;\n    this.maxRanges = maxRanges;\n    this.allowFullFile = allowFullFile;\n    this._fileSize = null;\n  }\n\n  /**\n   *\n   * @param {Slice[]} slices\n   */\n  async fetch(slices, signal) {\n    // if we allow multi-ranges, split the incoming request into that many sub-requests\n    // and join them afterwards\n    if (this.maxRanges >= slices.length) {\n      return this.fetchSlices(slices, signal);\n    } else if (this.maxRanges > 0 && slices.length > 1) {\n      // TODO: split into multiple multi-range requests\n\n      // const subSlicesRequests = [];\n      // for (let i = 0; i < slices.length; i += this.maxRanges) {\n      //   subSlicesRequests.push(\n      //     this.fetchSlices(slices.slice(i, i + this.maxRanges), signal),\n      //   );\n      // }\n      // return (await Promise.all(subSlicesRequests)).flat();\n    }\n\n    // otherwise make a single request for each slice\n    return Promise.all(\n      slices.map((slice) => this.fetchSlice(slice, signal)),\n    );\n  }\n\n  async fetchSlices(slices, signal) {\n    const response = await this.client.request({\n      headers: {\n        ...this.headers,\n        Range: `bytes=${slices\n          .map(({ offset, length }) => `${offset}-${offset + length}`)\n          .join(',')\n        }`,\n      },\n      signal,\n    });\n\n    if (!response.ok) {\n      throw new Error('Error fetching data.');\n    } else if (response.status === 206) {\n      const { type, params } = parseContentType(response.getHeader('content-type'));\n      if (type === 'multipart/byteranges') {\n        const byteRanges = parseByteRanges(await response.getData(), params.boundary);\n        this._fileSize = byteRanges[0].fileSize || null;\n        return byteRanges;\n      }\n\n      const data = await response.getData();\n\n      const { start, end, total } = parseContentRange(response.getHeader('content-range'));\n      this._fileSize = total || null;\n      const first = [{\n        data,\n        offset: start,\n        length: end - start,\n      }];\n\n      if (slices.length > 1) {\n        // we requested more than one slice, but got only the first\n        // unfortunately, some HTTP Servers don't support multi-ranges\n        // and return only the first\n\n        // get the rest of the slices and fetch them iteratively\n        const others = await Promise.all(slices.slice(1).map((slice) => this.fetchSlice(slice, signal)));\n        return first.concat(others);\n      }\n      return first;\n    } else {\n      if (!this.allowFullFile) {\n        throw new Error('Server responded with full file');\n      }\n      const data = await response.getData();\n      this._fileSize = data.byteLength;\n      return [{\n        data,\n        offset: 0,\n        length: data.byteLength,\n      }];\n    }\n  }\n\n  async fetchSlice(slice, signal) {\n    const { offset, length } = slice;\n    const response = await this.client.request({\n      headers: {\n        ...this.headers,\n        Range: `bytes=${offset}-${offset + length}`,\n      },\n      signal,\n    });\n\n    // check the response was okay and if the server actually understands range requests\n    if (!response.ok) {\n      throw new Error('Error fetching data.');\n    } else if (response.status === 206) {\n      const data = await response.getData();\n\n      const { total } = parseContentRange(response.getHeader('content-range'));\n      this._fileSize = total || null;\n      return {\n        data,\n        offset,\n        length,\n      };\n    } else {\n      if (!this.allowFullFile) {\n        throw new Error('Server responded with full file');\n      }\n\n      const data = await response.getData();\n\n      this._fileSize = data.byteLength;\n      return {\n        data,\n        offset: 0,\n        length: data.byteLength,\n      };\n    }\n  }\n\n  get fileSize() {\n    return this._fileSize;\n  }\n}\n\nfunction maybeWrapInBlockedSource(source, { blockSize, cacheSize }) {\n  if (blockSize === null) {\n    return source;\n  }\n  return new BlockedSource(source, { blockSize, cacheSize });\n}\n\nexport function makeFetchSource(url, { headers = {}, credentials, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\n  const client = new FetchClient(url, credentials);\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\n\nexport function makeXHRSource(url, { headers = {}, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\n  const client = new XHRClient(url);\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\n\nexport function makeHttpSource(url, { headers = {}, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\n  const client = new HttpClient(url);\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\n\n/**\n *\n * @param {string} url\n * @param {object} options\n */\nexport function makeRemoteSource(url, { forceXHR = false, ...clientOptions } = {}) {\n  if (typeof fetch === 'function' && !forceXHR) {\n    return makeFetchSource(url, clientOptions);\n  }\n  if (typeof XMLHttpRequest !== 'undefined') {\n    return makeXHRSource(url, clientOptions);\n  }\n  return makeHttpSource(url, clientOptions);\n}\n","import { BaseSource } from './basesource.js';\n\nclass FileReaderSource extends BaseSource {\n  constructor(file) {\n    super();\n    this.file = file;\n  }\n\n  async fetchSlice(slice, signal) {\n    return new Promise((resolve, reject) => {\n      const blob = this.file.slice(slice.offset, slice.offset + slice.length);\n      const reader = new FileReader();\n      reader.onload = (event) => resolve(event.target.result);\n      reader.onerror = reject;\n      reader.onabort = reject;\n      reader.readAsArrayBuffer(blob);\n\n      if (signal) {\n        signal.addEventListener('abort', () => reader.abort());\n      }\n    });\n  }\n}\n\n/**\n * Create a new source from a given file/blob.\n * @param {Blob} file The file or blob to read from.\n * @returns The constructed source\n */\nexport function makeFileReaderSource(file) {\n  return new FileReaderSource(file);\n}\n","/** @module geotiff */\nimport GeoTIFFImage from './geotiffimage.js';\nimport DataView64 from './dataview64.js';\nimport DataSlice from './dataslice.js';\nimport Pool from './pool.js';\n\nimport { makeRemoteSource } from './source/remote.js';\nimport { makeBufferSource } from './source/arraybuffer.js';\nimport { makeFileReaderSource } from './source/filereader.js';\nimport { makeFileSource } from './source/file.js';\n\nimport { fieldTypes, fieldTagNames, arrayFields, geoKeyNames } from './globals.js';\nimport { writeGeotiff } from './geotiffwriter.js';\nimport * as globals from './globals.js';\nimport * as rgb from './rgb.js';\nimport { getDecoder, addDecoder } from './compression/index.js';\nimport { setLogger } from './logging.js';\n\nexport { globals };\nexport { rgb };\nexport { default as BaseDecoder } from './compression/basedecoder.js';\nexport { getDecoder, addDecoder };\nexport { setLogger };\n\n/**\n * @typedef {Uint8Array | Int8Array | Uint16Array | Int16Array | Uint32Array | Int32Array | Float32Array | Float64Array}\n * TypedArray\n */\n\n/**\n * @typedef {{ height:number, width: number }} Dimensions\n */\n\n/**\n * The autogenerated docs are a little confusing here. The effective type is:\n *\n * `TypedArray & { height: number; width: number}`\n * @typedef {TypedArray & Dimensions} TypedArrayWithDimensions\n */\n\n/**\n * The autogenerated docs are a little confusing here. The effective type is:\n *\n * `TypedArray[] & { height: number; width: number}`\n * @typedef {TypedArray[] & Dimensions} TypedArrayArrayWithDimensions\n */\n\n/**\n *  The autogenerated docs are a little confusing here. The effective type is:\n *\n * `(TypedArray | TypedArray[]) & { height: number; width: number}`\n * @typedef {TypedArrayWithDimensions | TypedArrayArrayWithDimensions} ReadRasterResult\n */\n\nfunction getFieldTypeLength(fieldType) {\n  switch (fieldType) {\n    case fieldTypes.BYTE: case fieldTypes.ASCII: case fieldTypes.SBYTE: case fieldTypes.UNDEFINED:\n      return 1;\n    case fieldTypes.SHORT: case fieldTypes.SSHORT:\n      return 2;\n    case fieldTypes.LONG: case fieldTypes.SLONG: case fieldTypes.FLOAT: case fieldTypes.IFD:\n      return 4;\n    case fieldTypes.RATIONAL: case fieldTypes.SRATIONAL: case fieldTypes.DOUBLE:\n    case fieldTypes.LONG8: case fieldTypes.SLONG8: case fieldTypes.IFD8:\n      return 8;\n    default:\n      throw new RangeError(`Invalid field type: ${fieldType}`);\n  }\n}\n\nfunction parseGeoKeyDirectory(fileDirectory) {\n  const rawGeoKeyDirectory = fileDirectory.GeoKeyDirectory;\n  if (!rawGeoKeyDirectory) {\n    return null;\n  }\n\n  const geoKeyDirectory = {};\n  for (let i = 4; i <= rawGeoKeyDirectory[3] * 4; i += 4) {\n    const key = geoKeyNames[rawGeoKeyDirectory[i]];\n    const location = (rawGeoKeyDirectory[i + 1])\n      ? (fieldTagNames[rawGeoKeyDirectory[i + 1]]) : null;\n    const count = rawGeoKeyDirectory[i + 2];\n    const offset = rawGeoKeyDirectory[i + 3];\n\n    let value = null;\n    if (!location) {\n      value = offset;\n    } else {\n      value = fileDirectory[location];\n      if (typeof value === 'undefined' || value === null) {\n        throw new Error(`Could not get value of geoKey '${key}'.`);\n      } else if (typeof value === 'string') {\n        value = value.substring(offset, offset + count - 1);\n      } else if (value.subarray) {\n        value = value.subarray(offset, offset + count);\n        if (count === 1) {\n          value = value[0];\n        }\n      }\n    }\n    geoKeyDirectory[key] = value;\n  }\n  return geoKeyDirectory;\n}\n\nfunction getValues(dataSlice, fieldType, count, offset) {\n  let values = null;\n  let readMethod = null;\n  const fieldTypeLength = getFieldTypeLength(fieldType);\n\n  switch (fieldType) {\n    case fieldTypes.BYTE: case fieldTypes.ASCII: case fieldTypes.UNDEFINED:\n      values = new Uint8Array(count); readMethod = dataSlice.readUint8;\n      break;\n    case fieldTypes.SBYTE:\n      values = new Int8Array(count); readMethod = dataSlice.readInt8;\n      break;\n    case fieldTypes.SHORT:\n      values = new Uint16Array(count); readMethod = dataSlice.readUint16;\n      break;\n    case fieldTypes.SSHORT:\n      values = new Int16Array(count); readMethod = dataSlice.readInt16;\n      break;\n    case fieldTypes.LONG: case fieldTypes.IFD:\n      values = new Uint32Array(count); readMethod = dataSlice.readUint32;\n      break;\n    case fieldTypes.SLONG:\n      values = new Int32Array(count); readMethod = dataSlice.readInt32;\n      break;\n    case fieldTypes.LONG8: case fieldTypes.IFD8:\n      values = new Array(count); readMethod = dataSlice.readUint64;\n      break;\n    case fieldTypes.SLONG8:\n      values = new Array(count); readMethod = dataSlice.readInt64;\n      break;\n    case fieldTypes.RATIONAL:\n      values = new Uint32Array(count * 2); readMethod = dataSlice.readUint32;\n      break;\n    case fieldTypes.SRATIONAL:\n      values = new Int32Array(count * 2); readMethod = dataSlice.readInt32;\n      break;\n    case fieldTypes.FLOAT:\n      values = new Float32Array(count); readMethod = dataSlice.readFloat32;\n      break;\n    case fieldTypes.DOUBLE:\n      values = new Float64Array(count); readMethod = dataSlice.readFloat64;\n      break;\n    default:\n      throw new RangeError(`Invalid field type: ${fieldType}`);\n  }\n\n  // normal fields\n  if (!(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {\n    for (let i = 0; i < count; ++i) {\n      values[i] = readMethod.call(\n        dataSlice, offset + (i * fieldTypeLength),\n      );\n    }\n  } else { // RATIONAL or SRATIONAL\n    for (let i = 0; i < count; i += 2) {\n      values[i] = readMethod.call(\n        dataSlice, offset + (i * fieldTypeLength),\n      );\n      values[i + 1] = readMethod.call(\n        dataSlice, offset + ((i * fieldTypeLength) + 4),\n      );\n    }\n  }\n\n  if (fieldType === fieldTypes.ASCII) {\n    return new TextDecoder('utf-8').decode(values);\n  }\n  return values;\n}\n\n/**\n * Data class to store the parsed file directory, geo key directory and\n * offset to the next IFD\n */\nclass ImageFileDirectory {\n  constructor(fileDirectory, geoKeyDirectory, nextIFDByteOffset) {\n    this.fileDirectory = fileDirectory;\n    this.geoKeyDirectory = geoKeyDirectory;\n    this.nextIFDByteOffset = nextIFDByteOffset;\n  }\n}\n\n/**\n * Error class for cases when an IFD index was requested, that does not exist\n * in the file.\n */\nclass GeoTIFFImageIndexError extends Error {\n  constructor(index) {\n    super(`No image at index ${index}`);\n    this.index = index;\n  }\n}\n\nclass GeoTIFFBase {\n  /**\n   * (experimental) Reads raster data from the best fitting image. This function uses\n   * the image with the lowest resolution that is still a higher resolution than the\n   * requested resolution.\n   * When specified, the `bbox` option is translated to the `window` option and the\n   * `resX` and `resY` to `width` and `height` respectively.\n   * Then, the [readRasters]{@link GeoTIFFImage#readRasters} method of the selected\n   * image is called and the result returned.\n   * @see GeoTIFFImage.readRasters\n   * @param {import('./geotiffimage').ReadRasterOptions} [options={}] optional parameters\n   * @returns {Promise<ReadRasterResult>} the decoded array(s), with `height` and `width`, as a promise\n   */\n  async readRasters(options = {}) {\n    const { window: imageWindow, width, height } = options;\n    let { resX, resY, bbox } = options;\n\n    const firstImage = await this.getImage();\n    let usedImage = firstImage;\n    const imageCount = await this.getImageCount();\n    const imgBBox = firstImage.getBoundingBox();\n\n    if (imageWindow && bbox) {\n      throw new Error('Both \"bbox\" and \"window\" passed.');\n    }\n\n    // if width/height is passed, transform it to resolution\n    if (width || height) {\n      // if we have an image window (pixel coordinates), transform it to a BBox\n      // using the origin/resolution of the first image.\n      if (imageWindow) {\n        const [oX, oY] = firstImage.getOrigin();\n        const [rX, rY] = firstImage.getResolution();\n\n        bbox = [\n          oX + (imageWindow[0] * rX),\n          oY + (imageWindow[1] * rY),\n          oX + (imageWindow[2] * rX),\n          oY + (imageWindow[3] * rY),\n        ];\n      }\n\n      // if we have a bbox (or calculated one)\n\n      const usedBBox = bbox || imgBBox;\n\n      if (width) {\n        if (resX) {\n          throw new Error('Both width and resX passed');\n        }\n        resX = (usedBBox[2] - usedBBox[0]) / width;\n      }\n      if (height) {\n        if (resY) {\n          throw new Error('Both width and resY passed');\n        }\n        resY = (usedBBox[3] - usedBBox[1]) / height;\n      }\n    }\n\n    // if resolution is set or calculated, try to get the image with the worst acceptable resolution\n    if (resX || resY) {\n      const allImages = [];\n      for (let i = 0; i < imageCount; ++i) {\n        const image = await this.getImage(i);\n        const { SubfileType: subfileType, NewSubfileType: newSubfileType } = image.fileDirectory;\n        if (i === 0 || subfileType === 2 || newSubfileType & 1) {\n          allImages.push(image);\n        }\n      }\n\n      allImages.sort((a, b) => a.getWidth() - b.getWidth());\n      for (let i = 0; i < allImages.length; ++i) {\n        const image = allImages[i];\n        const imgResX = (imgBBox[2] - imgBBox[0]) / image.getWidth();\n        const imgResY = (imgBBox[3] - imgBBox[1]) / image.getHeight();\n\n        usedImage = image;\n        if ((resX && resX > imgResX) || (resY && resY > imgResY)) {\n          break;\n        }\n      }\n    }\n\n    let wnd = imageWindow;\n    if (bbox) {\n      const [oX, oY] = firstImage.getOrigin();\n      const [imageResX, imageResY] = usedImage.getResolution(firstImage);\n\n      wnd = [\n        Math.round((bbox[0] - oX) / imageResX),\n        Math.round((bbox[1] - oY) / imageResY),\n        Math.round((bbox[2] - oX) / imageResX),\n        Math.round((bbox[3] - oY) / imageResY),\n      ];\n      wnd = [\n        Math.min(wnd[0], wnd[2]),\n        Math.min(wnd[1], wnd[3]),\n        Math.max(wnd[0], wnd[2]),\n        Math.max(wnd[1], wnd[3]),\n      ];\n    }\n\n    return usedImage.readRasters({ ...options, window: wnd });\n  }\n}\n\n/**\n * @typedef {Object} GeoTIFFOptions\n * @property {boolean} [cache=false] whether or not decoded tiles shall be cached.\n */\n\n/**\n * The abstraction for a whole GeoTIFF file.\n * @augments GeoTIFFBase\n */\nclass GeoTIFF extends GeoTIFFBase {\n  /**\n   * @constructor\n   * @param {*} source The datasource to read from.\n   * @param {boolean} littleEndian Whether the image uses little endian.\n   * @param {boolean} bigTiff Whether the image uses bigTIFF conventions.\n   * @param {number} firstIFDOffset The numeric byte-offset from the start of the image\n   *                                to the first IFD.\n   * @param {GeoTIFFOptions} [options] further options.\n   */\n  constructor(source, littleEndian, bigTiff, firstIFDOffset, options = {}) {\n    super();\n    this.source = source;\n    this.littleEndian = littleEndian;\n    this.bigTiff = bigTiff;\n    this.firstIFDOffset = firstIFDOffset;\n    this.cache = options.cache || false;\n    this.ifdRequests = [];\n    this.ghostValues = null;\n  }\n\n  async getSlice(offset, size) {\n    const fallbackSize = this.bigTiff ? 4048 : 1024;\n    return new DataSlice(\n      (await this.source.fetch([{\n        offset,\n        length: typeof size !== 'undefined' ? size : fallbackSize,\n      }]))[0],\n      offset,\n      this.littleEndian,\n      this.bigTiff,\n    );\n  }\n\n  /**\n   * Instructs to parse an image file directory at the given file offset.\n   * As there is no way to ensure that a location is indeed the start of an IFD,\n   * this function must be called with caution (e.g only using the IFD offsets from\n   * the headers or other IFDs).\n   * @param {number} offset the offset to parse the IFD at\n   * @returns {Promise<ImageFileDirectory>} the parsed IFD\n   */\n  async parseFileDirectoryAt(offset) {\n    const entrySize = this.bigTiff ? 20 : 12;\n    const offsetSize = this.bigTiff ? 8 : 2;\n\n    let dataSlice = await this.getSlice(offset);\n    const numDirEntries = this.bigTiff\n      ? dataSlice.readUint64(offset)\n      : dataSlice.readUint16(offset);\n\n    // if the slice does not cover the whole IFD, request a bigger slice, where the\n    // whole IFD fits: num of entries + n x tag length + offset to next IFD\n    const byteSize = (numDirEntries * entrySize) + (this.bigTiff ? 16 : 6);\n    if (!dataSlice.covers(offset, byteSize)) {\n      dataSlice = await this.getSlice(offset, byteSize);\n    }\n\n    const fileDirectory = {};\n\n    // loop over the IFD and create a file directory object\n    let i = offset + (this.bigTiff ? 8 : 2);\n    for (let entryCount = 0; entryCount < numDirEntries; i += entrySize, ++entryCount) {\n      const fieldTag = dataSlice.readUint16(i);\n      const fieldType = dataSlice.readUint16(i + 2);\n      const typeCount = this.bigTiff\n        ? dataSlice.readUint64(i + 4)\n        : dataSlice.readUint32(i + 4);\n\n      let fieldValues;\n      let value;\n      const fieldTypeLength = getFieldTypeLength(fieldType);\n      const valueOffset = i + (this.bigTiff ? 12 : 8);\n\n      // check whether the value is directly encoded in the tag or refers to a\n      // different external byte range\n      if (fieldTypeLength * typeCount <= (this.bigTiff ? 8 : 4)) {\n        fieldValues = getValues(dataSlice, fieldType, typeCount, valueOffset);\n      } else {\n        // resolve the reference to the actual byte range\n        const actualOffset = dataSlice.readOffset(valueOffset);\n        const length = getFieldTypeLength(fieldType) * typeCount;\n\n        // check, whether we actually cover the referenced byte range; if not,\n        // request a new slice of bytes to read from it\n        if (dataSlice.covers(actualOffset, length)) {\n          fieldValues = getValues(dataSlice, fieldType, typeCount, actualOffset);\n        } else {\n          const fieldDataSlice = await this.getSlice(actualOffset, length);\n          fieldValues = getValues(fieldDataSlice, fieldType, typeCount, actualOffset);\n        }\n      }\n\n      // unpack single values from the array\n      if (typeCount === 1 && arrayFields.indexOf(fieldTag) === -1\n        && !(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {\n        value = fieldValues[0];\n      } else {\n        value = fieldValues;\n      }\n\n      // write the tags value to the file directly\n      fileDirectory[fieldTagNames[fieldTag]] = value;\n    }\n    const geoKeyDirectory = parseGeoKeyDirectory(fileDirectory);\n    const nextIFDByteOffset = dataSlice.readOffset(\n      offset + offsetSize + (entrySize * numDirEntries),\n    );\n\n    return new ImageFileDirectory(\n      fileDirectory,\n      geoKeyDirectory,\n      nextIFDByteOffset,\n    );\n  }\n\n  async requestIFD(index) {\n    // see if we already have that IFD index requested.\n    if (this.ifdRequests[index]) {\n      // attach to an already requested IFD\n      return this.ifdRequests[index];\n    } else if (index === 0) {\n      // special case for index 0\n      this.ifdRequests[index] = this.parseFileDirectoryAt(this.firstIFDOffset);\n      return this.ifdRequests[index];\n    } else if (!this.ifdRequests[index - 1]) {\n      // if the previous IFD was not yet loaded, load that one first\n      // this is the recursive call.\n      try {\n        this.ifdRequests[index - 1] = this.requestIFD(index - 1);\n      } catch (e) {\n        // if the previous one already was an index error, rethrow\n        // with the current index\n        if (e instanceof GeoTIFFImageIndexError) {\n          throw new GeoTIFFImageIndexError(index);\n        }\n        // rethrow anything else\n        throw e;\n      }\n    }\n    // if the previous IFD was loaded, we can finally fetch the one we are interested in.\n    // we need to wrap this in an IIFE, otherwise this.ifdRequests[index] would be delayed\n    this.ifdRequests[index] = (async () => {\n      const previousIfd = await this.ifdRequests[index - 1];\n      if (previousIfd.nextIFDByteOffset === 0) {\n        throw new GeoTIFFImageIndexError(index);\n      }\n      return this.parseFileDirectoryAt(previousIfd.nextIFDByteOffset);\n    })();\n    return this.ifdRequests[index];\n  }\n\n  /**\n   * Get the n-th internal subfile of an image. By default, the first is returned.\n   *\n   * @param {number} [index=0] the index of the image to return.\n   * @returns {Promise<GeoTIFFImage>} the image at the given index\n   */\n  async getImage(index = 0) {\n    const ifd = await this.requestIFD(index);\n    return new GeoTIFFImage(\n      ifd.fileDirectory, ifd.geoKeyDirectory,\n      this.dataView, this.littleEndian, this.cache, this.source,\n    );\n  }\n\n  /**\n   * Returns the count of the internal subfiles.\n   *\n   * @returns {Promise<number>} the number of internal subfile images\n   */\n  async getImageCount() {\n    let index = 0;\n    // loop until we run out of IFDs\n    let hasNext = true;\n    while (hasNext) {\n      try {\n        await this.requestIFD(index);\n        ++index;\n      } catch (e) {\n        if (e instanceof GeoTIFFImageIndexError) {\n          hasNext = false;\n        } else {\n          throw e;\n        }\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Get the values of the COG ghost area as a parsed map.\n   * See https://gdal.org/drivers/raster/cog.html#header-ghost-area for reference\n   * @returns {Promise<Object>} the parsed ghost area or null, if no such area was found\n   */\n  async getGhostValues() {\n    const offset = this.bigTiff ? 16 : 8;\n    if (this.ghostValues) {\n      return this.ghostValues;\n    }\n    const detectionString = 'GDAL_STRUCTURAL_METADATA_SIZE=';\n    const heuristicAreaSize = detectionString.length + 100;\n    let slice = await this.getSlice(offset, heuristicAreaSize);\n    if (detectionString === getValues(slice, fieldTypes.ASCII, detectionString.length, offset)) {\n      const valuesString = getValues(slice, fieldTypes.ASCII, heuristicAreaSize, offset);\n      const firstLine = valuesString.split('\\n')[0];\n      const metadataSize = Number(firstLine.split('=')[1].split(' ')[0]) + firstLine.length;\n      if (metadataSize > heuristicAreaSize) {\n        slice = await this.getSlice(offset, metadataSize);\n      }\n      const fullString = getValues(slice, fieldTypes.ASCII, metadataSize, offset);\n      this.ghostValues = {};\n      fullString\n        .split('\\n')\n        .filter((line) => line.length > 0)\n        .map((line) => line.split('='))\n        .forEach(([key, value]) => {\n          this.ghostValues[key] = value;\n        });\n    }\n    return this.ghostValues;\n  }\n\n  /**\n   * Parse a (Geo)TIFF file from the given source.\n   *\n   * @param {*} source The source of data to parse from.\n   * @param {GeoTIFFOptions} [options] Additional options.\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   */\n  static async fromSource(source, options, signal) {\n    const headerData = (await source.fetch([{ offset: 0, length: 1024 }], signal))[0];\n    const dataView = new DataView64(headerData);\n\n    const BOM = dataView.getUint16(0, 0);\n    let littleEndian;\n    if (BOM === 0x4949) {\n      littleEndian = true;\n    } else if (BOM === 0x4D4D) {\n      littleEndian = false;\n    } else {\n      throw new TypeError('Invalid byte order value.');\n    }\n\n    const magicNumber = dataView.getUint16(2, littleEndian);\n    let bigTiff;\n    if (magicNumber === 42) {\n      bigTiff = false;\n    } else if (magicNumber === 43) {\n      bigTiff = true;\n      const offsetByteSize = dataView.getUint16(4, littleEndian);\n      if (offsetByteSize !== 8) {\n        throw new Error('Unsupported offset byte-size.');\n      }\n    } else {\n      throw new TypeError('Invalid magic number.');\n    }\n\n    const firstIFDOffset = bigTiff\n      ? dataView.getUint64(8, littleEndian)\n      : dataView.getUint32(4, littleEndian);\n    return new GeoTIFF(source, littleEndian, bigTiff, firstIFDOffset, options);\n  }\n\n  /**\n   * Closes the underlying file buffer\n   * N.B. After the GeoTIFF has been completely processed it needs\n   * to be closed but only if it has been constructed from a file.\n   */\n  close() {\n    if (typeof this.source.close === 'function') {\n      return this.source.close();\n    }\n    return false;\n  }\n}\n\nexport { GeoTIFF };\nexport default GeoTIFF;\n\n/**\n * Wrapper for GeoTIFF files that have external overviews.\n * @augments GeoTIFFBase\n */\nclass MultiGeoTIFF extends GeoTIFFBase {\n  /**\n   * Construct a new MultiGeoTIFF from a main and several overview files.\n   * @param {GeoTIFF} mainFile The main GeoTIFF file.\n   * @param {GeoTIFF[]} overviewFiles An array of overview files.\n   */\n  constructor(mainFile, overviewFiles) {\n    super();\n    this.mainFile = mainFile;\n    this.overviewFiles = overviewFiles;\n    this.imageFiles = [mainFile].concat(overviewFiles);\n\n    this.fileDirectoriesPerFile = null;\n    this.fileDirectoriesPerFileParsing = null;\n    this.imageCount = null;\n  }\n\n  async parseFileDirectoriesPerFile() {\n    const requests = [this.mainFile.parseFileDirectoryAt(this.mainFile.firstIFDOffset)]\n      .concat(this.overviewFiles.map((file) => file.parseFileDirectoryAt(file.firstIFDOffset)));\n\n    this.fileDirectoriesPerFile = await Promise.all(requests);\n    return this.fileDirectoriesPerFile;\n  }\n\n  /**\n   * Get the n-th internal subfile of an image. By default, the first is returned.\n   *\n   * @param {number} [index=0] the index of the image to return.\n   * @returns {Promise<GeoTIFFImage>} the image at the given index\n   */\n  async getImage(index = 0) {\n    await this.getImageCount();\n    await this.parseFileDirectoriesPerFile();\n    let visited = 0;\n    let relativeIndex = 0;\n    for (let i = 0; i < this.imageFiles.length; i++) {\n      const imageFile = this.imageFiles[i];\n      for (let ii = 0; ii < this.imageCounts[i]; ii++) {\n        if (index === visited) {\n          const ifd = await imageFile.requestIFD(relativeIndex);\n          return new GeoTIFFImage(\n            ifd.fileDirectory, ifd.geoKeyDirectory,\n            imageFile.dataView, imageFile.littleEndian, imageFile.cache, imageFile.source,\n          );\n        }\n        visited++;\n        relativeIndex++;\n      }\n      relativeIndex = 0;\n    }\n\n    throw new RangeError('Invalid image index');\n  }\n\n  /**\n   * Returns the count of the internal subfiles.\n   *\n   * @returns {Promise<number>} the number of internal subfile images\n   */\n  async getImageCount() {\n    if (this.imageCount !== null) {\n      return this.imageCount;\n    }\n    const requests = [this.mainFile.getImageCount()]\n      .concat(this.overviewFiles.map((file) => file.getImageCount()));\n    this.imageCounts = await Promise.all(requests);\n    this.imageCount = this.imageCounts.reduce((count, ifds) => count + ifds, 0);\n    return this.imageCount;\n  }\n}\n\nexport { MultiGeoTIFF };\n\n/**\n * Creates a new GeoTIFF from a remote URL.\n * @param {string} url The URL to access the image from\n * @param {object} [options] Additional options to pass to the source.\n *                           See {@link makeRemoteSource} for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromUrl(url, options = {}, signal) {\n  return GeoTIFF.fromSource(makeRemoteSource(url, options), signal);\n}\n\n/**\n * Construct a new GeoTIFF from an\n * [ArrayBuffer]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer}.\n * @param {ArrayBuffer} arrayBuffer The data to read the file from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromArrayBuffer(arrayBuffer, signal) {\n  return GeoTIFF.fromSource(makeBufferSource(arrayBuffer), signal);\n}\n\n/**\n * Construct a GeoTIFF from a local file path. This uses the node\n * [filesystem API]{@link https://nodejs.org/api/fs.html} and is\n * not available on browsers.\n *\n * N.B. After the GeoTIFF has been completely processed it needs\n * to be closed but only if it has been constructed from a file.\n * @param {string} path The file path to read from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromFile(path, signal) {\n  return GeoTIFF.fromSource(makeFileSource(path), signal);\n}\n\n/**\n * Construct a GeoTIFF from an HTML\n * [Blob]{@link https://developer.mozilla.org/en-US/docs/Web/API/Blob} or\n * [File]{@link https://developer.mozilla.org/en-US/docs/Web/API/File}\n * object.\n * @param {Blob|File} blob The Blob or File object to read from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromBlob(blob, signal) {\n  return GeoTIFF.fromSource(makeFileReaderSource(blob), signal);\n}\n\n/**\n * Construct a MultiGeoTIFF from the given URLs.\n * @param {string} mainUrl The URL for the main file.\n * @param {string[]} overviewUrls An array of URLs for the overview images.\n * @param {Object} [options] Additional options to pass to the source.\n *                           See [makeRemoteSource]{@link module:source.makeRemoteSource}\n *                           for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<MultiGeoTIFF>} The resulting MultiGeoTIFF file.\n */\nexport async function fromUrls(mainUrl, overviewUrls = [], options = {}, signal) {\n  const mainFile = await GeoTIFF.fromSource(makeRemoteSource(mainUrl, options), signal);\n  const overviewFiles = await Promise.all(\n    overviewUrls.map((url) => GeoTIFF.fromSource(makeRemoteSource(url, options))),\n  );\n\n  return new MultiGeoTIFF(mainFile, overviewFiles);\n}\n\n/**\n * Main creating function for GeoTIFF files.\n * @param {(Array)} array of pixel values\n * @returns {metadata} metadata\n */\nexport function writeArrayBuffer(values, metadata) {\n  return writeGeotiff(values, metadata);\n}\n\nexport { Pool };\nexport { GeoTIFFImage };\n","export function fromWhiteIsZero(raster, max) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  let value;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    value = 256 - (raster[i] / max * 256);\n    rgbRaster[j] = value;\n    rgbRaster[j + 1] = value;\n    rgbRaster[j + 2] = value;\n  }\n  return rgbRaster;\n}\n\nexport function fromBlackIsZero(raster, max) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  let value;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    value = raster[i] / max * 256;\n    rgbRaster[j] = value;\n    rgbRaster[j + 1] = value;\n    rgbRaster[j + 2] = value;\n  }\n  return rgbRaster;\n}\n\nexport function fromPalette(raster, colorMap) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  const greenOffset = colorMap.length / 3;\n  const blueOffset = colorMap.length / 3 * 2;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    const mapIndex = raster[i];\n    rgbRaster[j] = colorMap[mapIndex] / 65536 * 256;\n    rgbRaster[j + 1] = colorMap[mapIndex + greenOffset] / 65536 * 256;\n    rgbRaster[j + 2] = colorMap[mapIndex + blueOffset] / 65536 * 256;\n  }\n  return rgbRaster;\n}\n\nexport function fromCMYK(cmykRaster) {\n  const { width, height } = cmykRaster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  for (let i = 0, j = 0; i < cmykRaster.length; i += 4, j += 3) {\n    const c = cmykRaster[i];\n    const m = cmykRaster[i + 1];\n    const y = cmykRaster[i + 2];\n    const k = cmykRaster[i + 3];\n\n    rgbRaster[j] = 255 * ((255 - c) / 256) * ((255 - k) / 256);\n    rgbRaster[j + 1] = 255 * ((255 - m) / 256) * ((255 - k) / 256);\n    rgbRaster[j + 2] = 255 * ((255 - y) / 256) * ((255 - k) / 256);\n  }\n  return rgbRaster;\n}\n\nexport function fromYCbCr(yCbCrRaster) {\n  const { width, height } = yCbCrRaster;\n  const rgbRaster = new Uint8ClampedArray(width * height * 3);\n  for (let i = 0, j = 0; i < yCbCrRaster.length; i += 3, j += 3) {\n    const y = yCbCrRaster[i];\n    const cb = yCbCrRaster[i + 1];\n    const cr = yCbCrRaster[i + 2];\n\n    rgbRaster[j] = (y + (1.40200 * (cr - 0x80)));\n    rgbRaster[j + 1] = (y - (0.34414 * (cb - 0x80)) - (0.71414 * (cr - 0x80)));\n    rgbRaster[j + 2] = (y + (1.77200 * (cb - 0x80)));\n  }\n  return rgbRaster;\n}\n\nconst Xn = 0.95047;\nconst Yn = 1.00000;\nconst Zn = 1.08883;\n\n// from https://github.com/antimatter15/rgb-lab/blob/master/color.js\n\nexport function fromCIELab(cieLabRaster) {\n  const { width, height } = cieLabRaster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n\n  for (let i = 0, j = 0; i < cieLabRaster.length; i += 3, j += 3) {\n    const L = cieLabRaster[i + 0];\n    const a_ = cieLabRaster[i + 1] << 24 >> 24; // conversion from uint8 to int8\n    const b_ = cieLabRaster[i + 2] << 24 >> 24; // same\n\n    let y = (L + 16) / 116;\n    let x = (a_ / 500) + y;\n    let z = y - (b_ / 200);\n    let r;\n    let g;\n    let b;\n\n    x = Xn * ((x * x * x > 0.008856) ? x * x * x : (x - (16 / 116)) / 7.787);\n    y = Yn * ((y * y * y > 0.008856) ? y * y * y : (y - (16 / 116)) / 7.787);\n    z = Zn * ((z * z * z > 0.008856) ? z * z * z : (z - (16 / 116)) / 7.787);\n\n    r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n    g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n    b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n    r = (r > 0.0031308) ? ((1.055 * (r ** (1 / 2.4))) - 0.055) : 12.92 * r;\n    g = (g > 0.0031308) ? ((1.055 * (g ** (1 / 2.4))) - 0.055) : 12.92 * g;\n    b = (b > 0.0031308) ? ((1.055 * (b ** (1 / 2.4))) - 0.055) : 12.92 * b;\n\n    rgbRaster[j] = Math.max(0, Math.min(1, r)) * 255;\n    rgbRaster[j + 1] = Math.max(0, Math.min(1, g)) * 255;\n    rgbRaster[j + 2] = Math.max(0, Math.min(1, b)) * 255;\n  }\n  return rgbRaster;\n}\n","/**\n * @module resample\n */\n\nfunction copyNewSize(array, width, height, samplesPerPixel = 1) {\n  return new (Object.getPrototypeOf(array).constructor)(width * height * samplesPerPixel);\n}\n\n/**\n * Resample the input arrays using nearest neighbor value selection.\n * @param {TypedArray[]} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @returns {TypedArray[]} The resampled rasters\n */\nexport function resampleNearest(valueArrays, inWidth, inHeight, outWidth, outHeight) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n  return valueArrays.map((array) => {\n    const newArray = copyNewSize(array, outWidth, outHeight);\n    for (let y = 0; y < outHeight; ++y) {\n      const cy = Math.min(Math.round(relY * y), inHeight - 1);\n      for (let x = 0; x < outWidth; ++x) {\n        const cx = Math.min(Math.round(relX * x), inWidth - 1);\n        const value = array[(cy * inWidth) + cx];\n        newArray[(y * outWidth) + x] = value;\n      }\n    }\n    return newArray;\n  });\n}\n\n// simple linear interpolation, code from:\n// https://en.wikipedia.org/wiki/Linear_interpolation#Programming_language_support\nfunction lerp(v0, v1, t) {\n  return ((1 - t) * v0) + (t * v1);\n}\n\n/**\n * Resample the input arrays using bilinear interpolation.\n * @param {TypedArray[]} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @returns {TypedArray[]} The resampled rasters\n */\nexport function resampleBilinear(valueArrays, inWidth, inHeight, outWidth, outHeight) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n\n  return valueArrays.map((array) => {\n    const newArray = copyNewSize(array, outWidth, outHeight);\n    for (let y = 0; y < outHeight; ++y) {\n      const rawY = relY * y;\n\n      const yl = Math.floor(rawY);\n      const yh = Math.min(Math.ceil(rawY), (inHeight - 1));\n\n      for (let x = 0; x < outWidth; ++x) {\n        const rawX = relX * x;\n        const tx = rawX % 1;\n\n        const xl = Math.floor(rawX);\n        const xh = Math.min(Math.ceil(rawX), (inWidth - 1));\n\n        const ll = array[(yl * inWidth) + xl];\n        const hl = array[(yl * inWidth) + xh];\n        const lh = array[(yh * inWidth) + xl];\n        const hh = array[(yh * inWidth) + xh];\n\n        const value = lerp(\n          lerp(ll, hl, tx),\n          lerp(lh, hh, tx),\n          rawY % 1,\n        );\n        newArray[(y * outWidth) + x] = value;\n      }\n    }\n    return newArray;\n  });\n}\n\n/**\n * Resample the input arrays using the selected resampling method.\n * @param {TypedArray[]} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {string} [method = 'nearest'] The desired resampling method\n * @returns {TypedArray[]} The resampled rasters\n */\nexport function resample(valueArrays, inWidth, inHeight, outWidth, outHeight, method = 'nearest') {\n  switch (method.toLowerCase()) {\n    case 'nearest':\n      return resampleNearest(valueArrays, inWidth, inHeight, outWidth, outHeight);\n    case 'bilinear':\n    case 'linear':\n      return resampleBilinear(valueArrays, inWidth, inHeight, outWidth, outHeight);\n    default:\n      throw new Error(`Unsupported resampling method: '${method}'`);\n  }\n}\n\n/**\n * Resample the pixel interleaved input array using nearest neighbor value selection.\n * @param {TypedArray} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {number} samples The number of samples per pixel for pixel\n *                         interleaved data\n * @returns {TypedArray} The resampled raster\n */\nexport function resampleNearestInterleaved(\n  valueArray, inWidth, inHeight, outWidth, outHeight, samples) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n\n  const newArray = copyNewSize(valueArray, outWidth, outHeight, samples);\n  for (let y = 0; y < outHeight; ++y) {\n    const cy = Math.min(Math.round(relY * y), inHeight - 1);\n    for (let x = 0; x < outWidth; ++x) {\n      const cx = Math.min(Math.round(relX * x), inWidth - 1);\n      for (let i = 0; i < samples; ++i) {\n        const value = valueArray[(cy * inWidth * samples) + (cx * samples) + i];\n        newArray[(y * outWidth * samples) + (x * samples) + i] = value;\n      }\n    }\n  }\n  return newArray;\n}\n\n/**\n * Resample the pixel interleaved input array using bilinear interpolation.\n * @param {TypedArray} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {number} samples The number of samples per pixel for pixel\n *                         interleaved data\n * @returns {TypedArray} The resampled raster\n */\nexport function resampleBilinearInterleaved(\n  valueArray, inWidth, inHeight, outWidth, outHeight, samples) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n  const newArray = copyNewSize(valueArray, outWidth, outHeight, samples);\n  for (let y = 0; y < outHeight; ++y) {\n    const rawY = relY * y;\n\n    const yl = Math.floor(rawY);\n    const yh = Math.min(Math.ceil(rawY), (inHeight - 1));\n\n    for (let x = 0; x < outWidth; ++x) {\n      const rawX = relX * x;\n      const tx = rawX % 1;\n\n      const xl = Math.floor(rawX);\n      const xh = Math.min(Math.ceil(rawX), (inWidth - 1));\n\n      for (let i = 0; i < samples; ++i) {\n        const ll = valueArray[(yl * inWidth * samples) + (xl * samples) + i];\n        const hl = valueArray[(yl * inWidth * samples) + (xh * samples) + i];\n        const lh = valueArray[(yh * inWidth * samples) + (xl * samples) + i];\n        const hh = valueArray[(yh * inWidth * samples) + (xh * samples) + i];\n\n        const value = lerp(\n          lerp(ll, hl, tx),\n          lerp(lh, hh, tx),\n          rawY % 1,\n        );\n        newArray[(y * outWidth * samples) + (x * samples) + i] = value;\n      }\n    }\n  }\n  return newArray;\n}\n\n/**\n * Resample the pixel interleaved input array using the selected resampling method.\n * @param {TypedArray} valueArray The input array to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {number} samples The number of samples per pixel for pixel\n *                                 interleaved data\n * @param {string} [method = 'nearest'] The desired resampling method\n * @returns {TypedArray} The resampled rasters\n */\nexport function resampleInterleaved(valueArray, inWidth, inHeight, outWidth, outHeight, samples, method = 'nearest') {\n  switch (method.toLowerCase()) {\n    case 'nearest':\n      return resampleNearestInterleaved(\n        valueArray, inWidth, inHeight, outWidth, outHeight, samples,\n      );\n    case 'bilinear':\n    case 'linear':\n      return resampleBilinearInterleaved(\n        valueArray, inWidth, inHeight, outWidth, outHeight, samples,\n      );\n    default:\n      throw new Error(`Unsupported resampling method: '${method}'`);\n  }\n}\n","/** @module geotiffimage */\nimport { getFloat16 } from '@petamoriken/float16';\nimport getAttribute from 'xml-utils/get-attribute.js';\nimport findTagsByName from 'xml-utils/find-tags-by-name.js';\n\nimport { photometricInterpretations, ExtraSamplesValues } from './globals.js';\nimport { fromWhiteIsZero, fromBlackIsZero, fromPalette, fromCMYK, fromYCbCr, fromCIELab } from './rgb.js';\nimport { getDecoder } from './compression/index.js';\nimport { resample, resampleInterleaved } from './resample.js';\n\n/**\n * @typedef {Object} ReadRasterOptions\n * @property {Array<number>} [window=whole window] the subset to read data from in pixels.\n * @property {Array<number>} [bbox=whole image] the subset to read data from in\n *                                           geographical coordinates.\n * @property {Array<number>} [samples=all samples] the selection of samples to read from. Default is all samples.\n * @property {boolean} [interleave=false] whether the data shall be read\n *                                             in one single array or separate\n *                                             arrays.\n * @property {Pool} [pool=null] The optional decoder pool to use.\n * @property {number} [width] The desired width of the output. When the width is not the\n *                                 same as the images, resampling will be performed.\n * @property {number} [height] The desired height of the output. When the width is not the\n *                                  same as the images, resampling will be performed.\n * @property {string} [resampleMethod='nearest'] The desired resampling method.\n * @property {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                                       to be aborted\n * @property {number|number[]} [fillValue] The value to use for parts of the image\n *                                              outside of the images extent. When multiple\n *                                              samples are requested, an array of fill values\n *                                              can be passed.\n */\n\n/** @typedef {import(\"./geotiff.js\").TypedArray} TypedArray */\n/** @typedef {import(\"./geotiff.js\").ReadRasterResult} ReadRasterResult */\n\nfunction sum(array, start, end) {\n  let s = 0;\n  for (let i = start; i < end; ++i) {\n    s += array[i];\n  }\n  return s;\n}\n\nfunction arrayForType(format, bitsPerSample, size) {\n  switch (format) {\n    case 1: // unsigned integer data\n      if (bitsPerSample <= 8) {\n        return new Uint8Array(size);\n      } else if (bitsPerSample <= 16) {\n        return new Uint16Array(size);\n      } else if (bitsPerSample <= 32) {\n        return new Uint32Array(size);\n      }\n      break;\n    case 2: // twos complement signed integer data\n      if (bitsPerSample === 8) {\n        return new Int8Array(size);\n      } else if (bitsPerSample === 16) {\n        return new Int16Array(size);\n      } else if (bitsPerSample === 32) {\n        return new Int32Array(size);\n      }\n      break;\n    case 3: // floating point data\n      switch (bitsPerSample) {\n        case 16:\n        case 32:\n          return new Float32Array(size);\n        case 64:\n          return new Float64Array(size);\n        default:\n          break;\n      }\n      break;\n    default:\n      break;\n  }\n  throw Error('Unsupported data format/bitsPerSample');\n}\n\nfunction needsNormalization(format, bitsPerSample) {\n  if ((format === 1 || format === 2) && bitsPerSample <= 32 && bitsPerSample % 8 === 0) {\n    return false;\n  } else if (format === 3 && (bitsPerSample === 16 || bitsPerSample === 32 || bitsPerSample === 64)) {\n    return false;\n  }\n  return true;\n}\n\nfunction normalizeArray(inBuffer, format, planarConfiguration, samplesPerPixel, bitsPerSample, tileWidth, tileHeight) {\n  // const inByteArray = new Uint8Array(inBuffer);\n  const view = new DataView(inBuffer);\n  const outSize = planarConfiguration === 2\n    ? tileHeight * tileWidth\n    : tileHeight * tileWidth * samplesPerPixel;\n  const samplesToTransfer = planarConfiguration === 2\n    ? 1 : samplesPerPixel;\n  const outArray = arrayForType(format, bitsPerSample, outSize);\n  // let pixel = 0;\n\n  const bitMask = parseInt('1'.repeat(bitsPerSample), 2);\n\n  if (format === 1) { // unsigned integer\n    // translation of https://github.com/OSGeo/gdal/blob/master/gdal/frmts/gtiff/geotiff.cpp#L7337\n    let pixelBitSkip;\n    // let sampleBitOffset = 0;\n    if (planarConfiguration === 1) {\n      pixelBitSkip = samplesPerPixel * bitsPerSample;\n      // sampleBitOffset = (samplesPerPixel - 1) * bitsPerSample;\n    } else {\n      pixelBitSkip = bitsPerSample;\n    }\n\n    // Bits per line rounds up to next byte boundary.\n    let bitsPerLine = tileWidth * pixelBitSkip;\n    if ((bitsPerLine & 7) !== 0) {\n      bitsPerLine = (bitsPerLine + 7) & (~7);\n    }\n\n    for (let y = 0; y < tileHeight; ++y) {\n      const lineBitOffset = y * bitsPerLine;\n      for (let x = 0; x < tileWidth; ++x) {\n        const pixelBitOffset = lineBitOffset + (x * samplesToTransfer * bitsPerSample);\n        for (let i = 0; i < samplesToTransfer; ++i) {\n          const bitOffset = pixelBitOffset + (i * bitsPerSample);\n          const outIndex = (((y * tileWidth) + x) * samplesToTransfer) + i;\n\n          const byteOffset = Math.floor(bitOffset / 8);\n          const innerBitOffset = bitOffset % 8;\n          if (innerBitOffset + bitsPerSample <= 8) {\n            outArray[outIndex] = (view.getUint8(byteOffset) >> (8 - bitsPerSample) - innerBitOffset) & bitMask;\n          } else if (innerBitOffset + bitsPerSample <= 16) {\n            outArray[outIndex] = (view.getUint16(byteOffset) >> (16 - bitsPerSample) - innerBitOffset) & bitMask;\n          } else if (innerBitOffset + bitsPerSample <= 24) {\n            const raw = (view.getUint16(byteOffset) << 8) | (view.getUint8(byteOffset + 2));\n            outArray[outIndex] = (raw >> (24 - bitsPerSample) - innerBitOffset) & bitMask;\n          } else {\n            outArray[outIndex] = (view.getUint32(byteOffset) >> (32 - bitsPerSample) - innerBitOffset) & bitMask;\n          }\n\n          // let outWord = 0;\n          // for (let bit = 0; bit < bitsPerSample; ++bit) {\n          //   if (inByteArray[bitOffset >> 3]\n          //     & (0x80 >> (bitOffset & 7))) {\n          //     outWord |= (1 << (bitsPerSample - 1 - bit));\n          //   }\n          //   ++bitOffset;\n          // }\n\n          // outArray[outIndex] = outWord;\n          // outArray[pixel] = outWord;\n          // pixel += 1;\n        }\n        // bitOffset = bitOffset + pixelBitSkip - bitsPerSample;\n      }\n    }\n  } else if (format === 3) { // floating point\n    // Float16 is handled elsewhere\n    // normalize 16/24 bit floats to 32 bit floats in the array\n    // console.time();\n    // if (bitsPerSample === 16) {\n    //   for (let byte = 0, outIndex = 0; byte < inBuffer.byteLength; byte += 2, ++outIndex) {\n    //     outArray[outIndex] = getFloat16(view, byte);\n    //   }\n    // }\n    // console.timeEnd()\n  }\n\n  return outArray.buffer;\n}\n\n/**\n * GeoTIFF sub-file image.\n */\nclass GeoTIFFImage {\n  /**\n   * @constructor\n   * @param {Object} fileDirectory The parsed file directory\n   * @param {Object} geoKeys The parsed geo-keys\n   * @param {DataView} dataView The DataView for the underlying file.\n   * @param {Boolean} littleEndian Whether the file is encoded in little or big endian\n   * @param {Boolean} cache Whether or not decoded tiles shall be cached\n   * @param {import('./source/basesource').BaseSource} source The datasource to read from\n   */\n  constructor(fileDirectory, geoKeys, dataView, littleEndian, cache, source) {\n    this.fileDirectory = fileDirectory;\n    this.geoKeys = geoKeys;\n    this.dataView = dataView;\n    this.littleEndian = littleEndian;\n    this.tiles = cache ? {} : null;\n    this.isTiled = !fileDirectory.StripOffsets;\n    const planarConfiguration = fileDirectory.PlanarConfiguration;\n    this.planarConfiguration = (typeof planarConfiguration === 'undefined') ? 1 : planarConfiguration;\n    if (this.planarConfiguration !== 1 && this.planarConfiguration !== 2) {\n      throw new Error('Invalid planar configuration.');\n    }\n\n    this.source = source;\n  }\n\n  /**\n   * Returns the associated parsed file directory.\n   * @returns {Object} the parsed file directory\n   */\n  getFileDirectory() {\n    return this.fileDirectory;\n  }\n\n  /**\n   * Returns the associated parsed geo keys.\n   * @returns {Object} the parsed geo keys\n   */\n  getGeoKeys() {\n    return this.geoKeys;\n  }\n\n  /**\n   * Returns the width of the image.\n   * @returns {Number} the width of the image\n   */\n  getWidth() {\n    return this.fileDirectory.ImageWidth;\n  }\n\n  /**\n   * Returns the height of the image.\n   * @returns {Number} the height of the image\n   */\n  getHeight() {\n    return this.fileDirectory.ImageLength;\n  }\n\n  /**\n   * Returns the number of samples per pixel.\n   * @returns {Number} the number of samples per pixel\n   */\n  getSamplesPerPixel() {\n    return typeof this.fileDirectory.SamplesPerPixel !== 'undefined'\n      ? this.fileDirectory.SamplesPerPixel : 1;\n  }\n\n  /**\n   * Returns the width of each tile.\n   * @returns {Number} the width of each tile\n   */\n  getTileWidth() {\n    return this.isTiled ? this.fileDirectory.TileWidth : this.getWidth();\n  }\n\n  /**\n   * Returns the height of each tile.\n   * @returns {Number} the height of each tile\n   */\n  getTileHeight() {\n    if (this.isTiled) {\n      return this.fileDirectory.TileLength;\n    }\n    if (typeof this.fileDirectory.RowsPerStrip !== 'undefined') {\n      return Math.min(this.fileDirectory.RowsPerStrip, this.getHeight());\n    }\n    return this.getHeight();\n  }\n\n  getBlockWidth() {\n    return this.getTileWidth();\n  }\n\n  getBlockHeight(y) {\n    if (this.isTiled || (y + 1) * this.getTileHeight() <= this.getHeight()) {\n      return this.getTileHeight();\n    } else {\n      return this.getHeight() - (y * this.getTileHeight());\n    }\n  }\n\n  /**\n   * Calculates the number of bytes for each pixel across all samples. Only full\n   * bytes are supported, an exception is thrown when this is not the case.\n   * @returns {Number} the bytes per pixel\n   */\n  getBytesPerPixel() {\n    let bytes = 0;\n    for (let i = 0; i < this.fileDirectory.BitsPerSample.length; ++i) {\n      bytes += this.getSampleByteSize(i);\n    }\n    return bytes;\n  }\n\n  getSampleByteSize(i) {\n    if (i >= this.fileDirectory.BitsPerSample.length) {\n      throw new RangeError(`Sample index ${i} is out of range.`);\n    }\n    return Math.ceil(this.fileDirectory.BitsPerSample[i] / 8);\n  }\n\n  getReaderForSample(sampleIndex) {\n    const format = this.fileDirectory.SampleFormat\n      ? this.fileDirectory.SampleFormat[sampleIndex] : 1;\n    const bitsPerSample = this.fileDirectory.BitsPerSample[sampleIndex];\n    switch (format) {\n      case 1: // unsigned integer data\n        if (bitsPerSample <= 8) {\n          return DataView.prototype.getUint8;\n        } else if (bitsPerSample <= 16) {\n          return DataView.prototype.getUint16;\n        } else if (bitsPerSample <= 32) {\n          return DataView.prototype.getUint32;\n        }\n        break;\n      case 2: // twos complement signed integer data\n        if (bitsPerSample <= 8) {\n          return DataView.prototype.getInt8;\n        } else if (bitsPerSample <= 16) {\n          return DataView.prototype.getInt16;\n        } else if (bitsPerSample <= 32) {\n          return DataView.prototype.getInt32;\n        }\n        break;\n      case 3:\n        switch (bitsPerSample) {\n          case 16:\n            return function (offset, littleEndian) {\n              return getFloat16(this, offset, littleEndian);\n            };\n          case 32:\n            return DataView.prototype.getFloat32;\n          case 64:\n            return DataView.prototype.getFloat64;\n          default:\n            break;\n        }\n        break;\n      default:\n        break;\n    }\n    throw Error('Unsupported data format/bitsPerSample');\n  }\n\n  getSampleFormat(sampleIndex = 0) {\n    return this.fileDirectory.SampleFormat\n      ? this.fileDirectory.SampleFormat[sampleIndex] : 1;\n  }\n\n  getBitsPerSample(sampleIndex = 0) {\n    return this.fileDirectory.BitsPerSample[sampleIndex];\n  }\n\n  getArrayForSample(sampleIndex, size) {\n    const format = this.getSampleFormat(sampleIndex);\n    const bitsPerSample = this.getBitsPerSample(sampleIndex);\n    return arrayForType(format, bitsPerSample, size);\n  }\n\n  /**\n   * Returns the decoded strip or tile.\n   * @param {Number} x the strip or tile x-offset\n   * @param {Number} y the tile y-offset (0 for stripped images)\n   * @param {Number} sample the sample to get for separated samples\n   * @param {import(\"./geotiff\").Pool|import(\"./geotiff\").BaseDecoder} poolOrDecoder the decoder or decoder pool\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   * @returns {Promise.<ArrayBuffer>}\n   */\n  async getTileOrStrip(x, y, sample, poolOrDecoder, signal) {\n    const numTilesPerRow = Math.ceil(this.getWidth() / this.getTileWidth());\n    const numTilesPerCol = Math.ceil(this.getHeight() / this.getTileHeight());\n    let index;\n    const { tiles } = this;\n    if (this.planarConfiguration === 1) {\n      index = (y * numTilesPerRow) + x;\n    } else if (this.planarConfiguration === 2) {\n      index = (sample * numTilesPerRow * numTilesPerCol) + (y * numTilesPerRow) + x;\n    }\n\n    let offset;\n    let byteCount;\n    if (this.isTiled) {\n      offset = this.fileDirectory.TileOffsets[index];\n      byteCount = this.fileDirectory.TileByteCounts[index];\n    } else {\n      offset = this.fileDirectory.StripOffsets[index];\n      byteCount = this.fileDirectory.StripByteCounts[index];\n    }\n    const slice = (await this.source.fetch([{ offset, length: byteCount }], signal))[0];\n\n    let request;\n    if (tiles === null || !tiles[index]) {\n    // resolve each request by potentially applying array normalization\n      request = (async () => {\n        let data = await poolOrDecoder.decode(this.fileDirectory, slice);\n        const sampleFormat = this.getSampleFormat();\n        const bitsPerSample = this.getBitsPerSample();\n        if (needsNormalization(sampleFormat, bitsPerSample)) {\n          data = normalizeArray(\n            data,\n            sampleFormat,\n            this.planarConfiguration,\n            this.getSamplesPerPixel(),\n            bitsPerSample,\n            this.getTileWidth(),\n            this.getBlockHeight(y),\n          );\n        }\n        return data;\n      })();\n\n      // set the cache\n      if (tiles !== null) {\n        tiles[index] = request;\n      }\n    } else {\n      // get from the cache\n      request = tiles[index];\n    }\n\n    // cache the tile request\n    return { x, y, sample, data: await request };\n  }\n\n  /**\n   * Internal read function.\n   * @private\n   * @param {Array} imageWindow The image window in pixel coordinates\n   * @param {Array} samples The selected samples (0-based indices)\n   * @param {TypedArray|TypedArray[]} valueArrays The array(s) to write into\n   * @param {Boolean} interleave Whether or not to write in an interleaved manner\n   * @param {import(\"./geotiff\").Pool|AbstractDecoder} poolOrDecoder the decoder or decoder pool\n   * @param {number} width the width of window to be read into\n   * @param {number} height the height of window to be read into\n   * @param {number} resampleMethod the resampling method to be used when interpolating\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   * @returns {Promise<ReadRasterResult>}\n   */\n  async _readRaster(imageWindow, samples, valueArrays, interleave, poolOrDecoder, width,\n    height, resampleMethod, signal) {\n    const tileWidth = this.getTileWidth();\n    const tileHeight = this.getTileHeight();\n    const imageWidth = this.getWidth();\n    const imageHeight = this.getHeight();\n\n    const minXTile = Math.max(Math.floor(imageWindow[0] / tileWidth), 0);\n    const maxXTile = Math.min(\n      Math.ceil(imageWindow[2] / tileWidth),\n      Math.ceil(imageWidth / tileWidth),\n    );\n    const minYTile = Math.max(Math.floor(imageWindow[1] / tileHeight), 0);\n    const maxYTile = Math.min(\n      Math.ceil(imageWindow[3] / tileHeight),\n      Math.ceil(imageHeight / tileHeight),\n    );\n    const windowWidth = imageWindow[2] - imageWindow[0];\n\n    let bytesPerPixel = this.getBytesPerPixel();\n\n    const srcSampleOffsets = [];\n    const sampleReaders = [];\n    for (let i = 0; i < samples.length; ++i) {\n      if (this.planarConfiguration === 1) {\n        srcSampleOffsets.push(sum(this.fileDirectory.BitsPerSample, 0, samples[i]) / 8);\n      } else {\n        srcSampleOffsets.push(0);\n      }\n      sampleReaders.push(this.getReaderForSample(samples[i]));\n    }\n\n    const promises = [];\n    const { littleEndian } = this;\n\n    for (let yTile = minYTile; yTile < maxYTile; ++yTile) {\n      for (let xTile = minXTile; xTile < maxXTile; ++xTile) {\n        for (let sampleIndex = 0; sampleIndex < samples.length; ++sampleIndex) {\n          const si = sampleIndex;\n          const sample = samples[sampleIndex];\n          if (this.planarConfiguration === 2) {\n            bytesPerPixel = this.getSampleByteSize(sampleIndex);\n          }\n          const promise = this.getTileOrStrip(xTile, yTile, sample, poolOrDecoder, signal).then((tile) => {\n            const buffer = tile.data;\n            const dataView = new DataView(buffer);\n            const blockHeight = this.getBlockHeight(tile.y);\n            const firstLine = tile.y * tileHeight;\n            const firstCol = tile.x * tileWidth;\n            const lastLine = firstLine + blockHeight;\n            const lastCol = (tile.x + 1) * tileWidth;\n            const reader = sampleReaders[si];\n\n            const ymax = Math.min(blockHeight, blockHeight - (lastLine - imageWindow[3]), imageHeight - firstLine);\n            const xmax = Math.min(tileWidth, tileWidth - (lastCol - imageWindow[2]), imageWidth - firstCol);\n\n            for (let y = Math.max(0, imageWindow[1] - firstLine); y < ymax; ++y) {\n              for (let x = Math.max(0, imageWindow[0] - firstCol); x < xmax; ++x) {\n                const pixelOffset = ((y * tileWidth) + x) * bytesPerPixel;\n                const value = reader.call(\n                  dataView, pixelOffset + srcSampleOffsets[si], littleEndian,\n                );\n                let windowCoordinate;\n                if (interleave) {\n                  windowCoordinate = ((y + firstLine - imageWindow[1]) * windowWidth * samples.length)\n                    + ((x + firstCol - imageWindow[0]) * samples.length)\n                    + si;\n                  valueArrays[windowCoordinate] = value;\n                } else {\n                  windowCoordinate = (\n                    (y + firstLine - imageWindow[1]) * windowWidth\n                  ) + x + firstCol - imageWindow[0];\n                  valueArrays[si][windowCoordinate] = value;\n                }\n              }\n            }\n          });\n          promises.push(promise);\n        }\n      }\n    }\n    await Promise.all(promises);\n\n    if ((width && (imageWindow[2] - imageWindow[0]) !== width)\n        || (height && (imageWindow[3] - imageWindow[1]) !== height)) {\n      let resampled;\n      if (interleave) {\n        resampled = resampleInterleaved(\n          valueArrays,\n          imageWindow[2] - imageWindow[0],\n          imageWindow[3] - imageWindow[1],\n          width, height,\n          samples.length,\n          resampleMethod,\n        );\n      } else {\n        resampled = resample(\n          valueArrays,\n          imageWindow[2] - imageWindow[0],\n          imageWindow[3] - imageWindow[1],\n          width, height,\n          resampleMethod,\n        );\n      }\n      resampled.width = width;\n      resampled.height = height;\n      return resampled;\n    }\n\n    valueArrays.width = width || imageWindow[2] - imageWindow[0];\n    valueArrays.height = height || imageWindow[3] - imageWindow[1];\n\n    return valueArrays;\n  }\n\n  /**\n   * Reads raster data from the image. This function reads all selected samples\n   * into separate arrays of the correct type for that sample or into a single\n   * combined array when `interleave` is set. When provided, only a subset\n   * of the raster is read for each sample.\n   *\n   * @param {ReadRasterOptions} [options={}] optional parameters\n   * @returns {Promise<ReadRasterResult>} the decoded arrays as a promise\n   */\n  async readRasters({\n    window: wnd, samples = [], interleave, pool = null,\n    width, height, resampleMethod, fillValue, signal,\n  } = {}) {\n    const imageWindow = wnd || [0, 0, this.getWidth(), this.getHeight()];\n\n    // check parameters\n    if (imageWindow[0] > imageWindow[2] || imageWindow[1] > imageWindow[3]) {\n      throw new Error('Invalid subsets');\n    }\n\n    const imageWindowWidth = imageWindow[2] - imageWindow[0];\n    const imageWindowHeight = imageWindow[3] - imageWindow[1];\n    const numPixels = imageWindowWidth * imageWindowHeight;\n    const samplesPerPixel = this.getSamplesPerPixel();\n\n    if (!samples || !samples.length) {\n      for (let i = 0; i < samplesPerPixel; ++i) {\n        samples.push(i);\n      }\n    } else {\n      for (let i = 0; i < samples.length; ++i) {\n        if (samples[i] >= samplesPerPixel) {\n          return Promise.reject(new RangeError(`Invalid sample index '${samples[i]}'.`));\n        }\n      }\n    }\n    let valueArrays;\n    if (interleave) {\n      const format = this.fileDirectory.SampleFormat\n        ? Math.max.apply(null, this.fileDirectory.SampleFormat) : 1;\n      const bitsPerSample = Math.max.apply(null, this.fileDirectory.BitsPerSample);\n      valueArrays = arrayForType(format, bitsPerSample, numPixels * samples.length);\n      if (fillValue) {\n        valueArrays.fill(fillValue);\n      }\n    } else {\n      valueArrays = [];\n      for (let i = 0; i < samples.length; ++i) {\n        const valueArray = this.getArrayForSample(samples[i], numPixels);\n        if (Array.isArray(fillValue) && i < fillValue.length) {\n          valueArray.fill(fillValue[i]);\n        } else if (fillValue && !Array.isArray(fillValue)) {\n          valueArray.fill(fillValue);\n        }\n        valueArrays.push(valueArray);\n      }\n    }\n\n    const poolOrDecoder = pool || await getDecoder(this.fileDirectory);\n\n    const result = await this._readRaster(\n      imageWindow, samples, valueArrays, interleave, poolOrDecoder, width, height, resampleMethod, signal,\n    );\n    return result;\n  }\n\n  /**\n   * Reads raster data from the image as RGB. The result is always an\n   * interleaved typed array.\n   * Colorspaces other than RGB will be transformed to RGB, color maps expanded.\n   * When no other method is applicable, the first sample is used to produce a\n   * grayscale image.\n   * When provided, only a subset of the raster is read for each sample.\n   *\n   * @param {Object} [options] optional parameters\n   * @param {Array<number>} [options.window] the subset to read data from in pixels.\n   * @param {boolean} [options.interleave=true] whether the data shall be read\n   *                                             in one single array or separate\n   *                                             arrays.\n   * @param {import(\"./geotiff\").Pool} [options.pool=null] The optional decoder pool to use.\n   * @param {number} [options.width] The desired width of the output. When the width is no the\n   *                                 same as the images, resampling will be performed.\n   * @param {number} [options.height] The desired height of the output. When the width is no the\n   *                                  same as the images, resampling will be performed.\n   * @param {string} [options.resampleMethod='nearest'] The desired resampling method.\n   * @param {boolean} [options.enableAlpha=false] Enable reading alpha channel if present.\n   * @param {AbortSignal} [options.signal] An AbortSignal that may be signalled if the request is\n   *                                       to be aborted\n   * @returns {Promise<ReadRasterResult>} the RGB array as a Promise\n   */\n  async readRGB({ window, interleave = true, pool = null, width, height,\n    resampleMethod, enableAlpha = false, signal } = {}) {\n    const imageWindow = window || [0, 0, this.getWidth(), this.getHeight()];\n\n    // check parameters\n    if (imageWindow[0] > imageWindow[2] || imageWindow[1] > imageWindow[3]) {\n      throw new Error('Invalid subsets');\n    }\n\n    const pi = this.fileDirectory.PhotometricInterpretation;\n\n    if (pi === photometricInterpretations.RGB) {\n      let s = [0, 1, 2];\n      if ((!(this.fileDirectory.ExtraSamples === ExtraSamplesValues.Unspecified)) && enableAlpha) {\n        s = [];\n        for (let i = 0; i < this.fileDirectory.BitsPerSample.length; i += 1) {\n          s.push(i);\n        }\n      }\n      return this.readRasters({\n        window,\n        interleave,\n        samples: s,\n        pool,\n        width,\n        height,\n        resampleMethod,\n        signal,\n      });\n    }\n\n    let samples;\n    switch (pi) {\n      case photometricInterpretations.WhiteIsZero:\n      case photometricInterpretations.BlackIsZero:\n      case photometricInterpretations.Palette:\n        samples = [0];\n        break;\n      case photometricInterpretations.CMYK:\n        samples = [0, 1, 2, 3];\n        break;\n      case photometricInterpretations.YCbCr:\n      case photometricInterpretations.CIELab:\n        samples = [0, 1, 2];\n        break;\n      default:\n        throw new Error('Invalid or unsupported photometric interpretation.');\n    }\n\n    const subOptions = {\n      window: imageWindow,\n      interleave: true,\n      samples,\n      pool,\n      width,\n      height,\n      resampleMethod,\n      signal,\n    };\n    const { fileDirectory } = this;\n    const raster = await this.readRasters(subOptions);\n\n    const max = 2 ** this.fileDirectory.BitsPerSample[0];\n    let data;\n    switch (pi) {\n      case photometricInterpretations.WhiteIsZero:\n        data = fromWhiteIsZero(raster, max);\n        break;\n      case photometricInterpretations.BlackIsZero:\n        data = fromBlackIsZero(raster, max);\n        break;\n      case photometricInterpretations.Palette:\n        data = fromPalette(raster, fileDirectory.ColorMap);\n        break;\n      case photometricInterpretations.CMYK:\n        data = fromCMYK(raster);\n        break;\n      case photometricInterpretations.YCbCr:\n        data = fromYCbCr(raster);\n        break;\n      case photometricInterpretations.CIELab:\n        data = fromCIELab(raster);\n        break;\n      default:\n        throw new Error('Unsupported photometric interpretation.');\n    }\n\n    // if non-interleaved data is requested, we must split the channels\n    // into their respective arrays\n    if (!interleave) {\n      const red = new Uint8Array(data.length / 3);\n      const green = new Uint8Array(data.length / 3);\n      const blue = new Uint8Array(data.length / 3);\n      for (let i = 0, j = 0; i < data.length; i += 3, ++j) {\n        red[j] = data[i];\n        green[j] = data[i + 1];\n        blue[j] = data[i + 2];\n      }\n      data = [red, green, blue];\n    }\n\n    data.width = raster.width;\n    data.height = raster.height;\n    return data;\n  }\n\n  /**\n   * Returns an array of tiepoints.\n   * @returns {Object[]}\n   */\n  getTiePoints() {\n    if (!this.fileDirectory.ModelTiepoint) {\n      return [];\n    }\n\n    const tiePoints = [];\n    for (let i = 0; i < this.fileDirectory.ModelTiepoint.length; i += 6) {\n      tiePoints.push({\n        i: this.fileDirectory.ModelTiepoint[i],\n        j: this.fileDirectory.ModelTiepoint[i + 1],\n        k: this.fileDirectory.ModelTiepoint[i + 2],\n        x: this.fileDirectory.ModelTiepoint[i + 3],\n        y: this.fileDirectory.ModelTiepoint[i + 4],\n        z: this.fileDirectory.ModelTiepoint[i + 5],\n      });\n    }\n    return tiePoints;\n  }\n\n  /**\n   * Returns the parsed GDAL metadata items.\n   *\n   * If sample is passed to null, dataset-level metadata will be returned.\n   * Otherwise only metadata specific to the provided sample will be returned.\n   *\n   * @param {number} [sample=null] The sample index.\n   * @returns {Object}\n   */\n  getGDALMetadata(sample = null) {\n    const metadata = {};\n    if (!this.fileDirectory.GDAL_METADATA) {\n      return null;\n    }\n    const string = this.fileDirectory.GDAL_METADATA;\n\n    let items = findTagsByName(string, 'Item');\n\n    if (sample === null) {\n      items = items.filter((item) => getAttribute(item, 'sample') === undefined);\n    } else {\n      items = items.filter((item) => Number(getAttribute(item, 'sample')) === sample);\n    }\n\n    for (let i = 0; i < items.length; ++i) {\n      const item = items[i];\n      metadata[getAttribute(item, 'name')] = item.inner;\n    }\n    return metadata;\n  }\n\n  /**\n   * Returns the GDAL nodata value\n   * @returns {number|null}\n   */\n  getGDALNoData() {\n    if (!this.fileDirectory.GDAL_NODATA) {\n      return null;\n    }\n    const string = this.fileDirectory.GDAL_NODATA;\n    return Number(string.substring(0, string.length - 1));\n  }\n\n  /**\n   * Returns the image origin as a XYZ-vector. When the image has no affine\n   * transformation, then an exception is thrown.\n   * @returns {Array<number>} The origin as a vector\n   */\n  getOrigin() {\n    const tiePoints = this.fileDirectory.ModelTiepoint;\n    const modelTransformation = this.fileDirectory.ModelTransformation;\n    if (tiePoints && tiePoints.length === 6) {\n      return [\n        tiePoints[3],\n        tiePoints[4],\n        tiePoints[5],\n      ];\n    }\n    if (modelTransformation) {\n      return [\n        modelTransformation[3],\n        modelTransformation[7],\n        modelTransformation[11],\n      ];\n    }\n    throw new Error('The image does not have an affine transformation.');\n  }\n\n  /**\n   * Returns the image resolution as a XYZ-vector. When the image has no affine\n   * transformation, then an exception is thrown.\n   * @param {GeoTIFFImage} [referenceImage=null] A reference image to calculate the resolution from\n   *                                             in cases when the current image does not have the\n   *                                             required tags on its own.\n   * @returns {Array<number>} The resolution as a vector\n   */\n  getResolution(referenceImage = null) {\n    const modelPixelScale = this.fileDirectory.ModelPixelScale;\n    const modelTransformation = this.fileDirectory.ModelTransformation;\n\n    if (modelPixelScale) {\n      return [\n        modelPixelScale[0],\n        -modelPixelScale[1],\n        modelPixelScale[2],\n      ];\n    }\n    if (modelTransformation) {\n      return [\n        modelTransformation[0],\n        modelTransformation[5],\n        modelTransformation[10],\n      ];\n    }\n\n    if (referenceImage) {\n      const [refResX, refResY, refResZ] = referenceImage.getResolution();\n      return [\n        refResX * referenceImage.getWidth() / this.getWidth(),\n        refResY * referenceImage.getHeight() / this.getHeight(),\n        refResZ * referenceImage.getWidth() / this.getWidth(),\n      ];\n    }\n\n    throw new Error('The image does not have an affine transformation.');\n  }\n\n  /**\n   * Returns whether or not the pixels of the image depict an area (or point).\n   * @returns {Boolean} Whether the pixels are a point\n   */\n  pixelIsArea() {\n    return this.geoKeys.GTRasterTypeGeoKey === 1;\n  }\n\n  /**\n   * Returns the image bounding box as an array of 4 values: min-x, min-y,\n   * max-x and max-y. When the image has no affine transformation, then an\n   * exception is thrown.\n   * @returns {Array<number>} The bounding box\n   */\n  getBoundingBox() {\n    const origin = this.getOrigin();\n    const resolution = this.getResolution();\n\n    const x1 = origin[0];\n    const y1 = origin[1];\n\n    const x2 = x1 + (resolution[0] * this.getWidth());\n    const y2 = y1 + (resolution[1] * this.getHeight());\n\n    return [\n      Math.min(x1, x2),\n      Math.min(y1, y2),\n      Math.max(x1, x2),\n      Math.max(y1, y2),\n    ];\n  }\n}\n\nexport default GeoTIFFImage;\n","export const fieldTagNames = {\n  // TIFF Baseline\n  0x013B: 'Artist',\n  0x0102: 'BitsPerSample',\n  0x0109: 'CellLength',\n  0x0108: 'CellWidth',\n  0x0140: 'ColorMap',\n  0x0103: 'Compression',\n  0x8298: 'Copyright',\n  0x0132: 'DateTime',\n  0x0152: 'ExtraSamples',\n  0x010A: 'FillOrder',\n  0x0121: 'FreeByteCounts',\n  0x0120: 'FreeOffsets',\n  0x0123: 'GrayResponseCurve',\n  0x0122: 'GrayResponseUnit',\n  0x013C: 'HostComputer',\n  0x010E: 'ImageDescription',\n  0x0101: 'ImageLength',\n  0x0100: 'ImageWidth',\n  0x010F: 'Make',\n  0x0119: 'MaxSampleValue',\n  0x0118: 'MinSampleValue',\n  0x0110: 'Model',\n  0x00FE: 'NewSubfileType',\n  0x0112: 'Orientation',\n  0x0106: 'PhotometricInterpretation',\n  0x011C: 'PlanarConfiguration',\n  0x0128: 'ResolutionUnit',\n  0x0116: 'RowsPerStrip',\n  0x0115: 'SamplesPerPixel',\n  0x0131: 'Software',\n  0x0117: 'StripByteCounts',\n  0x0111: 'StripOffsets',\n  0x00FF: 'SubfileType',\n  0x0107: 'Threshholding',\n  0x011A: 'XResolution',\n  0x011B: 'YResolution',\n\n  // TIFF Extended\n  0x0146: 'BadFaxLines',\n  0x0147: 'CleanFaxData',\n  0x0157: 'ClipPath',\n  0x0148: 'ConsecutiveBadFaxLines',\n  0x01B1: 'Decode',\n  0x01B2: 'DefaultImageColor',\n  0x010D: 'DocumentName',\n  0x0150: 'DotRange',\n  0x0141: 'HalftoneHints',\n  0x015A: 'Indexed',\n  0x015B: 'JPEGTables',\n  0x011D: 'PageName',\n  0x0129: 'PageNumber',\n  0x013D: 'Predictor',\n  0x013F: 'PrimaryChromaticities',\n  0x0214: 'ReferenceBlackWhite',\n  0x0153: 'SampleFormat',\n  0x0154: 'SMinSampleValue',\n  0x0155: 'SMaxSampleValue',\n  0x022F: 'StripRowCounts',\n  0x014A: 'SubIFDs',\n  0x0124: 'T4Options',\n  0x0125: 'T6Options',\n  0x0145: 'TileByteCounts',\n  0x0143: 'TileLength',\n  0x0144: 'TileOffsets',\n  0x0142: 'TileWidth',\n  0x012D: 'TransferFunction',\n  0x013E: 'WhitePoint',\n  0x0158: 'XClipPathUnits',\n  0x011E: 'XPosition',\n  0x0211: 'YCbCrCoefficients',\n  0x0213: 'YCbCrPositioning',\n  0x0212: 'YCbCrSubSampling',\n  0x0159: 'YClipPathUnits',\n  0x011F: 'YPosition',\n\n  // EXIF\n  0x9202: 'ApertureValue',\n  0xA001: 'ColorSpace',\n  0x9004: 'DateTimeDigitized',\n  0x9003: 'DateTimeOriginal',\n  0x8769: 'Exif IFD',\n  0x9000: 'ExifVersion',\n  0x829A: 'ExposureTime',\n  0xA300: 'FileSource',\n  0x9209: 'Flash',\n  0xA000: 'FlashpixVersion',\n  0x829D: 'FNumber',\n  0xA420: 'ImageUniqueID',\n  0x9208: 'LightSource',\n  0x927C: 'MakerNote',\n  0x9201: 'ShutterSpeedValue',\n  0x9286: 'UserComment',\n\n  // IPTC\n  0x83BB: 'IPTC',\n\n  // ICC\n  0x8773: 'ICC Profile',\n\n  // XMP\n  0x02BC: 'XMP',\n\n  // GDAL\n  0xA480: 'GDAL_METADATA',\n  0xA481: 'GDAL_NODATA',\n\n  // Photoshop\n  0x8649: 'Photoshop',\n\n  // GeoTiff\n  0x830E: 'ModelPixelScale',\n  0x8482: 'ModelTiepoint',\n  0x85D8: 'ModelTransformation',\n  0x87AF: 'GeoKeyDirectory',\n  0x87B0: 'GeoDoubleParams',\n  0x87B1: 'GeoAsciiParams',\n\n  // LERC\n  0xC5F2: 'LercParameters',\n};\n\nexport const fieldTags = {};\nfor (const key in fieldTagNames) {\n  if (fieldTagNames.hasOwnProperty(key)) {\n    fieldTags[fieldTagNames[key]] = parseInt(key, 10);\n  }\n}\n\nexport const fieldTagTypes = {\n  256: 'SHORT',\n  257: 'SHORT',\n  258: 'SHORT',\n  259: 'SHORT',\n  262: 'SHORT',\n  273: 'LONG',\n  274: 'SHORT',\n  277: 'SHORT',\n  278: 'LONG',\n  279: 'LONG',\n  282: 'RATIONAL',\n  283: 'RATIONAL',\n  284: 'SHORT',\n  286: 'SHORT',\n  287: 'RATIONAL',\n  296: 'SHORT',\n  297: 'SHORT',\n  305: 'ASCII',\n  306: 'ASCII',\n  338: 'SHORT',\n  339: 'SHORT',\n  513: 'LONG',\n  514: 'LONG',\n  1024: 'SHORT',\n  1025: 'SHORT',\n  2048: 'SHORT',\n  2049: 'ASCII',\n  3072: 'SHORT',\n  3073: 'ASCII',\n  33550: 'DOUBLE',\n  33922: 'DOUBLE',\n  34665: 'LONG',\n  34735: 'SHORT',\n  34737: 'ASCII',\n  42113: 'ASCII',\n};\n\nexport const arrayFields = [\n  fieldTags.BitsPerSample,\n  fieldTags.ExtraSamples,\n  fieldTags.SampleFormat,\n  fieldTags.StripByteCounts,\n  fieldTags.StripOffsets,\n  fieldTags.StripRowCounts,\n  fieldTags.TileByteCounts,\n  fieldTags.TileOffsets,\n  fieldTags.SubIFDs,\n];\n\nexport const fieldTypeNames = {\n  0x0001: 'BYTE',\n  0x0002: 'ASCII',\n  0x0003: 'SHORT',\n  0x0004: 'LONG',\n  0x0005: 'RATIONAL',\n  0x0006: 'SBYTE',\n  0x0007: 'UNDEFINED',\n  0x0008: 'SSHORT',\n  0x0009: 'SLONG',\n  0x000A: 'SRATIONAL',\n  0x000B: 'FLOAT',\n  0x000C: 'DOUBLE',\n  // IFD offset, suggested by https://owl.phy.queensu.ca/~phil/exiftool/standards.html\n  0x000D: 'IFD',\n  // introduced by BigTIFF\n  0x0010: 'LONG8',\n  0x0011: 'SLONG8',\n  0x0012: 'IFD8',\n};\n\nexport const fieldTypes = {};\nfor (const key in fieldTypeNames) {\n  if (fieldTypeNames.hasOwnProperty(key)) {\n    fieldTypes[fieldTypeNames[key]] = parseInt(key, 10);\n  }\n}\n\nexport const photometricInterpretations = {\n  WhiteIsZero: 0,\n  BlackIsZero: 1,\n  RGB: 2,\n  Palette: 3,\n  TransparencyMask: 4,\n  CMYK: 5,\n  YCbCr: 6,\n\n  CIELab: 8,\n  ICCLab: 9,\n};\n\nexport const ExtraSamplesValues = {\n  Unspecified: 0,\n  Assocalpha: 1,\n  Unassalpha: 2,\n};\n\nexport const LercParameters = {\n  Version: 0,\n  AddCompression: 1,\n};\n\nexport const LercAddCompression = {\n  None: 0,\n  Deflate: 1,\n};\n\nexport const geoKeyNames = {\n  1024: 'GTModelTypeGeoKey',\n  1025: 'GTRasterTypeGeoKey',\n  1026: 'GTCitationGeoKey',\n  2048: 'GeographicTypeGeoKey',\n  2049: 'GeogCitationGeoKey',\n  2050: 'GeogGeodeticDatumGeoKey',\n  2051: 'GeogPrimeMeridianGeoKey',\n  2052: 'GeogLinearUnitsGeoKey',\n  2053: 'GeogLinearUnitSizeGeoKey',\n  2054: 'GeogAngularUnitsGeoKey',\n  2055: 'GeogAngularUnitSizeGeoKey',\n  2056: 'GeogEllipsoidGeoKey',\n  2057: 'GeogSemiMajorAxisGeoKey',\n  2058: 'GeogSemiMinorAxisGeoKey',\n  2059: 'GeogInvFlatteningGeoKey',\n  2060: 'GeogAzimuthUnitsGeoKey',\n  2061: 'GeogPrimeMeridianLongGeoKey',\n  2062: 'GeogTOWGS84GeoKey',\n  3072: 'ProjectedCSTypeGeoKey',\n  3073: 'PCSCitationGeoKey',\n  3074: 'ProjectionGeoKey',\n  3075: 'ProjCoordTransGeoKey',\n  3076: 'ProjLinearUnitsGeoKey',\n  3077: 'ProjLinearUnitSizeGeoKey',\n  3078: 'ProjStdParallel1GeoKey',\n  3079: 'ProjStdParallel2GeoKey',\n  3080: 'ProjNatOriginLongGeoKey',\n  3081: 'ProjNatOriginLatGeoKey',\n  3082: 'ProjFalseEastingGeoKey',\n  3083: 'ProjFalseNorthingGeoKey',\n  3084: 'ProjFalseOriginLongGeoKey',\n  3085: 'ProjFalseOriginLatGeoKey',\n  3086: 'ProjFalseOriginEastingGeoKey',\n  3087: 'ProjFalseOriginNorthingGeoKey',\n  3088: 'ProjCenterLongGeoKey',\n  3089: 'ProjCenterLatGeoKey',\n  3090: 'ProjCenterEastingGeoKey',\n  3091: 'ProjCenterNorthingGeoKey',\n  3092: 'ProjScaleAtNatOriginGeoKey',\n  3093: 'ProjScaleAtCenterGeoKey',\n  3094: 'ProjAzimuthAngleGeoKey',\n  3095: 'ProjStraightVertPoleLongGeoKey',\n  3096: 'ProjRectifiedGridAngleGeoKey',\n  4096: 'VerticalCSTypeGeoKey',\n  4097: 'VerticalCitationGeoKey',\n  4098: 'VerticalDatumGeoKey',\n  4099: 'VerticalUnitsGeoKey',\n};\n\nexport const geoKeys = {};\nfor (const key in geoKeyNames) {\n  if (geoKeyNames.hasOwnProperty(key)) {\n    geoKeys[geoKeyNames[key]] = parseInt(key, 10);\n  }\n}\n"],"names":["render","_vm","this","_c","_self","staticClass","attrs","collections","showKeywords","searchTerm","sort","offerDetails","heading","collapsed","loadAdditionalData","on","detailsToggled","scopedSlots","_u","key","fn","scope","_t","missing","federation","proxy","slot","item","mapOptions","staticRenderFns","name","components","Collection","SearchableList","mixins","FederationMixin","props","type","Array","default","Object","String","Boolean","Function","beforeCreate","methods","args","$emit","component","model","value","callback","$$v","filterValue","expression","_e","_l","col","id","directives","rawName","hide","class","thClasses","thTitle","$event","enableSort","_v","_s","row","i","canEdit","stylable","onDblClick","showEditField","preventDefault","stopPropagation","saveEditField","ref","refInFor","domProps","resetEditFieldEsc","formattedValue","hasData","view","length","columnCount","noDataMessage","SearchBox","columns","data","primaryKey","editField","sortState","direction","watch","updateView","immediate","handler","includes","computed","keys","hasFilter","created","determinePrimaryKey","edit","event","action","$nextTick","$refs","focus","setNoData","error","config","headers","message","console","warn","computedValue","format","classes","push","colId","slice","a","b","sortFn","result","filter","toLowerCase","values","hasOwnProperty","filterable","toString","clearFilter","isArray","call","DataTypes","Formatters","fileFormats","showAll","gis_data_types","summary","identifier","FileFormat","formats","showInput","showOutput","typesToShow","types","assign","registry","Map","addDecoder","cases","importFn","forEach","c","set","async","getDecoder","fileDirectory","get","Compression","Error","Decoder","undefined","then","m","DataView64","constructor","arrayBuffer","_dataView","DataView","buffer","getUint64","offset","littleEndian","left","getUint32","right","combined","Number","isSafeInteger","getInt64","isNegative","getUint8","carrying","byte","getInt8","getUint16","getInt16","getInt32","getFloat16","g","getFloat32","getFloat64","DataSlice","sliceOffset","bigTiff","_sliceOffset","_littleEndian","_bigTiff","sliceTop","byteLength","covers","readUint8","readInt8","readUint16","readInt16","readUint32","readInt32","readFloat32","readFloat64","readUint64","readInt64","readOffset","CRLFCRLF","itemsToObject","items","fromEntries","obj","parseHeaders","text","split","map","line","kv","str","trim","parseContentType","rawContentType","rawParams","s","paramsItems","param","params","parseContentRange","rawContentRange","start","end","total","match","parseInt","parseByteRanges","responseArrayBuffer","boundary","decoder","TextDecoder","out","startBoundary","endBoundary","decode","Uint8Array","Math","min","startsWith","innerText","substr","endOfHeaders","indexOf","startOfData","fileSize","BaseSource","slices","signal","Promise","all","fetchSlice","wait","milliseconds","resolve","setTimeout","zip","A","from","B","k","AbortError","super","captureStackTrace","CustomAggregateError","errors","AggregateError","Block","top","BlockGroup","blockIds","BlockedSource","source","blockSize","cacheSize","blockCache","maxSize","onEviction","blockId","block","evictedBlocks","blockRequests","blockIdsToFetch","Set","abortedBlockIds","missingBlockIds","allBlockIds","clear","firstBlockOffset","floor","current","has","add","fetchBlocks","missingRequests","allSettled","abortedBlockRequests","aborted","blocks","failedBlocks","requiredBlocks","readSliceData","size","groups","groupBlocks","groupRequests","fetch","groupIndex","group","response","blockOffset","o","t","delete","err","sortedBlockIds","lastBlockId","blockIdLow","blockIdHigh","sliceData","ArrayBuffer","sliceView","delta","topDelta","usedBlockLength","blockInnerOffset","rangeInnerOffset","blockView","BaseResponse","ok","status","getHeader","headerName","BaseClient","url","credentials","FetchResponse","FetchClient","XHRResponse","xhr","getResponseHeader","XHRClient","constructRequest","reject","XMLHttpRequest","open","responseType","entries","setRequestHeader","onload","onerror","onabort","send","abort","addEventListener","HttpResponse","dataPromise","statusCode","HttpClient","parsedUrl","httpApi","protocol","request","resolveData","chunks","chunk","Buffer","concat","destroy","RemoteSource","client","maxRanges","allowFullFile","_fileSize","fetchSlices","Range","join","byteRanges","getData","first","others","maybeWrapInBlockedSource","makeFetchSource","blockOptions","makeXHRSource","makeHttpSource","makeRemoteSource","forceXHR","clientOptions","FileReaderSource","file","blob","reader","FileReader","target","readAsArrayBuffer","makeFileReaderSource","getFieldTypeLength","fieldType","RangeError","parseGeoKeyDirectory","rawGeoKeyDirectory","GeoKeyDirectory","geoKeyDirectory","location","count","substring","subarray","getValues","dataSlice","readMethod","fieldTypeLength","Int8Array","Uint16Array","Int16Array","Uint32Array","Int32Array","Float32Array","Float64Array","ImageFileDirectory","nextIFDByteOffset","GeoTIFFImageIndexError","index","GeoTIFFBase","options","window","imageWindow","width","height","resX","resY","bbox","firstImage","getImage","usedImage","imageCount","getImageCount","imgBBox","getBoundingBox","oX","oY","getOrigin","rX","rY","getResolution","usedBBox","allImages","image","SubfileType","subfileType","NewSubfileType","newSubfileType","getWidth","imgResX","imgResY","getHeight","wnd","imageResX","imageResY","round","max","readRasters","GeoTIFF","firstIFDOffset","cache","ifdRequests","ghostValues","fallbackSize","entrySize","offsetSize","getSlice","numDirEntries","byteSize","entryCount","fieldTag","typeCount","fieldValues","valueOffset","actualOffset","fieldDataSlice","parseFileDirectoryAt","requestIFD","e","previousIfd","ifd","dataView","hasNext","detectionString","heuristicAreaSize","valuesString","firstLine","metadataSize","fullString","static","headerData","BOM","TypeError","magicNumber","offsetByteSize","close","MultiGeoTIFF","mainFile","overviewFiles","imageFiles","fileDirectoriesPerFile","fileDirectoriesPerFileParsing","requests","parseFileDirectoriesPerFile","visited","relativeIndex","imageFile","ii","imageCounts","reduce","ifds","fromUrl","fromSource","fromBlob","fromUrls","mainUrl","overviewUrls","fromWhiteIsZero","raster","rgbRaster","j","fromBlackIsZero","fromPalette","colorMap","greenOffset","blueOffset","mapIndex","fromCMYK","cmykRaster","y","fromYCbCr","yCbCrRaster","Uint8ClampedArray","cb","cr","Xn","Yn","Zn","fromCIELab","cieLabRaster","L","a_","b_","r","x","z","copyNewSize","array","samplesPerPixel","getPrototypeOf","resampleNearest","valueArrays","inWidth","inHeight","outWidth","outHeight","relX","relY","newArray","cy","cx","lerp","v0","v1","resampleBilinear","rawY","yl","yh","ceil","rawX","tx","xl","xh","ll","hl","lh","hh","resample","method","resampleNearestInterleaved","valueArray","samples","resampleBilinearInterleaved","resampleInterleaved","sum","arrayForType","bitsPerSample","needsNormalization","normalizeArray","inBuffer","planarConfiguration","tileWidth","tileHeight","outSize","samplesToTransfer","outArray","bitMask","repeat","pixelBitSkip","bitsPerLine","lineBitOffset","pixelBitOffset","bitOffset","outIndex","byteOffset","innerBitOffset","raw","GeoTIFFImage","geoKeys","tiles","isTiled","StripOffsets","PlanarConfiguration","getFileDirectory","getGeoKeys","ImageWidth","ImageLength","getSamplesPerPixel","SamplesPerPixel","getTileWidth","TileWidth","getTileHeight","TileLength","RowsPerStrip","getBlockWidth","getBlockHeight","getBytesPerPixel","bytes","BitsPerSample","getSampleByteSize","getReaderForSample","sampleIndex","SampleFormat","prototype","getSampleFormat","getBitsPerSample","getArrayForSample","sample","poolOrDecoder","numTilesPerRow","numTilesPerCol","byteCount","TileOffsets","TileByteCounts","StripByteCounts","sampleFormat","interleave","resampleMethod","imageWidth","imageHeight","minXTile","maxXTile","minYTile","maxYTile","windowWidth","bytesPerPixel","srcSampleOffsets","sampleReaders","promises","yTile","xTile","si","promise","getTileOrStrip","tile","blockHeight","firstCol","lastLine","lastCol","ymax","xmax","pixelOffset","windowCoordinate","resampled","pool","fillValue","imageWindowWidth","imageWindowHeight","numPixels","apply","fill","_readRaster","enableAlpha","pi","PhotometricInterpretation","ExtraSamples","subOptions","ColorMap","red","green","blue","getTiePoints","ModelTiepoint","tiePoints","getGDALMetadata","metadata","GDAL_METADATA","string","inner","getGDALNoData","GDAL_NODATA","modelTransformation","ModelTransformation","referenceImage","modelPixelScale","ModelPixelScale","refResX","refResY","refResZ","pixelIsArea","GTRasterTypeGeoKey","origin","resolution","x1","y1","x2","y2","fieldTagNames","fieldTags","arrayFields","StripRowCounts","SubIFDs","fieldTypeNames","fieldTypes","photometricInterpretations","WhiteIsZero","BlackIsZero","RGB","Palette","TransparencyMask","CMYK","YCbCr","CIELab","ICCLab","ExtraSamplesValues","Unspecified","Assocalpha","Unassalpha","LercParameters","Version","AddCompression","LercAddCompression","None","Deflate","geoKeyNames"],"sourceRoot":""}