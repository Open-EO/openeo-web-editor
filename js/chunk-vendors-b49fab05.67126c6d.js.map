{"version":3,"file":"js/chunk-vendors-b49fab05.67126c6d.js","mappings":"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,GACtB,IAAIH,EACJ,OAAQG,GACR,IAAK,IACHH,EAAW,KACX,MACF,IAAK,IACHA,EAAW,IACX,MACF,IAAK,IACHA,EAAW,KACX,MACF,IAAK,IACHA,EAAW,KACX,MACF,IAAK,IACHA,EAAW,KACX,MACF,IAAK,IACHA,EAAW,KACX,MACF,IAAK,IACHA,EAAW,KACX,MACF,IAAK,IACHA,EAAW,KACX,MACF,IAAK,IACHA,EAAW,KACX,MACF,IAAK,IACHA,EAAW,KACX,MACF,IAAK,IACHA,EAAW,EACX,MACF,IAAK,IACHA,EAAW,IACX,MACF,IAAK,IACHA,EAAW,KACX,MACF,IAAK,IACHA,EAAW,KACX,MACF,IAAK,IACHA,EAAW,KACX,MACF,IAAK,IACHA,EAAW,KACX,MACF,IAAK,IACHA,EAAW,KACX,MACF,IAAK,IACHA,EAAW,KACX,MACF,IAAK,IACHA,EAAW,IACX,MACF,IAAK,IACHA,EAAW,KACX,MACF,QACEA,GAAY,EAEd,GAAIA,GAAY,EACd,OAAOA,EAGP,KAAO,wBAA0BG,CAGrC,C,yBCtuBAlI,EAAO7B,QAAUkB,KAAKC,G,yBCAtBU,EAAO7B,QAAUiO,OAAOxM,OAAS,SAAewH,GAC/C,OAAOA,IAAMA,CACd,C","sources":["webpack://@openeo/web-editor/./node_modules/ieee754/index.js","webpack://@openeo/web-editor/./node_modules/math-intrinsics/max.js","webpack://@openeo/web-editor/./node_modules/json-schema-traverse/index.js","webpack://@openeo/web-editor/./node_modules/inherits/inherits_browser.js","webpack://@openeo/web-editor/./node_modules/math-intrinsics/floor.js","webpack://@openeo/web-editor/./node_modules/math-intrinsics/min.js","webpack://@openeo/web-editor/./node_modules/math-intrinsics/round.js","webpack://@openeo/web-editor/./node_modules/math-intrinsics/abs.js","webpack://@openeo/web-editor/./node_modules/math-intrinsics/sign.js","webpack://@openeo/web-editor/./node_modules/mgrs/mgrs.js","webpack://@openeo/web-editor/./node_modules/math-intrinsics/pow.js","webpack://@openeo/web-editor/./node_modules/math-intrinsics/isNaN.js"],"sourcesContent":["/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","'use strict';\n\n/** @type {import('./max')} */\nmodule.exports = Math.max;\n","'use strict';\n\nvar traverse = module.exports = function (schema, opts, cb) {\n  // Legacy support for v0.3.1 and earlier.\n  if (typeof opts == 'function') {\n    cb = opts;\n    opts = {};\n  }\n\n  cb = opts.cb || cb;\n  var pre = (typeof cb == 'function') ? cb : cb.pre || function() {};\n  var post = cb.post || function() {};\n\n  _traverse(opts, pre, post, schema, '', schema);\n};\n\n\ntraverse.keywords = {\n  additionalItems: true,\n  items: true,\n  contains: true,\n  additionalProperties: true,\n  propertyNames: true,\n  not: true\n};\n\ntraverse.arrayKeywords = {\n  items: true,\n  allOf: true,\n  anyOf: true,\n  oneOf: true\n};\n\ntraverse.propsKeywords = {\n  definitions: true,\n  properties: true,\n  patternProperties: true,\n  dependencies: true\n};\n\ntraverse.skipKeywords = {\n  default: true,\n  enum: true,\n  const: true,\n  required: true,\n  maximum: true,\n  minimum: true,\n  exclusiveMaximum: true,\n  exclusiveMinimum: true,\n  multipleOf: true,\n  maxLength: true,\n  minLength: true,\n  pattern: true,\n  format: true,\n  maxItems: true,\n  minItems: true,\n  uniqueItems: true,\n  maxProperties: true,\n  minProperties: true\n};\n\n\nfunction _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {\n  if (schema && typeof schema == 'object' && !Array.isArray(schema)) {\n    pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);\n    for (var key in schema) {\n      var sch = schema[key];\n      if (Array.isArray(sch)) {\n        if (key in traverse.arrayKeywords) {\n          for (var i=0; i<sch.length; i++)\n            _traverse(opts, pre, post, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);\n        }\n      } else if (key in traverse.propsKeywords) {\n        if (sch && typeof sch == 'object') {\n          for (var prop in sch)\n            _traverse(opts, pre, post, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);\n        }\n      } else if (key in traverse.keywords || (opts.allKeys && !(key in traverse.skipKeywords))) {\n        _traverse(opts, pre, post, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);\n      }\n    }\n    post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);\n  }\n}\n\n\nfunction escapeJsonPtr(str) {\n  return str.replace(/~/g, '~0').replace(/\\//g, '~1');\n}\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","'use strict';\n\n/** @type {import('./floor')} */\nmodule.exports = Math.floor;\n","'use strict';\n\n/** @type {import('./min')} */\nmodule.exports = Math.min;\n","'use strict';\n\n/** @type {import('./round')} */\nmodule.exports = Math.round;\n","'use strict';\n\n/** @type {import('./abs')} */\nmodule.exports = Math.abs;\n","'use strict';\n\nvar $isNaN = require('./isNaN');\n\n/** @type {import('./sign')} */\nmodule.exports = function sign(number) {\n\tif ($isNaN(number) || number === 0) {\n\t\treturn number;\n\t}\n\treturn number < 0 ? -1 : +1;\n};\n","\n\n\n/**\n * UTM zones are grouped, and assigned to one of a group of 6\n * sets.\n *\n * {int} @private\n */\nvar NUM_100K_SETS = 6;\n\n/**\n * The column letters (for easting) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_COLUMN_LETTERS = 'AJSAJS';\n\n/**\n * The row letters (for northing) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_ROW_LETTERS = 'AFAFAF';\n\nvar A = 65; // A\nvar I = 73; // I\nvar O = 79; // O\nvar V = 86; // V\nvar Z = 90; // Z\nexport default {\n  forward: forward,\n  inverse: inverse,\n  toPoint: toPoint\n};\n/**\n * Conversion of lat/lon to MGRS.\n *\n * @param {object} ll Object literal with lat and lon properties on a\n *     WGS84 ellipsoid.\n * @param {int} accuracy Accuracy in digits (5 for 1 m, 4 for 10 m, 3 for\n *      100 m, 2 for 1000 m or 1 for 10000 m). Optional, default is 5.\n * @return {string} the MGRS string for the given location and accuracy.\n */\nexport function forward(ll, accuracy) {\n  accuracy = accuracy || 5; // default accuracy 1m\n  return encode(LLtoUTM({\n    lat: ll[1],\n    lon: ll[0]\n  }), accuracy);\n};\n\n/**\n * Conversion of MGRS to lat/lon.\n *\n * @param {string} mgrs MGRS string.\n * @return {array} An array with left (longitude), bottom (latitude), right\n *     (longitude) and top (latitude) values in WGS84, representing the\n *     bounding box for the provided MGRS reference.\n */\nexport function inverse(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat, bbox.lon, bbox.lat];\n  }\n  return [bbox.left, bbox.bottom, bbox.right, bbox.top];\n};\n\nexport function toPoint(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat];\n  }\n  return [(bbox.left + bbox.right) / 2, (bbox.top + bbox.bottom) / 2];\n};\n/**\n * Conversion from degrees to radians.\n *\n * @private\n * @param {number} deg the angle in degrees.\n * @return {number} the angle in radians.\n */\nfunction degToRad(deg) {\n  return (deg * (Math.PI / 180.0));\n}\n\n/**\n * Conversion from radians to degrees.\n *\n * @private\n * @param {number} rad the angle in radians.\n * @return {number} the angle in degrees.\n */\nfunction radToDeg(rad) {\n  return (180.0 * (rad / Math.PI));\n}\n\n/**\n * Converts a set of Longitude and Latitude co-ordinates to UTM\n * using the WGS84 ellipsoid.\n *\n * @private\n * @param {object} ll Object literal with lat and lon properties\n *     representing the WGS84 coordinate to be converted.\n * @return {object} Object literal containing the UTM value with easting,\n *     northing, zoneNumber and zoneLetter properties, and an optional\n *     accuracy property in digits. Returns null if the conversion failed.\n */\nfunction LLtoUTM(ll) {\n  var Lat = ll.lat;\n  var Long = ll.lon;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var k0 = 0.9996;\n  var LongOrigin;\n  var eccPrimeSquared;\n  var N, T, C, A, M;\n  var LatRad = degToRad(Lat);\n  var LongRad = degToRad(Long);\n  var LongOriginRad;\n  var ZoneNumber;\n  // (int)\n  ZoneNumber = Math.floor((Long + 180) / 6) + 1;\n\n  //Make sure the longitude 180.00 is in Zone 60\n  if (Long === 180) {\n    ZoneNumber = 60;\n  }\n\n  // Special zone for Norway\n  if (Lat >= 56.0 && Lat < 64.0 && Long >= 3.0 && Long < 12.0) {\n    ZoneNumber = 32;\n  }\n\n  // Special zones for Svalbard\n  if (Lat >= 72.0 && Lat < 84.0) {\n    if (Long >= 0.0 && Long < 9.0) {\n      ZoneNumber = 31;\n    }\n    else if (Long >= 9.0 && Long < 21.0) {\n      ZoneNumber = 33;\n    }\n    else if (Long >= 21.0 && Long < 33.0) {\n      ZoneNumber = 35;\n    }\n    else if (Long >= 33.0 && Long < 42.0) {\n      ZoneNumber = 37;\n    }\n  }\n\n  LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3; //+3 puts origin\n  // in middle of\n  // zone\n  LongOriginRad = degToRad(LongOrigin);\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));\n  T = Math.tan(LatRad) * Math.tan(LatRad);\n  C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);\n  A = Math.cos(LatRad) * (LongRad - LongOriginRad);\n\n  M = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * LatRad) - (35 * eccSquared * eccSquared * eccSquared / 3072) * Math.sin(6 * LatRad));\n\n  var UTMEasting = (k0 * N * (A + (1 - T + C) * A * A * A / 6.0 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A / 120.0) + 500000.0);\n\n  var UTMNorthing = (k0 * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A * A * A / 24.0 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A / 720.0)));\n  if (Lat < 0.0) {\n    UTMNorthing += 10000000.0; //10000000 meter offset for\n    // southern hemisphere\n  }\n\n  return {\n    northing: Math.round(UTMNorthing),\n    easting: Math.round(UTMEasting),\n    zoneNumber: ZoneNumber,\n    zoneLetter: getLetterDesignator(Lat)\n  };\n}\n\n/**\n * Converts UTM coords to lat/long, using the WGS84 ellipsoid. This is a convenience\n * class where the Zone can be specified as a single string eg.\"60N\" which\n * is then broken down into the ZoneNumber and ZoneLetter.\n *\n * @private\n * @param {object} utm An object literal with northing, easting, zoneNumber\n *     and zoneLetter properties. If an optional accuracy property is\n *     provided (in meters), a bounding box will be returned instead of\n *     latitude and longitude.\n * @return {object} An object literal containing either lat and lon values\n *     (if no accuracy was provided), or top, right, bottom and left values\n *     for the bounding box calculated according to the provided accuracy.\n *     Returns null if the conversion failed.\n */\nfunction UTMtoLL(utm) {\n\n  var UTMNorthing = utm.northing;\n  var UTMEasting = utm.easting;\n  var zoneLetter = utm.zoneLetter;\n  var zoneNumber = utm.zoneNumber;\n  // check the ZoneNummber is valid\n  if (zoneNumber < 0 || zoneNumber > 60) {\n    return null;\n  }\n\n  var k0 = 0.9996;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var eccPrimeSquared;\n  var e1 = (1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));\n  var N1, T1, C1, R1, D, M;\n  var LongOrigin;\n  var mu, phi1Rad;\n\n  // remove 500,000 meter offset for longitude\n  var x = UTMEasting - 500000.0;\n  var y = UTMNorthing;\n\n  // We must know somehow if we are in the Northern or Southern\n  // hemisphere, this is the only time we use the letter So even\n  // if the Zone letter isn't exactly correct it should indicate\n  // the hemisphere correctly\n  if (zoneLetter < 'N') {\n    y -= 10000000.0; // remove 10,000,000 meter offset used\n    // for southern hemisphere\n  }\n\n  // There are 60 zones with zone 1 being at West -180 to -174\n  LongOrigin = (zoneNumber - 1) * 6 - 180 + 3; // +3 puts origin\n  // in middle of\n  // zone\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  M = y / k0;\n  mu = M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));\n\n  phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + (151 * e1 * e1 * e1 / 96) * Math.sin(6 * mu);\n  // double phi1 = ProjMath.radToDeg(phi1Rad);\n\n  N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));\n  T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);\n  C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);\n  R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);\n  D = x / (N1 * k0);\n\n  var lat = phi1Rad - (N1 * Math.tan(phi1Rad) / R1) * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);\n  lat = radToDeg(lat);\n\n  var lon = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);\n  lon = LongOrigin + radToDeg(lon);\n\n  var result;\n  if (utm.accuracy) {\n    var topRight = UTMtoLL({\n      northing: utm.northing + utm.accuracy,\n      easting: utm.easting + utm.accuracy,\n      zoneLetter: utm.zoneLetter,\n      zoneNumber: utm.zoneNumber\n    });\n    result = {\n      top: topRight.lat,\n      right: topRight.lon,\n      bottom: lat,\n      left: lon\n    };\n  }\n  else {\n    result = {\n      lat: lat,\n      lon: lon\n    };\n  }\n  return result;\n}\n\n/**\n * Calculates the MGRS letter designator for the given latitude.\n *\n * @private\n * @param {number} lat The latitude in WGS84 to get the letter designator\n *     for.\n * @return {char} The letter designator.\n */\nfunction getLetterDesignator(lat) {\n  //This is here as an error flag to show that the Latitude is\n  //outside MGRS limits\n  var LetterDesignator = 'Z';\n\n  if ((84 >= lat) && (lat >= 72)) {\n    LetterDesignator = 'X';\n  }\n  else if ((72 > lat) && (lat >= 64)) {\n    LetterDesignator = 'W';\n  }\n  else if ((64 > lat) && (lat >= 56)) {\n    LetterDesignator = 'V';\n  }\n  else if ((56 > lat) && (lat >= 48)) {\n    LetterDesignator = 'U';\n  }\n  else if ((48 > lat) && (lat >= 40)) {\n    LetterDesignator = 'T';\n  }\n  else if ((40 > lat) && (lat >= 32)) {\n    LetterDesignator = 'S';\n  }\n  else if ((32 > lat) && (lat >= 24)) {\n    LetterDesignator = 'R';\n  }\n  else if ((24 > lat) && (lat >= 16)) {\n    LetterDesignator = 'Q';\n  }\n  else if ((16 > lat) && (lat >= 8)) {\n    LetterDesignator = 'P';\n  }\n  else if ((8 > lat) && (lat >= 0)) {\n    LetterDesignator = 'N';\n  }\n  else if ((0 > lat) && (lat >= -8)) {\n    LetterDesignator = 'M';\n  }\n  else if ((-8 > lat) && (lat >= -16)) {\n    LetterDesignator = 'L';\n  }\n  else if ((-16 > lat) && (lat >= -24)) {\n    LetterDesignator = 'K';\n  }\n  else if ((-24 > lat) && (lat >= -32)) {\n    LetterDesignator = 'J';\n  }\n  else if ((-32 > lat) && (lat >= -40)) {\n    LetterDesignator = 'H';\n  }\n  else if ((-40 > lat) && (lat >= -48)) {\n    LetterDesignator = 'G';\n  }\n  else if ((-48 > lat) && (lat >= -56)) {\n    LetterDesignator = 'F';\n  }\n  else if ((-56 > lat) && (lat >= -64)) {\n    LetterDesignator = 'E';\n  }\n  else if ((-64 > lat) && (lat >= -72)) {\n    LetterDesignator = 'D';\n  }\n  else if ((-72 > lat) && (lat >= -80)) {\n    LetterDesignator = 'C';\n  }\n  return LetterDesignator;\n}\n\n/**\n * Encodes a UTM location as MGRS string.\n *\n * @private\n * @param {object} utm An object literal with easting, northing,\n *     zoneLetter, zoneNumber\n * @param {number} accuracy Accuracy in digits (1-5).\n * @return {string} MGRS string for the given UTM location.\n */\nfunction encode(utm, accuracy) {\n  // prepend with leading zeroes\n  var seasting = \"00000\" + utm.easting,\n    snorthing = \"00000\" + utm.northing;\n\n  return utm.zoneNumber + utm.zoneLetter + get100kID(utm.easting, utm.northing, utm.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);\n}\n\n/**\n * Get the two letter 100k designator for a given UTM easting,\n * northing and zone number value.\n *\n * @private\n * @param {number} easting\n * @param {number} northing\n * @param {number} zoneNumber\n * @return the two letter 100k designator for the given UTM location.\n */\nfunction get100kID(easting, northing, zoneNumber) {\n  var setParm = get100kSetForZone(zoneNumber);\n  var setColumn = Math.floor(easting / 100000);\n  var setRow = Math.floor(northing / 100000) % 20;\n  return getLetter100kID(setColumn, setRow, setParm);\n}\n\n/**\n * Given a UTM zone number, figure out the MGRS 100K set it is in.\n *\n * @private\n * @param {number} i An UTM zone number.\n * @return {number} the 100k set the UTM zone is in.\n */\nfunction get100kSetForZone(i) {\n  var setParm = i % NUM_100K_SETS;\n  if (setParm === 0) {\n    setParm = NUM_100K_SETS;\n  }\n\n  return setParm;\n}\n\n/**\n * Get the two-letter MGRS 100k designator given information\n * translated from the UTM northing, easting and zone number.\n *\n * @private\n * @param {number} column the column index as it relates to the MGRS\n *        100k set spreadsheet, created from the UTM easting.\n *        Values are 1-8.\n * @param {number} row the row index as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM northing value. Values\n *        are from 0-19.\n * @param {number} parm the set block, as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM zone. Values are from\n *        1-60.\n * @return two letter MGRS 100k code.\n */\nfunction getLetter100kID(column, row, parm) {\n  // colOrigin and rowOrigin are the letters at the origin of the set\n  var index = parm - 1;\n  var colOrigin = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);\n  var rowOrigin = SET_ORIGIN_ROW_LETTERS.charCodeAt(index);\n\n  // colInt and rowInt are the letters to build to return\n  var colInt = colOrigin + column - 1;\n  var rowInt = rowOrigin + row;\n  var rollover = false;\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n    rollover = true;\n  }\n\n  if (colInt === I || (colOrigin < I && colInt > I) || ((colInt > I || colOrigin < I) && rollover)) {\n    colInt++;\n  }\n\n  if (colInt === O || (colOrigin < O && colInt > O) || ((colInt > O || colOrigin < O) && rollover)) {\n    colInt++;\n\n    if (colInt === I) {\n      colInt++;\n    }\n  }\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n    rollover = true;\n  }\n  else {\n    rollover = false;\n  }\n\n  if (((rowInt === I) || ((rowOrigin < I) && (rowInt > I))) || (((rowInt > I) || (rowOrigin < I)) && rollover)) {\n    rowInt++;\n  }\n\n  if (((rowInt === O) || ((rowOrigin < O) && (rowInt > O))) || (((rowInt > O) || (rowOrigin < O)) && rollover)) {\n    rowInt++;\n\n    if (rowInt === I) {\n      rowInt++;\n    }\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n  }\n\n  var twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);\n  return twoLetter;\n}\n\n/**\n * Decode the UTM parameters from a MGRS string.\n *\n * @private\n * @param {string} mgrsString an UPPERCASE coordinate string is expected.\n * @return {object} An object literal with easting, northing, zoneLetter,\n *     zoneNumber and accuracy (in meters) properties.\n */\nfunction decode(mgrsString) {\n\n  if (mgrsString && mgrsString.length === 0) {\n    throw (\"MGRSPoint coverting from nothing\");\n  }\n\n  var length = mgrsString.length;\n\n  var hunK = null;\n  var sb = \"\";\n  var testChar;\n  var i = 0;\n\n  // get Zone number\n  while (!(/[A-Z]/).test(testChar = mgrsString.charAt(i))) {\n    if (i >= 2) {\n      throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n    }\n    sb += testChar;\n    i++;\n  }\n\n  var zoneNumber = parseInt(sb, 10);\n\n  if (i === 0 || i + 3 > length) {\n    // A good MGRS string has to be 4-5 digits long,\n    // ##AAA/#AAA at least.\n    throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n  }\n\n  var zoneLetter = mgrsString.charAt(i++);\n\n  // Should we check the zone letter here? Why not.\n  if (zoneLetter <= 'A' || zoneLetter === 'B' || zoneLetter === 'Y' || zoneLetter >= 'Z' || zoneLetter === 'I' || zoneLetter === 'O') {\n    throw (\"MGRSPoint zone letter \" + zoneLetter + \" not handled: \" + mgrsString);\n  }\n\n  hunK = mgrsString.substring(i, i += 2);\n\n  var set = get100kSetForZone(zoneNumber);\n\n  var east100k = getEastingFromChar(hunK.charAt(0), set);\n  var north100k = getNorthingFromChar(hunK.charAt(1), set);\n\n  // We have a bug where the northing may be 2000000 too low.\n  // How\n  // do we know when to roll over?\n\n  while (north100k < getMinNorthing(zoneLetter)) {\n    north100k += 2000000;\n  }\n\n  // calculate the char index for easting/northing separator\n  var remainder = length - i;\n\n  if (remainder % 2 !== 0) {\n    throw (\"MGRSPoint has to have an even number \\nof digits after the zone letter and two 100km letters - front \\nhalf for easting meters, second half for \\nnorthing meters\" + mgrsString);\n  }\n\n  var sep = remainder / 2;\n\n  var sepEasting = 0.0;\n  var sepNorthing = 0.0;\n  var accuracyBonus, sepEastingString, sepNorthingString, easting, northing;\n  if (sep > 0) {\n    accuracyBonus = 100000.0 / Math.pow(10, sep);\n    sepEastingString = mgrsString.substring(i, i + sep);\n    sepEasting = parseFloat(sepEastingString) * accuracyBonus;\n    sepNorthingString = mgrsString.substring(i + sep);\n    sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;\n  }\n\n  easting = sepEasting + east100k;\n  northing = sepNorthing + north100k;\n\n  return {\n    easting: easting,\n    northing: northing,\n    zoneLetter: zoneLetter,\n    zoneNumber: zoneNumber,\n    accuracy: accuracyBonus\n  };\n}\n\n/**\n * Given the first letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the easting value that\n * should be added to the other, secondary easting value.\n *\n * @private\n * @param {char} e The first letter from a two-letter MGRS 100´k zone.\n * @param {number} set The MGRS table set for the zone number.\n * @return {number} The easting value for the given letter and set.\n */\nfunction getEastingFromChar(e, set) {\n  // colOrigin is the letter at the origin of the set for the\n  // column\n  var curCol = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);\n  var eastingValue = 100000.0;\n  var rewindMarker = false;\n\n  while (curCol !== e.charCodeAt(0)) {\n    curCol++;\n    if (curCol === I) {\n      curCol++;\n    }\n    if (curCol === O) {\n      curCol++;\n    }\n    if (curCol > Z) {\n      if (rewindMarker) {\n        throw (\"Bad character: \" + e);\n      }\n      curCol = A;\n      rewindMarker = true;\n    }\n    eastingValue += 100000.0;\n  }\n\n  return eastingValue;\n}\n\n/**\n * Given the second letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the northing value that\n * should be added to the other, secondary northing value. You have to\n * remember that Northings are determined from the equator, and the vertical\n * cycle of letters mean a 2000000 additional northing meters. This happens\n * approx. every 18 degrees of latitude. This method does *NOT* count any\n * additional northings. You have to figure out how many 2000000 meters need\n * to be added for the zone letter of the MGRS coordinate.\n *\n * @private\n * @param {char} n Second letter of the MGRS 100k zone\n * @param {number} set The MGRS table set number, which is dependent on the\n *     UTM zone number.\n * @return {number} The northing value for the given letter and set.\n */\nfunction getNorthingFromChar(n, set) {\n\n  if (n > 'V') {\n    throw (\"MGRSPoint given invalid Northing \" + n);\n  }\n\n  // rowOrigin is the letter at the origin of the set for the\n  // column\n  var curRow = SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);\n  var northingValue = 0.0;\n  var rewindMarker = false;\n\n  while (curRow !== n.charCodeAt(0)) {\n    curRow++;\n    if (curRow === I) {\n      curRow++;\n    }\n    if (curRow === O) {\n      curRow++;\n    }\n    // fixing a bug making whole application hang in this loop\n    // when 'n' is a wrong character\n    if (curRow > V) {\n      if (rewindMarker) { // making sure that this loop ends\n        throw (\"Bad character: \" + n);\n      }\n      curRow = A;\n      rewindMarker = true;\n    }\n    northingValue += 100000.0;\n  }\n\n  return northingValue;\n}\n\n/**\n * The function getMinNorthing returns the minimum northing value of a MGRS\n * zone.\n *\n * Ported from Geotrans' c Lattitude_Band_Value structure table.\n *\n * @private\n * @param {char} zoneLetter The MGRS zone to get the min northing for.\n * @return {number}\n */\nfunction getMinNorthing(zoneLetter) {\n  var northing;\n  switch (zoneLetter) {\n  case 'C':\n    northing = 1100000.0;\n    break;\n  case 'D':\n    northing = 2000000.0;\n    break;\n  case 'E':\n    northing = 2800000.0;\n    break;\n  case 'F':\n    northing = 3700000.0;\n    break;\n  case 'G':\n    northing = 4600000.0;\n    break;\n  case 'H':\n    northing = 5500000.0;\n    break;\n  case 'J':\n    northing = 6400000.0;\n    break;\n  case 'K':\n    northing = 7300000.0;\n    break;\n  case 'L':\n    northing = 8200000.0;\n    break;\n  case 'M':\n    northing = 9100000.0;\n    break;\n  case 'N':\n    northing = 0.0;\n    break;\n  case 'P':\n    northing = 800000.0;\n    break;\n  case 'Q':\n    northing = 1700000.0;\n    break;\n  case 'R':\n    northing = 2600000.0;\n    break;\n  case 'S':\n    northing = 3500000.0;\n    break;\n  case 'T':\n    northing = 4400000.0;\n    break;\n  case 'U':\n    northing = 5300000.0;\n    break;\n  case 'V':\n    northing = 6200000.0;\n    break;\n  case 'W':\n    northing = 7000000.0;\n    break;\n  case 'X':\n    northing = 7900000.0;\n    break;\n  default:\n    northing = -1.0;\n  }\n  if (northing >= 0.0) {\n    return northing;\n  }\n  else {\n    throw (\"Invalid zone letter: \" + zoneLetter);\n  }\n\n}\n","'use strict';\n\n/** @type {import('./pow')} */\nmodule.exports = Math.pow;\n","'use strict';\n\n/** @type {import('./isNaN')} */\nmodule.exports = Number.isNaN || function isNaN(a) {\n\treturn a !== a;\n};\n"],"names":["exports","read","buffer","offset","isLE","mLen","nBytes","e","m","eLen","eMax","eBias","nBits","i","d","s","NaN","Infinity","Math","pow","write","value","c","rt","abs","isNaN","floor","log","LN2","module","max","traverse","schema","opts","cb","pre","post","_traverse","jsonPtr","rootSchema","parentJsonPtr","parentKeyword","parentSchema","keyIndex","Array","isArray","key","sch","arrayKeywords","length","propsKeywords","prop","escapeJsonPtr","keywords","allKeys","skipKeywords","str","replace","additionalItems","items","contains","additionalProperties","propertyNames","not","allOf","anyOf","oneOf","definitions","properties","patternProperties","dependencies","default","enum","const","required","maximum","minimum","exclusiveMaximum","exclusiveMinimum","multipleOf","maxLength","minLength","pattern","format","maxItems","minItems","uniqueItems","maxProperties","minProperties","Object","create","ctor","superCtor","super_","prototype","constructor","enumerable","writable","configurable","TempCtor","min","round","$isNaN","number","NUM_100K_SETS","SET_ORIGIN_COLUMN_LETTERS","SET_ORIGIN_ROW_LETTERS","A","I","O","V","Z","forward","inverse","toPoint","ll","accuracy","encode","LLtoUTM","lat","lon","mgrs","bbox","UTMtoLL","decode","toUpperCase","left","bottom","right","top","degToRad","deg","PI","radToDeg","rad","LongOrigin","eccPrimeSquared","N","T","C","M","LongOriginRad","ZoneNumber","Lat","Long","a","eccSquared","k0","LatRad","LongRad","sqrt","sin","tan","cos","UTMEasting","UTMNorthing","northing","easting","zoneNumber","zoneLetter","getLetterDesignator","utm","N1","T1","C1","R1","D","mu","phi1Rad","e1","x","y","result","topRight","LetterDesignator","seasting","snorthing","get100kID","substr","setParm","get100kSetForZone","setColumn","setRow","getLetter100kID","column","row","parm","index","colOrigin","charCodeAt","rowOrigin","colInt","rowInt","rollover","twoLetter","String","fromCharCode","mgrsString","testChar","hunK","sb","test","charAt","parseInt","substring","set","east100k","getEastingFromChar","north100k","getNorthingFromChar","getMinNorthing","remainder","accuracyBonus","sepEastingString","sepNorthingString","sep","sepEasting","sepNorthing","parseFloat","curCol","eastingValue","rewindMarker","n","curRow","northingValue","Number"],"sourceRoot":""}