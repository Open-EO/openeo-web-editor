{"version":3,"file":"js/8193.ae0699d9.js","mappings":"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","sources":["webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/compression/index.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/dataview64.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/dataslice.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/httputils.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/basesource.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/utils.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/blockedsource.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/client/base.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/client/fetch.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/client/xhr.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/client/http.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/remote.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/source/filereader.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/geotiff.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/rgb.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/resample.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/geotiffimage.js","webpack://@openeo/web-editor/./node_modules/geotiff/dist-module/globals.js"],"sourcesContent":["const registry = new Map();\n\nexport function addDecoder(cases, importFn) {\n  if (!Array.isArray(cases)) {\n    cases = [cases]; // eslint-disable-line no-param-reassign\n  }\n  cases.forEach((c) => registry.set(c, importFn));\n}\n\nexport async function getDecoder(fileDirectory) {\n  const importFn = registry.get(fileDirectory.Compression);\n  if (!importFn) {\n    throw new Error(`Unknown compression method identifier: ${fileDirectory.Compression}`);\n  }\n  const Decoder = await importFn();\n  return new Decoder(fileDirectory);\n}\n\n// Add default decoders to registry (end-user may override with other implementations)\naddDecoder([undefined, 1], () => import('./raw.js').then((m) => m.default));\naddDecoder(5, () => import('./lzw.js').then((m) => m.default));\naddDecoder(6, () => {\n  throw new Error('old style JPEG compression is not supported.');\n});\naddDecoder(7, () => import('./jpeg.js').then((m) => m.default));\naddDecoder([8, 32946], () => import('./deflate.js').then((m) => m.default));\naddDecoder(32773, () => import('./packbits.js').then((m) => m.default));\naddDecoder(34887, () => import('./lerc.js').then((m) => m.default));\naddDecoder(50001, () => import('./webimage.js').then((m) => m.default));\n","import { getFloat16 } from '@petamoriken/float16';\n\nexport default class DataView64 {\n  constructor(arrayBuffer) {\n    this._dataView = new DataView(arrayBuffer);\n  }\n\n  get buffer() {\n    return this._dataView.buffer;\n  }\n\n  getUint64(offset, littleEndian) {\n    const left = this.getUint32(offset, littleEndian);\n    const right = this.getUint32(offset + 4, littleEndian);\n    let combined;\n    if (littleEndian) {\n      combined = left + ((2 ** 32) * right);\n      if (!Number.isSafeInteger(combined)) {\n        throw new Error(\n          `${combined} exceeds MAX_SAFE_INTEGER. `\n          + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n        );\n      }\n      return combined;\n    }\n    combined = ((2 ** 32) * left) + right;\n    if (!Number.isSafeInteger(combined)) {\n      throw new Error(\n        `${combined} exceeds MAX_SAFE_INTEGER. `\n        + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n      );\n    }\n\n    return combined;\n  }\n\n  // adapted from https://stackoverflow.com/a/55338384/8060591\n  getInt64(offset, littleEndian) {\n    let value = 0;\n    const isNegative = (this._dataView.getUint8(offset + (littleEndian ? 7 : 0)) & 0x80) > 0;\n    let carrying = true;\n    for (let i = 0; i < 8; i++) {\n      let byte = this._dataView.getUint8(offset + (littleEndian ? i : 7 - i));\n      if (isNegative) {\n        if (carrying) {\n          if (byte !== 0x00) {\n            byte = ~(byte - 1) & 0xff;\n            carrying = false;\n          }\n        } else {\n          byte = ~byte & 0xff;\n        }\n      }\n      value += byte * (256 ** i);\n    }\n    if (isNegative) {\n      value = -value;\n    }\n    return value;\n  }\n\n  getUint8(offset, littleEndian) {\n    return this._dataView.getUint8(offset, littleEndian);\n  }\n\n  getInt8(offset, littleEndian) {\n    return this._dataView.getInt8(offset, littleEndian);\n  }\n\n  getUint16(offset, littleEndian) {\n    return this._dataView.getUint16(offset, littleEndian);\n  }\n\n  getInt16(offset, littleEndian) {\n    return this._dataView.getInt16(offset, littleEndian);\n  }\n\n  getUint32(offset, littleEndian) {\n    return this._dataView.getUint32(offset, littleEndian);\n  }\n\n  getInt32(offset, littleEndian) {\n    return this._dataView.getInt32(offset, littleEndian);\n  }\n\n  getFloat16(offset, littleEndian) {\n    return getFloat16(this._dataView, offset, littleEndian);\n  }\n\n  getFloat32(offset, littleEndian) {\n    return this._dataView.getFloat32(offset, littleEndian);\n  }\n\n  getFloat64(offset, littleEndian) {\n    return this._dataView.getFloat64(offset, littleEndian);\n  }\n}\n","export default class DataSlice {\n  constructor(arrayBuffer, sliceOffset, littleEndian, bigTiff) {\n    this._dataView = new DataView(arrayBuffer);\n    this._sliceOffset = sliceOffset;\n    this._littleEndian = littleEndian;\n    this._bigTiff = bigTiff;\n  }\n\n  get sliceOffset() {\n    return this._sliceOffset;\n  }\n\n  get sliceTop() {\n    return this._sliceOffset + this.buffer.byteLength;\n  }\n\n  get littleEndian() {\n    return this._littleEndian;\n  }\n\n  get bigTiff() {\n    return this._bigTiff;\n  }\n\n  get buffer() {\n    return this._dataView.buffer;\n  }\n\n  covers(offset, length) {\n    return this.sliceOffset <= offset && this.sliceTop >= offset + length;\n  }\n\n  readUint8(offset) {\n    return this._dataView.getUint8(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readInt8(offset) {\n    return this._dataView.getInt8(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readUint16(offset) {\n    return this._dataView.getUint16(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readInt16(offset) {\n    return this._dataView.getInt16(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readUint32(offset) {\n    return this._dataView.getUint32(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readInt32(offset) {\n    return this._dataView.getInt32(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readFloat32(offset) {\n    return this._dataView.getFloat32(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readFloat64(offset) {\n    return this._dataView.getFloat64(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readUint64(offset) {\n    const left = this.readUint32(offset);\n    const right = this.readUint32(offset + 4);\n    let combined;\n    if (this._littleEndian) {\n      combined = left + ((2 ** 32) * right);\n      if (!Number.isSafeInteger(combined)) {\n        throw new Error(\n          `${combined} exceeds MAX_SAFE_INTEGER. `\n          + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n        );\n      }\n      return combined;\n    }\n    combined = ((2 ** 32) * left) + right;\n    if (!Number.isSafeInteger(combined)) {\n      throw new Error(\n        `${combined} exceeds MAX_SAFE_INTEGER. `\n        + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n      );\n    }\n\n    return combined;\n  }\n\n  // adapted from https://stackoverflow.com/a/55338384/8060591\n  readInt64(offset) {\n    let value = 0;\n    const isNegative = (this._dataView.getUint8(offset + (this._littleEndian ? 7 : 0)) & 0x80)\n      > 0;\n    let carrying = true;\n    for (let i = 0; i < 8; i++) {\n      let byte = this._dataView.getUint8(\n        offset + (this._littleEndian ? i : 7 - i),\n      );\n      if (isNegative) {\n        if (carrying) {\n          if (byte !== 0x00) {\n            byte = ~(byte - 1) & 0xff;\n            carrying = false;\n          }\n        } else {\n          byte = ~byte & 0xff;\n        }\n      }\n      value += byte * (256 ** i);\n    }\n    if (isNegative) {\n      value = -value;\n    }\n    return value;\n  }\n\n  readOffset(offset) {\n    if (this._bigTiff) {\n      return this.readUint64(offset);\n    }\n    return this.readUint32(offset);\n  }\n}\n","const CRLFCRLF = '\\r\\n\\r\\n';\n\n/*\n * Shim for 'Object.fromEntries'\n */\nfunction itemsToObject(items) {\n  if (typeof Object.fromEntries !== 'undefined') {\n    return Object.fromEntries(items);\n  }\n  const obj = {};\n  for (const [key, value] of items) {\n    obj[key.toLowerCase()] = value;\n  }\n  return obj;\n}\n\n/**\n * Parse HTTP headers from a given string.\n * @param {String} text the text to parse the headers from\n * @returns {Object} the parsed headers with lowercase keys\n */\nfunction parseHeaders(text) {\n  const items = text\n    .split('\\r\\n')\n    .map((line) => {\n      const kv = line.split(':').map((str) => str.trim());\n      kv[0] = kv[0].toLowerCase();\n      return kv;\n    });\n\n  return itemsToObject(items);\n}\n\n/**\n * Parse a 'Content-Type' header value to the content-type and parameters\n * @param {String} rawContentType the raw string to parse from\n * @returns {Object} the parsed content type with the fields: type and params\n */\nexport function parseContentType(rawContentType) {\n  const [type, ...rawParams] = rawContentType.split(';').map((s) => s.trim());\n  const paramsItems = rawParams.map((param) => param.split('='));\n  return { type, params: itemsToObject(paramsItems) };\n}\n\n/**\n * Parse a 'Content-Range' header value to its start, end, and total parts\n * @param {String} rawContentRange the raw string to parse from\n * @returns {Object} the parsed parts\n */\nexport function parseContentRange(rawContentRange) {\n  let start;\n  let end;\n  let total;\n\n  if (rawContentRange) {\n    [, start, end, total] = rawContentRange.match(/bytes (\\d+)-(\\d+)\\/(\\d+)/);\n    start = parseInt(start, 10);\n    end = parseInt(end, 10);\n    total = parseInt(total, 10);\n  }\n\n  return { start, end, total };\n}\n\n/**\n * Parses a list of byteranges from the given 'multipart/byteranges' HTTP response.\n * Each item in the list has the following properties:\n * - headers: the HTTP headers\n * - data: the sliced ArrayBuffer for that specific part\n * - offset: the offset of the byterange within its originating file\n * - length: the length of the byterange\n * @param {ArrayBuffer} responseArrayBuffer the response to be parsed and split\n * @param {String} boundary the boundary string used to split the sections\n * @returns {Object[]} the parsed byteranges\n */\nexport function parseByteRanges(responseArrayBuffer, boundary) {\n  let offset = null;\n  const decoder = new TextDecoder('ascii');\n  const out = [];\n\n  const startBoundary = `--${boundary}`;\n  const endBoundary = `${startBoundary}--`;\n\n  // search for the initial boundary, may be offset by some bytes\n  // TODO: more efficient to check for `--` in bytes directly\n  for (let i = 0; i < 10; ++i) {\n    const text = decoder.decode(\n      new Uint8Array(responseArrayBuffer, i, startBoundary.length),\n    );\n    if (text === startBoundary) {\n      offset = i;\n    }\n  }\n\n  if (offset === null) {\n    throw new Error('Could not find initial boundary');\n  }\n\n  while (offset < responseArrayBuffer.byteLength) {\n    const text = decoder.decode(\n      new Uint8Array(responseArrayBuffer, offset,\n        Math.min(startBoundary.length + 1024, responseArrayBuffer.byteLength - offset),\n      ),\n    );\n\n    // break if we arrived at the end\n    if (text.length === 0 || text.startsWith(endBoundary)) {\n      break;\n    }\n\n    // assert that we are actually dealing with a byterange and are at the correct offset\n    if (!text.startsWith(startBoundary)) {\n      throw new Error('Part does not start with boundary');\n    }\n\n    // get a substring from where we read the headers\n    const innerText = text.substr(startBoundary.length + 2);\n\n    if (innerText.length === 0) {\n      break;\n    }\n\n    // find the double linebreak that denotes the end of the headers\n    const endOfHeaders = innerText.indexOf(CRLFCRLF);\n\n    // parse the headers to get the content range size\n    const headers = parseHeaders(innerText.substr(0, endOfHeaders));\n    const { start, end, total } = parseContentRange(headers['content-range']);\n\n    // calculate the length of the slice and the next offset\n    const startOfData = offset + startBoundary.length + endOfHeaders + CRLFCRLF.length;\n    const length = parseInt(end, 10) + 1 - parseInt(start, 10);\n    out.push({\n      headers,\n      data: responseArrayBuffer.slice(startOfData, startOfData + length),\n      offset: start,\n      length,\n      fileSize: total,\n    });\n\n    offset = startOfData + length + 4;\n  }\n\n  return out;\n}\n","/**\n * @typedef Slice\n * @property {number} offset\n * @property {number} length\n */\n\nexport class BaseSource {\n  /**\n   *\n   * @param {Slice[]} slices\n   * @returns {ArrayBuffer[]}\n   */\n  async fetch(slices, signal = undefined) {\n    return Promise.all(\n      slices.map((slice) => this.fetchSlice(slice, signal)),\n    );\n  }\n\n  /**\n   *\n   * @param {Slice} slice\n   * @returns {ArrayBuffer}\n   */\n  async fetchSlice(slice) {\n    throw new Error(`fetching of slice ${slice} not possible, not implemented`);\n  }\n\n  /**\n   * Returns the filesize if already determined and null otherwise\n   */\n  get fileSize() {\n    return null;\n  }\n\n  async close() {\n    // no-op by default\n  }\n}\n","export function assign(target, source) {\n  for (const key in source) {\n    if (source.hasOwnProperty(key)) {\n      target[key] = source[key];\n    }\n  }\n}\n\nexport function chunk(iterable, length) {\n  const results = [];\n  const lengthOfIterable = iterable.length;\n  for (let i = 0; i < lengthOfIterable; i += length) {\n    const chunked = [];\n    for (let ci = i; ci < i + length; ci++) {\n      chunked.push(iterable[ci]);\n    }\n    results.push(chunked);\n  }\n  return results;\n}\n\nexport function endsWith(string, expectedEnding) {\n  if (string.length < expectedEnding.length) {\n    return false;\n  }\n  const actualEnding = string.substr(string.length - expectedEnding.length);\n  return actualEnding === expectedEnding;\n}\n\nexport function forEach(iterable, func) {\n  const { length } = iterable;\n  for (let i = 0; i < length; i++) {\n    func(iterable[i], i);\n  }\n}\n\nexport function invert(oldObj) {\n  const newObj = {};\n  for (const key in oldObj) {\n    if (oldObj.hasOwnProperty(key)) {\n      const value = oldObj[key];\n      newObj[value] = key;\n    }\n  }\n  return newObj;\n}\n\nexport function range(n) {\n  const results = [];\n  for (let i = 0; i < n; i++) {\n    results.push(i);\n  }\n  return results;\n}\n\nexport function times(numTimes, func) {\n  const results = [];\n  for (let i = 0; i < numTimes; i++) {\n    results.push(func(i));\n  }\n  return results;\n}\n\nexport function toArray(iterable) {\n  const results = [];\n  const { length } = iterable;\n  for (let i = 0; i < length; i++) {\n    results.push(iterable[i]);\n  }\n  return results;\n}\n\nexport function toArrayRecursively(input) {\n  if (input.length) {\n    return toArray(input).map(toArrayRecursively);\n  }\n  return input;\n}\n\n// copied from https://github.com/academia-de-codigo/parse-content-range-header/blob/master/index.js\nexport function parseContentRange(headerValue) {\n  if (!headerValue) {\n    return null;\n  }\n\n  if (typeof headerValue !== 'string') {\n    throw new Error('invalid argument');\n  }\n\n  const parseInt = (number) => Number.parseInt(number, 10);\n\n  // Check for presence of unit\n  let matches = headerValue.match(/^(\\w*) /);\n  const unit = matches && matches[1];\n\n  // check for start-end/size header format\n  matches = headerValue.match(/(\\d+)-(\\d+)\\/(\\d+|\\*)/);\n  if (matches) {\n    return {\n      unit,\n      first: parseInt(matches[1]),\n      last: parseInt(matches[2]),\n      length: matches[3] === '*' ? null : parseInt(matches[3]),\n    };\n  }\n\n  // check for size header format\n  matches = headerValue.match(/(\\d+|\\*)/);\n  if (matches) {\n    return {\n      unit,\n      first: null,\n      last: null,\n      length: matches[1] === '*' ? null : parseInt(matches[1]),\n    };\n  }\n\n  return null;\n}\n\n/*\n * Promisified wrapper around 'setTimeout' to allow 'await'\n */\nexport async function wait(milliseconds) {\n  return new Promise((resolve) => setTimeout(resolve, milliseconds));\n}\n\nexport function zip(a, b) {\n  const A = Array.isArray(a) ? a : Array.from(a);\n  const B = Array.isArray(b) ? b : Array.from(b);\n  return A.map((k, i) => [k, B[i]]);\n}\n\n// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\nexport class AbortError extends Error {\n  constructor(params) {\n    // Pass remaining arguments (including vendor specific ones) to parent constructor\n    super(params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, AbortError);\n    }\n\n    this.name = 'AbortError';\n  }\n}\n\nexport class CustomAggregateError extends Error {\n  constructor(errors, message) {\n    super(message);\n    this.errors = errors;\n    this.message = message;\n    this.name = 'AggregateError';\n  }\n}\n\nexport const AggregateError = CustomAggregateError;\n","import LRUCache from 'lru-cache';\nimport { BaseSource } from './basesource.js';\nimport { AbortError, AggregateError, wait, zip } from '../utils.js';\n\nclass Block {\n  /**\n   *\n   * @param {number} offset\n   * @param {number} length\n   * @param {ArrayBuffer} [data]\n   */\n  constructor(offset, length, data = null) {\n    this.offset = offset;\n    this.length = length;\n    this.data = data;\n  }\n\n  /**\n   * @returns {number} the top byte border\n   */\n  get top() {\n    return this.offset + this.length;\n  }\n}\n\nclass BlockGroup {\n  /**\n   *\n   * @param {number} offset\n   * @param {number} length\n   * @param {number[]} blockIds\n   */\n  constructor(offset, length, blockIds) {\n    this.offset = offset;\n    this.length = length;\n    this.blockIds = blockIds;\n  }\n}\n\nexport class BlockedSource extends BaseSource {\n  /**\n   *\n   * @param {Source} source The underlying source that shall be blocked and cached\n   * @param {object} options\n   */\n  constructor(source, { blockSize = 65536, cacheSize = 100 } = {}) {\n    super();\n    this.source = source;\n    this.blockSize = blockSize;\n\n    this.blockCache = new LRUCache({ max: cacheSize });\n\n    // mapping blockId -> Block instance\n    this.blockRequests = new Map();\n\n    // set of blockIds missing for the current requests\n    this.blockIdsToFetch = new Set();\n  }\n\n  get fileSize() {\n    return this.source.fileSize;\n  }\n\n  /**\n   *\n   * @param {basesource/Slice[]} slices\n   */\n  async fetch(slices, signal) {\n    const cachedBlocks = new Map();\n    const blockRequests = new Map();\n    const missingBlockIds = new Set();\n\n    for (const { offset, length } of slices) {\n      let top = offset + length;\n\n      const { fileSize } = this;\n      if (fileSize !== null) {\n        top = Math.min(top, fileSize);\n      }\n\n      const firstBlockOffset = Math.floor(offset / this.blockSize) * this.blockSize;\n\n      // chunk the current slice into blocks\n      for (let current = firstBlockOffset; current < top; current += this.blockSize) {\n        // check if the block is cached, being requested or still missing\n        const blockId = Math.floor(current / this.blockSize);\n\n        if (this.blockCache.has(blockId)) {\n          cachedBlocks.set(blockId, this.blockCache.get(blockId));\n        } else if (this.blockRequests.has(blockId)) {\n          blockRequests.set(blockId, this.blockRequests.get(blockId));\n        } else if (this.blockIdsToFetch.has(blockId)) {\n          missingBlockIds.add(blockId);\n        } else {\n          this.blockIdsToFetch.add(blockId);\n          missingBlockIds.add(blockId);\n        }\n      }\n    }\n\n    // allow additional block requests to accumulate\n    await wait();\n    this.fetchBlocks(signal);\n\n    for (const blockId of missingBlockIds) {\n      const block = this.blockRequests.get(blockId);\n      const cachedBlock = this.blockCache.get(blockId);\n\n      if (block) {\n        blockRequests.set(blockId, block);\n      } else if (cachedBlock) {\n        cachedBlocks.set(blockId, cachedBlock);\n      } else {\n        throw new Error(`Block ${blockId} is not in the block requests`);\n      }\n    }\n\n    // actually await all pending requests\n    let results = await Promise.allSettled(Array.from(blockRequests.values()));\n\n    // perform retries if a block was interrupted by a previous signal\n    if (results.some((result) => result.status === 'rejected')) {\n      const retriedBlockRequests = new Set();\n      for (const [blockId, result] of zip(blockRequests.keys(), results)) {\n        const { rejected, reason } = result;\n        if (rejected) {\n          // push some blocks back to the to-fetch list if they were\n          // aborted, but only when a different signal was used\n          if (reason.name === 'AbortError' && reason.signal !== signal) {\n            this.blockIdsToFetch.add(blockId);\n            retriedBlockRequests.add(blockId);\n          }\n        }\n      }\n\n      // start the retry of some blocks if required\n      if (this.blockIdsToFetch.length > 0) {\n        this.fetchBlocks(signal);\n        for (const blockId of retriedBlockRequests) {\n          const block = this.blockRequests.get(blockId);\n          if (!block) {\n            throw new Error(`Block ${blockId} is not in the block requests`);\n          }\n          blockRequests.set(blockId, block);\n        }\n        results = await Promise.allSettled(Array.from(blockRequests.values()));\n      }\n    }\n\n    // throw an error (either abort error or AggregateError if no abort was done)\n    if (results.some((result) => result.status === 'rejected')) {\n      if (signal && signal.aborted) {\n        throw new AbortError('Request was aborted');\n      }\n      throw new AggregateError(\n        results.filter((result) => result.status === 'rejected').map((result) => result.reason),\n        'Request failed',\n      );\n    }\n\n    // extract the actual block responses\n    const values = results.map((result) => result.value);\n\n    // create a final Map, with all required blocks for this request to satisfy\n    const requiredBlocks = new Map(zip(Array.from(blockRequests.keys()), values));\n    for (const [blockId, block] of cachedBlocks) {\n      requiredBlocks.set(blockId, block);\n    }\n\n    // TODO: satisfy each slice\n    return this.readSliceData(slices, requiredBlocks);\n  }\n\n  /**\n   *\n   * @param {AbortSignal} signal\n   */\n  fetchBlocks(signal) {\n    // check if we still need to\n    if (this.blockIdsToFetch.size > 0) {\n      const groups = this.groupBlocks(this.blockIdsToFetch);\n\n      // start requesting slices of data\n      const groupRequests = this.source.fetch(groups, signal);\n\n      for (let groupIndex = 0; groupIndex < groups.length; ++groupIndex) {\n        const group = groups[groupIndex];\n\n        for (const blockId of group.blockIds) {\n          // make an async IIFE for each block\n          const blockRequest = (async () => {\n            try {\n              const response = (await groupRequests)[groupIndex];\n              const blockOffset = blockId * this.blockSize;\n              const o = blockOffset - response.offset;\n              const t = Math.min(o + this.blockSize, response.data.byteLength);\n              const data = response.data.slice(o, t);\n              const block = new Block(\n                blockOffset,\n                data.byteLength,\n                data,\n              );\n              this.blockCache.set(blockId, block);\n              return block;\n            } catch (err) {\n              if (err.name === 'AbortError') {\n                // store the signal here, we need it to determine later if an\n                // error was caused by this signal\n                err.signal = signal;\n              }\n              throw err;\n            } finally {\n              this.blockRequests.delete(blockId);\n            }\n          })();\n          this.blockRequests.set(blockId, blockRequest);\n        }\n      }\n      this.blockIdsToFetch.clear();\n    }\n  }\n\n  /**\n   *\n   * @param {Set} blockIds\n   * @returns {BlockGroup[]}\n   */\n  groupBlocks(blockIds) {\n    const sortedBlockIds = Array.from(blockIds).sort((a, b) => a - b);\n    if (sortedBlockIds.length === 0) {\n      return [];\n    }\n    let current = [];\n    let lastBlockId = null;\n    const groups = [];\n\n    for (const blockId of sortedBlockIds) {\n      if (lastBlockId === null || lastBlockId + 1 === blockId) {\n        current.push(blockId);\n        lastBlockId = blockId;\n      } else {\n        groups.push(new BlockGroup(\n          current[0] * this.blockSize,\n          current.length * this.blockSize,\n          current,\n        ));\n        current = [blockId];\n        lastBlockId = blockId;\n      }\n    }\n\n    groups.push(new BlockGroup(\n      current[0] * this.blockSize,\n      current.length * this.blockSize,\n      current,\n    ));\n\n    return groups;\n  }\n\n  /**\n   *\n   * @param {Slice[]} slices\n   * @param {Map} blocks\n   */\n  readSliceData(slices, blocks) {\n    return slices.map((slice) => {\n      const top = slice.offset + slice.length;\n      const blockIdLow = Math.floor(slice.offset / this.blockSize);\n      const blockIdHigh = Math.floor((slice.offset + slice.length) / this.blockSize);\n      const sliceData = new ArrayBuffer(slice.length);\n      const sliceView = new Uint8Array(sliceData);\n\n      for (let blockId = blockIdLow; blockId <= blockIdHigh; ++blockId) {\n        const block = blocks.get(blockId);\n        const delta = block.offset - slice.offset;\n        const topDelta = block.top - top;\n        let blockInnerOffset = 0;\n        let rangeInnerOffset = 0;\n        let usedBlockLength;\n\n        if (delta < 0) {\n          blockInnerOffset = -delta;\n        } else if (delta > 0) {\n          rangeInnerOffset = delta;\n        }\n\n        if (topDelta < 0) {\n          usedBlockLength = block.length - blockInnerOffset;\n        } else {\n          usedBlockLength = top - block.offset - blockInnerOffset;\n        }\n\n        const blockView = new Uint8Array(block.data, blockInnerOffset, usedBlockLength);\n        sliceView.set(blockView, rangeInnerOffset);\n      }\n\n      return sliceData;\n    });\n  }\n}\n","export class BaseResponse {\n  /**\n   * Returns whether the response has an ok'ish status code\n   */\n  get ok() {\n    return this.status >= 200 && this.status <= 299;\n  }\n\n  /**\n   * Returns the status code of the response\n   */\n  get status() {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * Returns the value of the specified header\n   * @param {string} headerName the header name\n   * @returns {string} the header value\n   */\n  getHeader(headerName) { // eslint-disable-line no-unused-vars\n    throw new Error('not implemented');\n  }\n\n  /**\n   * @returns {ArrayBuffer} the response data of the request\n   */\n  async getData() {\n    throw new Error('not implemented');\n  }\n}\n\nexport class BaseClient {\n  constructor(url) {\n    this.url = url;\n  }\n\n  /**\n   * Send a request with the options\n   * @param {object} [options]\n   */\n  async request({ headers, credentials, signal } = {}) { // eslint-disable-line no-unused-vars\n    throw new Error('request is not implemented');\n  }\n}\n","import { BaseClient, BaseResponse } from './base.js';\n\nclass FetchResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for fetch API Response\n   * @param {Response} response\n   */\n  constructor(response) {\n    super();\n    this.response = response;\n  }\n\n  get status() {\n    return this.response.status;\n  }\n\n  getHeader(name) {\n    return this.response.headers.get(name);\n  }\n\n  async getData() {\n    const data = this.response.arrayBuffer\n      ? await this.response.arrayBuffer()\n      : (await this.response.buffer()).buffer;\n    return data;\n  }\n}\n\nexport class FetchClient extends BaseClient {\n  constructor(url, credentials) {\n    super(url);\n    this.credentials = credentials;\n  }\n\n  async request({ headers, credentials, signal } = {}) {\n    const response = await fetch(this.url, {\n      headers, credentials, signal,\n    });\n    return new FetchResponse(response);\n  }\n}\n","import { BaseClient, BaseResponse } from './base.js';\nimport { AbortError } from '../../utils.js';\n\nclass XHRResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for XMLHttpRequest\n   * @param {XMLHttpRequest} xhr\n   * @param {ArrayBuffer} data\n   */\n  constructor(xhr, data) {\n    super();\n    this.xhr = xhr;\n    this.data = data;\n  }\n\n  get status() {\n    return this.xhr.status;\n  }\n\n  getHeader(name) {\n    return this.xhr.getResponseHeader(name);\n  }\n\n  async getData() {\n    return this.data;\n  }\n}\n\nexport class XHRClient extends BaseClient {\n  constructRequest(headers, signal) {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.open('GET', this.url);\n      xhr.responseType = 'arraybuffer';\n      for (const [key, value] of Object.entries(headers)) {\n        xhr.setRequestHeader(key, value);\n      }\n\n      // hook signals\n      xhr.onload = () => {\n        const data = xhr.response;\n        resolve(new XHRResponse(xhr, data));\n      };\n      xhr.onerror = reject;\n      xhr.onabort = () => reject(new AbortError('Request aborted'));\n      xhr.send();\n\n      if (signal) {\n        if (signal.aborted) {\n          xhr.abort();\n        }\n        signal.addEventListener('abort', () => xhr.abort());\n      }\n    });\n  }\n\n  async request({ headers, signal } = {}) {\n    const response = await this.constructRequest(headers, signal);\n    return response;\n  }\n}\n","import http from 'http';\nimport https from 'https';\nimport urlMod from 'url';\n\nimport { BaseClient, BaseResponse } from './base.js';\nimport { AbortError } from '../../utils.js';\n\nclass HttpResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for node HTTP/HTTPS API Response\n   * @param {http.ServerResponse} response\n   */\n  constructor(response, dataPromise) {\n    super();\n    this.response = response;\n    this.dataPromise = dataPromise;\n  }\n\n  get status() {\n    return this.response.statusCode;\n  }\n\n  getHeader(name) {\n    return this.response.headers[name];\n  }\n\n  async getData() {\n    const data = await this.dataPromise;\n    return data;\n  }\n}\n\nexport class HttpClient extends BaseClient {\n  constructor(url) {\n    super(url);\n    this.parsedUrl = urlMod.parse(this.url);\n    this.httpApi = (this.parsedUrl.protocol === 'http:' ? http : https);\n  }\n\n  constructRequest(headers, signal) {\n    return new Promise((resolve, reject) => {\n      const request = this.httpApi.get(\n        {\n          ...this.parsedUrl,\n          headers,\n        },\n        (response) => {\n          const dataPromise = new Promise((resolveData) => {\n            const chunks = [];\n\n            // collect chunks\n            response.on('data', (chunk) => {\n              chunks.push(chunk);\n            });\n\n            // concatenate all chunks and resolve the promise with the resulting buffer\n            response.on('end', () => {\n              const data = Buffer.concat(chunks).buffer;\n              resolveData(data);\n            });\n            response.on('error', reject);\n          });\n          resolve(new HttpResponse(response, dataPromise));\n        },\n      );\n      request.on('error', reject);\n\n      if (signal) {\n        if (signal.aborted) {\n          request.destroy(new AbortError('Request aborted'));\n        }\n        signal.addEventListener('abort', () => request.destroy(new AbortError('Request aborted')));\n      }\n    });\n  }\n\n  async request({ headers, signal } = {}) {\n    const response = await this.constructRequest(headers, signal);\n    return response;\n  }\n}\n","import { parseByteRanges, parseContentRange, parseContentType } from './httputils.js';\nimport { BaseSource } from './basesource.js';\nimport { BlockedSource } from './blockedsource.js';\n\nimport { FetchClient } from './client/fetch.js';\nimport { XHRClient } from './client/xhr.js';\nimport { HttpClient } from './client/http.js';\n\nclass RemoteSource extends BaseSource {\n  /**\n   *\n   * @param {BaseClient} client\n   * @param {object} headers\n   * @param {numbers} maxRanges\n   * @param {boolean} allowFullFile\n   */\n  constructor(client, headers, maxRanges, allowFullFile) {\n    super();\n    this.client = client;\n    this.headers = headers;\n    this.maxRanges = maxRanges;\n    this.allowFullFile = allowFullFile;\n    this._fileSize = null;\n  }\n\n  /**\n   *\n   * @param {Slice[]} slices\n   */\n  async fetch(slices, signal) {\n    // if we allow multi-ranges, split the incoming request into that many sub-requests\n    // and join them afterwards\n    if (this.maxRanges >= slices.length) {\n      return this.fetchSlices(slices, signal);\n    } else if (this.maxRanges > 0 && slices.length > 1) {\n      // TODO: split into multiple multi-range requests\n\n      // const subSlicesRequests = [];\n      // for (let i = 0; i < slices.length; i += this.maxRanges) {\n      //   subSlicesRequests.push(\n      //     this.fetchSlices(slices.slice(i, i + this.maxRanges), signal),\n      //   );\n      // }\n      // return (await Promise.all(subSlicesRequests)).flat();\n    }\n\n    // otherwise make a single request for each slice\n    return Promise.all(\n      slices.map((slice) => this.fetchSlice(slice, signal)),\n    );\n  }\n\n  async fetchSlices(slices, signal) {\n    const response = await this.client.request({\n      headers: {\n        ...this.headers,\n        Range: `bytes=${slices\n          .map(({ offset, length }) => `${offset}-${offset + length}`)\n          .join(',')\n        }`,\n      },\n      signal,\n    });\n\n    if (!response.ok) {\n      throw new Error('Error fetching data.');\n    } else if (response.status === 206) {\n      const { type, params } = parseContentType(response.getHeader('content-type'));\n      if (type === 'multipart/byteranges') {\n        const byteRanges = parseByteRanges(await response.getData(), params.boundary);\n        this._fileSize = byteRanges[0].fileSize || null;\n        return byteRanges;\n      }\n\n      const data = await response.getData();\n\n      const { start, end, total } = parseContentRange(response.getHeader('content-range'));\n      this._fileSize = total || null;\n      const first = [{\n        data,\n        offset: start,\n        length: end - start,\n      }];\n\n      if (slices.length > 1) {\n        // we requested more than one slice, but got only the first\n        // unfortunately, some HTTP Servers don't support multi-ranges\n        // and return onyl the first\n\n        // get the rest of the slices and fetch them iteratetively\n        const others = await Promise.all(slices.slice(1).map((slice) => this.fetchSlice(slice, signal)));\n        return first.concat(others);\n      }\n      return first;\n    } else {\n      if (!this.allowFullFile) {\n        throw new Error('Server responded with full file');\n      }\n      const data = await response.getData();\n      this._fileSize = data.byteLength;\n      return [{\n        data,\n        offset: 0,\n        length: data.byteLength,\n      }];\n    }\n  }\n\n  async fetchSlice(slice, signal) {\n    const { offset, length } = slice;\n    const response = await this.client.request({\n      headers: {\n        ...this.headers,\n        Range: `bytes=${offset}-${offset + length}`,\n      },\n      signal,\n    });\n\n    // check the response was okay and if the server actually understands range requests\n    if (!response.ok) {\n      throw new Error('Error fetching data.');\n    } else if (response.status === 206) {\n      const data = await response.getData();\n\n      const { total } = parseContentRange(response.getHeader('content-range'));\n      this._fileSize = total || null;\n      return {\n        data,\n        offset,\n        length,\n      };\n    } else {\n      if (!this.allowFullFile) {\n        throw new Error('Server responded with full file');\n      }\n\n      const data = await response.getData();\n\n      this._fileSize = data.byteLength;\n      return {\n        data,\n        offset: 0,\n        length: data.byteLength,\n      };\n    }\n  }\n\n  get fileSize() {\n    return this._fileSize;\n  }\n}\n\nfunction maybeWrapInBlockedSource(source, { blockSize, cacheSize }) {\n  if (blockSize === null) {\n    return source;\n  }\n  return new BlockedSource(source, blockSize, cacheSize);\n}\n\nexport function makeFetchSource(url, { headers = {}, credentials, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\n  const client = new FetchClient(url, credentials);\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\n\nexport function makeXHRSource(url, { headers = {}, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\n  const client = new XHRClient(url);\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\n\nexport function makeHttpSource(url, { headers = {}, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\n  const client = new HttpClient(url);\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\n\n/**\n *\n * @param {string} url\n * @param {object} options\n */\nexport function makeRemoteSource(url, { forceXHR = false, ...clientOptions } = {}) {\n  if (typeof fetch === 'function' && !forceXHR) {\n    return makeFetchSource(url, clientOptions);\n  }\n  if (typeof XMLHttpRequest !== 'undefined') {\n    return makeXHRSource(url, clientOptions);\n  }\n  return makeHttpSource(url, clientOptions);\n}\n","import { BaseSource } from './basesource.js';\n\nclass FileReaderSource extends BaseSource {\n  constructor(file) {\n    super();\n    this.file = file;\n  }\n\n  async fetchSlice(slice, signal) {\n    return new Promise((resolve, reject) => {\n      const blob = this.file.slice(slice.offset, slice.offset + slice.length);\n      const reader = new FileReader();\n      reader.onload = (event) => resolve(event.target.result);\n      reader.onerror = reject;\n      reader.onabort = reject;\n      reader.readAsArrayBuffer(blob);\n\n      if (signal) {\n        signal.addEventListener('abort', () => reader.abort());\n      }\n    });\n  }\n}\n\n/**\n * Create a new source from a given file/blob.\n * @param {Blob} file The file or blob to read from.\n * @returns The constructed source\n */\nexport function makeFileReaderSource(file) {\n  return new FileReaderSource(file);\n}\n","/** @module geotiff */\nimport GeoTIFFImage from './geotiffimage.js';\nimport DataView64 from './dataview64.js';\nimport DataSlice from './dataslice.js';\nimport Pool from './pool.js';\n\nimport { makeRemoteSource } from './source/remote.js';\nimport { makeBufferSource } from './source/arraybuffer.js';\nimport { makeFileReaderSource } from './source/filereader.js';\nimport { makeFileSource } from './source/file.js';\n\nimport { fieldTypes, fieldTagNames, arrayFields, geoKeyNames } from './globals.js';\nimport { writeGeotiff } from './geotiffwriter.js';\nimport * as globals from './globals.js';\nimport * as rgb from './rgb.js';\nimport { getDecoder, addDecoder } from './compression/index.js';\nimport { setLogger } from './logging.js';\n\nexport { globals };\nexport { rgb };\nexport { getDecoder, addDecoder };\nexport { setLogger };\n\n/**\n * @typedef {Uint8Array | Int8Array | Uint16Array | Int16Array | Uint32Array | Int32Array | Float32Array | Float64Array}\n * TypedArray\n */\n\nfunction getFieldTypeLength(fieldType) {\n  switch (fieldType) {\n    case fieldTypes.BYTE: case fieldTypes.ASCII: case fieldTypes.SBYTE: case fieldTypes.UNDEFINED:\n      return 1;\n    case fieldTypes.SHORT: case fieldTypes.SSHORT:\n      return 2;\n    case fieldTypes.LONG: case fieldTypes.SLONG: case fieldTypes.FLOAT: case fieldTypes.IFD:\n      return 4;\n    case fieldTypes.RATIONAL: case fieldTypes.SRATIONAL: case fieldTypes.DOUBLE:\n    case fieldTypes.LONG8: case fieldTypes.SLONG8: case fieldTypes.IFD8:\n      return 8;\n    default:\n      throw new RangeError(`Invalid field type: ${fieldType}`);\n  }\n}\n\nfunction parseGeoKeyDirectory(fileDirectory) {\n  const rawGeoKeyDirectory = fileDirectory.GeoKeyDirectory;\n  if (!rawGeoKeyDirectory) {\n    return null;\n  }\n\n  const geoKeyDirectory = {};\n  for (let i = 4; i <= rawGeoKeyDirectory[3] * 4; i += 4) {\n    const key = geoKeyNames[rawGeoKeyDirectory[i]];\n    const location = (rawGeoKeyDirectory[i + 1])\n      ? (fieldTagNames[rawGeoKeyDirectory[i + 1]]) : null;\n    const count = rawGeoKeyDirectory[i + 2];\n    const offset = rawGeoKeyDirectory[i + 3];\n\n    let value = null;\n    if (!location) {\n      value = offset;\n    } else {\n      value = fileDirectory[location];\n      if (typeof value === 'undefined' || value === null) {\n        throw new Error(`Could not get value of geoKey '${key}'.`);\n      } else if (typeof value === 'string') {\n        value = value.substring(offset, offset + count - 1);\n      } else if (value.subarray) {\n        value = value.subarray(offset, offset + count);\n        if (count === 1) {\n          value = value[0];\n        }\n      }\n    }\n    geoKeyDirectory[key] = value;\n  }\n  return geoKeyDirectory;\n}\n\nfunction getValues(dataSlice, fieldType, count, offset) {\n  let values = null;\n  let readMethod = null;\n  const fieldTypeLength = getFieldTypeLength(fieldType);\n\n  switch (fieldType) {\n    case fieldTypes.BYTE: case fieldTypes.ASCII: case fieldTypes.UNDEFINED:\n      values = new Uint8Array(count); readMethod = dataSlice.readUint8;\n      break;\n    case fieldTypes.SBYTE:\n      values = new Int8Array(count); readMethod = dataSlice.readInt8;\n      break;\n    case fieldTypes.SHORT:\n      values = new Uint16Array(count); readMethod = dataSlice.readUint16;\n      break;\n    case fieldTypes.SSHORT:\n      values = new Int16Array(count); readMethod = dataSlice.readInt16;\n      break;\n    case fieldTypes.LONG: case fieldTypes.IFD:\n      values = new Uint32Array(count); readMethod = dataSlice.readUint32;\n      break;\n    case fieldTypes.SLONG:\n      values = new Int32Array(count); readMethod = dataSlice.readInt32;\n      break;\n    case fieldTypes.LONG8: case fieldTypes.IFD8:\n      values = new Array(count); readMethod = dataSlice.readUint64;\n      break;\n    case fieldTypes.SLONG8:\n      values = new Array(count); readMethod = dataSlice.readInt64;\n      break;\n    case fieldTypes.RATIONAL:\n      values = new Uint32Array(count * 2); readMethod = dataSlice.readUint32;\n      break;\n    case fieldTypes.SRATIONAL:\n      values = new Int32Array(count * 2); readMethod = dataSlice.readInt32;\n      break;\n    case fieldTypes.FLOAT:\n      values = new Float32Array(count); readMethod = dataSlice.readFloat32;\n      break;\n    case fieldTypes.DOUBLE:\n      values = new Float64Array(count); readMethod = dataSlice.readFloat64;\n      break;\n    default:\n      throw new RangeError(`Invalid field type: ${fieldType}`);\n  }\n\n  // normal fields\n  if (!(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {\n    for (let i = 0; i < count; ++i) {\n      values[i] = readMethod.call(\n        dataSlice, offset + (i * fieldTypeLength),\n      );\n    }\n  } else { // RATIONAL or SRATIONAL\n    for (let i = 0; i < count; i += 2) {\n      values[i] = readMethod.call(\n        dataSlice, offset + (i * fieldTypeLength),\n      );\n      values[i + 1] = readMethod.call(\n        dataSlice, offset + ((i * fieldTypeLength) + 4),\n      );\n    }\n  }\n\n  if (fieldType === fieldTypes.ASCII) {\n    return new TextDecoder('utf-8').decode(values);\n  }\n  return values;\n}\n\n/**\n * Data class to store the parsed file directory, geo key directory and\n * offset to the next IFD\n */\nclass ImageFileDirectory {\n  constructor(fileDirectory, geoKeyDirectory, nextIFDByteOffset) {\n    this.fileDirectory = fileDirectory;\n    this.geoKeyDirectory = geoKeyDirectory;\n    this.nextIFDByteOffset = nextIFDByteOffset;\n  }\n}\n\n/**\n * Error class for cases when an IFD index was requested, that does not exist\n * in the file.\n */\nclass GeoTIFFImageIndexError extends Error {\n  constructor(index) {\n    super(`No image at index ${index}`);\n    this.index = index;\n  }\n}\n\nclass GeoTIFFBase {\n  /**\n   * (experimental) Reads raster data from the best fitting image. This function uses\n   * the image with the lowest resolution that is still a higher resolution than the\n   * requested resolution.\n   * When specified, the `bbox` option is translated to the `window` option and the\n   * `resX` and `resY` to `width` and `height` respectively.\n   * Then, the [readRasters]{@link GeoTIFFImage#readRasters} method of the selected\n   * image is called and the result returned.\n   * @see GeoTIFFImage.readRasters\n   * @param {import('./geotiffimage').ReadRasterOptions} [options={}] optional parameters\n   * @returns {Promise<(TypedArray|TypedArray[])>} the decoded arrays as a promise\n   */\n  async readRasters(options = {}) {\n    const { window: imageWindow, width, height } = options;\n    let { resX, resY, bbox } = options;\n\n    const firstImage = await this.getImage();\n    let usedImage = firstImage;\n    const imageCount = await this.getImageCount();\n    const imgBBox = firstImage.getBoundingBox();\n\n    if (imageWindow && bbox) {\n      throw new Error('Both \"bbox\" and \"window\" passed.');\n    }\n\n    // if width/height is passed, transform it to resolution\n    if (width || height) {\n      // if we have an image window (pixel coordinates), transform it to a BBox\n      // using the origin/resolution of the first image.\n      if (imageWindow) {\n        const [oX, oY] = firstImage.getOrigin();\n        const [rX, rY] = firstImage.getResolution();\n\n        bbox = [\n          oX + (imageWindow[0] * rX),\n          oY + (imageWindow[1] * rY),\n          oX + (imageWindow[2] * rX),\n          oY + (imageWindow[3] * rY),\n        ];\n      }\n\n      // if we have a bbox (or calculated one)\n\n      const usedBBox = bbox || imgBBox;\n\n      if (width) {\n        if (resX) {\n          throw new Error('Both width and resX passed');\n        }\n        resX = (usedBBox[2] - usedBBox[0]) / width;\n      }\n      if (height) {\n        if (resY) {\n          throw new Error('Both width and resY passed');\n        }\n        resY = (usedBBox[3] - usedBBox[1]) / height;\n      }\n    }\n\n    // if resolution is set or calculated, try to get the image with the worst acceptable resolution\n    if (resX || resY) {\n      const allImages = [];\n      for (let i = 0; i < imageCount; ++i) {\n        const image = await this.getImage(i);\n        const { SubfileType: subfileType, NewSubfileType: newSubfileType } = image.fileDirectory;\n        if (i === 0 || subfileType === 2 || newSubfileType & 1) {\n          allImages.push(image);\n        }\n      }\n\n      allImages.sort((a, b) => a.getWidth() - b.getWidth());\n      for (let i = 0; i < allImages.length; ++i) {\n        const image = allImages[i];\n        const imgResX = (imgBBox[2] - imgBBox[0]) / image.getWidth();\n        const imgResY = (imgBBox[3] - imgBBox[1]) / image.getHeight();\n\n        usedImage = image;\n        if ((resX && resX > imgResX) || (resY && resY > imgResY)) {\n          break;\n        }\n      }\n    }\n\n    let wnd = imageWindow;\n    if (bbox) {\n      const [oX, oY] = firstImage.getOrigin();\n      const [imageResX, imageResY] = usedImage.getResolution(firstImage);\n\n      wnd = [\n        Math.round((bbox[0] - oX) / imageResX),\n        Math.round((bbox[1] - oY) / imageResY),\n        Math.round((bbox[2] - oX) / imageResX),\n        Math.round((bbox[3] - oY) / imageResY),\n      ];\n      wnd = [\n        Math.min(wnd[0], wnd[2]),\n        Math.min(wnd[1], wnd[3]),\n        Math.max(wnd[0], wnd[2]),\n        Math.max(wnd[1], wnd[3]),\n      ];\n    }\n\n    return usedImage.readRasters({ ...options, window: wnd });\n  }\n}\n\n/**\n * @typedef {Object} GeoTIFFOptions\n * @property {boolean} [cache=false] whether or not decoded tiles shall be cached.\n */\n\n/**\n * The abstraction for a whole GeoTIFF file.\n * @augments GeoTIFFBase\n */\nclass GeoTIFF extends GeoTIFFBase {\n  /**\n   * @constructor\n   * @param {*} source The datasource to read from.\n   * @param {boolean} littleEndian Whether the image uses little endian.\n   * @param {boolean} bigTiff Whether the image uses bigTIFF conventions.\n   * @param {number} firstIFDOffset The numeric byte-offset from the start of the image\n   *                                to the first IFD.\n   * @param {GeoTIFFOptions} [options] further options.\n   */\n  constructor(source, littleEndian, bigTiff, firstIFDOffset, options = {}) {\n    super();\n    this.source = source;\n    this.littleEndian = littleEndian;\n    this.bigTiff = bigTiff;\n    this.firstIFDOffset = firstIFDOffset;\n    this.cache = options.cache || false;\n    this.ifdRequests = [];\n    this.ghostValues = null;\n  }\n\n  async getSlice(offset, size) {\n    const fallbackSize = this.bigTiff ? 4048 : 1024;\n    return new DataSlice(\n      (await this.source.fetch([{\n        offset,\n        length: typeof size !== 'undefined' ? size : fallbackSize,\n      }]))[0],\n      offset,\n      this.littleEndian,\n      this.bigTiff,\n    );\n  }\n\n  /**\n   * Instructs to parse an image file directory at the given file offset.\n   * As there is no way to ensure that a location is indeed the start of an IFD,\n   * this function must be called with caution (e.g only using the IFD offsets from\n   * the headers or other IFDs).\n   * @param {number} offset the offset to parse the IFD at\n   * @returns {Promise<ImageFileDirectory>} the parsed IFD\n   */\n  async parseFileDirectoryAt(offset) {\n    const entrySize = this.bigTiff ? 20 : 12;\n    const offsetSize = this.bigTiff ? 8 : 2;\n\n    let dataSlice = await this.getSlice(offset);\n    const numDirEntries = this.bigTiff\n      ? dataSlice.readUint64(offset)\n      : dataSlice.readUint16(offset);\n\n    // if the slice does not cover the whole IFD, request a bigger slice, where the\n    // whole IFD fits: num of entries + n x tag length + offset to next IFD\n    const byteSize = (numDirEntries * entrySize) + (this.bigTiff ? 16 : 6);\n    if (!dataSlice.covers(offset, byteSize)) {\n      dataSlice = await this.getSlice(offset, byteSize);\n    }\n\n    const fileDirectory = {};\n\n    // loop over the IFD and create a file directory object\n    let i = offset + (this.bigTiff ? 8 : 2);\n    for (let entryCount = 0; entryCount < numDirEntries; i += entrySize, ++entryCount) {\n      const fieldTag = dataSlice.readUint16(i);\n      const fieldType = dataSlice.readUint16(i + 2);\n      const typeCount = this.bigTiff\n        ? dataSlice.readUint64(i + 4)\n        : dataSlice.readUint32(i + 4);\n\n      let fieldValues;\n      let value;\n      const fieldTypeLength = getFieldTypeLength(fieldType);\n      const valueOffset = i + (this.bigTiff ? 12 : 8);\n\n      // check whether the value is directly encoded in the tag or refers to a\n      // different external byte range\n      if (fieldTypeLength * typeCount <= (this.bigTiff ? 8 : 4)) {\n        fieldValues = getValues(dataSlice, fieldType, typeCount, valueOffset);\n      } else {\n        // resolve the reference to the actual byte range\n        const actualOffset = dataSlice.readOffset(valueOffset);\n        const length = getFieldTypeLength(fieldType) * typeCount;\n\n        // check, whether we actually cover the referenced byte range; if not,\n        // request a new slice of bytes to read from it\n        if (dataSlice.covers(actualOffset, length)) {\n          fieldValues = getValues(dataSlice, fieldType, typeCount, actualOffset);\n        } else {\n          const fieldDataSlice = await this.getSlice(actualOffset, length);\n          fieldValues = getValues(fieldDataSlice, fieldType, typeCount, actualOffset);\n        }\n      }\n\n      // unpack single values from the array\n      if (typeCount === 1 && arrayFields.indexOf(fieldTag) === -1\n        && !(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {\n        value = fieldValues[0];\n      } else {\n        value = fieldValues;\n      }\n\n      // write the tags value to the file directly\n      fileDirectory[fieldTagNames[fieldTag]] = value;\n    }\n    const geoKeyDirectory = parseGeoKeyDirectory(fileDirectory);\n    const nextIFDByteOffset = dataSlice.readOffset(\n      offset + offsetSize + (entrySize * numDirEntries),\n    );\n\n    return new ImageFileDirectory(\n      fileDirectory,\n      geoKeyDirectory,\n      nextIFDByteOffset,\n    );\n  }\n\n  async requestIFD(index) {\n    // see if we already have that IFD index requested.\n    if (this.ifdRequests[index]) {\n      // attach to an already requested IFD\n      return this.ifdRequests[index];\n    } else if (index === 0) {\n      // special case for index 0\n      this.ifdRequests[index] = this.parseFileDirectoryAt(this.firstIFDOffset);\n      return this.ifdRequests[index];\n    } else if (!this.ifdRequests[index - 1]) {\n      // if the previous IFD was not yet loaded, load that one first\n      // this is the recursive call.\n      try {\n        this.ifdRequests[index - 1] = this.requestIFD(index - 1);\n      } catch (e) {\n        // if the previous one already was an index error, rethrow\n        // with the current index\n        if (e instanceof GeoTIFFImageIndexError) {\n          throw new GeoTIFFImageIndexError(index);\n        }\n        // rethrow anything else\n        throw e;\n      }\n    }\n    // if the previous IFD was loaded, we can finally fetch the one we are interested in.\n    // we need to wrap this in an IIFE, otherwise this.ifdRequests[index] would be delayed\n    this.ifdRequests[index] = (async () => {\n      const previousIfd = await this.ifdRequests[index - 1];\n      if (previousIfd.nextIFDByteOffset === 0) {\n        throw new GeoTIFFImageIndexError(index);\n      }\n      return this.parseFileDirectoryAt(previousIfd.nextIFDByteOffset);\n    })();\n    return this.ifdRequests[index];\n  }\n\n  /**\n   * Get the n-th internal subfile of an image. By default, the first is returned.\n   *\n   * @param {number} [index=0] the index of the image to return.\n   * @returns {Promise<GeoTIFFImage>} the image at the given index\n   */\n  async getImage(index = 0) {\n    const ifd = await this.requestIFD(index);\n    return new GeoTIFFImage(\n      ifd.fileDirectory, ifd.geoKeyDirectory,\n      this.dataView, this.littleEndian, this.cache, this.source,\n    );\n  }\n\n  /**\n   * Returns the count of the internal subfiles.\n   *\n   * @returns {Promise<number>} the number of internal subfile images\n   */\n  async getImageCount() {\n    let index = 0;\n    // loop until we run out of IFDs\n    let hasNext = true;\n    while (hasNext) {\n      try {\n        await this.requestIFD(index);\n        ++index;\n      } catch (e) {\n        if (e instanceof GeoTIFFImageIndexError) {\n          hasNext = false;\n        } else {\n          throw e;\n        }\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Get the values of the COG ghost area as a parsed map.\n   * See https://gdal.org/drivers/raster/cog.html#header-ghost-area for reference\n   * @returns {Promise<Object>} the parsed ghost area or null, if no such area was found\n   */\n  async getGhostValues() {\n    const offset = this.bigTiff ? 16 : 8;\n    if (this.ghostValues) {\n      return this.ghostValues;\n    }\n    const detectionString = 'GDAL_STRUCTURAL_METADATA_SIZE=';\n    const heuristicAreaSize = detectionString.length + 100;\n    let slice = await this.getSlice(offset, heuristicAreaSize);\n    if (detectionString === getValues(slice, fieldTypes.ASCII, detectionString.length, offset)) {\n      const valuesString = getValues(slice, fieldTypes.ASCII, heuristicAreaSize, offset);\n      const firstLine = valuesString.split('\\n')[0];\n      const metadataSize = Number(firstLine.split('=')[1].split(' ')[0]) + firstLine.length;\n      if (metadataSize > heuristicAreaSize) {\n        slice = await this.getSlice(offset, metadataSize);\n      }\n      const fullString = getValues(slice, fieldTypes.ASCII, metadataSize, offset);\n      this.ghostValues = {};\n      fullString\n        .split('\\n')\n        .filter((line) => line.length > 0)\n        .map((line) => line.split('='))\n        .forEach(([key, value]) => {\n          this.ghostValues[key] = value;\n        });\n    }\n    return this.ghostValues;\n  }\n\n  /**\n   * Parse a (Geo)TIFF file from the given source.\n   *\n   * @param {*} source The source of data to parse from.\n   * @param {GeoTIFFOptions} [options] Additional options.\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   */\n  static async fromSource(source, options, signal) {\n    const headerData = (await source.fetch([{ offset: 0, length: 1024 }], signal))[0];\n    const dataView = new DataView64(headerData);\n\n    const BOM = dataView.getUint16(0, 0);\n    let littleEndian;\n    if (BOM === 0x4949) {\n      littleEndian = true;\n    } else if (BOM === 0x4D4D) {\n      littleEndian = false;\n    } else {\n      throw new TypeError('Invalid byte order value.');\n    }\n\n    const magicNumber = dataView.getUint16(2, littleEndian);\n    let bigTiff;\n    if (magicNumber === 42) {\n      bigTiff = false;\n    } else if (magicNumber === 43) {\n      bigTiff = true;\n      const offsetByteSize = dataView.getUint16(4, littleEndian);\n      if (offsetByteSize !== 8) {\n        throw new Error('Unsupported offset byte-size.');\n      }\n    } else {\n      throw new TypeError('Invalid magic number.');\n    }\n\n    const firstIFDOffset = bigTiff\n      ? dataView.getUint64(8, littleEndian)\n      : dataView.getUint32(4, littleEndian);\n    return new GeoTIFF(source, littleEndian, bigTiff, firstIFDOffset, options);\n  }\n\n  /**\n   * Closes the underlying file buffer\n   * N.B. After the GeoTIFF has been completely processed it needs\n   * to be closed but only if it has been constructed from a file.\n   */\n  close() {\n    if (typeof this.source.close === 'function') {\n      return this.source.close();\n    }\n    return false;\n  }\n}\n\nexport { GeoTIFF };\nexport default GeoTIFF;\n\n/**\n * Wrapper for GeoTIFF files that have external overviews.\n * @augments GeoTIFFBase\n */\nclass MultiGeoTIFF extends GeoTIFFBase {\n  /**\n   * Construct a new MultiGeoTIFF from a main and several overview files.\n   * @param {GeoTIFF} mainFile The main GeoTIFF file.\n   * @param {GeoTIFF[]} overviewFiles An array of overview files.\n   */\n  constructor(mainFile, overviewFiles) {\n    super();\n    this.mainFile = mainFile;\n    this.overviewFiles = overviewFiles;\n    this.imageFiles = [mainFile].concat(overviewFiles);\n\n    this.fileDirectoriesPerFile = null;\n    this.fileDirectoriesPerFileParsing = null;\n    this.imageCount = null;\n  }\n\n  async parseFileDirectoriesPerFile() {\n    const requests = [this.mainFile.parseFileDirectoryAt(this.mainFile.firstIFDOffset)]\n      .concat(this.overviewFiles.map((file) => file.parseFileDirectoryAt(file.firstIFDOffset)));\n\n    this.fileDirectoriesPerFile = await Promise.all(requests);\n    return this.fileDirectoriesPerFile;\n  }\n\n  /**\n   * Get the n-th internal subfile of an image. By default, the first is returned.\n   *\n   * @param {number} [index=0] the index of the image to return.\n   * @returns {Promise<GeoTIFFImage>} the image at the given index\n   */\n  async getImage(index = 0) {\n    await this.getImageCount();\n    await this.parseFileDirectoriesPerFile();\n    let visited = 0;\n    let relativeIndex = 0;\n    for (let i = 0; i < this.imageFiles.length; i++) {\n      const imageFile = this.imageFiles[i];\n      for (let ii = 0; ii < this.imageCounts[i]; ii++) {\n        if (index === visited) {\n          const ifd = await imageFile.requestIFD(relativeIndex);\n          return new GeoTIFFImage(\n            ifd.fileDirectory, ifd.geoKeyDirectory,\n            imageFile.dataView, imageFile.littleEndian, imageFile.cache, imageFile.source,\n          );\n        }\n        visited++;\n        relativeIndex++;\n      }\n      relativeIndex = 0;\n    }\n\n    throw new RangeError('Invalid image index');\n  }\n\n  /**\n   * Returns the count of the internal subfiles.\n   *\n   * @returns {Promise<number>} the number of internal subfile images\n   */\n  async getImageCount() {\n    if (this.imageCount !== null) {\n      return this.imageCount;\n    }\n    const requests = [this.mainFile.getImageCount()]\n      .concat(this.overviewFiles.map((file) => file.getImageCount()));\n    this.imageCounts = await Promise.all(requests);\n    this.imageCount = this.imageCounts.reduce((count, ifds) => count + ifds, 0);\n    return this.imageCount;\n  }\n}\n\nexport { MultiGeoTIFF };\n\n/**\n * Creates a new GeoTIFF from a remote URL.\n * @param {string} url The URL to access the image from\n * @param {object} [options] Additional options to pass to the source.\n *                           See {@link makeRemoteSource} for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromUrl(url, options = {}, signal) {\n  return GeoTIFF.fromSource(makeRemoteSource(url, options), signal);\n}\n\n/**\n * Construct a new GeoTIFF from an\n * [ArrayBuffer]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer}.\n * @param {ArrayBuffer} arrayBuffer The data to read the file from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromArrayBuffer(arrayBuffer, signal) {\n  return GeoTIFF.fromSource(makeBufferSource(arrayBuffer), signal);\n}\n\n/**\n * Construct a GeoTIFF from a local file path. This uses the node\n * [filesystem API]{@link https://nodejs.org/api/fs.html} and is\n * not available on browsers.\n *\n * N.B. After the GeoTIFF has been completely processed it needs\n * to be closed but only if it has been constructed from a file.\n * @param {string} path The file path to read from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromFile(path, signal) {\n  return GeoTIFF.fromSource(makeFileSource(path), signal);\n}\n\n/**\n * Construct a GeoTIFF from an HTML\n * [Blob]{@link https://developer.mozilla.org/en-US/docs/Web/API/Blob} or\n * [File]{@link https://developer.mozilla.org/en-US/docs/Web/API/File}\n * object.\n * @param {Blob|File} blob The Blob or File object to read from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromBlob(blob, signal) {\n  return GeoTIFF.fromSource(makeFileReaderSource(blob), signal);\n}\n\n/**\n * Construct a MultiGeoTIFF from the given URLs.\n * @param {string} mainUrl The URL for the main file.\n * @param {string[]} overviewUrls An array of URLs for the overview images.\n * @param {Object} [options] Additional options to pass to the source.\n *                           See [makeRemoteSource]{@link module:source.makeRemoteSource}\n *                           for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<MultiGeoTIFF>} The resulting MultiGeoTIFF file.\n */\nexport async function fromUrls(mainUrl, overviewUrls = [], options = {}, signal) {\n  const mainFile = await GeoTIFF.fromSource(makeRemoteSource(mainUrl, options), signal);\n  const overviewFiles = await Promise.all(\n    overviewUrls.map((url) => GeoTIFF.fromSource(makeRemoteSource(url, options))),\n  );\n\n  return new MultiGeoTIFF(mainFile, overviewFiles);\n}\n\n/**\n * Main creating function for GeoTIFF files.\n * @param {(Array)} array of pixel values\n * @returns {metadata} metadata\n */\nexport function writeArrayBuffer(values, metadata) {\n  return writeGeotiff(values, metadata);\n}\n\nexport { Pool };\nexport { GeoTIFFImage };\n","export function fromWhiteIsZero(raster, max) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  let value;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    value = 256 - (raster[i] / max * 256);\n    rgbRaster[j] = value;\n    rgbRaster[j + 1] = value;\n    rgbRaster[j + 2] = value;\n  }\n  return rgbRaster;\n}\n\nexport function fromBlackIsZero(raster, max) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  let value;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    value = raster[i] / max * 256;\n    rgbRaster[j] = value;\n    rgbRaster[j + 1] = value;\n    rgbRaster[j + 2] = value;\n  }\n  return rgbRaster;\n}\n\nexport function fromPalette(raster, colorMap) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  const greenOffset = colorMap.length / 3;\n  const blueOffset = colorMap.length / 3 * 2;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    const mapIndex = raster[i];\n    rgbRaster[j] = colorMap[mapIndex] / 65536 * 256;\n    rgbRaster[j + 1] = colorMap[mapIndex + greenOffset] / 65536 * 256;\n    rgbRaster[j + 2] = colorMap[mapIndex + blueOffset] / 65536 * 256;\n  }\n  return rgbRaster;\n}\n\nexport function fromCMYK(cmykRaster) {\n  const { width, height } = cmykRaster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  for (let i = 0, j = 0; i < cmykRaster.length; i += 4, j += 3) {\n    const c = cmykRaster[i];\n    const m = cmykRaster[i + 1];\n    const y = cmykRaster[i + 2];\n    const k = cmykRaster[i + 3];\n\n    rgbRaster[j] = 255 * ((255 - c) / 256) * ((255 - k) / 256);\n    rgbRaster[j + 1] = 255 * ((255 - m) / 256) * ((255 - k) / 256);\n    rgbRaster[j + 2] = 255 * ((255 - y) / 256) * ((255 - k) / 256);\n  }\n  return rgbRaster;\n}\n\nexport function fromYCbCr(yCbCrRaster) {\n  const { width, height } = yCbCrRaster;\n  const rgbRaster = new Uint8ClampedArray(width * height * 3);\n  for (let i = 0, j = 0; i < yCbCrRaster.length; i += 3, j += 3) {\n    const y = yCbCrRaster[i];\n    const cb = yCbCrRaster[i + 1];\n    const cr = yCbCrRaster[i + 2];\n\n    rgbRaster[j] = (y + (1.40200 * (cr - 0x80)));\n    rgbRaster[j + 1] = (y - (0.34414 * (cb - 0x80)) - (0.71414 * (cr - 0x80)));\n    rgbRaster[j + 2] = (y + (1.77200 * (cb - 0x80)));\n  }\n  return rgbRaster;\n}\n\nconst Xn = 0.95047;\nconst Yn = 1.00000;\nconst Zn = 1.08883;\n\n// from https://github.com/antimatter15/rgb-lab/blob/master/color.js\n\nexport function fromCIELab(cieLabRaster) {\n  const { width, height } = cieLabRaster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n\n  for (let i = 0, j = 0; i < cieLabRaster.length; i += 3, j += 3) {\n    const L = cieLabRaster[i + 0];\n    const a_ = cieLabRaster[i + 1] << 24 >> 24; // conversion from uint8 to int8\n    const b_ = cieLabRaster[i + 2] << 24 >> 24; // same\n\n    let y = (L + 16) / 116;\n    let x = (a_ / 500) + y;\n    let z = y - (b_ / 200);\n    let r;\n    let g;\n    let b;\n\n    x = Xn * ((x * x * x > 0.008856) ? x * x * x : (x - (16 / 116)) / 7.787);\n    y = Yn * ((y * y * y > 0.008856) ? y * y * y : (y - (16 / 116)) / 7.787);\n    z = Zn * ((z * z * z > 0.008856) ? z * z * z : (z - (16 / 116)) / 7.787);\n\n    r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n    g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n    b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n    r = (r > 0.0031308) ? ((1.055 * (r ** (1 / 2.4))) - 0.055) : 12.92 * r;\n    g = (g > 0.0031308) ? ((1.055 * (g ** (1 / 2.4))) - 0.055) : 12.92 * g;\n    b = (b > 0.0031308) ? ((1.055 * (b ** (1 / 2.4))) - 0.055) : 12.92 * b;\n\n    rgbRaster[j] = Math.max(0, Math.min(1, r)) * 255;\n    rgbRaster[j + 1] = Math.max(0, Math.min(1, g)) * 255;\n    rgbRaster[j + 2] = Math.max(0, Math.min(1, b)) * 255;\n  }\n  return rgbRaster;\n}\n","/**\n * @module resample\n */\n\nfunction copyNewSize(array, width, height, samplesPerPixel = 1) {\n  return new (Object.getPrototypeOf(array).constructor)(width * height * samplesPerPixel);\n}\n\n/**\n * Resample the input arrays using nearest neighbor value selection.\n * @param {TypedArray[]} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @returns {TypedArray[]} The resampled rasters\n */\nexport function resampleNearest(valueArrays, inWidth, inHeight, outWidth, outHeight) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n  return valueArrays.map((array) => {\n    const newArray = copyNewSize(array, outWidth, outHeight);\n    for (let y = 0; y < outHeight; ++y) {\n      const cy = Math.min(Math.round(relY * y), inHeight - 1);\n      for (let x = 0; x < outWidth; ++x) {\n        const cx = Math.min(Math.round(relX * x), inWidth - 1);\n        const value = array[(cy * inWidth) + cx];\n        newArray[(y * outWidth) + x] = value;\n      }\n    }\n    return newArray;\n  });\n}\n\n// simple linear interpolation, code from:\n// https://en.wikipedia.org/wiki/Linear_interpolation#Programming_language_support\nfunction lerp(v0, v1, t) {\n  return ((1 - t) * v0) + (t * v1);\n}\n\n/**\n * Resample the input arrays using bilinear interpolation.\n * @param {TypedArray[]} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @returns {TypedArray[]} The resampled rasters\n */\nexport function resampleBilinear(valueArrays, inWidth, inHeight, outWidth, outHeight) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n\n  return valueArrays.map((array) => {\n    const newArray = copyNewSize(array, outWidth, outHeight);\n    for (let y = 0; y < outHeight; ++y) {\n      const rawY = relY * y;\n\n      const yl = Math.floor(rawY);\n      const yh = Math.min(Math.ceil(rawY), (inHeight - 1));\n\n      for (let x = 0; x < outWidth; ++x) {\n        const rawX = relX * x;\n        const tx = rawX % 1;\n\n        const xl = Math.floor(rawX);\n        const xh = Math.min(Math.ceil(rawX), (inWidth - 1));\n\n        const ll = array[(yl * inWidth) + xl];\n        const hl = array[(yl * inWidth) + xh];\n        const lh = array[(yh * inWidth) + xl];\n        const hh = array[(yh * inWidth) + xh];\n\n        const value = lerp(\n          lerp(ll, hl, tx),\n          lerp(lh, hh, tx),\n          rawY % 1,\n        );\n        newArray[(y * outWidth) + x] = value;\n      }\n    }\n    return newArray;\n  });\n}\n\n/**\n * Resample the input arrays using the selected resampling method.\n * @param {TypedArray[]} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {string} [method = 'nearest'] The desired resampling method\n * @returns {TypedArray[]} The resampled rasters\n */\nexport function resample(valueArrays, inWidth, inHeight, outWidth, outHeight, method = 'nearest') {\n  switch (method.toLowerCase()) {\n    case 'nearest':\n      return resampleNearest(valueArrays, inWidth, inHeight, outWidth, outHeight);\n    case 'bilinear':\n    case 'linear':\n      return resampleBilinear(valueArrays, inWidth, inHeight, outWidth, outHeight);\n    default:\n      throw new Error(`Unsupported resampling method: '${method}'`);\n  }\n}\n\n/**\n * Resample the pixel interleaved input array using nearest neighbor value selection.\n * @param {TypedArray} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {number} samples The number of samples per pixel for pixel\n *                         interleaved data\n * @returns {TypedArray} The resampled raster\n */\nexport function resampleNearestInterleaved(\n  valueArray, inWidth, inHeight, outWidth, outHeight, samples) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n\n  const newArray = copyNewSize(valueArray, outWidth, outHeight, samples);\n  for (let y = 0; y < outHeight; ++y) {\n    const cy = Math.min(Math.round(relY * y), inHeight - 1);\n    for (let x = 0; x < outWidth; ++x) {\n      const cx = Math.min(Math.round(relX * x), inWidth - 1);\n      for (let i = 0; i < samples; ++i) {\n        const value = valueArray[(cy * inWidth * samples) + (cx * samples) + i];\n        newArray[(y * outWidth * samples) + (x * samples) + i] = value;\n      }\n    }\n  }\n  return newArray;\n}\n\n/**\n * Resample the pixel interleaved input array using bilinear interpolation.\n * @param {TypedArray} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {number} samples The number of samples per pixel for pixel\n *                         interleaved data\n * @returns {TypedArray} The resampled raster\n */\nexport function resampleBilinearInterleaved(\n  valueArray, inWidth, inHeight, outWidth, outHeight, samples) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n  const newArray = copyNewSize(valueArray, outWidth, outHeight, samples);\n  for (let y = 0; y < outHeight; ++y) {\n    const rawY = relY * y;\n\n    const yl = Math.floor(rawY);\n    const yh = Math.min(Math.ceil(rawY), (inHeight - 1));\n\n    for (let x = 0; x < outWidth; ++x) {\n      const rawX = relX * x;\n      const tx = rawX % 1;\n\n      const xl = Math.floor(rawX);\n      const xh = Math.min(Math.ceil(rawX), (inWidth - 1));\n\n      for (let i = 0; i < samples; ++i) {\n        const ll = valueArray[(yl * inWidth * samples) + (xl * samples) + i];\n        const hl = valueArray[(yl * inWidth * samples) + (xh * samples) + i];\n        const lh = valueArray[(yh * inWidth * samples) + (xl * samples) + i];\n        const hh = valueArray[(yh * inWidth * samples) + (xh * samples) + i];\n\n        const value = lerp(\n          lerp(ll, hl, tx),\n          lerp(lh, hh, tx),\n          rawY % 1,\n        );\n        newArray[(y * outWidth * samples) + (x * samples) + i] = value;\n      }\n    }\n  }\n  return newArray;\n}\n\n/**\n * Resample the pixel interleaved input array using the selected resampling method.\n * @param {TypedArray} valueArray The input array to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {number} samples The number of samples per pixel for pixel\n *                                 interleaved data\n * @param {string} [method = 'nearest'] The desired resampling method\n * @returns {TypedArray} The resampled rasters\n */\nexport function resampleInterleaved(valueArray, inWidth, inHeight, outWidth, outHeight, samples, method = 'nearest') {\n  switch (method.toLowerCase()) {\n    case 'nearest':\n      return resampleNearestInterleaved(\n        valueArray, inWidth, inHeight, outWidth, outHeight, samples,\n      );\n    case 'bilinear':\n    case 'linear':\n      return resampleBilinearInterleaved(\n        valueArray, inWidth, inHeight, outWidth, outHeight, samples,\n      );\n    default:\n      throw new Error(`Unsupported resampling method: '${method}'`);\n  }\n}\n","/** @module geotiffimage */\nimport { getFloat16 } from '@petamoriken/float16';\nimport getAttribute from 'xml-utils/get-attribute.js';\nimport findTagsByName from 'xml-utils/find-tags-by-name.js';\n\nimport { photometricInterpretations, ExtraSamplesValues } from './globals.js';\nimport { fromWhiteIsZero, fromBlackIsZero, fromPalette, fromCMYK, fromYCbCr, fromCIELab } from './rgb.js';\nimport { getDecoder } from './compression/index.js';\nimport { resample, resampleInterleaved } from './resample.js';\n\n/**\n * @typedef {Object} ReadRasterOptions\n * @property {Array<number>} [window=whole window] the subset to read data from in pixels.\n * @property {Array<number>} [bbox=whole image] the subset to read data from in\n *                                           geographical coordinates.\n * @property {Array<number>} [samples=all samples] the selection of samples to read from. Default is all samples.\n * @property {boolean} [interleave=false] whether the data shall be read\n *                                             in one single array or separate\n *                                             arrays.\n * @property {Pool} [pool=null] The optional decoder pool to use.\n * @property {number} [width] The desired width of the output. When the width is not the\n *                                 same as the images, resampling will be performed.\n * @property {number} [height] The desired height of the output. When the width is not the\n *                                  same as the images, resampling will be performed.\n * @property {string} [resampleMethod='nearest'] The desired resampling method.\n * @property {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                                       to be aborted\n * @property {number|number[]} [fillValue] The value to use for parts of the image\n *                                              outside of the images extent. When multiple\n *                                              samples are requested, an array of fill values\n *                                              can be passed.\n */\n\n/** @typedef {import(\"./geotiff.js\").TypedArray} TypedArray */\n\nfunction sum(array, start, end) {\n  let s = 0;\n  for (let i = start; i < end; ++i) {\n    s += array[i];\n  }\n  return s;\n}\n\nfunction arrayForType(format, bitsPerSample, size) {\n  switch (format) {\n    case 1: // unsigned integer data\n      if (bitsPerSample <= 8) {\n        return new Uint8Array(size);\n      } else if (bitsPerSample <= 16) {\n        return new Uint16Array(size);\n      } else if (bitsPerSample <= 32) {\n        return new Uint32Array(size);\n      }\n      break;\n    case 2: // twos complement signed integer data\n      if (bitsPerSample === 8) {\n        return new Int8Array(size);\n      } else if (bitsPerSample === 16) {\n        return new Int16Array(size);\n      } else if (bitsPerSample === 32) {\n        return new Int32Array(size);\n      }\n      break;\n    case 3: // floating point data\n      switch (bitsPerSample) {\n        case 16:\n        case 32:\n          return new Float32Array(size);\n        case 64:\n          return new Float64Array(size);\n        default:\n          break;\n      }\n      break;\n    default:\n      break;\n  }\n  throw Error('Unsupported data format/bitsPerSample');\n}\n\nfunction needsNormalization(format, bitsPerSample) {\n  if ((format === 1 || format === 2) && bitsPerSample <= 32 && bitsPerSample % 8 === 0) {\n    return false;\n  } else if (format === 3 && (bitsPerSample === 16 || bitsPerSample === 32 || bitsPerSample === 64)) {\n    return false;\n  }\n  return true;\n}\n\nfunction normalizeArray(inBuffer, format, planarConfiguration, samplesPerPixel, bitsPerSample, tileWidth, tileHeight) {\n  // const inByteArray = new Uint8Array(inBuffer);\n  const view = new DataView(inBuffer);\n  const outSize = planarConfiguration === 2\n    ? tileHeight * tileWidth\n    : tileHeight * tileWidth * samplesPerPixel;\n  const samplesToTransfer = planarConfiguration === 2\n    ? 1 : samplesPerPixel;\n  const outArray = arrayForType(format, bitsPerSample, outSize);\n  // let pixel = 0;\n\n  const bitMask = parseInt('1'.repeat(bitsPerSample), 2);\n\n  if (format === 1) { // unsigned integer\n    // translation of https://github.com/OSGeo/gdal/blob/master/gdal/frmts/gtiff/geotiff.cpp#L7337\n    let pixelBitSkip;\n    // let sampleBitOffset = 0;\n    if (planarConfiguration === 1) {\n      pixelBitSkip = samplesPerPixel * bitsPerSample;\n      // sampleBitOffset = (samplesPerPixel - 1) * bitsPerSample;\n    } else {\n      pixelBitSkip = bitsPerSample;\n    }\n\n    // Bits per line rounds up to next byte boundary.\n    let bitsPerLine = tileWidth * pixelBitSkip;\n    if ((bitsPerLine & 7) !== 0) {\n      bitsPerLine = (bitsPerLine + 7) & (~7);\n    }\n\n    for (let y = 0; y < tileHeight; ++y) {\n      const lineBitOffset = y * bitsPerLine;\n      for (let x = 0; x < tileWidth; ++x) {\n        const pixelBitOffset = lineBitOffset + (x * samplesToTransfer * bitsPerSample);\n        for (let i = 0; i < samplesToTransfer; ++i) {\n          const bitOffset = pixelBitOffset + (i * bitsPerSample);\n          const outIndex = (((y * tileWidth) + x) * samplesToTransfer) + i;\n\n          const byteOffset = Math.floor(bitOffset / 8);\n          const innerBitOffset = bitOffset % 8;\n          if (innerBitOffset + bitsPerSample <= 8) {\n            outArray[outIndex] = (view.getUint8(byteOffset) >> (8 - bitsPerSample) - innerBitOffset) & bitMask;\n          } else if (innerBitOffset + bitsPerSample <= 16) {\n            outArray[outIndex] = (view.getUint16(byteOffset) >> (16 - bitsPerSample) - innerBitOffset) & bitMask;\n          } else if (innerBitOffset + bitsPerSample <= 24) {\n            const raw = (view.getUint16(byteOffset) << 8) | (view.getUint8(byteOffset + 2));\n            outArray[outIndex] = (raw >> (24 - bitsPerSample) - innerBitOffset) & bitMask;\n          } else {\n            outArray[outIndex] = (view.getUint32(byteOffset) >> (32 - bitsPerSample) - innerBitOffset) & bitMask;\n          }\n\n          // let outWord = 0;\n          // for (let bit = 0; bit < bitsPerSample; ++bit) {\n          //   if (inByteArray[bitOffset >> 3]\n          //     & (0x80 >> (bitOffset & 7))) {\n          //     outWord |= (1 << (bitsPerSample - 1 - bit));\n          //   }\n          //   ++bitOffset;\n          // }\n\n          // outArray[outIndex] = outWord;\n          // outArray[pixel] = outWord;\n          // pixel += 1;\n        }\n        // bitOffset = bitOffset + pixelBitSkip - bitsPerSample;\n      }\n    }\n  } else if (format === 3) { // floating point\n    // Float16 is handled elsewhere\n    // normalize 16/24 bit floats to 32 bit floats in the array\n    // console.time();\n    // if (bitsPerSample === 16) {\n    //   for (let byte = 0, outIndex = 0; byte < inBuffer.byteLength; byte += 2, ++outIndex) {\n    //     outArray[outIndex] = getFloat16(view, byte);\n    //   }\n    // }\n    // console.timeEnd()\n  }\n\n  return outArray.buffer;\n}\n\n/**\n * GeoTIFF sub-file image.\n */\nclass GeoTIFFImage {\n  /**\n   * @constructor\n   * @param {Object} fileDirectory The parsed file directory\n   * @param {Object} geoKeys The parsed geo-keys\n   * @param {DataView} dataView The DataView for the underlying file.\n   * @param {Boolean} littleEndian Whether the file is encoded in little or big endian\n   * @param {Boolean} cache Whether or not decoded tiles shall be cached\n   * @param {Source} source The datasource to read from\n   */\n  constructor(fileDirectory, geoKeys, dataView, littleEndian, cache, source) {\n    this.fileDirectory = fileDirectory;\n    this.geoKeys = geoKeys;\n    this.dataView = dataView;\n    this.littleEndian = littleEndian;\n    this.tiles = cache ? {} : null;\n    this.isTiled = !fileDirectory.StripOffsets;\n    const planarConfiguration = fileDirectory.PlanarConfiguration;\n    this.planarConfiguration = (typeof planarConfiguration === 'undefined') ? 1 : planarConfiguration;\n    if (this.planarConfiguration !== 1 && this.planarConfiguration !== 2) {\n      throw new Error('Invalid planar configuration.');\n    }\n\n    this.source = source;\n  }\n\n  /**\n   * Returns the associated parsed file directory.\n   * @returns {Object} the parsed file directory\n   */\n  getFileDirectory() {\n    return this.fileDirectory;\n  }\n\n  /**\n   * Returns the associated parsed geo keys.\n   * @returns {Object} the parsed geo keys\n   */\n  getGeoKeys() {\n    return this.geoKeys;\n  }\n\n  /**\n   * Returns the width of the image.\n   * @returns {Number} the width of the image\n   */\n  getWidth() {\n    return this.fileDirectory.ImageWidth;\n  }\n\n  /**\n   * Returns the height of the image.\n   * @returns {Number} the height of the image\n   */\n  getHeight() {\n    return this.fileDirectory.ImageLength;\n  }\n\n  /**\n   * Returns the number of samples per pixel.\n   * @returns {Number} the number of samples per pixel\n   */\n  getSamplesPerPixel() {\n    return typeof this.fileDirectory.SamplesPerPixel !== 'undefined'\n      ? this.fileDirectory.SamplesPerPixel : 1;\n  }\n\n  /**\n   * Returns the width of each tile.\n   * @returns {Number} the width of each tile\n   */\n  getTileWidth() {\n    return this.isTiled ? this.fileDirectory.TileWidth : this.getWidth();\n  }\n\n  /**\n   * Returns the height of each tile.\n   * @returns {Number} the height of each tile\n   */\n  getTileHeight() {\n    if (this.isTiled) {\n      return this.fileDirectory.TileLength;\n    }\n    if (typeof this.fileDirectory.RowsPerStrip !== 'undefined') {\n      return Math.min(this.fileDirectory.RowsPerStrip, this.getHeight());\n    }\n    return this.getHeight();\n  }\n\n  getBlockWidth() {\n    return this.getTileWidth();\n  }\n\n  getBlockHeight(y) {\n    if (this.isTiled || (y + 1) * this.getTileHeight() <= this.getHeight()) {\n      return this.getTileHeight();\n    } else {\n      return this.getHeight() - (y * this.getTileHeight());\n    }\n  }\n\n  /**\n   * Calculates the number of bytes for each pixel across all samples. Only full\n   * bytes are supported, an exception is thrown when this is not the case.\n   * @returns {Number} the bytes per pixel\n   */\n  getBytesPerPixel() {\n    let bytes = 0;\n    for (let i = 0; i < this.fileDirectory.BitsPerSample.length; ++i) {\n      bytes += this.getSampleByteSize(i);\n    }\n    return bytes;\n  }\n\n  getSampleByteSize(i) {\n    if (i >= this.fileDirectory.BitsPerSample.length) {\n      throw new RangeError(`Sample index ${i} is out of range.`);\n    }\n    return Math.ceil(this.fileDirectory.BitsPerSample[i] / 8);\n  }\n\n  getReaderForSample(sampleIndex) {\n    const format = this.fileDirectory.SampleFormat\n      ? this.fileDirectory.SampleFormat[sampleIndex] : 1;\n    const bitsPerSample = this.fileDirectory.BitsPerSample[sampleIndex];\n    switch (format) {\n      case 1: // unsigned integer data\n        if (bitsPerSample <= 8) {\n          return DataView.prototype.getUint8;\n        } else if (bitsPerSample <= 16) {\n          return DataView.prototype.getUint16;\n        } else if (bitsPerSample <= 32) {\n          return DataView.prototype.getUint32;\n        }\n        break;\n      case 2: // twos complement signed integer data\n        if (bitsPerSample <= 8) {\n          return DataView.prototype.getInt8;\n        } else if (bitsPerSample <= 16) {\n          return DataView.prototype.getInt16;\n        } else if (bitsPerSample <= 32) {\n          return DataView.prototype.getInt32;\n        }\n        break;\n      case 3:\n        switch (bitsPerSample) {\n          case 16:\n            return function (offset, littleEndian) {\n              return getFloat16(this, offset, littleEndian);\n            };\n          case 32:\n            return DataView.prototype.getFloat32;\n          case 64:\n            return DataView.prototype.getFloat64;\n          default:\n            break;\n        }\n        break;\n      default:\n        break;\n    }\n    throw Error('Unsupported data format/bitsPerSample');\n  }\n\n  getSampleFormat(sampleIndex = 0) {\n    return this.fileDirectory.SampleFormat\n      ? this.fileDirectory.SampleFormat[sampleIndex] : 1;\n  }\n\n  getBitsPerSample(sampleIndex = 0) {\n    return this.fileDirectory.BitsPerSample[sampleIndex];\n  }\n\n  getArrayForSample(sampleIndex, size) {\n    const format = this.getSampleFormat(sampleIndex);\n    const bitsPerSample = this.getBitsPerSample(sampleIndex);\n    return arrayForType(format, bitsPerSample, size);\n  }\n\n  /**\n   * Returns the decoded strip or tile.\n   * @param {Number} x the strip or tile x-offset\n   * @param {Number} y the tile y-offset (0 for stripped images)\n   * @param {Number} sample the sample to get for separated samples\n   * @param {import(\"./geotiff\").Pool|AbstractDecoder} poolOrDecoder the decoder or decoder pool\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   * @returns {Promise.<ArrayBuffer>}\n   */\n  async getTileOrStrip(x, y, sample, poolOrDecoder, signal) {\n    const numTilesPerRow = Math.ceil(this.getWidth() / this.getTileWidth());\n    const numTilesPerCol = Math.ceil(this.getHeight() / this.getTileHeight());\n    let index;\n    const { tiles } = this;\n    if (this.planarConfiguration === 1) {\n      index = (y * numTilesPerRow) + x;\n    } else if (this.planarConfiguration === 2) {\n      index = (sample * numTilesPerRow * numTilesPerCol) + (y * numTilesPerRow) + x;\n    }\n\n    let offset;\n    let byteCount;\n    if (this.isTiled) {\n      offset = this.fileDirectory.TileOffsets[index];\n      byteCount = this.fileDirectory.TileByteCounts[index];\n    } else {\n      offset = this.fileDirectory.StripOffsets[index];\n      byteCount = this.fileDirectory.StripByteCounts[index];\n    }\n    const slice = (await this.source.fetch([{ offset, length: byteCount }], signal))[0];\n\n    let request;\n    if (tiles === null || !tiles[index]) {\n    // resolve each request by potentially applying array normalization\n      request = (async () => {\n        let data = await poolOrDecoder.decode(this.fileDirectory, slice);\n        const sampleFormat = this.getSampleFormat();\n        const bitsPerSample = this.getBitsPerSample();\n        if (needsNormalization(sampleFormat, bitsPerSample)) {\n          data = normalizeArray(\n            data,\n            sampleFormat,\n            this.planarConfiguration,\n            this.getSamplesPerPixel(),\n            bitsPerSample,\n            this.getTileWidth(),\n            this.getBlockHeight(y),\n          );\n        }\n        return data;\n      })();\n\n      // set the cache\n      if (tiles !== null) {\n        tiles[index] = request;\n      }\n    } else {\n      // get from the cache\n      request = tiles[index];\n    }\n\n    // cache the tile request\n    return { x, y, sample, data: await request };\n  }\n\n  /**\n   * Internal read function.\n   * @private\n   * @param {Array} imageWindow The image window in pixel coordinates\n   * @param {Array} samples The selected samples (0-based indices)\n   * @param {TypedArray[]|TypedArray} valueArrays The array(s) to write into\n   * @param {Boolean} interleave Whether or not to write in an interleaved manner\n   * @param {import(\"./geotiff\").Pool|AbstractDecoder} poolOrDecoder the decoder or decoder pool\n   * @param {number} width the width of window to be read into\n   * @param {number} height the height of window to be read into\n   * @param {number} resampleMethod the resampling method to be used when interpolating\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   * @returns {Promise<TypedArray[]>|Promise<TypedArray>}\n   */\n  async _readRaster(imageWindow, samples, valueArrays, interleave, poolOrDecoder, width,\n    height, resampleMethod, signal) {\n    const tileWidth = this.getTileWidth();\n    const tileHeight = this.getTileHeight();\n    const imageWidth = this.getWidth();\n    const imageHeight = this.getHeight();\n\n    const minXTile = Math.max(Math.floor(imageWindow[0] / tileWidth), 0);\n    const maxXTile = Math.min(\n      Math.ceil(imageWindow[2] / tileWidth),\n      Math.ceil(imageWidth / tileWidth),\n    );\n    const minYTile = Math.max(Math.floor(imageWindow[1] / tileHeight), 0);\n    const maxYTile = Math.min(\n      Math.ceil(imageWindow[3] / tileHeight),\n      Math.ceil(imageHeight / tileHeight),\n    );\n    const windowWidth = imageWindow[2] - imageWindow[0];\n\n    let bytesPerPixel = this.getBytesPerPixel();\n\n    const srcSampleOffsets = [];\n    const sampleReaders = [];\n    for (let i = 0; i < samples.length; ++i) {\n      if (this.planarConfiguration === 1) {\n        srcSampleOffsets.push(sum(this.fileDirectory.BitsPerSample, 0, samples[i]) / 8);\n      } else {\n        srcSampleOffsets.push(0);\n      }\n      sampleReaders.push(this.getReaderForSample(samples[i]));\n    }\n\n    const promises = [];\n    const { littleEndian } = this;\n\n    for (let yTile = minYTile; yTile < maxYTile; ++yTile) {\n      for (let xTile = minXTile; xTile < maxXTile; ++xTile) {\n        for (let sampleIndex = 0; sampleIndex < samples.length; ++sampleIndex) {\n          const si = sampleIndex;\n          const sample = samples[sampleIndex];\n          if (this.planarConfiguration === 2) {\n            bytesPerPixel = this.getSampleByteSize(sampleIndex);\n          }\n          const promise = this.getTileOrStrip(xTile, yTile, sample, poolOrDecoder, signal);\n          promises.push(promise);\n          promise.then((tile) => {\n            const buffer = tile.data;\n            const dataView = new DataView(buffer);\n            const blockHeight = this.getBlockHeight(tile.y);\n            const firstLine = tile.y * tileHeight;\n            const firstCol = tile.x * tileWidth;\n            const lastLine = firstLine + blockHeight;\n            const lastCol = (tile.x + 1) * tileWidth;\n            const reader = sampleReaders[si];\n\n            const ymax = Math.min(blockHeight, blockHeight - (lastLine - imageWindow[3]), imageHeight - firstLine);\n            const xmax = Math.min(tileWidth, tileWidth - (lastCol - imageWindow[2]), imageWidth - firstCol);\n\n            for (let y = Math.max(0, imageWindow[1] - firstLine); y < ymax; ++y) {\n              for (let x = Math.max(0, imageWindow[0] - firstCol); x < xmax; ++x) {\n                const pixelOffset = ((y * tileWidth) + x) * bytesPerPixel;\n                const value = reader.call(\n                  dataView, pixelOffset + srcSampleOffsets[si], littleEndian,\n                );\n                let windowCoordinate;\n                if (interleave) {\n                  windowCoordinate = ((y + firstLine - imageWindow[1]) * windowWidth * samples.length)\n                    + ((x + firstCol - imageWindow[0]) * samples.length)\n                    + si;\n                  valueArrays[windowCoordinate] = value;\n                } else {\n                  windowCoordinate = (\n                    (y + firstLine - imageWindow[1]) * windowWidth\n                  ) + x + firstCol - imageWindow[0];\n                  valueArrays[si][windowCoordinate] = value;\n                }\n              }\n            }\n          });\n        }\n      }\n    }\n    await Promise.all(promises);\n\n    if ((width && (imageWindow[2] - imageWindow[0]) !== width)\n        || (height && (imageWindow[3] - imageWindow[1]) !== height)) {\n      let resampled;\n      if (interleave) {\n        resampled = resampleInterleaved(\n          valueArrays,\n          imageWindow[2] - imageWindow[0],\n          imageWindow[3] - imageWindow[1],\n          width, height,\n          samples.length,\n          resampleMethod,\n        );\n      } else {\n        resampled = resample(\n          valueArrays,\n          imageWindow[2] - imageWindow[0],\n          imageWindow[3] - imageWindow[1],\n          width, height,\n          resampleMethod,\n        );\n      }\n      resampled.width = width;\n      resampled.height = height;\n      return resampled;\n    }\n\n    valueArrays.width = width || imageWindow[2] - imageWindow[0];\n    valueArrays.height = height || imageWindow[3] - imageWindow[1];\n\n    return valueArrays;\n  }\n\n  /**\n   * Reads raster data from the image. This function reads all selected samples\n   * into separate arrays of the correct type for that sample or into a single\n   * combined array when `interleave` is set. When provided, only a subset\n   * of the raster is read for each sample.\n   *\n   * @param {ReadRasterOptions} [options={}] optional parameters\n   * @returns {Promise.<(TypedArray|TypedArray[])>} the decoded arrays as a promise\n   */\n  async readRasters({\n    window: wnd, samples = [], interleave, pool = null,\n    width, height, resampleMethod, fillValue, signal,\n  } = {}) {\n    const imageWindow = wnd || [0, 0, this.getWidth(), this.getHeight()];\n\n    // check parameters\n    if (imageWindow[0] > imageWindow[2] || imageWindow[1] > imageWindow[3]) {\n      throw new Error('Invalid subsets');\n    }\n\n    const imageWindowWidth = imageWindow[2] - imageWindow[0];\n    const imageWindowHeight = imageWindow[3] - imageWindow[1];\n    const numPixels = imageWindowWidth * imageWindowHeight;\n    const samplesPerPixel = this.getSamplesPerPixel();\n\n    if (!samples || !samples.length) {\n      for (let i = 0; i < samplesPerPixel; ++i) {\n        samples.push(i);\n      }\n    } else {\n      for (let i = 0; i < samples.length; ++i) {\n        if (samples[i] >= samplesPerPixel) {\n          return Promise.reject(new RangeError(`Invalid sample index '${samples[i]}'.`));\n        }\n      }\n    }\n    let valueArrays;\n    if (interleave) {\n      const format = this.fileDirectory.SampleFormat\n        ? Math.max.apply(null, this.fileDirectory.SampleFormat) : 1;\n      const bitsPerSample = Math.max.apply(null, this.fileDirectory.BitsPerSample);\n      valueArrays = arrayForType(format, bitsPerSample, numPixels * samples.length);\n      if (fillValue) {\n        valueArrays.fill(fillValue);\n      }\n    } else {\n      valueArrays = [];\n      for (let i = 0; i < samples.length; ++i) {\n        const valueArray = this.getArrayForSample(samples[i], numPixels);\n        if (Array.isArray(fillValue) && i < fillValue.length) {\n          valueArray.fill(fillValue[i]);\n        } else if (fillValue && !Array.isArray(fillValue)) {\n          valueArray.fill(fillValue);\n        }\n        valueArrays.push(valueArray);\n      }\n    }\n\n    const poolOrDecoder = pool || await getDecoder(this.fileDirectory);\n\n    const result = await this._readRaster(\n      imageWindow, samples, valueArrays, interleave, poolOrDecoder, width, height, resampleMethod, signal,\n    );\n    return result;\n  }\n\n  /**\n   * Reads raster data from the image as RGB. The result is always an\n   * interleaved typed array.\n   * Colorspaces other than RGB will be transformed to RGB, color maps expanded.\n   * When no other method is applicable, the first sample is used to produce a\n   * greayscale image.\n   * When provided, only a subset of the raster is read for each sample.\n   *\n   * @param {Object} [options] optional parameters\n   * @param {Array<number>} [options.window] the subset to read data from in pixels.\n   * @param {boolean} [options.interleave=true] whether the data shall be read\n   *                                             in one single array or separate\n   *                                             arrays.\n   * @param {import(\"./geotiff\").Pool} [options.pool=null] The optional decoder pool to use.\n   * @param {number} [options.width] The desired width of the output. When the width is no the\n   *                                 same as the images, resampling will be performed.\n   * @param {number} [options.height] The desired height of the output. When the width is no the\n   *                                  same as the images, resampling will be performed.\n   * @param {string} [options.resampleMethod='nearest'] The desired resampling method.\n   * @param {boolean} [options.enableAlpha=false] Enable reading alpha channel if present.\n   * @param {AbortSignal} [options.signal] An AbortSignal that may be signalled if the request is\n   *                                       to be aborted\n   * @returns {Promise<TypedArray|TypedArray[]>} the RGB array as a Promise\n   */\n  async readRGB({ window, interleave = true, pool = null, width, height,\n    resampleMethod, enableAlpha = false, signal } = {}) {\n    const imageWindow = window || [0, 0, this.getWidth(), this.getHeight()];\n\n    // check parameters\n    if (imageWindow[0] > imageWindow[2] || imageWindow[1] > imageWindow[3]) {\n      throw new Error('Invalid subsets');\n    }\n\n    const pi = this.fileDirectory.PhotometricInterpretation;\n\n    if (pi === photometricInterpretations.RGB) {\n      let s = [0, 1, 2];\n      if ((!(this.fileDirectory.ExtraSamples === ExtraSamplesValues.Unspecified)) && enableAlpha) {\n        s = [];\n        for (let i = 0; i < this.fileDirectory.BitsPerSample.length; i += 1) {\n          s.push(i);\n        }\n      }\n      return this.readRasters({\n        window,\n        interleave,\n        samples: s,\n        pool,\n        width,\n        height,\n        resampleMethod,\n        signal,\n      });\n    }\n\n    let samples;\n    switch (pi) {\n      case photometricInterpretations.WhiteIsZero:\n      case photometricInterpretations.BlackIsZero:\n      case photometricInterpretations.Palette:\n        samples = [0];\n        break;\n      case photometricInterpretations.CMYK:\n        samples = [0, 1, 2, 3];\n        break;\n      case photometricInterpretations.YCbCr:\n      case photometricInterpretations.CIELab:\n        samples = [0, 1, 2];\n        break;\n      default:\n        throw new Error('Invalid or unsupported photometric interpretation.');\n    }\n\n    const subOptions = {\n      window: imageWindow,\n      interleave: true,\n      samples,\n      pool,\n      width,\n      height,\n      resampleMethod,\n      signal,\n    };\n    const { fileDirectory } = this;\n    const raster = await this.readRasters(subOptions);\n\n    const max = 2 ** this.fileDirectory.BitsPerSample[0];\n    let data;\n    switch (pi) {\n      case photometricInterpretations.WhiteIsZero:\n        data = fromWhiteIsZero(raster, max);\n        break;\n      case photometricInterpretations.BlackIsZero:\n        data = fromBlackIsZero(raster, max);\n        break;\n      case photometricInterpretations.Palette:\n        data = fromPalette(raster, fileDirectory.ColorMap);\n        break;\n      case photometricInterpretations.CMYK:\n        data = fromCMYK(raster);\n        break;\n      case photometricInterpretations.YCbCr:\n        data = fromYCbCr(raster);\n        break;\n      case photometricInterpretations.CIELab:\n        data = fromCIELab(raster);\n        break;\n      default:\n        throw new Error('Unsupported photometric interpretation.');\n    }\n\n    // if non-interleaved data is requested, we must split the channels\n    // into their respective arrays\n    if (!interleave) {\n      const red = new Uint8Array(data.length / 3);\n      const green = new Uint8Array(data.length / 3);\n      const blue = new Uint8Array(data.length / 3);\n      for (let i = 0, j = 0; i < data.length; i += 3, ++j) {\n        red[j] = data[i];\n        green[j] = data[i + 1];\n        blue[j] = data[i + 2];\n      }\n      data = [red, green, blue];\n    }\n\n    data.width = raster.width;\n    data.height = raster.height;\n    return data;\n  }\n\n  /**\n   * Returns an array of tiepoints.\n   * @returns {Object[]}\n   */\n  getTiePoints() {\n    if (!this.fileDirectory.ModelTiepoint) {\n      return [];\n    }\n\n    const tiePoints = [];\n    for (let i = 0; i < this.fileDirectory.ModelTiepoint.length; i += 6) {\n      tiePoints.push({\n        i: this.fileDirectory.ModelTiepoint[i],\n        j: this.fileDirectory.ModelTiepoint[i + 1],\n        k: this.fileDirectory.ModelTiepoint[i + 2],\n        x: this.fileDirectory.ModelTiepoint[i + 3],\n        y: this.fileDirectory.ModelTiepoint[i + 4],\n        z: this.fileDirectory.ModelTiepoint[i + 5],\n      });\n    }\n    return tiePoints;\n  }\n\n  /**\n   * Returns the parsed GDAL metadata items.\n   *\n   * If sample is passed to null, dataset-level metadata will be returned.\n   * Otherwise only metadata specific to the provided sample will be returned.\n   *\n   * @param {number} [sample=null] The sample index.\n   * @returns {Object}\n   */\n  getGDALMetadata(sample = null) {\n    const metadata = {};\n    if (!this.fileDirectory.GDAL_METADATA) {\n      return null;\n    }\n    const string = this.fileDirectory.GDAL_METADATA;\n\n    let items = findTagsByName(string, 'Item');\n\n    if (sample === null) {\n      items = items.filter((item) => getAttribute(item, 'sample') === undefined);\n    } else {\n      items = items.filter((item) => Number(getAttribute(item, 'sample')) === sample);\n    }\n\n    for (let i = 0; i < items.length; ++i) {\n      const item = items[i];\n      metadata[getAttribute(item, 'name')] = item.inner;\n    }\n    return metadata;\n  }\n\n  /**\n   * Returns the GDAL nodata value\n   * @returns {number|null}\n   */\n  getGDALNoData() {\n    if (!this.fileDirectory.GDAL_NODATA) {\n      return null;\n    }\n    const string = this.fileDirectory.GDAL_NODATA;\n    return Number(string.substring(0, string.length - 1));\n  }\n\n  /**\n   * Returns the image origin as a XYZ-vector. When the image has no affine\n   * transformation, then an exception is thrown.\n   * @returns {Array<number>} The origin as a vector\n   */\n  getOrigin() {\n    const tiePoints = this.fileDirectory.ModelTiepoint;\n    const modelTransformation = this.fileDirectory.ModelTransformation;\n    if (tiePoints && tiePoints.length === 6) {\n      return [\n        tiePoints[3],\n        tiePoints[4],\n        tiePoints[5],\n      ];\n    }\n    if (modelTransformation) {\n      return [\n        modelTransformation[3],\n        modelTransformation[7],\n        modelTransformation[11],\n      ];\n    }\n    throw new Error('The image does not have an affine transformation.');\n  }\n\n  /**\n   * Returns the image resolution as a XYZ-vector. When the image has no affine\n   * transformation, then an exception is thrown.\n   * @param {GeoTIFFImage} [referenceImage=null] A reference image to calculate the resolution from\n   *                                             in cases when the current image does not have the\n   *                                             required tags on its own.\n   * @returns {Array<number>} The resolution as a vector\n   */\n  getResolution(referenceImage = null) {\n    const modelPixelScale = this.fileDirectory.ModelPixelScale;\n    const modelTransformation = this.fileDirectory.ModelTransformation;\n\n    if (modelPixelScale) {\n      return [\n        modelPixelScale[0],\n        -modelPixelScale[1],\n        modelPixelScale[2],\n      ];\n    }\n    if (modelTransformation) {\n      return [\n        modelTransformation[0],\n        modelTransformation[5],\n        modelTransformation[10],\n      ];\n    }\n\n    if (referenceImage) {\n      const [refResX, refResY, refResZ] = referenceImage.getResolution();\n      return [\n        refResX * referenceImage.getWidth() / this.getWidth(),\n        refResY * referenceImage.getHeight() / this.getHeight(),\n        refResZ * referenceImage.getWidth() / this.getWidth(),\n      ];\n    }\n\n    throw new Error('The image does not have an affine transformation.');\n  }\n\n  /**\n   * Returns whether or not the pixels of the image depict an area (or point).\n   * @returns {Boolean} Whether the pixels are a point\n   */\n  pixelIsArea() {\n    return this.geoKeys.GTRasterTypeGeoKey === 1;\n  }\n\n  /**\n   * Returns the image bounding box as an array of 4 values: min-x, min-y,\n   * max-x and max-y. When the image has no affine transformation, then an\n   * exception is thrown.\n   * @returns {Array<number>} The bounding box\n   */\n  getBoundingBox() {\n    const origin = this.getOrigin();\n    const resolution = this.getResolution();\n\n    const x1 = origin[0];\n    const y1 = origin[1];\n\n    const x2 = x1 + (resolution[0] * this.getWidth());\n    const y2 = y1 + (resolution[1] * this.getHeight());\n\n    return [\n      Math.min(x1, x2),\n      Math.min(y1, y2),\n      Math.max(x1, x2),\n      Math.max(y1, y2),\n    ];\n  }\n}\n\nexport default GeoTIFFImage;\n","export const fieldTagNames = {\n  // TIFF Baseline\n  0x013B: 'Artist',\n  0x0102: 'BitsPerSample',\n  0x0109: 'CellLength',\n  0x0108: 'CellWidth',\n  0x0140: 'ColorMap',\n  0x0103: 'Compression',\n  0x8298: 'Copyright',\n  0x0132: 'DateTime',\n  0x0152: 'ExtraSamples',\n  0x010A: 'FillOrder',\n  0x0121: 'FreeByteCounts',\n  0x0120: 'FreeOffsets',\n  0x0123: 'GrayResponseCurve',\n  0x0122: 'GrayResponseUnit',\n  0x013C: 'HostComputer',\n  0x010E: 'ImageDescription',\n  0x0101: 'ImageLength',\n  0x0100: 'ImageWidth',\n  0x010F: 'Make',\n  0x0119: 'MaxSampleValue',\n  0x0118: 'MinSampleValue',\n  0x0110: 'Model',\n  0x00FE: 'NewSubfileType',\n  0x0112: 'Orientation',\n  0x0106: 'PhotometricInterpretation',\n  0x011C: 'PlanarConfiguration',\n  0x0128: 'ResolutionUnit',\n  0x0116: 'RowsPerStrip',\n  0x0115: 'SamplesPerPixel',\n  0x0131: 'Software',\n  0x0117: 'StripByteCounts',\n  0x0111: 'StripOffsets',\n  0x00FF: 'SubfileType',\n  0x0107: 'Threshholding',\n  0x011A: 'XResolution',\n  0x011B: 'YResolution',\n\n  // TIFF Extended\n  0x0146: 'BadFaxLines',\n  0x0147: 'CleanFaxData',\n  0x0157: 'ClipPath',\n  0x0148: 'ConsecutiveBadFaxLines',\n  0x01B1: 'Decode',\n  0x01B2: 'DefaultImageColor',\n  0x010D: 'DocumentName',\n  0x0150: 'DotRange',\n  0x0141: 'HalftoneHints',\n  0x015A: 'Indexed',\n  0x015B: 'JPEGTables',\n  0x011D: 'PageName',\n  0x0129: 'PageNumber',\n  0x013D: 'Predictor',\n  0x013F: 'PrimaryChromaticities',\n  0x0214: 'ReferenceBlackWhite',\n  0x0153: 'SampleFormat',\n  0x0154: 'SMinSampleValue',\n  0x0155: 'SMaxSampleValue',\n  0x022F: 'StripRowCounts',\n  0x014A: 'SubIFDs',\n  0x0124: 'T4Options',\n  0x0125: 'T6Options',\n  0x0145: 'TileByteCounts',\n  0x0143: 'TileLength',\n  0x0144: 'TileOffsets',\n  0x0142: 'TileWidth',\n  0x012D: 'TransferFunction',\n  0x013E: 'WhitePoint',\n  0x0158: 'XClipPathUnits',\n  0x011E: 'XPosition',\n  0x0211: 'YCbCrCoefficients',\n  0x0213: 'YCbCrPositioning',\n  0x0212: 'YCbCrSubSampling',\n  0x0159: 'YClipPathUnits',\n  0x011F: 'YPosition',\n\n  // EXIF\n  0x9202: 'ApertureValue',\n  0xA001: 'ColorSpace',\n  0x9004: 'DateTimeDigitized',\n  0x9003: 'DateTimeOriginal',\n  0x8769: 'Exif IFD',\n  0x9000: 'ExifVersion',\n  0x829A: 'ExposureTime',\n  0xA300: 'FileSource',\n  0x9209: 'Flash',\n  0xA000: 'FlashpixVersion',\n  0x829D: 'FNumber',\n  0xA420: 'ImageUniqueID',\n  0x9208: 'LightSource',\n  0x927C: 'MakerNote',\n  0x9201: 'ShutterSpeedValue',\n  0x9286: 'UserComment',\n\n  // IPTC\n  0x83BB: 'IPTC',\n\n  // ICC\n  0x8773: 'ICC Profile',\n\n  // XMP\n  0x02BC: 'XMP',\n\n  // GDAL\n  0xA480: 'GDAL_METADATA',\n  0xA481: 'GDAL_NODATA',\n\n  // Photoshop\n  0x8649: 'Photoshop',\n\n  // GeoTiff\n  0x830E: 'ModelPixelScale',\n  0x8482: 'ModelTiepoint',\n  0x85D8: 'ModelTransformation',\n  0x87AF: 'GeoKeyDirectory',\n  0x87B0: 'GeoDoubleParams',\n  0x87B1: 'GeoAsciiParams',\n\n  // LERC\n  0xC5F2: 'LercParameters',\n};\n\nexport const fieldTags = {};\nfor (const key in fieldTagNames) {\n  if (fieldTagNames.hasOwnProperty(key)) {\n    fieldTags[fieldTagNames[key]] = parseInt(key, 10);\n  }\n}\n\nexport const fieldTagTypes = {\n  256: 'SHORT',\n  257: 'SHORT',\n  258: 'SHORT',\n  259: 'SHORT',\n  262: 'SHORT',\n  273: 'LONG',\n  274: 'SHORT',\n  277: 'SHORT',\n  278: 'LONG',\n  279: 'LONG',\n  282: 'RATIONAL',\n  283: 'RATIONAL',\n  284: 'SHORT',\n  286: 'SHORT',\n  287: 'RATIONAL',\n  296: 'SHORT',\n  297: 'SHORT',\n  305: 'ASCII',\n  306: 'ASCII',\n  338: 'SHORT',\n  339: 'SHORT',\n  513: 'LONG',\n  514: 'LONG',\n  1024: 'SHORT',\n  1025: 'SHORT',\n  2048: 'SHORT',\n  2049: 'ASCII',\n  3072: 'SHORT',\n  3073: 'ASCII',\n  33550: 'DOUBLE',\n  33922: 'DOUBLE',\n  34665: 'LONG',\n  34735: 'SHORT',\n  34737: 'ASCII',\n  42113: 'ASCII',\n};\n\nexport const arrayFields = [\n  fieldTags.BitsPerSample,\n  fieldTags.ExtraSamples,\n  fieldTags.SampleFormat,\n  fieldTags.StripByteCounts,\n  fieldTags.StripOffsets,\n  fieldTags.StripRowCounts,\n  fieldTags.TileByteCounts,\n  fieldTags.TileOffsets,\n  fieldTags.SubIFDs,\n];\n\nexport const fieldTypeNames = {\n  0x0001: 'BYTE',\n  0x0002: 'ASCII',\n  0x0003: 'SHORT',\n  0x0004: 'LONG',\n  0x0005: 'RATIONAL',\n  0x0006: 'SBYTE',\n  0x0007: 'UNDEFINED',\n  0x0008: 'SSHORT',\n  0x0009: 'SLONG',\n  0x000A: 'SRATIONAL',\n  0x000B: 'FLOAT',\n  0x000C: 'DOUBLE',\n  // IFD offset, suggested by https://owl.phy.queensu.ca/~phil/exiftool/standards.html\n  0x000D: 'IFD',\n  // introduced by BigTIFF\n  0x0010: 'LONG8',\n  0x0011: 'SLONG8',\n  0x0012: 'IFD8',\n};\n\nexport const fieldTypes = {};\nfor (const key in fieldTypeNames) {\n  if (fieldTypeNames.hasOwnProperty(key)) {\n    fieldTypes[fieldTypeNames[key]] = parseInt(key, 10);\n  }\n}\n\nexport const photometricInterpretations = {\n  WhiteIsZero: 0,\n  BlackIsZero: 1,\n  RGB: 2,\n  Palette: 3,\n  TransparencyMask: 4,\n  CMYK: 5,\n  YCbCr: 6,\n\n  CIELab: 8,\n  ICCLab: 9,\n};\n\nexport const ExtraSamplesValues = {\n  Unspecified: 0,\n  Assocalpha: 1,\n  Unassalpha: 2,\n};\n\nexport const LercParameters = {\n  Version: 0,\n  AddCompression: 1,\n};\n\nexport const LercAddCompression = {\n  None: 0,\n  Deflate: 1,\n};\n\nexport const geoKeyNames = {\n  1024: 'GTModelTypeGeoKey',\n  1025: 'GTRasterTypeGeoKey',\n  1026: 'GTCitationGeoKey',\n  2048: 'GeographicTypeGeoKey',\n  2049: 'GeogCitationGeoKey',\n  2050: 'GeogGeodeticDatumGeoKey',\n  2051: 'GeogPrimeMeridianGeoKey',\n  2052: 'GeogLinearUnitsGeoKey',\n  2053: 'GeogLinearUnitSizeGeoKey',\n  2054: 'GeogAngularUnitsGeoKey',\n  2055: 'GeogAngularUnitSizeGeoKey',\n  2056: 'GeogEllipsoidGeoKey',\n  2057: 'GeogSemiMajorAxisGeoKey',\n  2058: 'GeogSemiMinorAxisGeoKey',\n  2059: 'GeogInvFlatteningGeoKey',\n  2060: 'GeogAzimuthUnitsGeoKey',\n  2061: 'GeogPrimeMeridianLongGeoKey',\n  2062: 'GeogTOWGS84GeoKey',\n  3072: 'ProjectedCSTypeGeoKey',\n  3073: 'PCSCitationGeoKey',\n  3074: 'ProjectionGeoKey',\n  3075: 'ProjCoordTransGeoKey',\n  3076: 'ProjLinearUnitsGeoKey',\n  3077: 'ProjLinearUnitSizeGeoKey',\n  3078: 'ProjStdParallel1GeoKey',\n  3079: 'ProjStdParallel2GeoKey',\n  3080: 'ProjNatOriginLongGeoKey',\n  3081: 'ProjNatOriginLatGeoKey',\n  3082: 'ProjFalseEastingGeoKey',\n  3083: 'ProjFalseNorthingGeoKey',\n  3084: 'ProjFalseOriginLongGeoKey',\n  3085: 'ProjFalseOriginLatGeoKey',\n  3086: 'ProjFalseOriginEastingGeoKey',\n  3087: 'ProjFalseOriginNorthingGeoKey',\n  3088: 'ProjCenterLongGeoKey',\n  3089: 'ProjCenterLatGeoKey',\n  3090: 'ProjCenterEastingGeoKey',\n  3091: 'ProjCenterNorthingGeoKey',\n  3092: 'ProjScaleAtNatOriginGeoKey',\n  3093: 'ProjScaleAtCenterGeoKey',\n  3094: 'ProjAzimuthAngleGeoKey',\n  3095: 'ProjStraightVertPoleLongGeoKey',\n  3096: 'ProjRectifiedGridAngleGeoKey',\n  4096: 'VerticalCSTypeGeoKey',\n  4097: 'VerticalCitationGeoKey',\n  4098: 'VerticalDatumGeoKey',\n  4099: 'VerticalUnitsGeoKey',\n};\n\nexport const geoKeys = {};\nfor (const key in geoKeyNames) {\n  if (geoKeyNames.hasOwnProperty(key)) {\n    geoKeys[geoKeyNames[key]] = parseInt(key, 10);\n  }\n}\n"],"names":["registry","Map","addDecoder","cases","importFn","Array","isArray","forEach","c","set","async","getDecoder","fileDirectory","get","Compression","Error","Decoder","undefined","then","m","default","DataView64","constructor","arrayBuffer","this","_dataView","DataView","buffer","getUint64","offset","littleEndian","left","getUint32","right","combined","Number","isSafeInteger","getInt64","value","isNegative","getUint8","carrying","i","byte","getInt8","getUint16","getInt16","getInt32","getFloat16","g","getFloat32","getFloat64","DataSlice","sliceOffset","bigTiff","_sliceOffset","_littleEndian","_bigTiff","sliceTop","byteLength","covers","length","readUint8","readInt8","readUint16","readInt16","readUint32","readInt32","readFloat32","readFloat64","readUint64","readInt64","readOffset","CRLFCRLF","itemsToObject","items","Object","fromEntries","obj","key","toLowerCase","parseHeaders","text","split","map","line","kv","str","trim","parseContentType","rawContentType","type","rawParams","s","paramsItems","param","params","parseContentRange","rawContentRange","start","end","total","match","parseInt","parseByteRanges","responseArrayBuffer","boundary","decoder","TextDecoder","out","startBoundary","endBoundary","decode","Uint8Array","Math","min","startsWith","innerText","substr","endOfHeaders","indexOf","headers","startOfData","push","data","slice","fileSize","BaseSource","slices","signal","Promise","all","fetchSlice","wait","milliseconds","resolve","setTimeout","zip","a","b","A","from","B","k","AbortError","super","captureStackTrace","name","CustomAggregateError","errors","message","AggregateError","Block","top","BlockGroup","blockIds","BlockedSource","source","blockSize","cacheSize","blockCache","max","blockRequests","blockIdsToFetch","Set","cachedBlocks","missingBlockIds","firstBlockOffset","floor","current","blockId","has","add","fetchBlocks","block","cachedBlock","results","allSettled","values","some","result","status","retriedBlockRequests","keys","rejected","reason","aborted","filter","requiredBlocks","readSliceData","size","groups","groupBlocks","groupRequests","fetch","groupIndex","group","blockRequest","response","blockOffset","o","t","err","delete","clear","sortedBlockIds","sort","lastBlockId","blocks","blockIdLow","blockIdHigh","sliceData","ArrayBuffer","sliceView","delta","topDelta","usedBlockLength","blockInnerOffset","rangeInnerOffset","blockView","BaseResponse","ok","getHeader","headerName","BaseClient","url","credentials","FetchResponse","FetchClient","XHRResponse","xhr","getResponseHeader","XHRClient","constructRequest","reject","XMLHttpRequest","open","responseType","entries","setRequestHeader","onload","onerror","onabort","send","abort","addEventListener","HttpResponse","dataPromise","statusCode","HttpClient","parsedUrl","httpApi","protocol","request","resolveData","chunks","on","chunk","Buffer","concat","destroy","RemoteSource","client","maxRanges","allowFullFile","_fileSize","fetchSlices","Range","join","byteRanges","getData","first","others","maybeWrapInBlockedSource","makeFetchSource","blockOptions","makeXHRSource","makeHttpSource","makeRemoteSource","forceXHR","clientOptions","FileReaderSource","file","blob","reader","FileReader","event","target","readAsArrayBuffer","makeFileReaderSource","getFieldTypeLength","fieldType","RangeError","parseGeoKeyDirectory","rawGeoKeyDirectory","GeoKeyDirectory","geoKeyDirectory","location","count","substring","subarray","getValues","dataSlice","readMethod","fieldTypeLength","Int8Array","Uint16Array","Int16Array","Uint32Array","Int32Array","Float32Array","Float64Array","call","ImageFileDirectory","nextIFDByteOffset","GeoTIFFImageIndexError","index","GeoTIFFBase","options","window","imageWindow","width","height","resX","resY","bbox","firstImage","getImage","usedImage","imageCount","getImageCount","imgBBox","getBoundingBox","oX","oY","getOrigin","rX","rY","getResolution","usedBBox","allImages","image","SubfileType","subfileType","NewSubfileType","newSubfileType","getWidth","imgResX","imgResY","getHeight","wnd","imageResX","imageResY","round","readRasters","GeoTIFF","firstIFDOffset","cache","ifdRequests","ghostValues","fallbackSize","entrySize","offsetSize","getSlice","numDirEntries","byteSize","entryCount","fieldTag","typeCount","fieldValues","valueOffset","actualOffset","fieldDataSlice","parseFileDirectoryAt","requestIFD","e","previousIfd","ifd","dataView","hasNext","detectionString","heuristicAreaSize","valuesString","firstLine","metadataSize","fullString","static","headerData","BOM","TypeError","magicNumber","offsetByteSize","close","MultiGeoTIFF","mainFile","overviewFiles","imageFiles","fileDirectoriesPerFile","fileDirectoriesPerFileParsing","requests","parseFileDirectoriesPerFile","visited","relativeIndex","imageFile","ii","imageCounts","reduce","ifds","fromUrl","fromSource","fromBlob","fromUrls","mainUrl","overviewUrls","fromWhiteIsZero","raster","rgbRaster","j","fromBlackIsZero","fromPalette","colorMap","greenOffset","blueOffset","mapIndex","fromCMYK","cmykRaster","y","fromYCbCr","yCbCrRaster","Uint8ClampedArray","cb","cr","Xn","Yn","Zn","fromCIELab","cieLabRaster","L","a_","b_","r","x","z","copyNewSize","array","samplesPerPixel","getPrototypeOf","resampleNearest","valueArrays","inWidth","inHeight","outWidth","outHeight","relX","relY","newArray","cy","cx","lerp","v0","v1","resampleBilinear","rawY","yl","yh","ceil","rawX","tx","xl","xh","ll","hl","lh","hh","resample","method","resampleNearestInterleaved","valueArray","samples","resampleBilinearInterleaved","resampleInterleaved","sum","arrayForType","format","bitsPerSample","needsNormalization","normalizeArray","inBuffer","planarConfiguration","tileWidth","tileHeight","view","outSize","samplesToTransfer","outArray","bitMask","repeat","pixelBitSkip","bitsPerLine","lineBitOffset","pixelBitOffset","bitOffset","outIndex","byteOffset","innerBitOffset","raw","GeoTIFFImage","geoKeys","tiles","isTiled","StripOffsets","PlanarConfiguration","getFileDirectory","getGeoKeys","ImageWidth","ImageLength","getSamplesPerPixel","SamplesPerPixel","getTileWidth","TileWidth","getTileHeight","TileLength","RowsPerStrip","getBlockWidth","getBlockHeight","getBytesPerPixel","bytes","BitsPerSample","getSampleByteSize","getReaderForSample","sampleIndex","SampleFormat","prototype","getSampleFormat","getBitsPerSample","getArrayForSample","sample","poolOrDecoder","numTilesPerRow","numTilesPerCol","byteCount","TileOffsets","TileByteCounts","StripByteCounts","sampleFormat","interleave","resampleMethod","imageWidth","imageHeight","minXTile","maxXTile","minYTile","maxYTile","windowWidth","bytesPerPixel","srcSampleOffsets","sampleReaders","promises","yTile","xTile","si","promise","getTileOrStrip","tile","blockHeight","firstCol","lastLine","lastCol","ymax","xmax","pixelOffset","windowCoordinate","resampled","pool","fillValue","imageWindowWidth","imageWindowHeight","numPixels","apply","fill","_readRaster","enableAlpha","pi","PhotometricInterpretation","ExtraSamples","subOptions","ColorMap","red","green","blue","getTiePoints","ModelTiepoint","tiePoints","getGDALMetadata","metadata","GDAL_METADATA","string","item","inner","getGDALNoData","GDAL_NODATA","modelTransformation","ModelTransformation","referenceImage","modelPixelScale","ModelPixelScale","refResX","refResY","refResZ","pixelIsArea","GTRasterTypeGeoKey","origin","resolution","x1","y1","x2","y2","fieldTagNames","fieldTags","hasOwnProperty","arrayFields","StripRowCounts","SubIFDs","fieldTypeNames","fieldTypes","photometricInterpretations","WhiteIsZero","BlackIsZero","RGB","Palette","TransparencyMask","CMYK","YCbCr","CIELab","ICCLab","ExtraSamplesValues","Unspecified","Assocalpha","Unassalpha","LercParameters","Version","AddCompression","LercAddCompression","None","Deflate","geoKeyNames"],"sourceRoot":""}