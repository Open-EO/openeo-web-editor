{"version":3,"file":"js/chunk-vendors-cc55566b.87b543d0.js","mappings":"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","sources":["webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/error.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/errorlist.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/jsonschema.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/keywords.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/main.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/node.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/process.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/processgraph.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/registry.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/utils.js"],"sourcesContent":["const Utils = require('./utils');\n\nconst MESSAGES = {\n\t\"MultipleResultNodes\": \"Multiple result nodes specified for the process.\",\n\t\"StartNodeMissing\": \"No start nodes found for the process.\",\n\t\"ResultNodeMissing\": \"No result node found for the process.\",\n\t\"ReferencedNodeMissing\": \"Referenced process node '{node_id}' doesn't exist.\",\n\t\"NodeIdInvalid\": \"Invalid node id specified in the process.\",\n\t\"NodeInvalid\": \"Process node '{node_id}' is not a valid object.\",\n\t\"ProcessIdMissing\": \"Process node '{node_id}' doesn't contain a process id.\",\n\t\"ProcessGraphParameterMissing\": \"Invalid parameter '{argument}' referenced in process node '{node_id}' (process: {process_id}, namespace: {namespace}).\",\n\t\"ProcessUnsupported\": \"Process '{process}' (namespace: {namespace}) is not supported.\",\n\t\"ProcessArgumentUnsupported\": \"Process '{process}' (namespace: {namespace}) does not support the following arguments: {arguments}\",\n\t\"ProcessArgumentRequired\": \"Process '{process}' (namespace: {namespace}) requires argument '{argument}'.\",\n\t\"ProcessArgumentInvalid\": \"The argument '{argument}' in process '{process}' (namespace: {namespace}) is invalid: {reason}\",\n\t\"ProcessGraphMissing\": \"No process graph specified\",\n\t\"ProcessMissing\": \"No process specified\"\n};\n\n/**\n * An error class for this library.\n * \n * @class\n */\nclass ProcessGraphError extends Error {\n\n\tconstructor(codeOrMsg, variables = {}) {\n\t\tsuper();\n\t\tthis.variables = variables;\n\t\tif (typeof MESSAGES[codeOrMsg] === 'string') {\n\t\t\tthis.code = codeOrMsg;\n\t\t\tthis.message = Utils.replacePlaceholders(MESSAGES[codeOrMsg], variables);\n\t\t}\n\t\telse {\n\t\t\tthis.code = codeOrMsg.replace(/[^\\w\\d]+/g, '');\n\t\t\tthis.message = codeOrMsg;\n\t\t}\n\t}\n\n\ttoJSON() {\n\t\treturn {\n\t\t\tcode: this.code,\n\t\t\tmessage: this.message\n\t\t};\n\t}\n\n}\n\nmodule.exports = ProcessGraphError;","/**\n * A list of errors.\n * \n * @class\n */\nclass ErrorList {\n\n\tconstructor() {\n\t\tthis.errors = [];\n\t}\n\n\tfirst() {\n\t\treturn this.errors[0] || null;\n\t}\n\n\tlast() {\n\t\treturn this.errors[this.errors.length-1] || null;\n\t}\n\n\tmerge(errorList) {\n\t\tthis.errors = this.errors.concat(errorList.getAll());\n\t}\n\t\n\tadd(error) {\n\t\tthis.errors.push(error);\n\t}\n\n\tcount() {\n\t\treturn this.errors.length;\n\t}\n\n\ttoJSON() {\n\t\treturn this.errors.map(e => {\n\t\t\tif (typeof e.toJSON === 'function') {\n\t\t\t\treturn e.toJSON();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn {\n\t\t\t\t\tcode: 'InternalError',\n\t\t\t\t\tmessage: e.message\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t}\n\n\tgetMessage() {\n\t\tvar msg = '';\n\t\tfor (var i in this.errors) {\n\t\t\tmsg += (parseInt(i, 10)+1) + \". \" + this.errors[i].message + \"\\r\\n\";\n\t\t}\n\t\treturn msg.trim();\n\t}\n\n\tgetAll() {\n\t\treturn this.errors;\n\t}\n\n}\n\nmodule.exports = ErrorList;","const Ajv = require('ajv');\nconst Utils = require('./utils');\nconst ProcessUtils = require('@openeo/js-commons/src/processUtils.js');\nconst keywords = require('./keywords');\n\nvar geoJsonSchema = require(\"../assets/GeoJSON.json\");\nvar subtypeSchemas = require(\"../assets/subtype-schemas.json\");\n\n/**\n * JSON Schema Validator.\n * \n * @class\n */\nclass JsonSchemaValidator {\n\n\tconstructor() {\n\t\tthis.ajv = new Ajv({\n\t\t\tschemaId: 'auto',\n\t\t\tformat: 'full',\n\t\t\taddUsedSchema: false\n\t\t});\n\t\t// Add subtype + GeoJSON schemas\n\t\tthis.ajv.addSchema(geoJsonSchema);\n\t\t// Add openEO specific keywords\n\t\tthis.ajv.addKeyword('parameters', Object.assign(keywords.parameters, {\n\t\t\tvalid: true,\n\t\t\terrors: true\n\t\t}));\n\t\tthis.ajv.addKeyword('returns', Object.assign(keywords.returns, {\n\t\t\tvalid: true,\n\t\t\terrors: true\n\t\t}));\n\t\tthis.ajv.addKeyword('subtype', Object.assign(keywords.subtype, {\n\t\t\tvalidate: async (subtype, data, schema) => await this.validateSubtype(subtype, data, schema),\n\t\t\tasync: true,\n\t\t\terrors: true\n\t\t}));\n\n\t\tthis.collections = null;\n\t\tthis.epsgCodes = null;\n\t\tthis.fileFormats = {\n\t\t\tinput: null,\n\t\t\toutput: null\n\t\t};\n\t\tthis.processRegistry = null;\n\t\tthis.udfRuntimes = null;\n\t}\n\n\tgetFunctionName(subtype) {\n\t\t// compute the function name (camelCase), e.g. for `band-name` it will be `validateBandName`\n\t\treturn \"validate\" + subtype.replace(/(^|\\-)(\\w)/g, (a, b, char) => char.toUpperCase());\n\t}\n\n\tmakeSchema(schema, $async = false) {\n\t\tschema = Utils.deepClone(schema);\n\n\t\t// Make array of schemas to a anyOf schema\n\t\tif (Array.isArray(schema)) {\n\t\t\tschema = {\n\t\t\t\tanyOf: schema\n\t\t\t};\n\t\t}\n\n\t\t// Set applicable JSON Schema draft version if not already set\n\t\tif (typeof schema.$schema === 'undefined') {\n\t\t\tschema.$schema = \"http://json-schema.org/draft-07/schema#\";\n\t\t}\n\n\t\t// Set async execution\n\t\tif ($async) {\n\t\t\tschema.$async = true;\n\t\t\tif (Utils.isObject(schema.definitions)) {\n\t\t\t\tfor(let key in schema.definitions) {\n\t\t\t\t\tschema.definitions[key].$async = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn schema;\n\t}\n\n\tasync validateValue(value, schema) {\n\t\tschema = this.makeSchema(schema, true);\n\n\t\ttry {\n\t\t\tawait this.ajv.validate(schema, value);\n\t\t\treturn [];\n\t\t} catch (e) {\n\t\t\tif (Array.isArray(e.errors)) {\n\t\t\t\treturn e.errors.map(e => e.message);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync validateSubtype(subtype, data, schema) {\n\t\tif (typeof subtypeSchemas.definitions[subtype] !== 'undefined') {\n\t\t\tschema = this.makeSchema(subtypeSchemas, true);\n\t\t\t// Make the schema for this subtype the default schema to be checked\n\t\t\tschema = Object.assign({}, subtypeSchemas.definitions[subtype], schema);\n\t\t\tif (subtype === 'process-graph') {\n\t\t\t\t// Special case: all validation will be done in validateProcessGraph()\n\t\t\t\tdelete schema.required;\n\t\t\t\tdelete schema.properties;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tschema = this.makeSchema(schema, true);\n\t\t}\n\n\t\t// Remove subtype to avoid recursion\n\t\tdelete schema.subtype;\n\n\t\tlet validated = await this.ajv.validate(schema, data);\n\t\tlet funcName = this.getFunctionName(subtype);\n\t\tif (validated && typeof this[funcName] === 'function') {\n\t\t\treturn await this[funcName](data);\n\t\t}\n\t\telse {\n\t\t\treturn validated;\n\t\t}\n\t}\n\n\tsetUdfRuntimes(udfRuntimes) {\n\t\tif (!Utils.isObject(udfRuntimes)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.udfRuntimes = udfRuntimes;\n\t}\n\n\tsetCollections(collections) {\n\t\tif (!Array.isArray(collections)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.collections = [];\n\t\tfor(let c of collections) {\n\t\t\tif (Utils.isObject(c) && typeof c.id === 'string') {\n\t\t\t\tthis.collections.push(c.id);\n\t\t\t}\n\t\t\telse if (typeof c === 'string') {\n\t\t\t\tthis.collections.push(c);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Expects API compatible file formats (see GET /file_formats).\n\tsetFileFormats(fileFormats) {\n\t\tif (!Utils.isObject(fileFormats)) {\n\t\t\treturn;\n\t\t}\n\t\tfor(let io of ['input', 'output']) {\n\t\t\tthis.fileFormats[io] = {};\n\t\t\tif (!Utils.isObject(fileFormats[io])) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (let key in fileFormats[io]) {\n\t\t\t\tthis.fileFormats[io][key.toUpperCase()] = fileFormats[io][key];\n\t\t\t}\n\t\t}\n\t}\n\n\tsetEpsgCodes(epsgCodes) {\n\t\tif (Array.isArray(epsgCodes)) {\n\t\t\tthis.epsgCodes = epsgCodes.map(v => parseInt(v, 10));\n\t\t}\n\t}\n\n\tasync validateCollectionId(data) {\n\t\tif (Array.isArray(this.collections) && !this.collections.find(c => c === data)) {\n\t\t\tthrow new Ajv.ValidationError([{\n\t\t\t\tmessage: \"Collection with id '\" + data + \"' doesn't exist.\"\n\t\t\t}]);\n\t\t}\n\t\treturn true;\n\t}\n\n\tasync validateUdfRuntime(data) {\n\t\tif (Utils.isObject(this.udfRuntimes) && !(data in this.udfRuntimes)) {\n\t\t\tthrow new Ajv.ValidationError([{\n\t\t\t\tmessage: \"UDF runtime '\" + data + \"' is not supported.\"\n\t\t\t}]);\n\t\t}\n\t\treturn true;\n\t}\n\n\tasync validateEpsgCode(data) {\n\t\tif (Array.isArray(this.epsgCodes)) {\n\t\t\tif (this.epsgCodes.includes(data)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t// Rough check for valid numbers as we don't want to maintain a full epsg code list in this repo.\n\t\telse if (data >= 2000) {\n\t\t\treturn true;\n\t\t}\n\n\t\tthrow new Ajv.ValidationError([{\n\t\t\tmessage: \"Invalid EPSG code '\" + data + \"' specified.\"\n\t\t}]);\n\t}\n\t\n\tasync validateInputFormat(data) {\n\t\tif (Utils.isObject(this.fileFormats.input) && !(data.toUpperCase() in this.fileFormats.input)) {\n\t\t\tthrow new Ajv.ValidationError([{\n\t\t\t\tmessage: \"Input format  '\" + data + \"' not supported.\"\n\t\t\t}]);\n\t\t}\n\t\treturn true;\n\t}\n\t\n\tasync validateOutputFormat(data) {\n\t\tif (Utils.isObject(this.fileFormats.output) && !(data.toUpperCase() in this.fileFormats.output)) {\n\t\t\tthrow new Ajv.ValidationError([{\n\t\t\t\tmessage: \"Output format  '\" + data + \"' not supported.\"\n\t\t\t}]);\n\t\t}\n\t\treturn true;\n\t}\n\n\tasync validateProjDefinition(data) {\n\t\t// To be overridden by end-user application, just doing a very basic check here.\n\t\tif (!data.toLowerCase().includes(\"+proj\")) {\n\t\t\tthrow new Ajv.ValidationError([{\n\t\t\t\tmessage: \"Invalid PROJ string specified (doesn't contain '+proj').\"\n\t\t\t}]);\n\t\t}\n\t\treturn true;\n\t}\n\n\tasync validateWkt2Definition(data) {\n\t\t// To be overridden by end-user application, just doing a very basic check here based on code ported over from proj4js\n\t\tvar codeWords = [\n\t\t\t'BOUNDCRS',\n\t\t\t'COMPOUNDCRS',\n\t\t\t'ENGCRS', 'ENGINEERINGCRS',\n\t\t\t'GEODCRS', 'GEODETICCRS',\n\t\t\t'GEOGCRS', 'GEOGRAPHICCRS',\n\t\t\t'PARAMETRICCRS',\n\t\t\t'PROJCRS', 'PROJECTEDCRS',\n\t\t\t'TIMECRS',\n\t\t\t'VERTCRS', 'VERTICALCRS'\n\t\t];\n\t\tdata = data.toUpperCase();\n\t\tif (!codeWords.some(word => data.indexOf(word) !== -1)) {\n\t\t\tthrow new Ajv.ValidationError([{\n\t\t\t\tmessage: \"Invalid WKT2 string specified.\"\n\t\t\t}]);\n\t\t}\n\t\treturn true;\n\t}\n\n\tasync validateTemporalInterval(data) {\n\t\tif (data[0] === null && data[1] === null) {\n\t\t\tthrow new Ajv.ValidationError([{\n\t\t\t\tmessage: \"Temporal interval must not be open on both ends.\"\n\t\t\t}]);\n\t\t}\n\t\telse if (data[0] !== null && data[1] !== null) {\n\t\t\tlet date1 = new Date(data[0]);\n\t\t\tlet date2 = new Date(data[1]);\n\t\t\tif (date2.getTime() < date1.getTime()) {\n\t\t\t\tthrow new Ajv.ValidationError([{\n\t\t\t\t\tmessage: \"The second timestamp can't be before the first timestamp.\"\n\t\t\t\t}]);\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\t\n\tasync validateTemporalIntervals(data) {\n\t\tfor(let interval of data) {\n\t\t\t// throws if invalid\n\t\t\tawait this.validateTemporalInterval(interval);\n\t\t}\n\t\treturn true;\n\t}\n\n\tsetProcessGraphParser(processGraph) {\n\t\tthis.processGraph = processGraph;\n\t}\n\n\tasync validateProcessGraph(data) {\n\t\ttry {\n\t\t\tconst ProcessGraph = require('./processgraph');\n\t\t\tvar parser;\n\t\t\tif (data instanceof ProcessGraph) {\n\t\t\t\tparser = data;\n\t\t\t}\n\t\t\telse if (this.processGraph) {\n\t\t\t\tparser = this.processGraph.createProcessGraphInstance(data);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tparser = new ProcessGraph(data, null, this);\n\t\t\t}\n\t\t\tawait parser.validate();\n\t\t\treturn true;\n\t\t} catch (error) {\n\t\t\tthrow new Ajv.ValidationError([{\n\t\t\t\tmessage: error.message\n\t\t\t}]);\n\t\t}\n\t}\n\n\t// Checks whether the valueSchema is compatible to the paramSchema.\n\t// So would a value compatible with valueSchema be accepted by paramSchema?\n\t// allowValueAsElements: If true, it checks whether the valueSchema would be allowed as part of an array or object. For example number could be allowed as part of an array of numbers.\n\tstatic isSchemaCompatible(paramSchema, valueSchema, strict = false, allowValueAsElements = false) {\n\t\tvar paramSchemas = ProcessUtils.normalizeJsonSchema(paramSchema, true);\n\t\tvar valueSchemas = ProcessUtils.normalizeJsonSchema(valueSchema, true);\n\n\t\tvar compatible = paramSchemas.findIndex(ps => {\n\t\t\tfor(var i in valueSchemas) {\n\t\t\t\tvar vs = valueSchemas[i];\n\t\t\t\tif (typeof ps.type !== 'string' || (!strict && typeof vs.type !== 'string')) { // \"any\" type is always compatible\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse if (\n\t\t\t\t\tps.type === vs.type ||\n\t\t\t\t\t(allowValueAsElements && (ps.type === 'array' || ps.type === 'object')) ||\n\t\t\t\t\t(ps.type === 'number' && vs.type === 'integer') ||\n\t\t\t\t\t(!strict && ps.type === 'integer' && vs.type === 'number')\n\t\t\t\t) {\n\t\t\t\t\tif (ps.type === 'array' && Utils.isObject(ps.items))  {\n\t\t\t\t\t\tconst checkArray = (schema) => { // jshint ignore:line\n\t\t\t\t\t\t\tif (allowValueAsElements && JsonSchemaValidator.isSchemaCompatible(schema, vs, strict)) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (Utils.isObject(vs.items) && JsonSchemaValidator.isSchemaCompatible(schema, vs.items, strict)) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (Array.isArray(ps.items.anyOf) || Array.isArray(ps.items.oneOf)) {\n\t\t\t\t\t\t\treturn (ps.items.anyOf || ps.items.oneOf).some(checkArray);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\treturn checkArray(ps.items);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (ps.type === 'object') {\n\t\t\t\t\t\tif (ps.subtype === vs.subtype) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (ps.subtype === 'datacube' || vs.subtype === 'datacube') {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// ToDo: Check properties, required properties etc.\n\t\t\t\t\t\t// If allowValueAsElements is true, all types are allowed to be part of the object.\n\t\t\t\t\t\telse if (Utils.isObject(ps.properties) && Utils.isObject(vs.properties)) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// Check subtypes\n\t\t\t\t\telse if (!strict && (typeof ps.subtype !== 'string' || typeof vs.subtype !== 'string')) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse if (typeof ps.subtype !== 'string') { // types without subtype always accepts the same type with a subtype\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse if (ps.subtype === vs.subtype) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\n\t\treturn compatible !== -1;\n\t}\n\n}\n\nmodule.exports = JsonSchemaValidator;","module.exports = {\n\tsubtype: {\n\t\tmetaSchema: {\n\t\t\ttype: \"string\"\n\t\t}\n\t},\n\tparameters: {\n\t\tdependencies: [\n\t\t\t\"subtype\"\n\t\t],\n\t\tmetaSchema: {\n\t\t\ttype: \"array\",\n\t\t\titems: {\n\t\t\t\ttype: \"object\",\n\t\t\t\trequired: [\n\t\t\t\t\t\"name\",\n\t\t\t\t\t\"description\",\n\t\t\t\t\t\"schema\"\n\t\t\t\t],\n\t\t\t\tproperties: {\n\t\t\t\t\tname: {\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tpattern: \"^\\\\w+$\"\n\t\t\t\t\t},\n\t\t\t\t\tdescription: {\n\t\t\t\t\t\ttype: \"string\"\n\t\t\t\t\t},\n\t\t\t\t\toptional: {\n\t\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\t\tdefault: false\n\t\t\t\t\t},\n\t\t\t\t\tdeprecated: {\n\t\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\t\tdefault: false\n\t\t\t\t\t},\n\t\t\t\t\texperimental: {\n\t\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\t\tdefault: false\n\t\t\t\t\t},\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\t// Any type\n\t\t\t\t\t},\n\t\t\t\t\tschema: {\n\t\t\t\t\t\toneOf: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"$ref\": \"http://json-schema.org/draft-07/schema\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: \"array\",\n\t\t\t\t\t\t\t\titems: {\n\t\t\t\t\t\t\t\t\t\"$ref\": \"http://json-schema.org/draft-07/schema\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\treturns: {\n\t\tdependencies: [\n\t\t\t\"subtype\"\n\t\t],\n\t\tmetaSchema: {\n\t\t\ttype: \"object\",\n\t\t\trequired: [\n\t\t\t\t\"schema\"\n\t\t\t],\n\t\t\tproperties: {\n\t\t\t\tdescription: {\n\t\t\t\t\ttype: \"string\"\n\t\t\t\t},\n\t\t\t\tschema: {\n\t\t\t\t\toneOf: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"$ref\": \"http://json-schema.org/draft-07/schema\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: \"array\",\n\t\t\t\t\t\t\titems: {\n\t\t\t\t\t\t\t\t\"$ref\": \"http://json-schema.org/draft-07/schema\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};","const BaseProcess = require('./process');\nconst ErrorList = require('./errorlist');\nconst JsonSchemaValidator = require('./jsonschema');\nconst ProcessGraph = require('./processgraph');\nconst ProcessGraphError = require('./error');\nconst ProcessGraphNode = require('./node');\nconst ProcessRegistry = require('./registry');\nconst Utils = require('./utils');\n\nmodule.exports = {\n\tBaseProcess,\n\tErrorList,\n\tJsonSchemaValidator,\n\tProcessGraph,\n\tProcessGraphError,\n\tProcessGraphNode,\n\tProcessRegistry,\n\tUtils\n};","const ProcessGraphError = require('./error');\nconst Utils = require('./utils');\n\n/**\n * A Process graph node.\n * \n * @class\n */\nclass ProcessGraphNode {\n\n\tconstructor(node, id, parent = null) {\n\t\tif (typeof id !== 'string' || id.length === 0) {\n\t\t\tthrow new ProcessGraphError('NodeIdInvalid');\n\t\t}\n\t\tif (!Utils.isObject(node)) {\n\t\t\tthrow new ProcessGraphError('NodeInvalid', {node_id: id});\n\t\t}\n\t\tif (typeof node.process_id !== 'string') {\n\t\t\tthrow new ProcessGraphError('ProcessIdMissing', {node_id: id});\n\t\t}\n\n\t\tthis.id = id;\n\t\tthis.processGraph = parent;\n\t\tthis.source = node;\n\t\tthis.process_id = node.process_id;\n\t\tthis.namespace = node.namespace || null;\n\t\tthis.arguments = Utils.isObject(node.arguments) ? Utils.deepClone(node.arguments) : {};\n\t\tthis.description = node.description || null;\n\t\tthis.isResultNode = node.result || false;\n\t\tthis.expectsFrom = []; // From which node do we expect results from\n\t\tthis.receivedFrom = []; // From which node have received results from so far\n\t\tthis.passesTo = [];\n\t\tthis.computedResult = undefined;\n\t}\n\n\ttoJSON() {\n\t\tlet args = Utils.mapObjectValues(this.arguments, arg => Utils.isObject(arg) && typeof arg.toJSON === 'function' ? arg.toJSON() : arg);\n\t\treturn Object.assign({}, this.source, {\n\t\t\tprocess_id: this.process_id,\n\t\t\tnamespace: this.namespace,\n\t\t\tdescription: this.description,\n\t\t\targuments: args,\n\t\t\tresult: this.isResultNode\n\t\t});\n\t}\n\n\tgetProcessGraph() {\n\t\treturn this.processGraph;\n\t}\n\n\tgetParent() {\n\t\tif (this.processGraph !== null) {\n\t\t\treturn this.processGraph.getParentNode();\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetArgumentNames() {\n\t\treturn Object.keys(this.arguments);\n\t}\n\n\thasArgument(name) {\n\t\treturn typeof this.arguments[name] !== 'undefined';\n\t}\n\n\tgetArgumentType(name) {\n\t\treturn Utils.getType(this.getRawArgument(name));\n\t}\n\n\tgetRawArgument(name) {\n\t\treturn Utils.isObject(this.source.arguments) ? this.source.arguments[name] : undefined;\n\t}\n\n\tgetParsedArgument(name) {\n\t\treturn this.arguments[name];\n\t}\n\n\tgetArgument(name, defaultValue = undefined) {\n\t\tif (typeof this.arguments[name] === 'undefined') {\n\t\t\treturn defaultValue;\n\t\t}\n\t\treturn this.evaluateArgument(this.arguments[name]);\n\t}\n\n\tgetArgumentRefs(name) {\n\t\treturn Utils.getRefs(this.getRawArgument(name), false);\n\t}\n\n\tgetRefs() {\n\t\treturn Utils.getRefs(this.source.arguments, false);\n\t}\n\n\tgetProcessGraphParameterValue(name) {\n\t\t// 1. Check local parameter, then check parents\n\t\t// 2. Check parents\n\t\t// 3. Try to get default value\n\t\t// 4. Fail if no value is available\n\t\tlet defaultValue;\n\t\tlet pg = this.processGraph;\n\t\tdo {\n\t\t\tif (pg.hasArgument(name)) {\n\t\t\t\treturn pg.getArgument(name);\n\t\t\t}\n\t\t\tif (pg.hasParameterDefault(name)) {\n\t\t\t\tdefaultValue = pg.getParameterDefault(name);\n\t\t\t}\n\t\t\tpg = pg.getParent();\n\t\t} while (pg !== null);\n\n\t\tif (typeof defaultValue !== 'undefined') {\n\t\t\treturn defaultValue;\n\t\t}\n\n\t\tif (!this.processGraph.allowUndefinedParameterRefs) {\n\t\t\tthrow new ProcessGraphError('ProcessGraphParameterMissing', {\n\t\t\t\targument: name,\n\t\t\t\tnode_id: this.id,\n\t\t\t\tprocess_id: this.process_id,\n\t\t\t\tnamespace: this.namespace || 'n/a'\n\t\t\t});\n\t\t}\n\t}\n\n\tevaluateArgument(arg) {\n\t\tvar type = Utils.getType(arg);\n\t\tswitch(type) {\n\t\t\tcase 'result':\n\t\t\t\treturn this.processGraph.getNode(arg.from_node).getResult();\n\t\t\tcase 'callback':\n\t\t\t\treturn arg;\n\t\t\tcase 'parameter':\n\t\t\t\treturn this.getProcessGraphParameterValue(arg.from_parameter);\n\t\t\tcase 'array':\n\t\t\tcase 'object':\n\t\t\t\tlet copy = type === 'array' ? [] : {};\n\t\t\t\tfor(var i in arg) {\n\t\t\t\t\tcopy[i] = this.evaluateArgument(arg[i]);\n\t\t\t\t}\n\t\t\t\treturn copy;\n\t\t\tdefault:\n\t\t\t\treturn arg;\n\t\t}\n\t}\n\n\tisStartNode() {\n\t\treturn (this.expectsFrom.length === 0);\n\t}\n\n\taddPreviousNode(node) {\n\t\tif (!this.expectsFrom.find(other => other.id === node.id)) {\n\t\t\tthis.expectsFrom.push(node);\n\t\t}\n\t}\n\n\tgetPreviousNodes() {\n\t\t// Sort nodes to ensure a consistent execution order\n\t\treturn this.expectsFrom.sort((a,b) => a.id.localeCompare(b.id));\n\t}\n\n\taddNextNode(node) {\n\t\tif (!this.passesTo.find(other => other.id === node.id)) {\n\t\t\tthis.passesTo.push(node);\n\t\t}\n\t}\n\n\tgetNextNodes() {\n\t\t// Sort nodes to ensure a consistent execution order\n\t\treturn this.passesTo.sort((a,b) => a.id.localeCompare(b.id));\n\t}\n\n\treset() {\n\t\tthis.computedResult = undefined;\n\t\tthis.receivedFrom = [];\n\t}\n\n\tgetDescription() {\n\t\treturn this.description;\n\t}\n\n\tsetDescription(description) {\n\t\tif (typeof description === 'string') {\n\t\t\tthis.description = description;\n\t\t}\n\t\telse {\n\t\t\tthis.description = null;\n\t\t}\n\t}\n\n\tsetResult(result) {\n\t\tthis.computedResult = result;\n\t}\n\n\tgetResult() {\n\t\treturn this.computedResult;\n\t}\n\n\tsolveDependency(dependencyNode) {\n\t\tif (dependencyNode !== null && this.expectsFrom.includes(dependencyNode)) {\n\t\t\tthis.receivedFrom.push(dependencyNode);\n\t\t}\n\t\treturn (this.expectsFrom.length === this.receivedFrom.length); // all dependencies solved?\n\t}\n\n}\n\nmodule.exports = ProcessGraphNode;","const JsonSchemaValidator = require('./jsonschema');\nconst ProcessGraphError = require('./error');\nconst ProcessUtils = require('@openeo/js-commons/src/processUtils');\nconst Utils = require('./utils');\n\n/**\n * Base Process class\n * \n * @class\n */\nclass BaseProcess {\n\n\tconstructor(spec) {\n\t\t// Make properties easily accessible \n\t\tObject.assign(this, spec);\n\n\t\tif (typeof this.id !== 'string') {\n\t\t\tthrow new Error(\"Invalid process specified, no id given.\");\n\t\t}\n\t\tif (!Array.isArray(this.parameters)) {\n\t\t\tthis.parameters = [];\n\t\t}\n\t}\n\n\ttoJSON() {\n\t\treturn Utils.omitFromObject(this, [\"validate\", \"validateArgument\", \"execute\", \"test\"]);\n\t}\n\n\tasync validate(node) {\n\t\t// Check for arguments we don't support and throw error\n\t\tlet unsupportedArgs = node.getArgumentNames().filter(name => this.parameters.findIndex(p => p.name === name) === -1);\n\t\tif (unsupportedArgs.length > 0) {\n\t\t\tthrow new ProcessGraphError('ProcessArgumentUnsupported', {\n\t\t\t\tprocess: this.id,\n\t\t\t\tnamespace: this.namespace || 'n/a',\n\t\t\t\targuments: unsupportedArgs\n\t\t\t});\n\t\t}\n\n\t\t// Validate against JSON Schema\n\t\tfor(let key in this.parameters) {\n\t\t\tlet param = this.parameters[key];\n\n\t\t\tif (!node.hasArgument(param.name)) {\n\t\t\t\tif (!param.optional) {\n\t\t\t\t\tthrow new ProcessGraphError('ProcessArgumentRequired', {\n\t\t\t\t\t\tprocess: this.id,\n\t\t\t\t\t\tnamespace: this.namespace || 'n/a',\n\t\t\t\t\t\targument: param.name\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet arg = node.getParsedArgument(param.name);\n\t\t\tlet rawArg = node.getRawArgument(param.name);\n\t\t\tawait this.validateArgument(arg, rawArg, node, param);\n\t\t}\n\t}\n\n\tasync validateArgument(arg, rawArg, node, param, path = null) {\n\t\tif (!path) {\n\t\t\tpath = param.name;\n\t\t}\n\t\tlet argType = Utils.getType(arg);\n\t\tlet pg = node.getProcessGraph();\n\t\tswitch(argType) {\n\t\t\tcase 'parameter':\n\t\t\t\t// Validate callback parameters (no value available yet)\n\t\t\t\tlet callbackParam = pg.getCallbackParameter(arg.from_parameter);\n\t\t\t\tif (callbackParam) {\n\t\t\t\t\tif (!JsonSchemaValidator.isSchemaCompatible(param.schema, callbackParam.schema)) {\n\t\t\t\t\t\tthrow new ProcessGraphError('ProcessArgumentInvalid', {\n\t\t\t\t\t\t\tprocess: this.id,\n\t\t\t\t\t\t\tnamespace: this.namespace || 'n/a',\n\t\t\t\t\t\t\targument: path,\n\t\t\t\t\t\t\treason: \"Schema for parameter '\" + arg.from_parameter + \"' not compatible with reference\"\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Validate all other parameters\n\t\t\t\tlet value = node.getProcessGraphParameterValue(arg.from_parameter);\n\t\t\t\tlet parameter = pg.getProcessParameter(arg.from_parameter);\n\t\t\t\tif (Utils.isObject(parameter) && parameter.schema) {\n\t\t\t\t\tif (typeof value !== 'undefined') {\n\t\t\t\t\t\tawait this.validateArgument(value, rawArg, node, parameter, path);\n\t\t\t\t\t}\n\t\t\t\t\tif (!JsonSchemaValidator.isSchemaCompatible(param.schema, parameter.schema)) {\n\t\t\t\t\t\tthrow new ProcessGraphError('ProcessArgumentInvalid', {\n\t\t\t\t\t\t\tprocess: this.id,\n\t\t\t\t\t\t\tnamespace: this.namespace || 'n/a',\n\t\t\t\t\t\t\targument: path,\n\t\t\t\t\t\t\treason: \"Schema for parameter '\" + arg.from_parameter + \"' not compatible\"\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// else: Parameter not available, everything is valid\n\t\t\t\tbreak;\n\t\t\tcase 'result':\n\t\t\t\tlet resultNode = pg.getNode(arg.from_node);\n\t\t\t\tlet process = pg.getProcess(resultNode);\n\t\t\t\tif (!JsonSchemaValidator.isSchemaCompatible(param.schema, process.returns.schema)) {\n\t\t\t\t\tthrow new ProcessGraphError('ProcessArgumentInvalid', {\n\t\t\t\t\t\tprocess: this.id,\n\t\t\t\t\t\tnamespace: this.namespace || 'n/a',\n\t\t\t\t\t\targument: path,\n\t\t\t\t\t\treason: \"Schema for result '\" + arg.from_node + \"' not compatible\"\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'array':\n\t\t\tcase 'object':\n\t\t\t\tlet schemas = ProcessUtils.normalizeJsonSchema(param.schema).filter(schema => ['array', 'object'].includes(schema.type));\n\t\t\t\t// Check if it is expected to be a process. If yes, do normal validation. Handles the issue discussed in https://github.com/Open-EO/openeo-js-processgraphs/issues/4\n\t\t\t\tlet isProcessGraphSchema = (schemas.length === 1 && schemas[0].subtype === 'process-graph');\n\t\t\t\tif (Utils.containsRef(rawArg) && !isProcessGraphSchema) {\n\t\t\t\t\t// This tries to at least be compliant to one of the element schemas\n\t\t\t\t\t// It's better than validating nothing, but it's still not 100% correct\n\t\t\t\t\tfor(var key in arg) {\n\t\t\t\t\t\tlet elementSchema = schemas.map(schema =>  ProcessUtils.getElementJsonSchema(schema, key)).filter(schema => Object.keys(schema).length); // jshint ignore:line\n\t\t\t\t\t\tif (elementSchema.length > 0) {\n\t\t\t\t\t\t\tlet validated = 0;\n\t\t\t\t\t\t\tlet lastError = null;\n\t\t\t\t\t\t\tfor(let schema of elementSchema) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t// ToDo: Check against JSON schema required property\n\t\t\t\t\t\t\t\t\tawait this.validateArgument(arg[key], rawArg[key], node, {schema}, path + '/' + key);\n\t\t\t\t\t\t\t\t\tvalidated++;\n\t\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\t\tlastError = error;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (validated === 0 && lastError) {\n\t\t\t\t\t\t\t\tthrow lastError;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// Use default behavior below, so no break; needed\n\t\t\t\t} // jshint ignore:line\n\t\t\tdefault:\n\t\t\t\tlet validator = node.getProcessGraph().getJsonSchemaValidator();\n\t\t\t\t// Validate against JSON schema\n\t\t\t\tlet errors = await validator.validateValue(arg, param.schema);\n\t\t\t\tif (errors.length > 0) {\n\t\t\t\t\tthrow new ProcessGraphError('ProcessArgumentInvalid', {\n\t\t\t\t\t\tprocess: this.id,\n\t\t\t\t\t\tnamespace: this.namespace || 'n/a',\n\t\t\t\t\t\targument: path,\n\t\t\t\t\t\treason: errors\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t}\n\t}\n\n\t/* istanbul ignore next */\n\tasync execute(/*node*/) {\n\t\tthrow new Error(`execute not implemented yet for process '${this.id}' (namespace: ${this.namespace || 'n/a'})`);\n\t}\n\n\t/* istanbul ignore next */\n\ttest() {\n\t\t// Run the tests from the examples\n\t\tthrow new Error(`test not implemented yet for process '${this.id}' (namespace: ${this.namespace || 'n/a'})`);\n\t}\n\n}\n\nmodule.exports =  BaseProcess;","const BaseProcess = require('./process');\nconst ErrorList = require('./errorlist');\nconst JsonSchemaValidator = require('./jsonschema');\nconst ProcessGraphError = require('./error');\nconst ProcessGraphNode = require('./node');\nconst Utils = require('./utils');\nconst ProcessUtils = require('@openeo/js-commons/src/processUtils.js');\n\nconst processKeys = [\n\t'id',\n\t'summary',\n\t'description',\n\t'categories',\n\t'parameters',\n\t'returns',\n\t'deprecated',\n\t'experimental',\n\t'exceptions',\n\t'examples',\n\t'links',\n\t'process_graph'\n];\n\n/**\n * Process parser, validator and executor.\n * \n * @class\n */\nclass ProcessGraph {\n\n\t// ToDo: Also parse and validate other parts of the process, e.g. id, parameters, etc.\n\n\tconstructor(process, processRegistry = null, jsonSchemaValidator = null) {\n\t\tthis.process = process;\n\t\tthis.nodes = {};\n\t\tthis.startNodes = [];\n\t\tthis.resultNode = null;\n\t\tthis.children = [];\n\t\tthis.parentNode = null;\n\t\tthis.parsed = false;\n\t\tthis.validated = false;\n\t\tthis.errors = new ErrorList();\n\t\tthis.callbackParameters = [];\n\t\t// Sub process graphs need to copy these:\n\t\tthis.processRegistry = processRegistry;\n\t\tthis.jsonSchemaValidator = jsonSchemaValidator;\n\t\tthis.arguments = {};\n\t\tthis.allowEmptyGraph = false;\n\t\tthis.fillProcessParameters = false;\n\t\tthis.allowUndefinedParameterRefs = true;\n\t}\n\n\ttoJSON() {\n\t\treturn this.process;\n\t}\n\n\tgetJsonSchemaValidator() {\n\t\tif (this.jsonSchemaValidator === null) {\n\t\t\tthis.jsonSchemaValidator = this.createJsonSchemaValidatorInstance();\n\t\t}\n\t\tthis.jsonSchemaValidator.setProcessGraphParser(this);\n\t\treturn this.jsonSchemaValidator;\n\t}\n\n\tcreateJsonSchemaValidatorInstance() {\n\t\treturn new JsonSchemaValidator();\n\t}\n\n\tcreateNodeInstance(nodeObj, id, parent) {\n\t\treturn new ProcessGraphNode(nodeObj, id, parent);\n\t}\n\n\tcreateProcessGraphInstance(process) {\n\t\tlet pg = new ProcessGraph(process, this.processRegistry, this.getJsonSchemaValidator());\n\t\treturn this.copyProcessGraphInstanceProperties(pg);\n\t}\n\n\tcreateProcessInstance(process) {\n\t\treturn new BaseProcess(process);\n\t}\n\n\tcopyProcessGraphInstanceProperties(pg) {\n\t\tpg.allowEmptyGraph = this.allowEmptyGraph;\n\t\tpg.fillProcessParameters = this.fillProcessParameters;\n\t\tpg.allowUndefinedParameterRefs = this.allowUndefinedParameterRefs;\n\t\treturn pg;\n\t}\n\n\tcreateChildProcessGraph(process, node, parameterPath = []) {\n\t\tvar pg = this.createProcessGraphInstance(process);\n\t\tpg.setArguments(this.arguments);\n\t\tpg.setParentNode(node);\n\t\tif (parameterPath.length > 0) {\n\t\t\tlet parameterName = parameterPath.shift();\n\t\t\tpg.setCallbackParameters(ProcessUtils.getCallbackParametersForProcess(pg.getParentProcess(), parameterName, parameterPath));\n\t\t}\n\t\tpg.parse();\n\t\tthis.children.push(pg);\n\t\treturn pg;\n\t}\n\n\tgetParentNode() {\n\t\treturn this.parentNode;\n\t}\n\n\tgetParent() {\n\t\tif (this.parentNode) {\n\t\t\treturn this.parentNode.getProcessGraph();\n\t\t}\n\t\treturn null;\n\t}\n\n\tsetParentNode(parent) {\n\t\tif (parent instanceof ProcessGraphNode) {\n\t\t\tthis.parentNode = parent;\n\t\t}\n\t\telse {\n\t\t\tthis.parentNode = null;\n\t\t}\n\t}\n\n\tisValid() {\n\t\treturn this.validated && this.errors.count() === 0;\n\t}\n\n\taddError(error) {\n\t\tthis.errors.add(error);\n\t}\n\n\tallowUndefinedParameters(allow = true) {\n\t\tif (!allow) {\n\t\t\tthis.fillProcessParameters = false;\n\t\t}\n\t\tthis.allowUndefinedParameterRefs = allow;\n\t}\n\n\tfillUndefinedParameters(fill = true) {\n\t\tif (fill) {\n\t\t\tthis.allowUndefinedParameterRefs = true;\n\t\t}\n\t\tthis.fillProcessParameters = fill;\n\t}\n\n\tallowEmpty(allow = true) {\n\t\tthis.allowEmptyGraph = allow;\n\t}\n\n\tparse() {\n\t\tif (this.parsed) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst makeError = (errorId) => {\n\t\t\tif (this.getParentProcessId()) {\n\t\t\t\treturn new ProcessGraphError(\n\t\t\t\t\terrorId + 'Callback',\n\t\t\t\t\t{\n\t\t\t\t\t\tprocess_id: this.getParentProcessId(),\n\t\t\t\t\t\tnode_id: this.parentNode ? this.parentNode.id : 'N/A'\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn new ProcessGraphError(errorId);\n\t\t\t}\n\t\t};\n\n\t\tif (!Utils.isObject(this.process)) {\n\t\t\tthrow makeError('ProcessMissing');\n\t\t}\n\n\t\tif (Utils.size(this.process.process_graph) === 0) {\n\t\t\tif (this.allowEmptyGraph) {\n\t\t\t\tlet hasProcessKey = Object.keys(this.process).find(key => processKeys.includes(key));\n\t\t\t\tif (Utils.size(this.process) === 0 || hasProcessKey) {\n\t\t\t\t\tthis.parsed = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow makeError('ProcessGraphMissing');\n\t\t}\n\n\t\tthis.nodes = Utils.mapObjectValues(this.process.process_graph, (pg, id) => this.createNodeInstance(pg, id, this));\n\n\t\tfor(let id in this.nodes) {\n\t\t\tvar node = this.nodes[id];\n\t\t\tif (node.isResultNode) {\n\t\t\t\tif (this.resultNode !== null) {\n\t\t\t\t\tthrow makeError('MultipleResultNodes');\n\t\t\t\t}\n\t\t\t\tthis.resultNode = node;\n\t\t\t}\n\n\t\t\tthis.parseNodeArguments(id, node);\n\t\t}\n\t\tif (this.resultNode === null) {\n\t\t\tthrow makeError('ResultNodeMissing');\n\t\t}\n\n\t\t// Find/Cache start nodes, only possible after parseNodeArguments have been called for all nodes\n\t\t// Sort nodes to ensure a consistent execution order\n\t\tthis.startNodes = Object.values(this.nodes).filter(node => node.isStartNode()).sort((a,b) => a.id.localeCompare(b.id));\n\t\tif (this.startNodes.length === 0) {\n\t\t\tthrow makeError('StartNodeMissing');\n\t\t}\n\n\t\tthis.parsed = true;\n\t}\n\n\tasync validate(throwOnErrors = true) {\n\t\tif (this.validated) {\n\t\t\tif (throwOnErrors && this.errors.count() > 0) {\n\t\t\t\tthrow this.errors.first();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn this.errors;\n\t\t\t}\n\t\t}\n\n\t\tthis.validated = true;\n\n\t\t// Parse\n\t\ttry {\n\t\t\tthis.parse();\n\t\t} catch (error) {\n\t\t\tthis.addError(error);\n\t\t\tif (throwOnErrors) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\t// Validate\n\t\tawait this.validateNodes(this.getStartNodes(), throwOnErrors);\n\t\treturn this.errors;\n\t}\n\n\tasync execute(args = null) {\n\t\tthis.allowUndefinedParameters(false);\n\t\tthis.setArguments(args);\n\t\tawait this.validate();\n\t\tthis.reset();\n\t\tawait this.executeNodes(this.getStartNodes());\n\t\treturn this.getResultNode();\n\t}\n\n\tasync validateNodes(nodes, throwOnErrors, previousNode = null) {\n\t\tif (nodes.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar promises = nodes.map(async (node) => {\n\t\t\t// Validate this node after all dependencies are available\n\t\t\tif (!node.solveDependency(previousNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get process and validate\n\t\t\ttry {\n\t\t\t\tawait this.validateNode(node);\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof ErrorList) {\n\t\t\t\t\tthis.errors.merge(e);\n\t\t\t\t\tif (throwOnErrors) {\n\t\t\t\t\t\tthrow e.first();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.addError(e);\n\t\t\t\t\tif (throwOnErrors) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tawait this.validateNodes(node.getNextNodes(), throwOnErrors, node);\n\t\t});\n\n\t\tawait Promise.all(promises);\n\t}\n\n\tasync validateNode(node) {\n\t\tvar process = this.getProcess(node);\n\t\tif (process) {\n\t\t\treturn await process.validate(node);\n\t\t}\n\t}\n\n\tasync executeNodes(nodes, previousNode = null) {\n\t\tif (nodes.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar promises = nodes.map(async (node) => {\n\t\t\t// Execute this node after all dependencies are available\n\t\t\tif (!node.solveDependency(previousNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar result = await this.executeNode(node);\n\t\t\tnode.setResult(result);\n\n\t\t\t// Execute next nodes in chain\n\t\t\tawait this.executeNodes(node.getNextNodes(), node);\n\n\t\t});\n\n\t\treturn await Promise.all(promises);\n\t}\n\n\tasync executeNode(node) {\n\t\tvar process = this.getProcess(node);\n\t\treturn await process.execute(node);\n\t}\n\n\tparseNodeArguments(nodeId, node, parameterPath = [], args = undefined) {\n\t\tif (typeof args === 'undefined') {\n\t\t\targs = node.arguments;\n\t\t}\n\t\tfor(let argumentName in args) {\n\t\t\tlet arg = args[argumentName];\n\t\t\t// Make a \"path\" that consists of the parameter name and the keys of arrays/objects, if applicable.\n\t\t\tlet path = parameterPath.concat([argumentName]);\n\t\t\tlet type = Utils.getType(arg);\n\t\t\tswitch(type) {\n\t\t\t\tcase 'result':\n\t\t\t\t\t// Connect the nodes with each other\n\t\t\t\t\tvar prevNode = this.nodes[arg.from_node];\n\t\t\t\t\tif (typeof prevNode === 'undefined') {\n\t\t\t\t\t\tthrow new ProcessGraphError('ReferencedNodeMissing', {node_id: arg.from_node});\n\t\t\t\t\t}\n\t\t\t\t\tnode.addPreviousNode(prevNode);\n\t\t\t\t\tprevNode.addNextNode(node);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'callback':\n\t\t\t\t\t// Create a new process graph for the callback\n\t\t\t\t\targs[argumentName] = this.createChildProcessGraph(arg, node, path);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'parameter':\n\t\t\t\t\t// If we found a parameter and it's not defined yet (includes that it's not a callback parameter) and fillProcessParameters is set to true: Add it to the process spec.\n\t\t\t\t\tif (this.fillProcessParameters && !this.hasParameter(arg.from_parameter)) {\n\t\t\t\t\t\tthis.addProcessParameter(arg.from_parameter);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'array':\n\t\t\t\tcase 'object':\n\t\t\t\t\t// Parse everything hidden in arrays and objects\n\t\t\t\t\tthis.parseNodeArguments(nodeId, node, path, arg);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tsetCallbackParameters(parameters) {\n\t\tthis.callbackParameters = parameters;\n\t}\n\n\tgetCallbackParameter(name) {\n\t\treturn this.getCallbackParameters().find(p => p.name === name) || null;\n\t}\n\n\tgetCallbackParameters() {\t\t\n\t\treturn this.callbackParameters;\n\t}\n\n\taddProcessParameter(name, description = '', schema = {}) {\n\t\tif (!Array.isArray(this.process.parameters)) {\n\t\t\tthis.process.parameters = [];\n\t\t}\n\t\tthis.process.parameters.push({\n\t\t\tname, description, schema\n\t\t});\n\t}\n\n\thasParameterDefault(name) {\n\t\treturn this.getParameterDefault(name) !== undefined;\n\t}\n\n\tgetParameterDefault(name) {\n\t\tlet param = this.getParameter(name);\n\t\tif (param !== null) {\n\t\t\treturn param.default;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\thasParameter(name) {\n\t\treturn this.getParameter(name) !== null;\n\t}\n\n\tgetProcessParameters(includeUndefined = false) {\n\t\tlet parameters = Array.isArray(this.process.parameters) ? this.process.parameters.slice(0) : [];\n\t\tif (includeUndefined && !this.fillProcessParameters) {\n\t\t\tfor (let key in this.nodes) {\n\t\t\t\tlet refs = this.nodes[key].getRefs();\n\t\t\t\tfor(let ref of refs) {\n\t\t\t\t\tif (ref.from_parameter && !parameters.find(other => other.name === ref.from_parameter)) { // jshint ignore:line\n\t\t\t\t\t\tparameters.push({\n\t\t\t\t\t\t\tname: ref.from_parameter,\n\t\t\t\t\t\t\tdescription: '',\n\t\t\t\t\t\t\tschema: {}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn parameters;\n\t}\n\n\tgetProcessParameter(name, includeUndefined = false) {\n\t\treturn this.getProcessParameters(includeUndefined).find(p => p.name === name) || null;\n\t}\n\n\tgetParameter(name) {\n\t\tlet callbackParam = this.getCallbackParameter(name);\n\t\tlet processParam = this.getProcessParameter(name);\n\t\tif (callbackParam && processParam) {\n\t\t\t// ToDo: Take https://github.com/Open-EO/openeo-api/issues/332 into account\n\t\t\treturn Object.assign({}, callbackParam, processParam);\n\t\t}\n\t\telse if (callbackParam) {\n\t\t\treturn callbackParam;\n\t\t}\n\t\telse if (processParam) {\n\t\t\treturn processParam;\n\t\t}\n\t\treturn null;\n\t}\n\n\tsetArguments(args) {\n\t\tif (Utils.isObject(args)) {\n\t\t\tObject.assign(this.arguments, args);\n\t\t}\n\t}\n\n\thasArgument(name) {\n\t\treturn typeof this.arguments[name] !== 'undefined';\n\t}\n\n\tgetArgument(name) {\n\t\treturn this.arguments[name];\n\t}\n\n\treset() {\n\t\tfor(var id in this.nodes) {\n\t\t\tthis.nodes[id].reset();\n\t\t}\n\t\tthis.children.forEach(child => child.reset());\n\t}\n\n\tgetResultNode() {\n\t\treturn this.resultNode;\n\t}\n\n\tgetStartNodes() {\n\t\treturn this.startNodes;\n\t}\n\n\tgetStartNodeIds() {\n\t\treturn this.startNodes.map(node => node.id);\n\t}\n\n\tgetNode(nodeId) {\n\t\treturn nodeId in this.nodes ? this.nodes[nodeId] : null;\n\t}\n\n\tgetNodeCount() {\n\t\treturn Utils.size(this.nodes);\n\t}\n\n\tgetNodes() {\n\t\treturn this.nodes;\n\t}\n\n\tgetErrors() {\n\t\treturn this.errors;\n\t}\n\n\t/**\n\t * Gets the process for the given process ID or node.\n\t * \n\t * @param {ProcessGraphNode|string} process \n\t * @param {?string} [namespace=null]\n\t * @returns {object|null}\n\t * @throws {ProcessGraphError} - ProcessUnsupported\n\t */\n\tgetProcess(process, namespace = null) {\n\t\tif (this.processRegistry === null) {\n\t\t\treturn null;\n\t\t}\n\t\tlet id;\n\t\tif (process instanceof ProcessGraphNode) {\n\t\t\tid = process.process_id;\n\t\t\tnamespace = process.namespace;\n\t\t}\n\t\telse {\n\t\t\tid = process;\n\t\t}\n\t\tlet spec = this.processRegistry.get(id, namespace);\n\t\tif (spec === null) {\n\t\t\tthrow new ProcessGraphError('ProcessUnsupported', {process: id, namespace: namespace || 'n/a'});\n\t\t}\n\t\treturn this.createProcessInstance(spec);\n\t}\n\n\tgetParentProcessId() {\n\t\tif(this.getParentNode()) {\n\t\t\treturn this.getParentNode().process_id;\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetParentProcess() {\n\t\tif (this.processRegistry === null) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.processRegistry.get(this.getParentProcessId());\n\t}\n\n}\n\nmodule.exports = ProcessGraph;","const CommonProcessRegistry = require('@openeo/js-commons/src/processRegistry');\n\n/**\n * Central registry for processes.\n * \n * Implementation has been moved to @openeo/js-commons.\n * This wrapper here is only available for backward compatibility.\n * \n * @todo Remove in 2.0.0.\n * @augments CommonProcessRegistry\n * @class\n * @deprecated\n */\nclass ProcessRegistry extends CommonProcessRegistry {\n\n}\n\nmodule.exports = ProcessRegistry;","const CommonUtils = require('@openeo/js-commons/src/utils.js');\n\n/**\n * Utilities\n * \n * @class\n */\nclass Utils extends CommonUtils {\n\n\t/**\n\t * Checks whether a value contains references (from_parameter, from_node).\n\t * \n\t * Doesn't return references from ProcessGraph objects if checkCallbacks is set to true.\n\t * \n\t * @param {*} value \n\t * @param {boolean} checkProcess - Set to `false` to not check for refs in a process if provided as value.\n\t * @param {boolean} checkCallbacks - Set to `true` to also check for refs in callbacks. Only applies if `checkProcess` is true.\n\t * @returns {boolean}\n\t */\n\tstatic containsRef(value, checkProcess = true, checkCallbacks = false) {\n\t\tlet type = Utils.getType(value);\n\t\tswitch(type) {\n\t\t\tcase 'result':\n\t\t\tcase 'parameter':\n\t\t\t\treturn true;\n\t\t\tcase 'callback':\n\t\t\t\tif (checkProcess && Utils.containsRef(value.process_graph, checkCallbacks, checkCallbacks)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'array':\n\t\t\tcase 'object':\n\t\t\t\tfor(let key in value) {\n\t\t\t\t\tif (Utils.containsRef(value[key], checkProcess, checkCallbacks)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns all distinct references (from_parameter, from_node) contained in a value.\n\t * \n\t * Doesn't return references from ProcessGraph objects if checkCallbacks is set to true.\n\t * \n\t * @param {*} value \n\t * @param {boolean} getFromProcess - Set to `false` to not get refs from a process if provided as value.\n\t * @param {boolean} getFromCallbacks - Set to `true` to also include refs in callbacks. Only applies if `getFromProcess` is true.\n\t * @returns {boolean}\n\t */\n\tstatic getRefs(value, getFromProcess = true, getFromCallbacks = false) {\n\t\tvar store = [];\n\t\tvar type = Utils.getType(value);\n\t\tswitch(type) {\n\t\t\tcase 'result':\n\t\t\tcase 'parameter':\n\t\t\t\tstore.push(value);\n\t\t\t\tbreak;\n\t\t\tcase 'callback':\n\t\t\t\tif (getFromProcess) {\n\t\t\t\t\tstore = store.concat(Utils.getRefs(value.process_graph, getFromCallbacks, getFromCallbacks));\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'array':\n\t\t\tcase 'object':\n\t\t\t\tfor(var key in value) {\n\t\t\t\t\tstore = store.concat(Utils.getRefs(value[key], getFromProcess, getFromCallbacks));\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\treturn Utils.unique(store, true);\n\t}\n\n\t/**\n\t * Returns the type of the value.\n\t * \n\t * Similar to typeof, but gives more details for objects (array, parameter, callback, result, null, object).\n\t * \n\t * @param {*} value \n\t * @returns {string}\n\t */\n\tstatic getType(value) {\n\t\tconst ProcessGraph = require('./processgraph');\n\t\tif (typeof value === 'object') {\n\t\t\tif (value === null) {\n\t\t\t\treturn 'null';\n\t\t\t}\n\t\t\telse if (Array.isArray(value)) {\n\t\t\t\treturn 'array';\n\t\t\t}\n\t\t\telse if(value.hasOwnProperty(\"process_graph\") || value instanceof ProcessGraph) {\n\t\t\t\treturn 'callback';\n\t\t\t}\n\t\t\telse if(value.hasOwnProperty(\"from_node\")) {\n\t\t\t\treturn 'result';\n\t\t\t}\n\t\t\telse if(value.hasOwnProperty(\"from_parameter\")) {\n\t\t\t\treturn 'parameter';\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn 'object';\n\t\t\t}\n\t\t}\n\t\treturn (typeof value);\n\t}\n\n}\n\nmodule.exports = Utils;"],"names":["Utils","MESSAGES","ProcessGraphError","Error","constructor","codeOrMsg","variables","super","this","code","message","replacePlaceholders","replace","toJSON","module","exports","ErrorList","errors","first","last","length","merge","errorList","concat","getAll","add","error","push","count","map","e","getMessage","msg","i","parseInt","trim","Ajv","ProcessUtils","keywords","geoJsonSchema","subtypeSchemas","JsonSchemaValidator","ajv","schemaId","format","addUsedSchema","addSchema","addKeyword","Object","assign","parameters","valid","returns","subtype","validate","async","data","schema","validateSubtype","collections","epsgCodes","fileFormats","input","output","processRegistry","udfRuntimes","getFunctionName","a","b","char","toUpperCase","makeSchema","$async","deepClone","Array","isArray","anyOf","$schema","isObject","definitions","key","validateValue","value","required","properties","validated","funcName","setUdfRuntimes","setCollections","c","id","setFileFormats","io","setEpsgCodes","v","validateCollectionId","find","ValidationError","validateUdfRuntime","validateEpsgCode","includes","validateInputFormat","validateOutputFormat","validateProjDefinition","toLowerCase","validateWkt2Definition","codeWords","some","word","indexOf","validateTemporalInterval","date1","Date","date2","getTime","validateTemporalIntervals","interval","setProcessGraphParser","processGraph","validateProcessGraph","ProcessGraph","parser","createProcessGraphInstance","isSchemaCompatible","paramSchema","valueSchema","strict","allowValueAsElements","paramSchemas","normalizeJsonSchema","valueSchemas","compatible","findIndex","ps","vs","type","items","checkArray","oneOf","metaSchema","dependencies","name","pattern","description","optional","default","deprecated","experimental","BaseProcess","ProcessGraphNode","ProcessRegistry","node","parent","node_id","process_id","source","namespace","arguments","isResultNode","result","expectsFrom","receivedFrom","passesTo","computedResult","undefined","args","mapObjectValues","arg","getProcessGraph","getParent","getParentNode","getArgumentNames","keys","hasArgument","getArgumentType","getType","getRawArgument","getParsedArgument","getArgument","defaultValue","evaluateArgument","getArgumentRefs","getRefs","getProcessGraphParameterValue","pg","hasParameterDefault","getParameterDefault","allowUndefinedParameterRefs","argument","getNode","from_node","getResult","from_parameter","copy","isStartNode","addPreviousNode","other","getPreviousNodes","sort","localeCompare","addNextNode","getNextNodes","reset","getDescription","setDescription","setResult","solveDependency","dependencyNode","spec","omitFromObject","unsupportedArgs","filter","p","process","param","rawArg","validateArgument","path","argType","callbackParam","getCallbackParameter","reason","parameter","getProcessParameter","resultNode","getProcess","schemas","isProcessGraphSchema","containsRef","elementSchema","getElementJsonSchema","lastError","validator","getJsonSchemaValidator","execute","test","processKeys","jsonSchemaValidator","nodes","startNodes","children","parentNode","parsed","callbackParameters","allowEmptyGraph","fillProcessParameters","createJsonSchemaValidatorInstance","createNodeInstance","nodeObj","copyProcessGraphInstanceProperties","createProcessInstance","createChildProcessGraph","parameterPath","setArguments","setParentNode","parameterName","shift","setCallbackParameters","getCallbackParametersForProcess","getParentProcess","parse","isValid","addError","allowUndefinedParameters","allow","fillUndefinedParameters","fill","allowEmpty","makeError","errorId","getParentProcessId","size","process_graph","hasProcessKey","parseNodeArguments","values","throwOnErrors","validateNodes","getStartNodes","executeNodes","getResultNode","previousNode","promises","validateNode","Promise","all","executeNode","nodeId","argumentName","prevNode","hasParameter","addProcessParameter","getCallbackParameters","getParameter","getProcessParameters","includeUndefined","slice","refs","ref","processParam","forEach","child","getStartNodeIds","getNodeCount","getNodes","getErrors","get","CommonProcessRegistry","CommonUtils","checkProcess","checkCallbacks","getFromProcess","getFromCallbacks","store","unique","hasOwnProperty"],"sourceRoot":""}