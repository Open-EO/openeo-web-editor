{"version":3,"file":"js/8022.8a0498d3.js","mappings":"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","sources":["webpack://@openeo/web-editor/./node_modules/ol/renderer/canvas/ImageLayer.js","webpack://@openeo/web-editor/./node_modules/ol/renderer/canvas/Layer.js","webpack://@openeo/web-editor/./node_modules/ol/renderer/canvas/TileLayer.js","webpack://@openeo/web-editor/./node_modules/ol/renderer/canvas/VectorLayer.js","webpack://@openeo/web-editor/./node_modules/ol/renderer/canvas/VectorTileLayer.js","webpack://@openeo/web-editor/./node_modules/ol/renderer/canvas/common.js","webpack://@openeo/web-editor/./node_modules/ol/renderer/vector.js","webpack://@openeo/web-editor/./node_modules/ol/renderer/webgl/Layer.js","webpack://@openeo/web-editor/./node_modules/ol/renderer/webgl/PointsLayer.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/renderer/canvas/ImageLayer\n */\nimport CanvasLayerRenderer from './Layer.js';\nimport ImageState from '../../ImageState.js';\nimport ViewHint from '../../ViewHint.js';\nimport { ENABLE_RASTER_REPROJECTION } from '../../reproj/common.js';\nimport { IMAGE_SMOOTHING_DISABLED, IMAGE_SMOOTHING_ENABLED } from './common.js';\nimport { apply as applyTransform, compose as composeTransform, makeInverse, toString as toTransformString, } from '../../transform.js';\nimport { assign } from '../../obj.js';\nimport { containsCoordinate, containsExtent, getHeight, getIntersection, getWidth, intersects as intersectsExtent, isEmpty, } from '../../extent.js';\nimport { fromUserExtent } from '../../proj.js';\n/**\n * @classdesc\n * Canvas renderer for image layers.\n * @api\n */\nvar CanvasImageLayerRenderer = /** @class */ (function (_super) {\n    __extends(CanvasImageLayerRenderer, _super);\n    /**\n     * @param {import(\"../../layer/Image.js\").default} imageLayer Image layer.\n     */\n    function CanvasImageLayerRenderer(imageLayer) {\n        var _this = _super.call(this, imageLayer) || this;\n        /**\n         * @protected\n         * @type {?import(\"../../ImageBase.js\").default}\n         */\n        _this.image_ = null;\n        return _this;\n    }\n    /**\n     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n     */\n    CanvasImageLayerRenderer.prototype.getImage = function () {\n        return !this.image_ ? null : this.image_.getImage();\n    };\n    /**\n     * Determine whether render should be called.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {boolean} Layer is ready to be rendered.\n     */\n    CanvasImageLayerRenderer.prototype.prepareFrame = function (frameState) {\n        var layerState = frameState.layerStatesArray[frameState.layerIndex];\n        var pixelRatio = frameState.pixelRatio;\n        var viewState = frameState.viewState;\n        var viewResolution = viewState.resolution;\n        var imageSource = this.getLayer().getSource();\n        var hints = frameState.viewHints;\n        var renderedExtent = frameState.extent;\n        if (layerState.extent !== undefined) {\n            renderedExtent = getIntersection(renderedExtent, fromUserExtent(layerState.extent, viewState.projection));\n        }\n        if (!hints[ViewHint.ANIMATING] &&\n            !hints[ViewHint.INTERACTING] &&\n            !isEmpty(renderedExtent)) {\n            if (imageSource) {\n                var projection = viewState.projection;\n                if (!ENABLE_RASTER_REPROJECTION) {\n                    var sourceProjection = imageSource.getProjection();\n                    if (sourceProjection) {\n                        projection = sourceProjection;\n                    }\n                }\n                var image = imageSource.getImage(renderedExtent, viewResolution, pixelRatio, projection);\n                if (image) {\n                    if (this.loadImage(image)) {\n                        this.image_ = image;\n                    }\n                    else if (image.getState() === ImageState.EMPTY) {\n                        this.image_ = null;\n                    }\n                }\n            }\n            else {\n                this.image_ = null;\n            }\n        }\n        return !!this.image_;\n    };\n    /**\n     * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n     * @return {Uint8ClampedArray} Data at the pixel location.\n     */\n    CanvasImageLayerRenderer.prototype.getData = function (pixel) {\n        var frameState = this.frameState;\n        if (!frameState) {\n            return null;\n        }\n        var layer = this.getLayer();\n        var coordinate = applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n        var layerExtent = layer.getExtent();\n        if (layerExtent) {\n            if (!containsCoordinate(layerExtent, coordinate)) {\n                return null;\n            }\n        }\n        var imageExtent = this.image_.getExtent();\n        var img = this.image_.getImage();\n        var imageMapWidth = getWidth(imageExtent);\n        var col = Math.floor(img.width * ((coordinate[0] - imageExtent[0]) / imageMapWidth));\n        if (col < 0 || col >= img.width) {\n            return null;\n        }\n        var imageMapHeight = getHeight(imageExtent);\n        var row = Math.floor(img.height * ((imageExtent[3] - coordinate[1]) / imageMapHeight));\n        if (row < 0 || row >= img.height) {\n            return null;\n        }\n        return this.getImageData(img, col, row);\n    };\n    /**\n     * Render the layer.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {HTMLElement} target Target that may be used to render content to.\n     * @return {HTMLElement} The rendered element.\n     */\n    CanvasImageLayerRenderer.prototype.renderFrame = function (frameState, target) {\n        var image = this.image_;\n        var imageExtent = image.getExtent();\n        var imageResolution = image.getResolution();\n        var imagePixelRatio = image.getPixelRatio();\n        var layerState = frameState.layerStatesArray[frameState.layerIndex];\n        var pixelRatio = frameState.pixelRatio;\n        var viewState = frameState.viewState;\n        var viewCenter = viewState.center;\n        var viewResolution = viewState.resolution;\n        var scale = (pixelRatio * imageResolution) / (viewResolution * imagePixelRatio);\n        var extent = frameState.extent;\n        var resolution = viewState.resolution;\n        var rotation = viewState.rotation;\n        // desired dimensions of the canvas in pixels\n        var width = Math.round((getWidth(extent) / resolution) * pixelRatio);\n        var height = Math.round((getHeight(extent) / resolution) * pixelRatio);\n        // set forward and inverse pixel transforms\n        composeTransform(this.pixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / pixelRatio, 1 / pixelRatio, rotation, -width / 2, -height / 2);\n        makeInverse(this.inversePixelTransform, this.pixelTransform);\n        var canvasTransform = toTransformString(this.pixelTransform);\n        this.useContainer(target, canvasTransform, this.getBackground(frameState));\n        var context = this.context;\n        var canvas = context.canvas;\n        if (canvas.width != width || canvas.height != height) {\n            canvas.width = width;\n            canvas.height = height;\n        }\n        else if (!this.containerReused) {\n            context.clearRect(0, 0, width, height);\n        }\n        // clipped rendering if layer extent is set\n        var clipped = false;\n        var render = true;\n        if (layerState.extent) {\n            var layerExtent = fromUserExtent(layerState.extent, viewState.projection);\n            render = intersectsExtent(layerExtent, frameState.extent);\n            clipped = render && !containsExtent(layerExtent, frameState.extent);\n            if (clipped) {\n                this.clipUnrotated(context, frameState, layerExtent);\n            }\n        }\n        var img = image.getImage();\n        var transform = composeTransform(this.tempTransform, width / 2, height / 2, scale, scale, 0, (imagePixelRatio * (imageExtent[0] - viewCenter[0])) / imageResolution, (imagePixelRatio * (viewCenter[1] - imageExtent[3])) / imageResolution);\n        this.renderedResolution = (imageResolution * pixelRatio) / imagePixelRatio;\n        var dw = img.width * transform[0];\n        var dh = img.height * transform[3];\n        if (!this.getLayer().getSource().getInterpolate()) {\n            assign(context, IMAGE_SMOOTHING_DISABLED);\n        }\n        this.preRender(context, frameState);\n        if (render && dw >= 0.5 && dh >= 0.5) {\n            var dx = transform[4];\n            var dy = transform[5];\n            var opacity = layerState.opacity;\n            var previousAlpha = void 0;\n            if (opacity !== 1) {\n                previousAlpha = context.globalAlpha;\n                context.globalAlpha = opacity;\n            }\n            context.drawImage(img, 0, 0, +img.width, +img.height, dx, dy, dw, dh);\n            if (opacity !== 1) {\n                context.globalAlpha = previousAlpha;\n            }\n        }\n        this.postRender(context, frameState);\n        if (clipped) {\n            context.restore();\n        }\n        assign(context, IMAGE_SMOOTHING_ENABLED);\n        if (canvasTransform !== canvas.style.transform) {\n            canvas.style.transform = canvasTransform;\n        }\n        return this.container;\n    };\n    return CanvasImageLayerRenderer;\n}(CanvasLayerRenderer));\nexport default CanvasImageLayerRenderer;\n//# sourceMappingURL=ImageLayer.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/renderer/canvas/Layer\n */\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport { apply as applyTransform, compose as composeTransform, create as createTransform, } from '../../transform.js';\nimport { asArray } from '../../color.js';\nimport { containsCoordinate, getBottomLeft, getBottomRight, getTopLeft, getTopRight, } from '../../extent.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { equals } from '../../array.js';\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nexport var canvasPool = [];\n/**\n * @type {CanvasRenderingContext2D}\n */\nvar pixelContext = null;\nfunction createPixelContext() {\n    var canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    pixelContext = canvas.getContext('2d');\n}\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nvar CanvasLayerRenderer = /** @class */ (function (_super) {\n    __extends(CanvasLayerRenderer, _super);\n    /**\n     * @param {LayerType} layer Layer.\n     */\n    function CanvasLayerRenderer(layer) {\n        var _this = _super.call(this, layer) || this;\n        /**\n         * @protected\n         * @type {HTMLElement}\n         */\n        _this.container = null;\n        /**\n         * @protected\n         * @type {number}\n         */\n        _this.renderedResolution;\n        /**\n         * A temporary transform.  The values in this transform should only be used in a\n         * function that sets the values.\n         * @protected\n         * @type {import(\"../../transform.js\").Transform}\n         */\n        _this.tempTransform = createTransform();\n        /**\n         * The transform for rendered pixels to viewport CSS pixels.  This transform must\n         * be set when rendering a frame and may be used by other functions after rendering.\n         * @protected\n         * @type {import(\"../../transform.js\").Transform}\n         */\n        _this.pixelTransform = createTransform();\n        /**\n         * The transform for viewport CSS pixels to rendered pixels.  This transform must\n         * be set when rendering a frame and may be used by other functions after rendering.\n         * @protected\n         * @type {import(\"../../transform.js\").Transform}\n         */\n        _this.inversePixelTransform = createTransform();\n        /**\n         * @type {CanvasRenderingContext2D}\n         */\n        _this.context = null;\n        /**\n         * @type {boolean}\n         */\n        _this.containerReused = false;\n        /**\n         * @private\n         * @type {CanvasRenderingContext2D}\n         */\n        _this.pixelContext_ = null;\n        /**\n         * @protected\n         * @type {import(\"../../PluggableMap.js\").FrameState|null}\n         */\n        _this.frameState = null;\n        return _this;\n    }\n    /**\n     * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n     * @param {number} col The column index.\n     * @param {number} row The row index.\n     * @return {Uint8ClampedArray|null} The image data.\n     */\n    CanvasLayerRenderer.prototype.getImageData = function (image, col, row) {\n        if (!pixelContext) {\n            createPixelContext();\n        }\n        pixelContext.clearRect(0, 0, 1, 1);\n        var data;\n        try {\n            pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);\n            data = pixelContext.getImageData(0, 0, 1, 1).data;\n        }\n        catch (err) {\n            pixelContext = null;\n            return null;\n        }\n        return data;\n    };\n    /**\n     * @param {import('../../PluggableMap.js').FrameState} frameState Frame state.\n     * @return {string} Background color.\n     */\n    CanvasLayerRenderer.prototype.getBackground = function (frameState) {\n        var layer = this.getLayer();\n        var background = layer.getBackground();\n        if (typeof background === 'function') {\n            background = background(frameState.viewState.resolution);\n        }\n        return background || undefined;\n    };\n    /**\n     * Get a rendering container from an existing target, if compatible.\n     * @param {HTMLElement} target Potential render target.\n     * @param {string} transform CSS Transform.\n     * @param {string} [opt_backgroundColor] Background color.\n     */\n    CanvasLayerRenderer.prototype.useContainer = function (target, transform, opt_backgroundColor) {\n        var layerClassName = this.getLayer().getClassName();\n        var container, context;\n        if (target &&\n            target.className === layerClassName &&\n            (!opt_backgroundColor ||\n                (target &&\n                    target.style.backgroundColor &&\n                    equals(asArray(target.style.backgroundColor), asArray(opt_backgroundColor))))) {\n            var canvas = target.firstElementChild;\n            if (canvas instanceof HTMLCanvasElement) {\n                context = canvas.getContext('2d');\n            }\n        }\n        if (context && context.canvas.style.transform === transform) {\n            // Container of the previous layer renderer can be used.\n            this.container = target;\n            this.context = context;\n            this.containerReused = true;\n        }\n        else if (this.containerReused) {\n            // Previously reused container cannot be used any more.\n            this.container = null;\n            this.context = null;\n            this.containerReused = false;\n        }\n        if (!this.container) {\n            container = document.createElement('div');\n            container.className = layerClassName;\n            var style = container.style;\n            style.position = 'absolute';\n            style.width = '100%';\n            style.height = '100%';\n            context = createCanvasContext2D();\n            var canvas = context.canvas;\n            container.appendChild(canvas);\n            style = canvas.style;\n            style.position = 'absolute';\n            style.left = '0';\n            style.transformOrigin = 'top left';\n            this.container = container;\n            this.context = context;\n        }\n        if (!this.containerReused &&\n            opt_backgroundColor &&\n            !this.container.style.backgroundColor) {\n            this.container.style.backgroundColor = opt_backgroundColor;\n        }\n    };\n    /**\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n     * @protected\n     */\n    CanvasLayerRenderer.prototype.clipUnrotated = function (context, frameState, extent) {\n        var topLeft = getTopLeft(extent);\n        var topRight = getTopRight(extent);\n        var bottomRight = getBottomRight(extent);\n        var bottomLeft = getBottomLeft(extent);\n        applyTransform(frameState.coordinateToPixelTransform, topLeft);\n        applyTransform(frameState.coordinateToPixelTransform, topRight);\n        applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n        applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n        var inverted = this.inversePixelTransform;\n        applyTransform(inverted, topLeft);\n        applyTransform(inverted, topRight);\n        applyTransform(inverted, bottomRight);\n        applyTransform(inverted, bottomLeft);\n        context.save();\n        context.beginPath();\n        context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n        context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n        context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n        context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n        context.clip();\n    };\n    /**\n     * @param {import(\"../../render/EventType.js\").default} type Event type.\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @private\n     */\n    CanvasLayerRenderer.prototype.dispatchRenderEvent_ = function (type, context, frameState) {\n        var layer = this.getLayer();\n        if (layer.hasListener(type)) {\n            var event_1 = new RenderEvent(type, this.inversePixelTransform, frameState, context);\n            layer.dispatchEvent(event_1);\n        }\n    };\n    /**\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n    CanvasLayerRenderer.prototype.preRender = function (context, frameState) {\n        this.frameState = frameState;\n        this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n    };\n    /**\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n    CanvasLayerRenderer.prototype.postRender = function (context, frameState) {\n        this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n    };\n    /**\n     * Creates a transform for rendering to an element that will be rotated after rendering.\n     * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n     * @param {number} resolution Resolution.\n     * @param {number} rotation Rotation.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {number} width Width of the rendered element (in pixels).\n     * @param {number} height Height of the rendered element (in pixels).\n     * @param {number} offsetX Offset on the x-axis in view coordinates.\n     * @protected\n     * @return {!import(\"../../transform.js\").Transform} Transform.\n     */\n    CanvasLayerRenderer.prototype.getRenderTransform = function (center, resolution, rotation, pixelRatio, width, height, offsetX) {\n        var dx1 = width / 2;\n        var dy1 = height / 2;\n        var sx = pixelRatio / resolution;\n        var sy = -sx;\n        var dx2 = -center[0] + offsetX;\n        var dy2 = -center[1];\n        return composeTransform(this.tempTransform, dx1, dy1, sx, sy, -rotation, dx2, dy2);\n    };\n    /**\n     * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState FrameState.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel\n     *    location, null will be returned.  If there is data, but pixel values cannot be\n     *    returned, and empty array will be returned.\n     */\n    CanvasLayerRenderer.prototype.getDataAtPixel = function (pixel, frameState, hitTolerance) {\n        var renderPixel = applyTransform(this.inversePixelTransform, pixel.slice());\n        var context = this.context;\n        var layer = this.getLayer();\n        var layerExtent = layer.getExtent();\n        if (layerExtent) {\n            var renderCoordinate = applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n            /** get only data inside of the layer extent */\n            if (!containsCoordinate(layerExtent, renderCoordinate)) {\n                return null;\n            }\n        }\n        var x = Math.round(renderPixel[0]);\n        var y = Math.round(renderPixel[1]);\n        var pixelContext = this.pixelContext_;\n        if (!pixelContext) {\n            var pixelCanvas = document.createElement('canvas');\n            pixelCanvas.width = 1;\n            pixelCanvas.height = 1;\n            pixelContext = pixelCanvas.getContext('2d');\n            this.pixelContext_ = pixelContext;\n        }\n        pixelContext.clearRect(0, 0, 1, 1);\n        var data;\n        try {\n            pixelContext.drawImage(context.canvas, x, y, 1, 1, 0, 0, 1, 1);\n            data = pixelContext.getImageData(0, 0, 1, 1).data;\n        }\n        catch (err) {\n            if (err.name === 'SecurityError') {\n                // tainted canvas, we assume there is data at the given pixel (although there might not be)\n                this.pixelContext_ = null;\n                return new Uint8Array();\n            }\n            return data;\n        }\n        if (data[3] === 0) {\n            return null;\n        }\n        return data;\n    };\n    /**\n     * Clean up.\n     */\n    CanvasLayerRenderer.prototype.disposeInternal = function () {\n        delete this.frameState;\n        _super.prototype.disposeInternal.call(this);\n    };\n    return CanvasLayerRenderer;\n}(LayerRenderer));\nexport default CanvasLayerRenderer;\n//# sourceMappingURL=Layer.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/renderer/canvas/TileLayer\n */\nimport CanvasLayerRenderer from './Layer.js';\nimport ImageTile from '../../ImageTile.js';\nimport ReprojTile from '../../reproj/Tile.js';\nimport TileRange from '../../TileRange.js';\nimport TileState from '../../TileState.js';\nimport { IMAGE_SMOOTHING_DISABLED, IMAGE_SMOOTHING_ENABLED } from './common.js';\nimport { apply as applyTransform, compose as composeTransform, makeInverse, toString as toTransformString, } from '../../transform.js';\nimport { assign } from '../../obj.js';\nimport { containsCoordinate, createEmpty, equals, getHeight, getIntersection, getRotatedViewport, getTopLeft, getWidth, intersects, } from '../../extent.js';\nimport { fromUserExtent } from '../../proj.js';\nimport { getUid } from '../../util.js';\nimport { numberSafeCompareFunction } from '../../array.js';\nimport { toSize } from '../../size.js';\n/**\n * @classdesc\n * Canvas renderer for tile layers.\n * @api\n * @template {import(\"../../layer/Tile.js\").default<import(\"../../source/Tile.js\").default>|import(\"../../layer/VectorTile.js\").default} [LayerType=import(\"../../layer/Tile.js\").default<import(\"../../source/Tile.js\").default>|import(\"../../layer/VectorTile.js\").default]\n * @extends {CanvasLayerRenderer<LayerType>}\n */\nvar CanvasTileLayerRenderer = /** @class */ (function (_super) {\n    __extends(CanvasTileLayerRenderer, _super);\n    /**\n     * @param {LayerType} tileLayer Tile layer.\n     */\n    function CanvasTileLayerRenderer(tileLayer) {\n        var _this = _super.call(this, tileLayer) || this;\n        /**\n         * Rendered extent has changed since the previous `renderFrame()` call\n         * @type {boolean}\n         */\n        _this.extentChanged = true;\n        /**\n         * @private\n         * @type {?import(\"../../extent.js\").Extent}\n         */\n        _this.renderedExtent_ = null;\n        /**\n         * @protected\n         * @type {number}\n         */\n        _this.renderedPixelRatio;\n        /**\n         * @protected\n         * @type {import(\"../../proj/Projection.js\").default}\n         */\n        _this.renderedProjection = null;\n        /**\n         * @protected\n         * @type {number}\n         */\n        _this.renderedRevision;\n        /**\n         * @protected\n         * @type {!Array<import(\"../../Tile.js\").default>}\n         */\n        _this.renderedTiles = [];\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.newTiles_ = false;\n        /**\n         * @protected\n         * @type {import(\"../../extent.js\").Extent}\n         */\n        _this.tmpExtent = createEmpty();\n        /**\n         * @private\n         * @type {import(\"../../TileRange.js\").default}\n         */\n        _this.tmpTileRange_ = new TileRange(0, 0, 0, 0);\n        return _this;\n    }\n    /**\n     * @protected\n     * @param {import(\"../../Tile.js\").default} tile Tile.\n     * @return {boolean} Tile is drawable.\n     */\n    CanvasTileLayerRenderer.prototype.isDrawableTile = function (tile) {\n        var tileLayer = this.getLayer();\n        var tileState = tile.getState();\n        var useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();\n        return (tileState == TileState.LOADED ||\n            tileState == TileState.EMPTY ||\n            (tileState == TileState.ERROR && !useInterimTilesOnError));\n    };\n    /**\n     * @param {number} z Tile coordinate z.\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {!import(\"../../Tile.js\").default} Tile.\n     */\n    CanvasTileLayerRenderer.prototype.getTile = function (z, x, y, frameState) {\n        var pixelRatio = frameState.pixelRatio;\n        var projection = frameState.viewState.projection;\n        var tileLayer = this.getLayer();\n        var tileSource = tileLayer.getSource();\n        var tile = tileSource.getTile(z, x, y, pixelRatio, projection);\n        if (tile.getState() == TileState.ERROR) {\n            if (!tileLayer.getUseInterimTilesOnError()) {\n                // When useInterimTilesOnError is false, we consider the error tile as loaded.\n                tile.setState(TileState.LOADED);\n            }\n            else if (tileLayer.getPreload() > 0) {\n                // Preloaded tiles for lower resolutions might have finished loading.\n                this.newTiles_ = true;\n            }\n        }\n        if (!this.isDrawableTile(tile)) {\n            tile = tile.getInterimTile();\n        }\n        return tile;\n    };\n    /**\n     * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n     * @return {Uint8ClampedArray} Data at the pixel location.\n     */\n    CanvasTileLayerRenderer.prototype.getData = function (pixel) {\n        var frameState = this.frameState;\n        if (!frameState) {\n            return null;\n        }\n        var layer = this.getLayer();\n        var coordinate = applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n        var layerExtent = layer.getExtent();\n        if (layerExtent) {\n            if (!containsCoordinate(layerExtent, coordinate)) {\n                return null;\n            }\n        }\n        var pixelRatio = frameState.pixelRatio;\n        var projection = frameState.viewState.projection;\n        var viewState = frameState.viewState;\n        var source = layer.getRenderSource();\n        var tileGrid = source.getTileGridForProjection(viewState.projection);\n        var tilePixelRatio = source.getTilePixelRatio(frameState.pixelRatio);\n        for (var z = tileGrid.getZForResolution(viewState.resolution); z >= tileGrid.getMinZoom(); --z) {\n            var tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n            var tile = source.getTile(z, tileCoord[1], tileCoord[2], pixelRatio, projection);\n            if (!(tile instanceof ImageTile || tile instanceof ReprojTile)) {\n                return null;\n            }\n            if (tile.getState() !== TileState.LOADED) {\n                continue;\n            }\n            var tileOrigin = tileGrid.getOrigin(z);\n            var tileSize = toSize(tileGrid.getTileSize(z));\n            var tileResolution = tileGrid.getResolution(z);\n            var col = Math.floor(tilePixelRatio *\n                ((coordinate[0] - tileOrigin[0]) / tileResolution -\n                    tileCoord[1] * tileSize[0]));\n            var row = Math.floor(tilePixelRatio *\n                ((tileOrigin[1] - coordinate[1]) / tileResolution -\n                    tileCoord[2] * tileSize[1]));\n            var gutter = Math.round(tilePixelRatio * source.getGutterForProjection(viewState.projection));\n            return this.getImageData(tile.getImage(), col + gutter, row + gutter);\n        }\n        return null;\n    };\n    /**\n     * @param {Object<number, Object<string, import(\"../../Tile.js\").default>>} tiles Lookup of loaded tiles by zoom level.\n     * @param {number} zoom Zoom level.\n     * @param {import(\"../../Tile.js\").default} tile Tile.\n     * @return {boolean|void} If `false`, the tile will not be considered loaded.\n     */\n    CanvasTileLayerRenderer.prototype.loadedTileCallback = function (tiles, zoom, tile) {\n        if (this.isDrawableTile(tile)) {\n            return _super.prototype.loadedTileCallback.call(this, tiles, zoom, tile);\n        }\n        return false;\n    };\n    /**\n     * Determine whether render should be called.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {boolean} Layer is ready to be rendered.\n     */\n    CanvasTileLayerRenderer.prototype.prepareFrame = function (frameState) {\n        return !!this.getLayer().getSource();\n    };\n    /**\n     * Render the layer.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {HTMLElement} target Target that may be used to render content to.\n     * @return {HTMLElement} The rendered element.\n     */\n    CanvasTileLayerRenderer.prototype.renderFrame = function (frameState, target) {\n        var layerState = frameState.layerStatesArray[frameState.layerIndex];\n        var viewState = frameState.viewState;\n        var projection = viewState.projection;\n        var viewResolution = viewState.resolution;\n        var viewCenter = viewState.center;\n        var rotation = viewState.rotation;\n        var pixelRatio = frameState.pixelRatio;\n        var tileLayer = this.getLayer();\n        var tileSource = tileLayer.getSource();\n        var sourceRevision = tileSource.getRevision();\n        var tileGrid = tileSource.getTileGridForProjection(projection);\n        var z = tileGrid.getZForResolution(viewResolution, tileSource.zDirection);\n        var tileResolution = tileGrid.getResolution(z);\n        var extent = frameState.extent;\n        var resolution = frameState.viewState.resolution;\n        var tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);\n        // desired dimensions of the canvas in pixels\n        var width = Math.round((getWidth(extent) / resolution) * pixelRatio);\n        var height = Math.round((getHeight(extent) / resolution) * pixelRatio);\n        var layerExtent = layerState.extent && fromUserExtent(layerState.extent, projection);\n        if (layerExtent) {\n            extent = getIntersection(extent, fromUserExtent(layerState.extent, projection));\n        }\n        var dx = (tileResolution * width) / 2 / tilePixelRatio;\n        var dy = (tileResolution * height) / 2 / tilePixelRatio;\n        var canvasExtent = [\n            viewCenter[0] - dx,\n            viewCenter[1] - dy,\n            viewCenter[0] + dx,\n            viewCenter[1] + dy,\n        ];\n        var tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n        /**\n         * @type {Object<number, Object<string, import(\"../../Tile.js\").default>>}\n         */\n        var tilesToDrawByZ = {};\n        tilesToDrawByZ[z] = {};\n        var findLoadedTiles = this.createLoadedTileFinder(tileSource, projection, tilesToDrawByZ);\n        var tmpExtent = this.tmpExtent;\n        var tmpTileRange = this.tmpTileRange_;\n        this.newTiles_ = false;\n        var viewport = rotation\n            ? getRotatedViewport(viewState.center, resolution, rotation, frameState.size)\n            : undefined;\n        for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {\n            for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {\n                if (rotation &&\n                    !tileGrid.tileCoordIntersectsViewport([z, x, y], viewport)) {\n                    continue;\n                }\n                var tile = this.getTile(z, x, y, frameState);\n                if (this.isDrawableTile(tile)) {\n                    var uid = getUid(this);\n                    if (tile.getState() == TileState.LOADED) {\n                        tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;\n                        var inTransition = tile.inTransition(uid);\n                        if (inTransition && layerState.opacity !== 1) {\n                            // Skipping transition when layer is not fully opaque avoids visual artifacts.\n                            tile.endTransition(uid);\n                            inTransition = false;\n                        }\n                        if (!this.newTiles_ &&\n                            (inTransition || this.renderedTiles.indexOf(tile) === -1)) {\n                            this.newTiles_ = true;\n                        }\n                    }\n                    if (tile.getAlpha(uid, frameState.time) === 1) {\n                        // don't look for alt tiles if alpha is 1\n                        continue;\n                    }\n                }\n                var childTileRange = tileGrid.getTileCoordChildTileRange(tile.tileCoord, tmpTileRange, tmpExtent);\n                var covered = false;\n                if (childTileRange) {\n                    covered = findLoadedTiles(z + 1, childTileRange);\n                }\n                if (!covered) {\n                    tileGrid.forEachTileCoordParentTileRange(tile.tileCoord, findLoadedTiles, tmpTileRange, tmpExtent);\n                }\n            }\n        }\n        var canvasScale = ((tileResolution / viewResolution) * pixelRatio) / tilePixelRatio;\n        // set forward and inverse pixel transforms\n        composeTransform(this.pixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / pixelRatio, 1 / pixelRatio, rotation, -width / 2, -height / 2);\n        var canvasTransform = toTransformString(this.pixelTransform);\n        this.useContainer(target, canvasTransform, this.getBackground(frameState));\n        var context = this.context;\n        var canvas = context.canvas;\n        makeInverse(this.inversePixelTransform, this.pixelTransform);\n        // set scale transform for calculating tile positions on the canvas\n        composeTransform(this.tempTransform, width / 2, height / 2, canvasScale, canvasScale, 0, -width / 2, -height / 2);\n        if (canvas.width != width || canvas.height != height) {\n            canvas.width = width;\n            canvas.height = height;\n        }\n        else if (!this.containerReused) {\n            context.clearRect(0, 0, width, height);\n        }\n        if (layerExtent) {\n            this.clipUnrotated(context, frameState, layerExtent);\n        }\n        if (!tileSource.getInterpolate()) {\n            assign(context, IMAGE_SMOOTHING_DISABLED);\n        }\n        this.preRender(context, frameState);\n        this.renderedTiles.length = 0;\n        /** @type {Array<number>} */\n        var zs = Object.keys(tilesToDrawByZ).map(Number);\n        zs.sort(numberSafeCompareFunction);\n        var clips, clipZs, currentClip;\n        if (layerState.opacity === 1 &&\n            (!this.containerReused ||\n                tileSource.getOpaque(frameState.viewState.projection))) {\n            zs = zs.reverse();\n        }\n        else {\n            clips = [];\n            clipZs = [];\n        }\n        for (var i = zs.length - 1; i >= 0; --i) {\n            var currentZ = zs[i];\n            var currentTilePixelSize = tileSource.getTilePixelSize(currentZ, pixelRatio, projection);\n            var currentResolution = tileGrid.getResolution(currentZ);\n            var currentScale = currentResolution / tileResolution;\n            var dx_1 = currentTilePixelSize[0] * currentScale * canvasScale;\n            var dy_1 = currentTilePixelSize[1] * currentScale * canvasScale;\n            var originTileCoord = tileGrid.getTileCoordForCoordAndZ(getTopLeft(canvasExtent), currentZ);\n            var originTileExtent = tileGrid.getTileCoordExtent(originTileCoord);\n            var origin_1 = applyTransform(this.tempTransform, [\n                (tilePixelRatio * (originTileExtent[0] - canvasExtent[0])) /\n                    tileResolution,\n                (tilePixelRatio * (canvasExtent[3] - originTileExtent[3])) /\n                    tileResolution,\n            ]);\n            var tileGutter = tilePixelRatio * tileSource.getGutterForProjection(projection);\n            var tilesToDraw = tilesToDrawByZ[currentZ];\n            for (var tileCoordKey in tilesToDraw) {\n                var tile = /** @type {import(\"../../ImageTile.js\").default} */ (tilesToDraw[tileCoordKey]);\n                var tileCoord = tile.tileCoord;\n                // Calculate integer positions and sizes so that tiles align\n                var xIndex = originTileCoord[1] - tileCoord[1];\n                var nextX = Math.round(origin_1[0] - (xIndex - 1) * dx_1);\n                var yIndex = originTileCoord[2] - tileCoord[2];\n                var nextY = Math.round(origin_1[1] - (yIndex - 1) * dy_1);\n                var x = Math.round(origin_1[0] - xIndex * dx_1);\n                var y = Math.round(origin_1[1] - yIndex * dy_1);\n                var w = nextX - x;\n                var h = nextY - y;\n                var transition = z === currentZ;\n                var inTransition = transition && tile.getAlpha(getUid(this), frameState.time) !== 1;\n                var contextSaved = false;\n                if (!inTransition) {\n                    if (clips) {\n                        // Clip mask for regions in this tile that already filled by a higher z tile\n                        currentClip = [x, y, x + w, y, x + w, y + h, x, y + h];\n                        for (var i_1 = 0, ii = clips.length; i_1 < ii; ++i_1) {\n                            if (z !== currentZ && currentZ < clipZs[i_1]) {\n                                var clip = clips[i_1];\n                                if (intersects([x, y, x + w, y + h], [clip[0], clip[3], clip[4], clip[7]])) {\n                                    if (!contextSaved) {\n                                        context.save();\n                                        contextSaved = true;\n                                    }\n                                    context.beginPath();\n                                    // counter-clockwise (outer ring) for current tile\n                                    context.moveTo(currentClip[0], currentClip[1]);\n                                    context.lineTo(currentClip[2], currentClip[3]);\n                                    context.lineTo(currentClip[4], currentClip[5]);\n                                    context.lineTo(currentClip[6], currentClip[7]);\n                                    // clockwise (inner ring) for higher z tile\n                                    context.moveTo(clip[6], clip[7]);\n                                    context.lineTo(clip[4], clip[5]);\n                                    context.lineTo(clip[2], clip[3]);\n                                    context.lineTo(clip[0], clip[1]);\n                                    context.clip();\n                                }\n                            }\n                        }\n                        clips.push(currentClip);\n                        clipZs.push(currentZ);\n                    }\n                    else {\n                        context.clearRect(x, y, w, h);\n                    }\n                }\n                this.drawTileImage(tile, frameState, x, y, w, h, tileGutter, transition);\n                if (clips && !inTransition) {\n                    if (contextSaved) {\n                        context.restore();\n                    }\n                    this.renderedTiles.unshift(tile);\n                }\n                else {\n                    this.renderedTiles.push(tile);\n                }\n                this.updateUsedTiles(frameState.usedTiles, tileSource, tile);\n            }\n        }\n        this.renderedRevision = sourceRevision;\n        this.renderedResolution = tileResolution;\n        this.extentChanged =\n            !this.renderedExtent_ || !equals(this.renderedExtent_, canvasExtent);\n        this.renderedExtent_ = canvasExtent;\n        this.renderedPixelRatio = pixelRatio;\n        this.renderedProjection = projection;\n        this.manageTilePyramid(frameState, tileSource, tileGrid, pixelRatio, projection, extent, z, tileLayer.getPreload());\n        this.scheduleExpireCache(frameState, tileSource);\n        this.postRender(context, frameState);\n        if (layerState.extent) {\n            context.restore();\n        }\n        assign(context, IMAGE_SMOOTHING_ENABLED);\n        if (canvasTransform !== canvas.style.transform) {\n            canvas.style.transform = canvasTransform;\n        }\n        return this.container;\n    };\n    /**\n     * @param {import(\"../../ImageTile.js\").default} tile Tile.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {number} x Left of the tile.\n     * @param {number} y Top of the tile.\n     * @param {number} w Width of the tile.\n     * @param {number} h Height of the tile.\n     * @param {number} gutter Tile gutter.\n     * @param {boolean} transition Apply an alpha transition.\n     */\n    CanvasTileLayerRenderer.prototype.drawTileImage = function (tile, frameState, x, y, w, h, gutter, transition) {\n        var image = this.getTileImage(tile);\n        if (!image) {\n            return;\n        }\n        var uid = getUid(this);\n        var layerState = frameState.layerStatesArray[frameState.layerIndex];\n        var alpha = layerState.opacity *\n            (transition ? tile.getAlpha(uid, frameState.time) : 1);\n        var alphaChanged = alpha !== this.context.globalAlpha;\n        if (alphaChanged) {\n            this.context.save();\n            this.context.globalAlpha = alpha;\n        }\n        this.context.drawImage(image, gutter, gutter, image.width - 2 * gutter, image.height - 2 * gutter, x, y, w, h);\n        if (alphaChanged) {\n            this.context.restore();\n        }\n        if (alpha !== layerState.opacity) {\n            frameState.animate = true;\n        }\n        else if (transition) {\n            tile.endTransition(uid);\n        }\n    };\n    /**\n     * @return {HTMLCanvasElement} Image\n     */\n    CanvasTileLayerRenderer.prototype.getImage = function () {\n        var context = this.context;\n        return context ? context.canvas : null;\n    };\n    /**\n     * Get the image from a tile.\n     * @param {import(\"../../ImageTile.js\").default} tile Tile.\n     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n     * @protected\n     */\n    CanvasTileLayerRenderer.prototype.getTileImage = function (tile) {\n        return tile.getImage();\n    };\n    /**\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n     * @protected\n     */\n    CanvasTileLayerRenderer.prototype.scheduleExpireCache = function (frameState, tileSource) {\n        if (tileSource.canExpireCache()) {\n            /**\n             * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n             * @param {import(\"../../PluggableMap.js\").default} map Map.\n             * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n             */\n            var postRenderFunction = function (tileSource, map, frameState) {\n                var tileSourceKey = getUid(tileSource);\n                if (tileSourceKey in frameState.usedTiles) {\n                    tileSource.expireCache(frameState.viewState.projection, frameState.usedTiles[tileSourceKey]);\n                }\n            }.bind(null, tileSource);\n            frameState.postRenderFunctions.push(\n            /** @type {import(\"../../PluggableMap.js\").PostRenderFunction} */ (postRenderFunction));\n        }\n    };\n    /**\n     * @param {!Object<string, !Object<string, boolean>>} usedTiles Used tiles.\n     * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n     * @param {import('../../Tile.js').default} tile Tile.\n     * @protected\n     */\n    CanvasTileLayerRenderer.prototype.updateUsedTiles = function (usedTiles, tileSource, tile) {\n        // FIXME should we use tilesToDrawByZ instead?\n        var tileSourceKey = getUid(tileSource);\n        if (!(tileSourceKey in usedTiles)) {\n            usedTiles[tileSourceKey] = {};\n        }\n        usedTiles[tileSourceKey][tile.getKey()] = true;\n    };\n    /**\n     * Manage tile pyramid.\n     * This function performs a number of functions related to the tiles at the\n     * current zoom and lower zoom levels:\n     * - registers idle tiles in frameState.wantedTiles so that they are not\n     *   discarded by the tile queue\n     * - enqueues missing tiles\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n     * @param {import(\"../../tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../../proj/Projection.js\").default} projection Projection.\n     * @param {import(\"../../extent.js\").Extent} extent Extent.\n     * @param {number} currentZ Current Z.\n     * @param {number} preload Load low resolution tiles up to `preload` levels.\n     * @param {function(import(\"../../Tile.js\").default):void} [opt_tileCallback] Tile callback.\n     * @protected\n     */\n    CanvasTileLayerRenderer.prototype.manageTilePyramid = function (frameState, tileSource, tileGrid, pixelRatio, projection, extent, currentZ, preload, opt_tileCallback) {\n        var tileSourceKey = getUid(tileSource);\n        if (!(tileSourceKey in frameState.wantedTiles)) {\n            frameState.wantedTiles[tileSourceKey] = {};\n        }\n        var wantedTiles = frameState.wantedTiles[tileSourceKey];\n        var tileQueue = frameState.tileQueue;\n        var minZoom = tileGrid.getMinZoom();\n        var rotation = frameState.viewState.rotation;\n        var viewport = rotation\n            ? getRotatedViewport(frameState.viewState.center, frameState.viewState.resolution, rotation, frameState.size)\n            : undefined;\n        var tileCount = 0;\n        var tile, tileRange, tileResolution, x, y, z;\n        for (z = minZoom; z <= currentZ; ++z) {\n            tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, tileRange);\n            tileResolution = tileGrid.getResolution(z);\n            for (x = tileRange.minX; x <= tileRange.maxX; ++x) {\n                for (y = tileRange.minY; y <= tileRange.maxY; ++y) {\n                    if (rotation &&\n                        !tileGrid.tileCoordIntersectsViewport([z, x, y], viewport)) {\n                        continue;\n                    }\n                    if (currentZ - z <= preload) {\n                        ++tileCount;\n                        tile = tileSource.getTile(z, x, y, pixelRatio, projection);\n                        if (tile.getState() == TileState.IDLE) {\n                            wantedTiles[tile.getKey()] = true;\n                            if (!tileQueue.isKeyQueued(tile.getKey())) {\n                                tileQueue.enqueue([\n                                    tile,\n                                    tileSourceKey,\n                                    tileGrid.getTileCoordCenter(tile.tileCoord),\n                                    tileResolution,\n                                ]);\n                            }\n                        }\n                        if (opt_tileCallback !== undefined) {\n                            opt_tileCallback(tile);\n                        }\n                    }\n                    else {\n                        tileSource.useTile(z, x, y, projection);\n                    }\n                }\n            }\n        }\n        tileSource.updateCacheSize(tileCount, projection);\n    };\n    return CanvasTileLayerRenderer;\n}(CanvasLayerRenderer));\nexport default CanvasTileLayerRenderer;\n//# sourceMappingURL=TileLayer.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/renderer/canvas/VectorLayer\n */\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasLayerRenderer, { canvasPool } from './Layer.js';\nimport ExecutorGroup from '../../render/canvas/ExecutorGroup.js';\nimport ViewHint from '../../ViewHint.js';\nimport { HIT_DETECT_RESOLUTION, createHitDetectionImageData, hitDetect, } from '../../render/canvas/hitdetect.js';\nimport { apply, makeInverse, makeScale, toString as transformToString, } from '../../transform.js';\nimport { buffer, containsExtent, createEmpty, getWidth, intersects as intersectsExtent, wrapX as wrapExtentX, } from '../../extent.js';\nimport { createCanvasContext2D, releaseCanvas } from '../../dom.js';\nimport { defaultOrder as defaultRenderOrder, getTolerance as getRenderTolerance, getSquaredTolerance as getSquaredRenderTolerance, renderFeature, } from '../vector.js';\nimport { equals } from '../../array.js';\nimport { fromUserExtent, getTransformFromProjections, getUserProjection, toUserExtent, toUserResolution, } from '../../proj.js';\nimport { getUid } from '../../util.js';\nimport { wrapX as wrapCoordinateX } from '../../coordinate.js';\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\nvar CanvasVectorLayerRenderer = /** @class */ (function (_super) {\n    __extends(CanvasVectorLayerRenderer, _super);\n    /**\n     * @param {import(\"../../layer/BaseVector.js\").default} vectorLayer Vector layer.\n     */\n    function CanvasVectorLayerRenderer(vectorLayer) {\n        var _this = _super.call(this, vectorLayer) || this;\n        /** @private */\n        _this.boundHandleStyleImageChange_ = _this.handleStyleImageChange_.bind(_this);\n        /**\n         * @type {boolean}\n         */\n        _this.animatingOrInteracting_;\n        /**\n         * @type {ImageData}\n         */\n        _this.hitDetectionImageData_ = null;\n        /**\n         * @type {Array<import(\"../../Feature.js\").default>}\n         */\n        _this.renderedFeatures_ = null;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.renderedRevision_ = -1;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.renderedResolution_ = NaN;\n        /**\n         * @private\n         * @type {import(\"../../extent.js\").Extent}\n         */\n        _this.renderedExtent_ = createEmpty();\n        /**\n         * @private\n         * @type {import(\"../../extent.js\").Extent}\n         */\n        _this.wrappedRenderedExtent_ = createEmpty();\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.renderedRotation_;\n        /**\n         * @private\n         * @type {import(\"../../coordinate\").Coordinate}\n         */\n        _this.renderedCenter_ = null;\n        /**\n         * @private\n         * @type {import(\"../../proj/Projection\").default}\n         */\n        _this.renderedProjection_ = null;\n        /**\n         * @private\n         * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\n         */\n        _this.renderedRenderOrder_ = null;\n        /**\n         * @private\n         * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n         */\n        _this.replayGroup_ = null;\n        /**\n         * A new replay group had to be created by `prepareFrame()`\n         * @type {boolean}\n         */\n        _this.replayGroupChanged = true;\n        /**\n         * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n         */\n        _this.declutterExecutorGroup = null;\n        /**\n         * Clipping to be performed by `renderFrame()`\n         * @type {boolean}\n         */\n        _this.clipping = true;\n        /**\n         * @private\n         * @type {CanvasRenderingContext2D}\n         */\n        _this.compositionContext_ = null;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.opacity_ = 1;\n        return _this;\n    }\n    /**\n     * @param {ExecutorGroup} executorGroup Executor group.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {import(\"rbush\").default} [opt_declutterTree] Declutter tree.\n     */\n    CanvasVectorLayerRenderer.prototype.renderWorlds = function (executorGroup, frameState, opt_declutterTree) {\n        var extent = frameState.extent;\n        var viewState = frameState.viewState;\n        var center = viewState.center;\n        var resolution = viewState.resolution;\n        var projection = viewState.projection;\n        var rotation = viewState.rotation;\n        var projectionExtent = projection.getExtent();\n        var vectorSource = this.getLayer().getSource();\n        var pixelRatio = frameState.pixelRatio;\n        var viewHints = frameState.viewHints;\n        var snapToPixel = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n        var context = this.compositionContext_;\n        var width = Math.round(frameState.size[0] * pixelRatio);\n        var height = Math.round(frameState.size[1] * pixelRatio);\n        var multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n        var worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n        var endWorld = multiWorld\n            ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1\n            : 1;\n        var world = multiWorld\n            ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth)\n            : 0;\n        do {\n            var transform = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, world * worldWidth);\n            executorGroup.execute(context, 1, transform, rotation, snapToPixel, undefined, opt_declutterTree);\n        } while (++world < endWorld);\n    };\n    CanvasVectorLayerRenderer.prototype.setupCompositionContext_ = function () {\n        if (this.opacity_ !== 1) {\n            var compositionContext = createCanvasContext2D(this.context.canvas.width, this.context.canvas.height, canvasPool);\n            this.compositionContext_ = compositionContext;\n        }\n        else {\n            this.compositionContext_ = this.context;\n        }\n    };\n    CanvasVectorLayerRenderer.prototype.releaseCompositionContext_ = function () {\n        if (this.opacity_ !== 1) {\n            var alpha = this.context.globalAlpha;\n            this.context.globalAlpha = this.opacity_;\n            this.context.drawImage(this.compositionContext_.canvas, 0, 0);\n            this.context.globalAlpha = alpha;\n            releaseCanvas(this.compositionContext_);\n            canvasPool.push(this.compositionContext_.canvas);\n            this.compositionContext_ = null;\n        }\n    };\n    /**\n     * Render declutter items for this layer\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     */\n    CanvasVectorLayerRenderer.prototype.renderDeclutter = function (frameState) {\n        if (this.declutterExecutorGroup) {\n            this.setupCompositionContext_();\n            this.renderWorlds(this.declutterExecutorGroup, frameState, frameState.declutterTree);\n            this.releaseCompositionContext_();\n        }\n    };\n    /**\n     * Render the layer.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {HTMLElement} target Target that may be used to render content to.\n     * @return {HTMLElement} The rendered element.\n     */\n    CanvasVectorLayerRenderer.prototype.renderFrame = function (frameState, target) {\n        var pixelRatio = frameState.pixelRatio;\n        var layerState = frameState.layerStatesArray[frameState.layerIndex];\n        // set forward and inverse pixel transforms\n        makeScale(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);\n        makeInverse(this.inversePixelTransform, this.pixelTransform);\n        var canvasTransform = transformToString(this.pixelTransform);\n        this.useContainer(target, canvasTransform, this.getBackground(frameState));\n        var context = this.context;\n        var canvas = context.canvas;\n        var replayGroup = this.replayGroup_;\n        var declutterExecutorGroup = this.declutterExecutorGroup;\n        if ((!replayGroup || replayGroup.isEmpty()) &&\n            (!declutterExecutorGroup || declutterExecutorGroup.isEmpty())) {\n            return null;\n        }\n        // resize and clear\n        var width = Math.round(frameState.size[0] * pixelRatio);\n        var height = Math.round(frameState.size[1] * pixelRatio);\n        if (canvas.width != width || canvas.height != height) {\n            canvas.width = width;\n            canvas.height = height;\n            if (canvas.style.transform !== canvasTransform) {\n                canvas.style.transform = canvasTransform;\n            }\n        }\n        else if (!this.containerReused) {\n            context.clearRect(0, 0, width, height);\n        }\n        this.preRender(context, frameState);\n        var viewState = frameState.viewState;\n        var projection = viewState.projection;\n        this.opacity_ = layerState.opacity;\n        this.setupCompositionContext_();\n        // clipped rendering if layer extent is set\n        var clipped = false;\n        var render = true;\n        if (layerState.extent && this.clipping) {\n            var layerExtent = fromUserExtent(layerState.extent, projection);\n            render = intersectsExtent(layerExtent, frameState.extent);\n            clipped = render && !containsExtent(layerExtent, frameState.extent);\n            if (clipped) {\n                this.clipUnrotated(this.compositionContext_, frameState, layerExtent);\n            }\n        }\n        if (render) {\n            this.renderWorlds(replayGroup, frameState);\n        }\n        if (clipped) {\n            this.compositionContext_.restore();\n        }\n        this.releaseCompositionContext_();\n        this.postRender(context, frameState);\n        if (this.renderedRotation_ !== viewState.rotation) {\n            this.renderedRotation_ = viewState.rotation;\n            this.hitDetectionImageData_ = null;\n        }\n        return this.container;\n    };\n    /**\n     * Asynchronous layer level hit detection.\n     * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n     * @return {Promise<Array<import(\"../../Feature\").default>>} Promise that resolves with an array of features.\n     */\n    CanvasVectorLayerRenderer.prototype.getFeatures = function (pixel) {\n        return new Promise(\n        /**\n         * @param {function(Array<import(\"../../Feature\").default|import(\"../../render/Feature\").default>): void} resolve Resolver function.\n         * @this {CanvasVectorLayerRenderer}\n         */\n        function (resolve) {\n            if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {\n                var size = [this.context.canvas.width, this.context.canvas.height];\n                apply(this.pixelTransform, size);\n                var center = this.renderedCenter_;\n                var resolution = this.renderedResolution_;\n                var rotation = this.renderedRotation_;\n                var projection = this.renderedProjection_;\n                var extent = this.wrappedRenderedExtent_;\n                var layer = this.getLayer();\n                var transforms = [];\n                var width = size[0] * HIT_DETECT_RESOLUTION;\n                var height = size[1] * HIT_DETECT_RESOLUTION;\n                transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, 0).slice());\n                var source = layer.getSource();\n                var projectionExtent = projection.getExtent();\n                if (source.getWrapX() &&\n                    projection.canWrapX() &&\n                    !containsExtent(projectionExtent, extent)) {\n                    var startX = extent[0];\n                    var worldWidth = getWidth(projectionExtent);\n                    var world = 0;\n                    var offsetX = void 0;\n                    while (startX < projectionExtent[0]) {\n                        --world;\n                        offsetX = worldWidth * world;\n                        transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n                        startX += worldWidth;\n                    }\n                    world = 0;\n                    startX = extent[2];\n                    while (startX > projectionExtent[2]) {\n                        ++world;\n                        offsetX = worldWidth * world;\n                        transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n                        startX -= worldWidth;\n                    }\n                }\n                this.hitDetectionImageData_ = createHitDetectionImageData(size, transforms, this.renderedFeatures_, layer.getStyleFunction(), extent, resolution, rotation);\n            }\n            resolve(hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_));\n        }.bind(this));\n    };\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n     * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n     * @return {T|undefined} Callback result.\n     * @template T\n     */\n    CanvasVectorLayerRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, matches) {\n        var _this = this;\n        if (!this.replayGroup_) {\n            return undefined;\n        }\n        var resolution = frameState.viewState.resolution;\n        var rotation = frameState.viewState.rotation;\n        var layer = this.getLayer();\n        /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n        var features = {};\n        /**\n         * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n         * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n         * @param {number} distanceSq The squared distance to the click position\n         * @return {T|undefined} Callback result.\n         */\n        var featureCallback = function (feature, geometry, distanceSq) {\n            var key = getUid(feature);\n            var match = features[key];\n            if (!match) {\n                if (distanceSq === 0) {\n                    features[key] = true;\n                    return callback(feature, layer, geometry);\n                }\n                matches.push((features[key] = {\n                    feature: feature,\n                    layer: layer,\n                    geometry: geometry,\n                    distanceSq: distanceSq,\n                    callback: callback,\n                }));\n            }\n            else if (match !== true && distanceSq < match.distanceSq) {\n                if (distanceSq === 0) {\n                    features[key] = true;\n                    matches.splice(matches.lastIndexOf(match), 1);\n                    return callback(feature, layer, geometry);\n                }\n                match.geometry = geometry;\n                match.distanceSq = distanceSq;\n            }\n            return undefined;\n        };\n        var result;\n        var executorGroups = [this.replayGroup_];\n        if (this.declutterExecutorGroup) {\n            executorGroups.push(this.declutterExecutorGroup);\n        }\n        executorGroups.some(function (executorGroup) {\n            return (result = executorGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, featureCallback, executorGroup === _this.declutterExecutorGroup &&\n                frameState.declutterTree\n                ? frameState.declutterTree.all().map(function (item) { return item.value; })\n                : null));\n        });\n        return result;\n    };\n    /**\n     * Perform action necessary to get the layer rendered after new fonts have loaded\n     */\n    CanvasVectorLayerRenderer.prototype.handleFontsChanged = function () {\n        var layer = this.getLayer();\n        if (layer.getVisible() && this.replayGroup_) {\n            layer.changed();\n        }\n    };\n    /**\n     * Handle changes in image style state.\n     * @param {import(\"../../events/Event.js\").default} event Image style change event.\n     * @private\n     */\n    CanvasVectorLayerRenderer.prototype.handleStyleImageChange_ = function (event) {\n        this.renderIfReadyAndVisible();\n    };\n    /**\n     * Determine whether render should be called.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {boolean} Layer is ready to be rendered.\n     */\n    CanvasVectorLayerRenderer.prototype.prepareFrame = function (frameState) {\n        var vectorLayer = this.getLayer();\n        var vectorSource = vectorLayer.getSource();\n        if (!vectorSource) {\n            return false;\n        }\n        var animating = frameState.viewHints[ViewHint.ANIMATING];\n        var interacting = frameState.viewHints[ViewHint.INTERACTING];\n        var updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n        var updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n        if ((this.ready && !updateWhileAnimating && animating) ||\n            (!updateWhileInteracting && interacting)) {\n            this.animatingOrInteracting_ = true;\n            return true;\n        }\n        this.animatingOrInteracting_ = false;\n        var frameStateExtent = frameState.extent;\n        var viewState = frameState.viewState;\n        var projection = viewState.projection;\n        var resolution = viewState.resolution;\n        var pixelRatio = frameState.pixelRatio;\n        var vectorLayerRevision = vectorLayer.getRevision();\n        var vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n        var vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n        if (vectorLayerRenderOrder === undefined) {\n            vectorLayerRenderOrder = defaultRenderOrder;\n        }\n        var center = viewState.center.slice();\n        var extent = buffer(frameStateExtent, vectorLayerRenderBuffer * resolution);\n        var renderedExtent = extent.slice();\n        var loadExtents = [extent.slice()];\n        var projectionExtent = projection.getExtent();\n        if (vectorSource.getWrapX() &&\n            projection.canWrapX() &&\n            !containsExtent(projectionExtent, frameState.extent)) {\n            // For the replay group, we need an extent that intersects the real world\n            // (-180° to +180°). To support geometries in a coordinate range from -540°\n            // to +540°, we add at least 1 world width on each side of the projection\n            // extent. If the viewport is wider than the world, we need to add half of\n            // the viewport width to make sure we cover the whole viewport.\n            var worldWidth = getWidth(projectionExtent);\n            var gutter = Math.max(getWidth(extent) / 2, worldWidth);\n            extent[0] = projectionExtent[0] - gutter;\n            extent[2] = projectionExtent[2] + gutter;\n            wrapCoordinateX(center, projection);\n            var loadExtent = wrapExtentX(loadExtents[0], projection);\n            // If the extent crosses the date line, we load data for both edges of the worlds\n            if (loadExtent[0] < projectionExtent[0] &&\n                loadExtent[2] < projectionExtent[2]) {\n                loadExtents.push([\n                    loadExtent[0] + worldWidth,\n                    loadExtent[1],\n                    loadExtent[2] + worldWidth,\n                    loadExtent[3],\n                ]);\n            }\n            else if (loadExtent[0] > projectionExtent[0] &&\n                loadExtent[2] > projectionExtent[2]) {\n                loadExtents.push([\n                    loadExtent[0] - worldWidth,\n                    loadExtent[1],\n                    loadExtent[2] - worldWidth,\n                    loadExtent[3],\n                ]);\n            }\n        }\n        if (this.ready &&\n            this.renderedResolution_ == resolution &&\n            this.renderedRevision_ == vectorLayerRevision &&\n            this.renderedRenderOrder_ == vectorLayerRenderOrder &&\n            containsExtent(this.wrappedRenderedExtent_, extent)) {\n            if (!equals(this.renderedExtent_, renderedExtent)) {\n                this.hitDetectionImageData_ = null;\n                this.renderedExtent_ = renderedExtent;\n            }\n            this.renderedCenter_ = center;\n            this.replayGroupChanged = false;\n            return true;\n        }\n        this.replayGroup_ = null;\n        var replayGroup = new CanvasBuilderGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);\n        var declutterBuilderGroup;\n        if (this.getLayer().getDeclutter()) {\n            declutterBuilderGroup = new CanvasBuilderGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);\n        }\n        var userProjection = getUserProjection();\n        var userTransform;\n        if (userProjection) {\n            for (var i = 0, ii = loadExtents.length; i < ii; ++i) {\n                var extent_1 = loadExtents[i];\n                var userExtent_1 = toUserExtent(extent_1, projection);\n                vectorSource.loadFeatures(userExtent_1, toUserResolution(resolution, projection), userProjection);\n            }\n            userTransform = getTransformFromProjections(userProjection, projection);\n        }\n        else {\n            for (var i = 0, ii = loadExtents.length; i < ii; ++i) {\n                vectorSource.loadFeatures(loadExtents[i], resolution, projection);\n            }\n        }\n        var squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n        var ready = true;\n        var render = \n        /**\n         * @param {import(\"../../Feature.js\").default} feature Feature.\n         * @this {CanvasVectorLayerRenderer}\n         */\n        function (feature) {\n            var styles;\n            var styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();\n            if (styleFunction) {\n                styles = styleFunction(feature, resolution);\n            }\n            if (styles) {\n                var dirty = this.renderFeature(feature, squaredTolerance, styles, replayGroup, userTransform, declutterBuilderGroup);\n                ready = ready && !dirty;\n            }\n        }.bind(this);\n        var userExtent = toUserExtent(extent, projection);\n        /** @type {Array<import(\"../../Feature.js\").default>} */\n        var features = vectorSource.getFeaturesInExtent(userExtent);\n        if (vectorLayerRenderOrder) {\n            features.sort(vectorLayerRenderOrder);\n        }\n        for (var i = 0, ii = features.length; i < ii; ++i) {\n            render(features[i]);\n        }\n        this.renderedFeatures_ = features;\n        this.ready = ready;\n        var replayGroupInstructions = replayGroup.finish();\n        var executorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), replayGroupInstructions, vectorLayer.getRenderBuffer());\n        if (declutterBuilderGroup) {\n            this.declutterExecutorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), declutterBuilderGroup.finish(), vectorLayer.getRenderBuffer());\n        }\n        this.renderedResolution_ = resolution;\n        this.renderedRevision_ = vectorLayerRevision;\n        this.renderedRenderOrder_ = vectorLayerRenderOrder;\n        this.renderedExtent_ = renderedExtent;\n        this.wrappedRenderedExtent_ = extent;\n        this.renderedCenter_ = center;\n        this.renderedProjection_ = projection;\n        this.replayGroup_ = executorGroup;\n        this.hitDetectionImageData_ = null;\n        this.replayGroupChanged = true;\n        return true;\n    };\n    /**\n     * @param {import(\"../../Feature.js\").default} feature Feature.\n     * @param {number} squaredTolerance Squared render tolerance.\n     * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n     * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n     * @param {import(\"../../proj.js\").TransformFunction} [opt_transform] Transform from user to view projection.\n     * @param {import(\"../../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n     * @return {boolean} `true` if an image is loading.\n     */\n    CanvasVectorLayerRenderer.prototype.renderFeature = function (feature, squaredTolerance, styles, builderGroup, opt_transform, opt_declutterBuilderGroup) {\n        if (!styles) {\n            return false;\n        }\n        var loading = false;\n        if (Array.isArray(styles)) {\n            for (var i = 0, ii = styles.length; i < ii; ++i) {\n                loading =\n                    renderFeature(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, opt_transform, opt_declutterBuilderGroup) || loading;\n            }\n        }\n        else {\n            loading = renderFeature(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, opt_transform, opt_declutterBuilderGroup);\n        }\n        return loading;\n    };\n    return CanvasVectorLayerRenderer;\n}(CanvasLayerRenderer));\nexport default CanvasVectorLayerRenderer;\n//# sourceMappingURL=VectorLayer.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/renderer/canvas/VectorTileLayer\n */\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasExecutorGroup from '../../render/canvas/ExecutorGroup.js';\nimport CanvasTileLayerRenderer from './TileLayer.js';\nimport TileState from '../../TileState.js';\nimport VectorTileRenderType from '../../layer/VectorTileRenderType.js';\nimport ViewHint from '../../ViewHint.js';\nimport { HIT_DETECT_RESOLUTION, createHitDetectionImageData, hitDetect, } from '../../render/canvas/hitdetect.js';\nimport { apply as applyTransform, create as createTransform, multiply, reset as resetTransform, scale, scale as scaleTransform, translate as translateTransform, } from '../../transform.js';\nimport { boundingExtent, buffer, containsExtent, equals, getIntersection, getTopLeft, intersects, } from '../../extent.js';\nimport { getSquaredTolerance as getSquaredRenderTolerance, renderFeature, } from '../vector.js';\nimport { getUid } from '../../util.js';\nimport { toSize } from '../../size.js';\nimport { wrapX } from '../../coordinate.js';\n/**\n * @type {!Object<string, Array<import(\"../../render/canvas.js\").BuilderType>>}\n */\nvar IMAGE_REPLAYS = {\n    'image': ['Polygon', 'Circle', 'LineString', 'Image', 'Text'],\n    'hybrid': ['Polygon', 'LineString'],\n    'vector': [],\n};\n/**\n * @type {!Object<string, Array<import(\"../../render/canvas.js\").BuilderType>>}\n */\nvar VECTOR_REPLAYS = {\n    'hybrid': ['Image', 'Text', 'Default'],\n    'vector': ['Polygon', 'Circle', 'LineString', 'Image', 'Text', 'Default'],\n};\n/**\n * @classdesc\n * Canvas renderer for vector tile layers.\n * @api\n * @extends {CanvasTileLayerRenderer<import(\"../../layer/VectorTile.js\").default>}\n */\nvar CanvasVectorTileLayerRenderer = /** @class */ (function (_super) {\n    __extends(CanvasVectorTileLayerRenderer, _super);\n    /**\n     * @param {import(\"../../layer/VectorTile.js\").default} layer VectorTile layer.\n     */\n    function CanvasVectorTileLayerRenderer(layer) {\n        var _this = _super.call(this, layer) || this;\n        /** @private */\n        _this.boundHandleStyleImageChange_ = _this.handleStyleImageChange_.bind(_this);\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.renderedLayerRevision_;\n        /**\n         * @private\n         * @type {import(\"../../transform\").Transform}\n         */\n        _this.renderedPixelToCoordinateTransform_ = null;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.renderedRotation_;\n        /**\n         * @private\n         * @type {import(\"../../transform.js\").Transform}\n         */\n        _this.tmpTransform_ = createTransform();\n        return _this;\n    }\n    /**\n     * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../../proj/Projection\").default} projection Projection.\n     * @return {boolean|undefined} Tile needs to be rendered.\n     */\n    CanvasVectorTileLayerRenderer.prototype.prepareTile = function (tile, pixelRatio, projection) {\n        var render;\n        var state = tile.getState();\n        if (state === TileState.LOADED || state === TileState.ERROR) {\n            this.updateExecutorGroup_(tile, pixelRatio, projection);\n            if (this.tileImageNeedsRender_(tile)) {\n                render = true;\n            }\n        }\n        return render;\n    };\n    /**\n     * @param {number} z Tile coordinate z.\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {!import(\"../../Tile.js\").default} Tile.\n     */\n    CanvasVectorTileLayerRenderer.prototype.getTile = function (z, x, y, frameState) {\n        var pixelRatio = frameState.pixelRatio;\n        var viewState = frameState.viewState;\n        var resolution = viewState.resolution;\n        var projection = viewState.projection;\n        var layer = this.getLayer();\n        var tile = layer.getSource().getTile(z, x, y, pixelRatio, projection);\n        var viewHints = frameState.viewHints;\n        var hifi = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n        if (hifi || !tile.wantedResolution) {\n            tile.wantedResolution = resolution;\n        }\n        var render = this.prepareTile(tile, pixelRatio, projection);\n        if (render &&\n            (hifi || Date.now() - frameState.time < 8) &&\n            layer.getRenderMode() !== VectorTileRenderType.VECTOR) {\n            this.renderTileImage_(tile, frameState);\n        }\n        return _super.prototype.getTile.call(this, z, x, y, frameState);\n    };\n    /**\n     * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n     * @return {boolean} Tile is drawable.\n     */\n    CanvasVectorTileLayerRenderer.prototype.isDrawableTile = function (tile) {\n        var layer = this.getLayer();\n        return (_super.prototype.isDrawableTile.call(this, tile) &&\n            (layer.getRenderMode() === VectorTileRenderType.VECTOR\n                ? getUid(layer) in tile.executorGroups\n                : tile.hasContext(layer)));\n    };\n    /**\n     * @inheritDoc\n     */\n    CanvasVectorTileLayerRenderer.prototype.getTileImage = function (tile) {\n        return tile.getImage(this.getLayer());\n    };\n    /**\n     * Determine whether render should be called.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {boolean} Layer is ready to be rendered.\n     */\n    CanvasVectorTileLayerRenderer.prototype.prepareFrame = function (frameState) {\n        var layerRevision = this.getLayer().getRevision();\n        if (this.renderedLayerRevision_ !== layerRevision) {\n            this.renderedLayerRevision_ = layerRevision;\n            this.renderedTiles.length = 0;\n        }\n        return _super.prototype.prepareFrame.call(this, frameState);\n    };\n    /**\n     * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../../proj/Projection.js\").default} projection Projection.\n     * @private\n     */\n    CanvasVectorTileLayerRenderer.prototype.updateExecutorGroup_ = function (tile, pixelRatio, projection) {\n        var layer = /** @type {import(\"../../layer/VectorTile.js\").default} */ (this.getLayer());\n        var revision = layer.getRevision();\n        var renderOrder = layer.getRenderOrder() || null;\n        var resolution = tile.wantedResolution;\n        var builderState = tile.getReplayState(layer);\n        if (!builderState.dirty &&\n            builderState.renderedResolution === resolution &&\n            builderState.renderedRevision == revision &&\n            builderState.renderedRenderOrder == renderOrder) {\n            return;\n        }\n        var source = layer.getSource();\n        var declutter = layer.getDeclutter();\n        var sourceTileGrid = source.getTileGrid();\n        var tileGrid = source.getTileGridForProjection(projection);\n        var tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\n        var sourceTiles = source.getSourceTiles(pixelRatio, projection, tile);\n        var layerUid = getUid(layer);\n        delete tile.hitDetectionImageData[layerUid];\n        tile.executorGroups[layerUid] = [];\n        if (declutter) {\n            tile.declutterExecutorGroups[layerUid] = [];\n        }\n        builderState.dirty = false;\n        var _loop_1 = function (t, tt) {\n            var sourceTile = sourceTiles[t];\n            if (sourceTile.getState() != TileState.LOADED) {\n                return \"continue\";\n            }\n            var sourceTileCoord = sourceTile.tileCoord;\n            var sourceTileExtent = sourceTileGrid.getTileCoordExtent(sourceTileCoord);\n            var sharedExtent = getIntersection(tileExtent, sourceTileExtent);\n            var builderExtent = buffer(sharedExtent, layer.getRenderBuffer() * resolution, this_1.tmpExtent);\n            var bufferedExtent = equals(sourceTileExtent, sharedExtent)\n                ? null\n                : builderExtent;\n            var builderGroup = new CanvasBuilderGroup(0, builderExtent, resolution, pixelRatio);\n            var declutterBuilderGroup = declutter\n                ? new CanvasBuilderGroup(0, sharedExtent, resolution, pixelRatio)\n                : undefined;\n            var squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n            /**\n             * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n             * @this {CanvasVectorTileLayerRenderer}\n             */\n            var render = function (feature) {\n                var styles;\n                var styleFunction = feature.getStyleFunction() || layer.getStyleFunction();\n                if (styleFunction) {\n                    styles = styleFunction(feature, resolution);\n                }\n                if (styles) {\n                    var dirty = this.renderFeature(feature, squaredTolerance, styles, builderGroup, declutterBuilderGroup);\n                    builderState.dirty = builderState.dirty || dirty;\n                }\n            };\n            var features = sourceTile.getFeatures();\n            if (renderOrder && renderOrder !== builderState.renderedRenderOrder) {\n                features.sort(renderOrder);\n            }\n            for (var i = 0, ii = features.length; i < ii; ++i) {\n                var feature = features[i];\n                if (!bufferedExtent ||\n                    intersects(bufferedExtent, feature.getGeometry().getExtent())) {\n                    render.call(this_1, feature);\n                }\n            }\n            var executorGroupInstructions = builderGroup.finish();\n            // no need to clip when the render tile is covered by a single source tile\n            var replayExtent = layer.getRenderMode() !== VectorTileRenderType.VECTOR &&\n                declutter &&\n                sourceTiles.length === 1\n                ? null\n                : sharedExtent;\n            var renderingReplayGroup = new CanvasExecutorGroup(replayExtent, resolution, pixelRatio, source.getOverlaps(), executorGroupInstructions, layer.getRenderBuffer());\n            tile.executorGroups[layerUid].push(renderingReplayGroup);\n            if (declutterBuilderGroup) {\n                var declutterExecutorGroup = new CanvasExecutorGroup(null, resolution, pixelRatio, source.getOverlaps(), declutterBuilderGroup.finish(), layer.getRenderBuffer());\n                tile.declutterExecutorGroups[layerUid].push(declutterExecutorGroup);\n            }\n        };\n        var this_1 = this;\n        for (var t = 0, tt = sourceTiles.length; t < tt; ++t) {\n            _loop_1(t, tt);\n        }\n        builderState.renderedRevision = revision;\n        builderState.renderedRenderOrder = renderOrder;\n        builderState.renderedResolution = resolution;\n    };\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n     * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n     * @return {T|undefined} Callback result.\n     * @template T\n     */\n    CanvasVectorTileLayerRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, matches) {\n        var resolution = frameState.viewState.resolution;\n        var rotation = frameState.viewState.rotation;\n        hitTolerance = hitTolerance == undefined ? 0 : hitTolerance;\n        var layer = this.getLayer();\n        var source = layer.getSource();\n        var tileGrid = source.getTileGridForProjection(frameState.viewState.projection);\n        var hitExtent = boundingExtent([coordinate]);\n        buffer(hitExtent, resolution * hitTolerance, hitExtent);\n        /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n        var features = {};\n        /**\n         * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n         * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n         * @param {number} distanceSq The squared distance to the click position.\n         * @return {T|undefined} Callback result.\n         */\n        var featureCallback = function (feature, geometry, distanceSq) {\n            var key = feature.getId();\n            if (key === undefined) {\n                key = getUid(feature);\n            }\n            var match = features[key];\n            if (!match) {\n                if (distanceSq === 0) {\n                    features[key] = true;\n                    return callback(feature, layer, geometry);\n                }\n                matches.push((features[key] = {\n                    feature: feature,\n                    layer: layer,\n                    geometry: geometry,\n                    distanceSq: distanceSq,\n                    callback: callback,\n                }));\n            }\n            else if (match !== true && distanceSq < match.distanceSq) {\n                if (distanceSq === 0) {\n                    features[key] = true;\n                    matches.splice(matches.lastIndexOf(match), 1);\n                    return callback(feature, layer, geometry);\n                }\n                match.geometry = geometry;\n                match.distanceSq = distanceSq;\n            }\n            return undefined;\n        };\n        var renderedTiles = \n        /** @type {Array<import(\"../../VectorRenderTile.js\").default>} */ (this.renderedTiles);\n        var found;\n        var _loop_2 = function (i, ii) {\n            var tile = renderedTiles[i];\n            var tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\n            if (!intersects(tileExtent, hitExtent)) {\n                return \"continue\";\n            }\n            var layerUid = getUid(layer);\n            var executorGroups = [tile.executorGroups[layerUid]];\n            var declutterExecutorGroups = tile.declutterExecutorGroups[layerUid];\n            if (declutterExecutorGroups) {\n                executorGroups.push(declutterExecutorGroups);\n            }\n            executorGroups.some(function (executorGroups) {\n                var declutteredFeatures = executorGroups === declutterExecutorGroups\n                    ? frameState.declutterTree.all().map(function (item) { return item.value; })\n                    : null;\n                for (var t = 0, tt = executorGroups.length; t < tt; ++t) {\n                    var executorGroup = executorGroups[t];\n                    found = executorGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, featureCallback, declutteredFeatures);\n                    if (found) {\n                        return true;\n                    }\n                }\n            });\n        };\n        for (var i = 0, ii = renderedTiles.length; !found && i < ii; ++i) {\n            _loop_2(i, ii);\n        }\n        return found;\n    };\n    /**\n     * Asynchronous layer level hit detection.\n     * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n     * @return {Promise<Array<import(\"../../Feature\").default>>} Promise that resolves with an array of features.\n     */\n    CanvasVectorTileLayerRenderer.prototype.getFeatures = function (pixel) {\n        return new Promise(function (resolve, reject) {\n            var layer = \n            /** @type {import(\"../../layer/VectorTile.js\").default} */ (this.getLayer());\n            var layerUid = getUid(layer);\n            var source = layer.getSource();\n            var projection = this.renderedProjection;\n            var projectionExtent = projection.getExtent();\n            var resolution = this.renderedResolution;\n            var tileGrid = source.getTileGridForProjection(projection);\n            var coordinate = applyTransform(this.renderedPixelToCoordinateTransform_, pixel.slice());\n            var tileCoord = tileGrid.getTileCoordForCoordAndResolution(coordinate, resolution);\n            var tile;\n            for (var i = 0, ii = this.renderedTiles.length; i < ii; ++i) {\n                if (tileCoord.toString() === this.renderedTiles[i].tileCoord.toString()) {\n                    tile = this.renderedTiles[i];\n                    if (tile.getState() === TileState.LOADED) {\n                        var extent_1 = tileGrid.getTileCoordExtent(tile.tileCoord);\n                        if (source.getWrapX() &&\n                            projection.canWrapX() &&\n                            !containsExtent(projectionExtent, extent_1)) {\n                            wrapX(coordinate, projection);\n                        }\n                        break;\n                    }\n                    tile = undefined;\n                }\n            }\n            if (!tile || tile.loadingSourceTiles > 0) {\n                resolve([]);\n                return;\n            }\n            var extent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\n            var corner = getTopLeft(extent);\n            var tilePixel = [\n                (coordinate[0] - corner[0]) / resolution,\n                (corner[1] - coordinate[1]) / resolution,\n            ];\n            var features = tile\n                .getSourceTiles()\n                .reduce(function (accumulator, sourceTile) {\n                return accumulator.concat(sourceTile.getFeatures());\n            }, []);\n            var hitDetectionImageData = tile.hitDetectionImageData[layerUid];\n            if (!hitDetectionImageData && !this.animatingOrInteracting_) {\n                var tileSize = toSize(tileGrid.getTileSize(tileGrid.getZForResolution(resolution, source.zDirection)));\n                var rotation = this.renderedRotation_;\n                var transforms = [\n                    this.getRenderTransform(tileGrid.getTileCoordCenter(tile.wrappedTileCoord), resolution, 0, HIT_DETECT_RESOLUTION, tileSize[0] * HIT_DETECT_RESOLUTION, tileSize[1] * HIT_DETECT_RESOLUTION, 0),\n                ];\n                hitDetectionImageData = createHitDetectionImageData(tileSize, transforms, features, layer.getStyleFunction(), tileGrid.getTileCoordExtent(tile.wrappedTileCoord), tile.getReplayState(layer).renderedResolution, rotation);\n                tile.hitDetectionImageData[layerUid] = hitDetectionImageData;\n            }\n            resolve(hitDetect(tilePixel, features, hitDetectionImageData));\n        }.bind(this));\n    };\n    /**\n     * Perform action necessary to get the layer rendered after new fonts have loaded\n     */\n    CanvasVectorTileLayerRenderer.prototype.handleFontsChanged = function () {\n        var layer = this.getLayer();\n        if (layer.getVisible() && this.renderedLayerRevision_ !== undefined) {\n            layer.changed();\n        }\n    };\n    /**\n     * Handle changes in image style state.\n     * @param {import(\"../../events/Event.js\").default} event Image style change event.\n     * @private\n     */\n    CanvasVectorTileLayerRenderer.prototype.handleStyleImageChange_ = function (event) {\n        this.renderIfReadyAndVisible();\n    };\n    /**\n     * Render declutter items for this layer\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     */\n    CanvasVectorTileLayerRenderer.prototype.renderDeclutter = function (frameState) {\n        var context = this.context;\n        var alpha = context.globalAlpha;\n        context.globalAlpha = this.getLayer().getOpacity();\n        var viewHints = frameState.viewHints;\n        var hifi = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n        var tiles = \n        /** @type {Array<import(\"../../VectorRenderTile.js\").default>} */ (this.renderedTiles);\n        for (var i = 0, ii = tiles.length; i < ii; ++i) {\n            var tile = tiles[i];\n            var declutterExecutorGroups = tile.declutterExecutorGroups[getUid(this.getLayer())];\n            if (declutterExecutorGroups) {\n                for (var j = declutterExecutorGroups.length - 1; j >= 0; --j) {\n                    declutterExecutorGroups[j].execute(this.context, 1, this.getTileRenderTransform(tile, frameState), frameState.viewState.rotation, hifi, undefined, frameState.declutterTree);\n                }\n            }\n        }\n        context.globalAlpha = alpha;\n    };\n    CanvasVectorTileLayerRenderer.prototype.getTileRenderTransform = function (tile, frameState) {\n        var pixelRatio = frameState.pixelRatio;\n        var viewState = frameState.viewState;\n        var center = viewState.center;\n        var resolution = viewState.resolution;\n        var rotation = viewState.rotation;\n        var size = frameState.size;\n        var width = Math.round(size[0] * pixelRatio);\n        var height = Math.round(size[1] * pixelRatio);\n        var source = this.getLayer().getSource();\n        var tileGrid = source.getTileGridForProjection(frameState.viewState.projection);\n        var tileCoord = tile.tileCoord;\n        var tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\n        var worldOffset = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent)[0] - tileExtent[0];\n        var transform = multiply(scale(this.inversePixelTransform.slice(), 1 / pixelRatio, 1 / pixelRatio), this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, worldOffset));\n        return transform;\n    };\n    /**\n     * Render the layer.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {HTMLElement} target Target that may be used to render content to.\n     * @return {HTMLElement} The rendered element.\n     */\n    CanvasVectorTileLayerRenderer.prototype.renderFrame = function (frameState, target) {\n        var viewHints = frameState.viewHints;\n        var hifi = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n        _super.prototype.renderFrame.call(this, frameState, target);\n        this.renderedPixelToCoordinateTransform_ =\n            frameState.pixelToCoordinateTransform.slice();\n        this.renderedRotation_ = frameState.viewState.rotation;\n        var layer = /** @type {import(\"../../layer/VectorTile.js\").default} */ (this.getLayer());\n        var renderMode = layer.getRenderMode();\n        var context = this.context;\n        var alpha = context.globalAlpha;\n        context.globalAlpha = layer.getOpacity();\n        var replayTypes = VECTOR_REPLAYS[renderMode];\n        var viewState = frameState.viewState;\n        var rotation = viewState.rotation;\n        var tileSource = layer.getSource();\n        var tileGrid = tileSource.getTileGridForProjection(viewState.projection);\n        var z = tileGrid.getZForResolution(viewState.resolution, tileSource.zDirection);\n        var tiles = this.renderedTiles;\n        var clips = [];\n        var clipZs = [];\n        var ready = true;\n        for (var i = tiles.length - 1; i >= 0; --i) {\n            var tile = /** @type {import(\"../../VectorRenderTile.js\").default} */ (tiles[i]);\n            ready = ready && !tile.getReplayState(layer).dirty;\n            var executorGroups = tile.executorGroups[getUid(layer)].filter(function (group) { return group.hasExecutors(replayTypes); });\n            if (executorGroups.length === 0) {\n                continue;\n            }\n            var transform = this.getTileRenderTransform(tile, frameState);\n            var currentZ = tile.tileCoord[0];\n            var contextSaved = false;\n            // Clip mask for regions in this tile that already filled by a higher z tile\n            var currentClip = executorGroups[0].getClipCoords(transform);\n            if (currentClip) {\n                for (var j = 0, jj = clips.length; j < jj; ++j) {\n                    if (z !== currentZ && currentZ < clipZs[j]) {\n                        var clip = clips[j];\n                        if (intersects([\n                            currentClip[0],\n                            currentClip[3],\n                            currentClip[4],\n                            currentClip[7],\n                        ], [clip[0], clip[3], clip[4], clip[7]])) {\n                            if (!contextSaved) {\n                                context.save();\n                                contextSaved = true;\n                            }\n                            context.beginPath();\n                            // counter-clockwise (outer ring) for current tile\n                            context.moveTo(currentClip[0], currentClip[1]);\n                            context.lineTo(currentClip[2], currentClip[3]);\n                            context.lineTo(currentClip[4], currentClip[5]);\n                            context.lineTo(currentClip[6], currentClip[7]);\n                            // clockwise (inner ring) for higher z tile\n                            context.moveTo(clip[6], clip[7]);\n                            context.lineTo(clip[4], clip[5]);\n                            context.lineTo(clip[2], clip[3]);\n                            context.lineTo(clip[0], clip[1]);\n                            context.clip();\n                        }\n                    }\n                }\n                clips.push(currentClip);\n                clipZs.push(currentZ);\n            }\n            for (var t = 0, tt = executorGroups.length; t < tt; ++t) {\n                var executorGroup = executorGroups[t];\n                executorGroup.execute(context, 1, transform, rotation, hifi, replayTypes);\n            }\n            if (contextSaved) {\n                context.restore();\n            }\n        }\n        context.globalAlpha = alpha;\n        this.ready = ready;\n        return this.container;\n    };\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n     * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n     * @param {import(\"../../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder group for decluttering.\n     * @return {boolean} `true` if an image is loading.\n     */\n    CanvasVectorTileLayerRenderer.prototype.renderFeature = function (feature, squaredTolerance, styles, builderGroup, opt_declutterBuilderGroup) {\n        if (!styles) {\n            return false;\n        }\n        var loading = false;\n        if (Array.isArray(styles)) {\n            for (var i = 0, ii = styles.length; i < ii; ++i) {\n                loading =\n                    renderFeature(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, undefined, opt_declutterBuilderGroup) || loading;\n            }\n        }\n        else {\n            loading = renderFeature(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, undefined, opt_declutterBuilderGroup);\n        }\n        return loading;\n    };\n    /**\n     * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n     * @return {boolean} A new tile image was rendered.\n     * @private\n     */\n    CanvasVectorTileLayerRenderer.prototype.tileImageNeedsRender_ = function (tile) {\n        var layer = /** @type {import(\"../../layer/VectorTile.js\").default} */ (this.getLayer());\n        if (layer.getRenderMode() === VectorTileRenderType.VECTOR) {\n            return false;\n        }\n        var replayState = tile.getReplayState(layer);\n        var revision = layer.getRevision();\n        var resolution = tile.wantedResolution;\n        return (replayState.renderedTileResolution !== resolution ||\n            replayState.renderedTileRevision !== revision);\n    };\n    /**\n     * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n     * @param {import(\"../../PluggableMap\").FrameState} frameState Frame state.\n     * @private\n     */\n    CanvasVectorTileLayerRenderer.prototype.renderTileImage_ = function (tile, frameState) {\n        var layer = /** @type {import(\"../../layer/VectorTile.js\").default} */ (this.getLayer());\n        var replayState = tile.getReplayState(layer);\n        var revision = layer.getRevision();\n        var executorGroups = tile.executorGroups[getUid(layer)];\n        replayState.renderedTileRevision = revision;\n        var tileCoord = tile.wrappedTileCoord;\n        var z = tileCoord[0];\n        var source = layer.getSource();\n        var pixelRatio = frameState.pixelRatio;\n        var viewState = frameState.viewState;\n        var projection = viewState.projection;\n        var tileGrid = source.getTileGridForProjection(projection);\n        var tileResolution = tileGrid.getResolution(tile.tileCoord[0]);\n        var renderPixelRatio = (frameState.pixelRatio / tile.wantedResolution) * tileResolution;\n        var resolution = tileGrid.getResolution(z);\n        var context = tile.getContext(layer);\n        // Increase tile size when overzooming for low pixel ratio, to avoid blurry tiles\n        pixelRatio = Math.round(Math.max(pixelRatio, renderPixelRatio / pixelRatio));\n        var size = source.getTilePixelSize(z, pixelRatio, projection);\n        context.canvas.width = size[0];\n        context.canvas.height = size[1];\n        var renderScale = pixelRatio / renderPixelRatio;\n        if (renderScale !== 1) {\n            var canvasTransform = resetTransform(this.tmpTransform_);\n            scaleTransform(canvasTransform, renderScale, renderScale);\n            context.setTransform.apply(context, canvasTransform);\n        }\n        var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent);\n        var pixelScale = renderPixelRatio / resolution;\n        var transform = resetTransform(this.tmpTransform_);\n        scaleTransform(transform, pixelScale, -pixelScale);\n        translateTransform(transform, -tileExtent[0], -tileExtent[3]);\n        for (var i = 0, ii = executorGroups.length; i < ii; ++i) {\n            var executorGroup = executorGroups[i];\n            executorGroup.execute(context, renderScale, transform, 0, true, IMAGE_REPLAYS[layer.getRenderMode()]);\n        }\n        replayState.renderedTileResolution = tile.wantedResolution;\n    };\n    return CanvasVectorTileLayerRenderer;\n}(CanvasTileLayerRenderer));\nexport default CanvasVectorTileLayerRenderer;\n//# sourceMappingURL=VectorTileLayer.js.map","/**\n * @module ol/renderer/canvas/common\n */\n/**\n * Context options to disable image smoothing.\n * @type {Object}\n */\nexport var IMAGE_SMOOTHING_DISABLED = {\n    imageSmoothingEnabled: false,\n    msImageSmoothingEnabled: false,\n};\n/**\n * Context options to enable image smoothing.\n * @type {Object}\n */\nexport var IMAGE_SMOOTHING_ENABLED = {\n    imageSmoothingEnabled: true,\n    msImageSmoothingEnabled: true,\n};\n//# sourceMappingURL=common.js.map","/**\n * @module ol/renderer/vector\n */\nimport ImageState from '../ImageState.js';\nimport { getUid } from '../util.js';\n/**\n * Feature callback. The callback will be called with three arguments. The first\n * argument is one {@link module:ol/Feature~Feature feature} or {@link module:ol/render/Feature~RenderFeature render feature}\n * at the pixel, the second is the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\n * unmanaged layers. The third is the {@link module:ol/geom/SimpleGeometry~SimpleGeometry} of the feature. For features\n * with a GeometryCollection geometry, it will be the first detected geometry from the collection.\n * @template T\n * @typedef {function(import(\"../Feature.js\").FeatureLike, import(\"../layer/Layer.js\").default<import(\"../source/Source\").default>, import(\"../geom/SimpleGeometry.js\").default): T} FeatureCallback\n */\n/**\n * Tolerance for geometry simplification in device pixels.\n * @type {number}\n */\nvar SIMPLIFY_TOLERANCE = 0.5;\n/**\n * @const\n * @type {Object<import(\"../geom/Geometry.js\").Type,\n *                function(import(\"../render/canvas/BuilderGroup.js\").default, import(\"../geom/Geometry.js\").default,\n *                         import(\"../style/Style.js\").default, Object): void>}\n */\nvar GEOMETRY_RENDERERS = {\n    'Point': renderPointGeometry,\n    'LineString': renderLineStringGeometry,\n    'Polygon': renderPolygonGeometry,\n    'MultiPoint': renderMultiPointGeometry,\n    'MultiLineString': renderMultiLineStringGeometry,\n    'MultiPolygon': renderMultiPolygonGeometry,\n    'GeometryCollection': renderGeometryCollectionGeometry,\n    'Circle': renderCircleGeometry,\n};\n/**\n * @param {import(\"../Feature.js\").FeatureLike} feature1 Feature 1.\n * @param {import(\"../Feature.js\").FeatureLike} feature2 Feature 2.\n * @return {number} Order.\n */\nexport function defaultOrder(feature1, feature2) {\n    return parseInt(getUid(feature1), 10) - parseInt(getUid(feature2), 10);\n}\n/**\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @return {number} Squared pixel tolerance.\n */\nexport function getSquaredTolerance(resolution, pixelRatio) {\n    var tolerance = getTolerance(resolution, pixelRatio);\n    return tolerance * tolerance;\n}\n/**\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @return {number} Pixel tolerance.\n */\nexport function getTolerance(resolution, pixelRatio) {\n    return (SIMPLIFY_TOLERANCE * resolution) / pixelRatio;\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderCircleGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n    var fillStyle = style.getFill();\n    var strokeStyle = style.getStroke();\n    if (fillStyle || strokeStyle) {\n        var circleReplay = builderGroup.getBuilder(style.getZIndex(), 'Circle');\n        circleReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n        circleReplay.drawCircle(geometry, feature);\n    }\n    var textStyle = style.getText();\n    if (textStyle && textStyle.getText()) {\n        var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), 'Text');\n        textReplay.setTextStyle(textStyle);\n        textReplay.drawText(geometry, feature);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n * @param {import(\"../proj.js\").TransformFunction} [opt_transform] Transform from user to view projection.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n * @return {boolean} `true` if style is loading.\n */\nexport function renderFeature(replayGroup, feature, style, squaredTolerance, listener, opt_transform, opt_declutterBuilderGroup) {\n    var loading = false;\n    var imageStyle = style.getImage();\n    if (imageStyle) {\n        var imageState = imageStyle.getImageState();\n        if (imageState == ImageState.LOADED || imageState == ImageState.ERROR) {\n            imageStyle.unlistenImageChange(listener);\n        }\n        else {\n            if (imageState == ImageState.IDLE) {\n                imageStyle.load();\n            }\n            imageStyle.listenImageChange(listener);\n            loading = true;\n        }\n    }\n    renderFeatureInternal(replayGroup, feature, style, squaredTolerance, opt_transform, opt_declutterBuilderGroup);\n    return loading;\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {import(\"../proj.js\").TransformFunction} [opt_transform] Optional transform function.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderFeatureInternal(replayGroup, feature, style, squaredTolerance, opt_transform, opt_declutterBuilderGroup) {\n    var geometry = style.getGeometryFunction()(feature);\n    if (!geometry) {\n        return;\n    }\n    var simplifiedGeometry = geometry.simplifyTransformed(squaredTolerance, opt_transform);\n    var renderer = style.getRenderer();\n    if (renderer) {\n        renderGeometry(replayGroup, simplifiedGeometry, style, feature);\n    }\n    else {\n        var geometryRenderer = GEOMETRY_RENDERERS[simplifiedGeometry.getType()];\n        geometryRenderer(replayGroup, simplifiedGeometry, style, feature, opt_declutterBuilderGroup);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n */\nfunction renderGeometry(replayGroup, geometry, style, feature) {\n    if (geometry.getType() == 'GeometryCollection') {\n        var geometries = \n        /** @type {import(\"../geom/GeometryCollection.js\").default} */ (geometry).getGeometries();\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            renderGeometry(replayGroup, geometries[i], style, feature);\n        }\n        return;\n    }\n    var replay = replayGroup.getBuilder(style.getZIndex(), 'Default');\n    replay.drawCustom(\n    /** @type {import(\"../geom/SimpleGeometry.js\").default} */ (geometry), feature, style.getRenderer(), style.getHitDetectionRenderer());\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderGeometryCollectionGeometry(replayGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n    var geometries = geometry.getGeometriesArray();\n    var i, ii;\n    for (i = 0, ii = geometries.length; i < ii; ++i) {\n        var geometryRenderer = GEOMETRY_RENDERERS[geometries[i].getType()];\n        geometryRenderer(replayGroup, geometries[i], style, feature, opt_declutterBuilderGroup);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/LineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderLineStringGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n    var strokeStyle = style.getStroke();\n    if (strokeStyle) {\n        var lineStringReplay = builderGroup.getBuilder(style.getZIndex(), 'LineString');\n        lineStringReplay.setFillStrokeStyle(null, strokeStyle);\n        lineStringReplay.drawLineString(geometry, feature);\n    }\n    var textStyle = style.getText();\n    if (textStyle && textStyle.getText()) {\n        var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), 'Text');\n        textReplay.setTextStyle(textStyle);\n        textReplay.drawText(geometry, feature);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/MultiLineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderMultiLineStringGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n    var strokeStyle = style.getStroke();\n    if (strokeStyle) {\n        var lineStringReplay = builderGroup.getBuilder(style.getZIndex(), 'LineString');\n        lineStringReplay.setFillStrokeStyle(null, strokeStyle);\n        lineStringReplay.drawMultiLineString(geometry, feature);\n    }\n    var textStyle = style.getText();\n    if (textStyle && textStyle.getText()) {\n        var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), 'Text');\n        textReplay.setTextStyle(textStyle);\n        textReplay.drawText(geometry, feature);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderMultiPolygonGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n    var fillStyle = style.getFill();\n    var strokeStyle = style.getStroke();\n    if (strokeStyle || fillStyle) {\n        var polygonReplay = builderGroup.getBuilder(style.getZIndex(), 'Polygon');\n        polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n        polygonReplay.drawMultiPolygon(geometry, feature);\n    }\n    var textStyle = style.getText();\n    if (textStyle && textStyle.getText()) {\n        var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), 'Text');\n        textReplay.setTextStyle(textStyle);\n        textReplay.drawText(geometry, feature);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/Point.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderPointGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n    var imageStyle = style.getImage();\n    var textStyle = style.getText();\n    /** @type {import(\"../render/canvas.js\").DeclutterImageWithText} */\n    var declutterImageWithText;\n    if (imageStyle) {\n        if (imageStyle.getImageState() != ImageState.LOADED) {\n            return;\n        }\n        var imageBuilderGroup = builderGroup;\n        if (opt_declutterBuilderGroup) {\n            var declutterMode = imageStyle.getDeclutterMode();\n            if (declutterMode !== 'none') {\n                imageBuilderGroup = opt_declutterBuilderGroup;\n                if (declutterMode === 'obstacle') {\n                    // draw in non-declutter group:\n                    var imageReplay_1 = builderGroup.getBuilder(style.getZIndex(), 'Image');\n                    imageReplay_1.setImageStyle(imageStyle, declutterImageWithText);\n                    imageReplay_1.drawPoint(geometry, feature);\n                }\n                else if (textStyle && textStyle.getText()) {\n                    declutterImageWithText = {};\n                }\n            }\n        }\n        var imageReplay = imageBuilderGroup.getBuilder(style.getZIndex(), 'Image');\n        imageReplay.setImageStyle(imageStyle, declutterImageWithText);\n        imageReplay.drawPoint(geometry, feature);\n    }\n    if (textStyle && textStyle.getText()) {\n        var textBuilderGroup = builderGroup;\n        if (opt_declutterBuilderGroup) {\n            textBuilderGroup = opt_declutterBuilderGroup;\n        }\n        var textReplay = textBuilderGroup.getBuilder(style.getZIndex(), 'Text');\n        textReplay.setTextStyle(textStyle, declutterImageWithText);\n        textReplay.drawText(geometry, feature);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/MultiPoint.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderMultiPointGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n    var imageStyle = style.getImage();\n    var textStyle = style.getText();\n    /** @type {import(\"../render/canvas.js\").DeclutterImageWithText} */\n    var declutterImageWithText;\n    if (imageStyle) {\n        if (imageStyle.getImageState() != ImageState.LOADED) {\n            return;\n        }\n        var imageBuilderGroup = builderGroup;\n        if (opt_declutterBuilderGroup) {\n            var declutterMode = imageStyle.getDeclutterMode();\n            if (declutterMode !== 'none') {\n                imageBuilderGroup = opt_declutterBuilderGroup;\n                if (declutterMode === 'obstacle') {\n                    // draw in non-declutter group:\n                    var imageReplay_2 = builderGroup.getBuilder(style.getZIndex(), 'Image');\n                    imageReplay_2.setImageStyle(imageStyle, declutterImageWithText);\n                    imageReplay_2.drawMultiPoint(geometry, feature);\n                }\n                else if (textStyle && textStyle.getText()) {\n                    declutterImageWithText = {};\n                }\n            }\n        }\n        var imageReplay = imageBuilderGroup.getBuilder(style.getZIndex(), 'Image');\n        imageReplay.setImageStyle(imageStyle, declutterImageWithText);\n        imageReplay.drawMultiPoint(geometry, feature);\n    }\n    if (textStyle && textStyle.getText()) {\n        var textBuilderGroup = builderGroup;\n        if (opt_declutterBuilderGroup) {\n            textBuilderGroup = opt_declutterBuilderGroup;\n        }\n        var textReplay = textBuilderGroup.getBuilder(style.getZIndex(), 'Text');\n        textReplay.setTextStyle(textStyle, declutterImageWithText);\n        textReplay.drawText(geometry, feature);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/Polygon.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderPolygonGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n    var fillStyle = style.getFill();\n    var strokeStyle = style.getStroke();\n    if (fillStyle || strokeStyle) {\n        var polygonReplay = builderGroup.getBuilder(style.getZIndex(), 'Polygon');\n        polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n        polygonReplay.drawPolygon(geometry, feature);\n    }\n    var textStyle = style.getText();\n    if (textStyle && textStyle.getText()) {\n        var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), 'Text');\n        textReplay.setTextStyle(textStyle);\n        textReplay.drawText(geometry, feature);\n    }\n}\n//# sourceMappingURL=vector.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/renderer/webgl/Layer\n */\nimport LayerProperty from '../../layer/Property.js';\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport WebGLHelper from '../../webgl/Helper.js';\nimport { apply as applyTransform, compose as composeTransform, create as createTransform, } from '../../transform.js';\nimport { containsCoordinate } from '../../extent.js';\n/**\n * @enum {string}\n */\nexport var WebGLWorkerMessageType = {\n    GENERATE_BUFFERS: 'GENERATE_BUFFERS',\n};\n/**\n * @typedef {Object} WebGLWorkerGenerateBuffersMessage\n * This message will trigger the generation of a vertex and an index buffer based on the given render instructions.\n * When the buffers are generated, the worked will send a message of the same type to the main thread, with\n * the generated buffers in it.\n * Note that any addition properties present in the message *will* be sent back to the main thread.\n * @property {WebGLWorkerMessageType} type Message type\n * @property {ArrayBuffer} renderInstructions Render instructions raw binary buffer.\n * @property {ArrayBuffer} [vertexBuffer] Vertices array raw binary buffer (sent by the worker).\n * @property {ArrayBuffer} [indexBuffer] Indices array raw binary buffer (sent by the worker).\n * @property {number} [customAttributesCount] Amount of custom attributes count in the render instructions.\n */\n/**\n * @typedef {Object} PostProcessesOptions\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n/**\n * @typedef {Object} Options\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process steps\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\n */\n/**\n * @classdesc\n * Base WebGL renderer class.\n * Holds all logic related to data manipulation & some common rendering logic\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nvar WebGLLayerRenderer = /** @class */ (function (_super) {\n    __extends(WebGLLayerRenderer, _super);\n    /**\n     * @param {LayerType} layer Layer.\n     * @param {Options} [opt_options] Options.\n     */\n    function WebGLLayerRenderer(layer, opt_options) {\n        var _this = _super.call(this, layer) || this;\n        var options = opt_options || {};\n        /**\n         * The transform for viewport CSS pixels to rendered pixels.  This transform is only\n         * set before dispatching rendering events.\n         * @private\n         * @type {import(\"../../transform.js\").Transform}\n         */\n        _this.inversePixelTransform_ = createTransform();\n        /**\n         * @private\n         * @type {CanvasRenderingContext2D}\n         */\n        _this.pixelContext_ = null;\n        /**\n         * @private\n         */\n        _this.postProcesses_ = options.postProcesses;\n        /**\n         * @private\n         */\n        _this.uniforms_ = options.uniforms;\n        /**\n         * @type {WebGLHelper}\n         * @protected\n         */\n        _this.helper;\n        layer.addChangeListener(LayerProperty.MAP, _this.removeHelper.bind(_this));\n        _this.dispatchPreComposeEvent = _this.dispatchPreComposeEvent.bind(_this);\n        _this.dispatchPostComposeEvent = _this.dispatchPostComposeEvent.bind(_this);\n        return _this;\n    }\n    /**\n     * @param {WebGLRenderingContext} context The WebGL rendering context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n    WebGLLayerRenderer.prototype.dispatchPreComposeEvent = function (context, frameState) {\n        var layer = this.getLayer();\n        if (layer.hasListener(RenderEventType.PRECOMPOSE)) {\n            var event_1 = new RenderEvent(RenderEventType.PRECOMPOSE, undefined, frameState, context);\n            layer.dispatchEvent(event_1);\n        }\n    };\n    /**\n     * @param {WebGLRenderingContext} context The WebGL rendering context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n    WebGLLayerRenderer.prototype.dispatchPostComposeEvent = function (context, frameState) {\n        var layer = this.getLayer();\n        if (layer.hasListener(RenderEventType.POSTCOMPOSE)) {\n            var event_2 = new RenderEvent(RenderEventType.POSTCOMPOSE, undefined, frameState, context);\n            layer.dispatchEvent(event_2);\n        }\n    };\n    /**\n     * Reset options (only handles uniforms).\n     * @param {Options} options Options.\n     */\n    WebGLLayerRenderer.prototype.reset = function (options) {\n        this.uniforms_ = options.uniforms;\n        if (this.helper) {\n            this.helper.setUniforms(this.uniforms_);\n        }\n    };\n    /**\n     * @protected\n     */\n    WebGLLayerRenderer.prototype.removeHelper = function () {\n        if (this.helper) {\n            this.helper.dispose();\n            delete this.helper;\n        }\n    };\n    /**\n     * Determine whether renderFrame should be called.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {boolean} Layer is ready to be rendered.\n     */\n    WebGLLayerRenderer.prototype.prepareFrame = function (frameState) {\n        if (this.getLayer().getRenderSource()) {\n            var incrementGroup = true;\n            var groupNumber = -1;\n            var className = void 0;\n            for (var i = 0, ii = frameState.layerStatesArray.length; i < ii; i++) {\n                var layer = frameState.layerStatesArray[i].layer;\n                var renderer = layer.getRenderer();\n                if (!(renderer instanceof WebGLLayerRenderer)) {\n                    incrementGroup = true;\n                    continue;\n                }\n                var layerClassName = layer.getClassName();\n                if (incrementGroup || layerClassName !== className) {\n                    groupNumber += 1;\n                    incrementGroup = false;\n                }\n                className = layerClassName;\n                if (renderer === this) {\n                    break;\n                }\n            }\n            var canvasCacheKey = 'map/' + frameState.mapId + '/group/' + groupNumber;\n            if (!this.helper || !this.helper.canvasCacheKeyMatches(canvasCacheKey)) {\n                this.removeHelper();\n                this.helper = new WebGLHelper({\n                    postProcesses: this.postProcesses_,\n                    uniforms: this.uniforms_,\n                    canvasCacheKey: canvasCacheKey,\n                });\n                if (className) {\n                    this.helper.getCanvas().className = className;\n                }\n                this.afterHelperCreated();\n            }\n        }\n        return this.prepareFrameInternal(frameState);\n    };\n    /**\n     * @protected\n     */\n    WebGLLayerRenderer.prototype.afterHelperCreated = function () { };\n    /**\n     * Determine whether renderFrame should be called.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {boolean} Layer is ready to be rendered.\n     * @protected\n     */\n    WebGLLayerRenderer.prototype.prepareFrameInternal = function (frameState) {\n        return true;\n    };\n    /**\n     * Clean up.\n     */\n    WebGLLayerRenderer.prototype.disposeInternal = function () {\n        this.removeHelper();\n        _super.prototype.disposeInternal.call(this);\n    };\n    /**\n     * @param {import(\"../../render/EventType.js\").default} type Event type.\n     * @param {WebGLRenderingContext} context The rendering context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @private\n     */\n    WebGLLayerRenderer.prototype.dispatchRenderEvent_ = function (type, context, frameState) {\n        var layer = this.getLayer();\n        if (layer.hasListener(type)) {\n            composeTransform(this.inversePixelTransform_, 0, 0, frameState.pixelRatio, -frameState.pixelRatio, 0, 0, -frameState.size[1]);\n            var event_3 = new RenderEvent(type, this.inversePixelTransform_, frameState, context);\n            layer.dispatchEvent(event_3);\n        }\n    };\n    /**\n     * @param {WebGLRenderingContext} context The rendering context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n    WebGLLayerRenderer.prototype.preRender = function (context, frameState) {\n        this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n    };\n    /**\n     * @param {WebGLRenderingContext} context The rendering context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n    WebGLLayerRenderer.prototype.postRender = function (context, frameState) {\n        this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n    };\n    /**\n     * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState FrameState.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel\n     *    location, null will be returned.  If there is data, but pixel values cannot be\n     *    returned, and empty array will be returned.\n     */\n    WebGLLayerRenderer.prototype.getDataAtPixel = function (pixel, frameState, hitTolerance) {\n        var renderPixel = applyTransform([frameState.pixelRatio, 0, 0, frameState.pixelRatio, 0, 0], pixel.slice());\n        var gl = this.helper.getGL();\n        if (!gl) {\n            return null;\n        }\n        var layer = this.getLayer();\n        var layerExtent = layer.getExtent();\n        if (layerExtent) {\n            var renderCoordinate = applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n            /** get only data inside of the layer extent */\n            if (!containsCoordinate(layerExtent, renderCoordinate)) {\n                return null;\n            }\n        }\n        var attributes = gl.getContextAttributes();\n        if (!attributes || !attributes.preserveDrawingBuffer) {\n            // we assume there is data at the given pixel (although there might not be)\n            return new Uint8Array();\n        }\n        var x = Math.round(renderPixel[0]);\n        var y = Math.round(renderPixel[1]);\n        var pixelContext = this.pixelContext_;\n        if (!pixelContext) {\n            var pixelCanvas = document.createElement('canvas');\n            pixelCanvas.width = 1;\n            pixelCanvas.height = 1;\n            pixelContext = pixelCanvas.getContext('2d');\n            this.pixelContext_ = pixelContext;\n        }\n        pixelContext.clearRect(0, 0, 1, 1);\n        var data;\n        try {\n            pixelContext.drawImage(gl.canvas, x, y, 1, 1, 0, 0, 1, 1);\n            data = pixelContext.getImageData(0, 0, 1, 1).data;\n        }\n        catch (err) {\n            return data;\n        }\n        if (data[3] === 0) {\n            return null;\n        }\n        return data;\n    };\n    return WebGLLayerRenderer;\n}(LayerRenderer));\nvar tmpArray_ = [];\nvar bufferPositions_ = { vertexPosition: 0, indexPosition: 0 };\nfunction writePointVertex(buffer, pos, x, y, index) {\n    buffer[pos + 0] = x;\n    buffer[pos + 1] = y;\n    buffer[pos + 2] = index;\n}\n/**\n * An object holding positions both in an index and a vertex buffer.\n * @typedef {Object} BufferPositions\n * @property {number} vertexPosition Position in the vertex buffer\n * @property {number} indexPosition Position in the index buffer\n */\n/**\n * Pushes a quad (two triangles) based on a point geometry\n * @param {Float32Array} instructions Array of render instructions for points.\n * @param {number} elementIndex Index from which render instructions will be read.\n * @param {Float32Array} vertexBuffer Buffer in the form of a typed array.\n * @param {Uint32Array} indexBuffer Buffer in the form of a typed array.\n * @param {number} customAttributesCount Amount of custom attributes for each element.\n * @param {BufferPositions} [bufferPositions] Buffer write positions; if not specified, positions will be set at 0.\n * @return {BufferPositions} New buffer positions where to write next\n * @property {number} vertexPosition New position in the vertex buffer where future writes should start.\n * @property {number} indexPosition New position in the index buffer where future writes should start.\n * @private\n */\nexport function writePointFeatureToBuffers(instructions, elementIndex, vertexBuffer, indexBuffer, customAttributesCount, bufferPositions) {\n    // This is for x, y and index\n    var baseVertexAttrsCount = 3;\n    var baseInstructionsCount = 2;\n    var stride = baseVertexAttrsCount + customAttributesCount;\n    var x = instructions[elementIndex + 0];\n    var y = instructions[elementIndex + 1];\n    // read custom numerical attributes on the feature\n    var customAttrs = tmpArray_;\n    customAttrs.length = customAttributesCount;\n    for (var i = 0; i < customAttrs.length; i++) {\n        customAttrs[i] = instructions[elementIndex + baseInstructionsCount + i];\n    }\n    var vPos = bufferPositions ? bufferPositions.vertexPosition : 0;\n    var iPos = bufferPositions ? bufferPositions.indexPosition : 0;\n    var baseIndex = vPos / stride;\n    // push vertices for each of the four quad corners (first standard then custom attributes)\n    writePointVertex(vertexBuffer, vPos, x, y, 0);\n    customAttrs.length &&\n        vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n    vPos += stride;\n    writePointVertex(vertexBuffer, vPos, x, y, 1);\n    customAttrs.length &&\n        vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n    vPos += stride;\n    writePointVertex(vertexBuffer, vPos, x, y, 2);\n    customAttrs.length &&\n        vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n    vPos += stride;\n    writePointVertex(vertexBuffer, vPos, x, y, 3);\n    customAttrs.length &&\n        vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n    vPos += stride;\n    indexBuffer[iPos++] = baseIndex;\n    indexBuffer[iPos++] = baseIndex + 1;\n    indexBuffer[iPos++] = baseIndex + 3;\n    indexBuffer[iPos++] = baseIndex + 1;\n    indexBuffer[iPos++] = baseIndex + 2;\n    indexBuffer[iPos++] = baseIndex + 3;\n    bufferPositions_.vertexPosition = vPos;\n    bufferPositions_.indexPosition = iPos;\n    return bufferPositions_;\n}\n/**\n * Returns a texture of 1x1 pixel, white\n * @private\n * @return {ImageData} Image data.\n */\nexport function getBlankImageData() {\n    var canvas = document.createElement('canvas');\n    var image = canvas.getContext('2d').createImageData(1, 1);\n    image.data[0] = 255;\n    image.data[1] = 255;\n    image.data[2] = 255;\n    image.data[3] = 255;\n    return image;\n}\n/**\n * Generates a color array based on a numerical id\n * Note: the range for each component is 0 to 1 with 256 steps\n * @param {number} id Id\n * @param {Array<number>} [opt_array] Reusable array\n * @return {Array<number>} Color array containing the encoded id\n */\nexport function colorEncodeId(id, opt_array) {\n    var array = opt_array || [];\n    var radix = 256;\n    var divide = radix - 1;\n    array[0] = Math.floor(id / radix / radix / radix) / divide;\n    array[1] = (Math.floor(id / radix / radix) % radix) / divide;\n    array[2] = (Math.floor(id / radix) % radix) / divide;\n    array[3] = (id % radix) / divide;\n    return array;\n}\n/**\n * Reads an id from a color-encoded array\n * Note: the expected range for each component is 0 to 1 with 256 steps.\n * @param {Array<number>} color Color array containing the encoded id\n * @return {number} Decoded id\n */\nexport function colorDecodeId(color) {\n    var id = 0;\n    var radix = 256;\n    var mult = radix - 1;\n    id += Math.round(color[0] * radix * radix * radix * mult);\n    id += Math.round(color[1] * radix * radix * mult);\n    id += Math.round(color[2] * radix * mult);\n    id += Math.round(color[3] * mult);\n    return id;\n}\nexport default WebGLLayerRenderer;\n//# sourceMappingURL=Layer.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/renderer/webgl/PointsLayer\n */\nimport BaseVector from '../../layer/BaseVector.js';\nimport VectorEventType from '../../source/VectorEventType.js';\nimport ViewHint from '../../ViewHint.js';\nimport WebGLArrayBuffer from '../../webgl/Buffer.js';\nimport WebGLLayerRenderer, { WebGLWorkerMessageType, colorDecodeId, colorEncodeId, } from './Layer.js';\nimport WebGLRenderTarget from '../../webgl/RenderTarget.js';\nimport { ARRAY_BUFFER, DYNAMIC_DRAW, ELEMENT_ARRAY_BUFFER } from '../../webgl.js';\nimport { AttributeType, DefaultUniform } from '../../webgl/Helper.js';\nimport { apply as applyTransform, create as createTransform, makeInverse as makeInverseTransform, multiply as multiplyTransform, translate as translateTransform, } from '../../transform.js';\nimport { assert } from '../../asserts.js';\nimport { buffer, createEmpty, equals, getWidth } from '../../extent.js';\nimport { create as createWebGLWorker } from '../../worker/webgl.js';\nimport { getUid } from '../../util.js';\nimport { listen, unlistenByKey } from '../../events.js';\n/**\n * @typedef {Object} CustomAttribute A description of a custom attribute to be passed on to the GPU, with a value different\n * for each feature.\n * @property {string} name Attribute name.\n * @property {function(import(\"../../Feature\").default, Object<string, *>):number} callback This callback computes the numerical value of the\n * attribute for a given feature (properties are available as 2nd arg for quicker access).\n */\n/**\n * @typedef {Object} FeatureCacheItem Object that holds a reference to a feature, its geometry and properties. Used to optimize\n * rebuildBuffers by accessing these objects quicker.\n * @property {import(\"../../Feature\").default} feature Feature\n * @property {Object<string, *>} properties Feature properties\n * @property {import(\"../../geom\").Geometry} geometry Feature geometry\n */\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the canvas element.\n * @property {Array<CustomAttribute>} [attributes] These attributes will be read from the features in the source and then\n * passed to the GPU. The `name` property of each attribute will serve as its identifier:\n *  * In the vertex shader as an `attribute` by prefixing it with `a_`\n *  * In the fragment shader as a `varying` by prefixing it with `v_`\n * Please note that these can only be numerical values.\n * @property {string} vertexShader Vertex shader source, mandatory.\n * @property {string} fragmentShader Fragment shader source, mandatory.\n * @property {string} [hitVertexShader] Vertex shader source for hit detection rendering.\n * @property {string} [hitFragmentShader] Fragment shader source for hit detection rendering.\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process steps\n * Please note that `u_texture` is reserved for the main texture slot and `u_opacity` is reserved for the layer opacity.\n * @property {Array<import(\"./Layer\").PostProcessesOptions>} [postProcesses] Post-processes definitions\n */\n/**\n * @classdesc\n * WebGL vector renderer optimized for points.\n * All features will be rendered as quads (two triangles forming a square). New data will be flushed to the GPU\n * every time the vector source changes.\n *\n * You need to provide vertex and fragment shaders for rendering. This can be done using\n * {@link module:ol/webgl/ShaderBuilder~ShaderBuilder} utilities. These shaders shall expect a `a_position` attribute\n * containing the screen-space projected center of the quad, as well as a `a_index` attribute\n * whose value (0, 1, 2 or 3) indicates which quad vertex is currently getting processed (see structure below).\n *\n * To include variable attributes in the shaders, you need to declare them using the `attributes` property of\n * the options object like so:\n * ```js\n * new WebGLPointsLayerRenderer(layer, {\n *   attributes: [\n *     {\n *       name: 'size',\n *       callback: function(feature) {\n *         // compute something with the feature\n *       }\n *     },\n *     {\n *       name: 'weight',\n *       callback: function(feature) {\n *         // compute something with the feature\n *       }\n *     },\n *   ],\n *   vertexShader:\n *     // shader using attribute a_weight and a_size\n *   fragmentShader:\n *     // shader using varying v_weight and v_size\n * ```\n *\n * To enable hit detection, you must as well provide dedicated shaders using the `hitVertexShader`\n * and `hitFragmentShader` properties. These shall expect the `a_hitColor` attribute to contain\n * the final color that will have to be output for hit detection to work.\n *\n * The following uniform is used for the main texture: `u_texture`.\n * The following uniform is used for the layer opacity: `u_opacity`.\n *\n * Please note that the main shader output should have premultiplied alpha, otherwise visual anomalies may occur.\n *\n * Points are rendered as quads with the following structure:\n *\n * ```\n *   (u0, v1)      (u1, v1)\n *  [3]----------[2]\n *   |`           |\n *   |  `         |\n *   |    `       |\n *   |      `     |\n *   |        `   |\n *   |          ` |\n *  [0]----------[1]\n *   (u0, v0)      (u1, v0)\n *  ```\n *\n * This uses {@link module:ol/webgl/Helper~WebGLHelper} internally.\n *\n * @api\n */\nvar WebGLPointsLayerRenderer = /** @class */ (function (_super) {\n    __extends(WebGLPointsLayerRenderer, _super);\n    /**\n     * @param {import(\"../../layer/Layer.js\").default} layer Layer.\n     * @param {Options} options Options.\n     */\n    function WebGLPointsLayerRenderer(layer, options) {\n        var _this = this;\n        var uniforms = options.uniforms || {};\n        var projectionMatrixTransform = createTransform();\n        uniforms[DefaultUniform.PROJECTION_MATRIX] = projectionMatrixTransform;\n        _this = _super.call(this, layer, {\n            uniforms: uniforms,\n            postProcesses: options.postProcesses,\n        }) || this;\n        _this.ready = false;\n        _this.sourceRevision_ = -1;\n        _this.verticesBuffer_ = new WebGLArrayBuffer(ARRAY_BUFFER, DYNAMIC_DRAW);\n        _this.hitVerticesBuffer_ = new WebGLArrayBuffer(ARRAY_BUFFER, DYNAMIC_DRAW);\n        _this.indicesBuffer_ = new WebGLArrayBuffer(ELEMENT_ARRAY_BUFFER, DYNAMIC_DRAW);\n        /**\n         * @private\n         */\n        _this.vertexShader_ = options.vertexShader;\n        /**\n         * @private\n         */\n        _this.fragmentShader_ = options.fragmentShader;\n        /**\n         * @type {WebGLProgram}\n         * @private\n         */\n        _this.program_;\n        /**\n         * @type {boolean}\n         * @private\n         */\n        _this.hitDetectionEnabled_ =\n            options.hitFragmentShader && options.hitVertexShader ? true : false;\n        /**\n         * @private\n         */\n        _this.hitVertexShader_ = options.hitVertexShader;\n        /**\n         * @private\n         */\n        _this.hitFragmentShader_ = options.hitFragmentShader;\n        /**\n         * @type {WebGLProgram}\n         * @private\n         */\n        _this.hitProgram_;\n        var customAttributes = options.attributes\n            ? options.attributes.map(function (attribute) {\n                return {\n                    name: 'a_' + attribute.name,\n                    size: 1,\n                    type: AttributeType.FLOAT,\n                };\n            })\n            : [];\n        /**\n         * A list of attributes used by the renderer. By default only the position and\n         * index of the vertex (0 to 3) are required.\n         * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n         */\n        _this.attributes = [\n            {\n                name: 'a_position',\n                size: 2,\n                type: AttributeType.FLOAT,\n            },\n            {\n                name: 'a_index',\n                size: 1,\n                type: AttributeType.FLOAT,\n            },\n        ].concat(customAttributes);\n        /**\n         * A list of attributes used for hit detection.\n         * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n         */\n        _this.hitDetectionAttributes = [\n            {\n                name: 'a_position',\n                size: 2,\n                type: AttributeType.FLOAT,\n            },\n            {\n                name: 'a_index',\n                size: 1,\n                type: AttributeType.FLOAT,\n            },\n            {\n                name: 'a_hitColor',\n                size: 4,\n                type: AttributeType.FLOAT,\n            },\n            {\n                name: 'a_featureUid',\n                size: 1,\n                type: AttributeType.FLOAT,\n            },\n        ].concat(customAttributes);\n        _this.customAttributes = options.attributes ? options.attributes : [];\n        _this.previousExtent_ = createEmpty();\n        /**\n         * This transform is updated on every frame and is the composition of:\n         * - invert of the world->screen transform that was used when rebuilding buffers (see `this.renderTransform_`)\n         * - current world->screen transform\n         * @type {import(\"../../transform.js\").Transform}\n         * @private\n         */\n        _this.currentTransform_ = projectionMatrixTransform;\n        /**\n         * This transform is updated when buffers are rebuilt and converts world space coordinates to screen space\n         * @type {import(\"../../transform.js\").Transform}\n         * @private\n         */\n        _this.renderTransform_ = createTransform();\n        /**\n         * @type {import(\"../../transform.js\").Transform}\n         * @private\n         */\n        _this.invertRenderTransform_ = createTransform();\n        /**\n         * @type {Float32Array}\n         * @private\n         */\n        _this.renderInstructions_ = new Float32Array(0);\n        /**\n         * These instructions are used for hit detection\n         * @type {Float32Array}\n         * @private\n         */\n        _this.hitRenderInstructions_ = new Float32Array(0);\n        /**\n         * @type {WebGLRenderTarget}\n         * @private\n         */\n        _this.hitRenderTarget_;\n        /**\n         * Keep track of latest message sent to worker\n         * @type {number}\n         * @private\n         */\n        _this.generateBuffersRun_ = 0;\n        _this.worker_ = createWebGLWorker();\n        _this.worker_.addEventListener('message', \n        /**\n         * @param {*} event Event.\n         * @this {WebGLPointsLayerRenderer}\n         */\n        function (event) {\n            var received = event.data;\n            if (received.type === WebGLWorkerMessageType.GENERATE_BUFFERS) {\n                var projectionTransform = received.projectionTransform;\n                if (received.hitDetection) {\n                    this.hitVerticesBuffer_.fromArrayBuffer(received.vertexBuffer);\n                    this.helper.flushBufferData(this.hitVerticesBuffer_);\n                }\n                else {\n                    this.verticesBuffer_.fromArrayBuffer(received.vertexBuffer);\n                    this.helper.flushBufferData(this.verticesBuffer_);\n                }\n                this.indicesBuffer_.fromArrayBuffer(received.indexBuffer);\n                this.helper.flushBufferData(this.indicesBuffer_);\n                this.renderTransform_ = projectionTransform;\n                makeInverseTransform(this.invertRenderTransform_, this.renderTransform_);\n                if (received.hitDetection) {\n                    this.hitRenderInstructions_ = new Float32Array(event.data.renderInstructions);\n                }\n                else {\n                    this.renderInstructions_ = new Float32Array(event.data.renderInstructions);\n                    if (received.generateBuffersRun === this.generateBuffersRun_) {\n                        this.ready = true;\n                    }\n                }\n                this.getLayer().changed();\n            }\n        }.bind(_this));\n        /**\n         * This object will be updated when the source changes. Key is uid.\n         * @type {Object<string, FeatureCacheItem>}\n         * @private\n         */\n        _this.featureCache_ = {};\n        /**\n         * Amount of features in the cache.\n         * @type {number}\n         * @private\n         */\n        _this.featureCount_ = 0;\n        var source = _this.getLayer().getSource();\n        _this.sourceListenKeys_ = [\n            listen(source, VectorEventType.ADDFEATURE, _this.handleSourceFeatureAdded_, _this),\n            listen(source, VectorEventType.CHANGEFEATURE, _this.handleSourceFeatureChanged_, _this),\n            listen(source, VectorEventType.REMOVEFEATURE, _this.handleSourceFeatureDelete_, _this),\n            listen(source, VectorEventType.CLEAR, _this.handleSourceFeatureClear_, _this),\n        ];\n        source.forEachFeature(function (feature) {\n            this.featureCache_[getUid(feature)] = {\n                feature: feature,\n                properties: feature.getProperties(),\n                geometry: feature.getGeometry(),\n            };\n            this.featureCount_++;\n        }.bind(_this));\n        return _this;\n    }\n    WebGLPointsLayerRenderer.prototype.afterHelperCreated = function () {\n        this.program_ = this.helper.getProgram(this.fragmentShader_, this.vertexShader_);\n        if (this.hitDetectionEnabled_) {\n            this.hitProgram_ = this.helper.getProgram(this.hitFragmentShader_, this.hitVertexShader_);\n            this.hitRenderTarget_ = new WebGLRenderTarget(this.helper);\n        }\n    };\n    /**\n     * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n     * @private\n     */\n    WebGLPointsLayerRenderer.prototype.handleSourceFeatureAdded_ = function (event) {\n        var feature = event.feature;\n        this.featureCache_[getUid(feature)] = {\n            feature: feature,\n            properties: feature.getProperties(),\n            geometry: feature.getGeometry(),\n        };\n        this.featureCount_++;\n    };\n    /**\n     * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n     * @private\n     */\n    WebGLPointsLayerRenderer.prototype.handleSourceFeatureChanged_ = function (event) {\n        var feature = event.feature;\n        this.featureCache_[getUid(feature)] = {\n            feature: feature,\n            properties: feature.getProperties(),\n            geometry: feature.getGeometry(),\n        };\n    };\n    /**\n     * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n     * @private\n     */\n    WebGLPointsLayerRenderer.prototype.handleSourceFeatureDelete_ = function (event) {\n        var feature = event.feature;\n        delete this.featureCache_[getUid(feature)];\n        this.featureCount_--;\n    };\n    /**\n     * @private\n     */\n    WebGLPointsLayerRenderer.prototype.handleSourceFeatureClear_ = function () {\n        this.featureCache_ = {};\n        this.featureCount_ = 0;\n    };\n    /**\n     * Render the layer.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {HTMLElement} The rendered element.\n     */\n    WebGLPointsLayerRenderer.prototype.renderFrame = function (frameState) {\n        var gl = this.helper.getGL();\n        this.preRender(gl, frameState);\n        var projection = frameState.viewState.projection;\n        var layer = this.getLayer();\n        var vectorSource = layer.getSource();\n        // FIXME fix hit detection isn't reliable when rendering multiple worlds\n        var multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n        var projectionExtent = projection.getExtent();\n        var extent = frameState.extent;\n        var worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n        var endWorld = multiWorld\n            ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1\n            : 1;\n        var startWorld = multiWorld\n            ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth)\n            : 0;\n        var world = startWorld;\n        var renderCount = this.indicesBuffer_.getSize();\n        do {\n            // apply the current projection transform with the invert of the one used to fill buffers\n            this.helper.makeProjectionTransform(frameState, this.currentTransform_);\n            translateTransform(this.currentTransform_, world * worldWidth, 0);\n            multiplyTransform(this.currentTransform_, this.invertRenderTransform_);\n            this.helper.applyUniforms(frameState);\n            this.helper.drawElements(0, renderCount);\n        } while (++world < endWorld);\n        this.helper.finalizeDraw(frameState, this.dispatchPreComposeEvent, this.dispatchPostComposeEvent);\n        var canvas = this.helper.getCanvas();\n        if (this.hitDetectionEnabled_) {\n            this.renderHitDetection(frameState, startWorld, endWorld, worldWidth);\n            this.hitRenderTarget_.clearCachedData();\n        }\n        this.postRender(gl, frameState);\n        return canvas;\n    };\n    /**\n     * Determine whether renderFrame should be called.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {boolean} Layer is ready to be rendered.\n     */\n    WebGLPointsLayerRenderer.prototype.prepareFrameInternal = function (frameState) {\n        var layer = this.getLayer();\n        var vectorSource = layer.getSource();\n        var viewState = frameState.viewState;\n        var viewNotMoving = !frameState.viewHints[ViewHint.ANIMATING] &&\n            !frameState.viewHints[ViewHint.INTERACTING];\n        var extentChanged = !equals(this.previousExtent_, frameState.extent);\n        var sourceChanged = this.sourceRevision_ < vectorSource.getRevision();\n        if (sourceChanged) {\n            this.sourceRevision_ = vectorSource.getRevision();\n        }\n        if (viewNotMoving && (extentChanged || sourceChanged)) {\n            var projection = viewState.projection;\n            var resolution = viewState.resolution;\n            var renderBuffer = layer instanceof BaseVector ? layer.getRenderBuffer() : 0;\n            var extent = buffer(frameState.extent, renderBuffer * resolution);\n            vectorSource.loadFeatures(extent, resolution, projection);\n            this.rebuildBuffers_(frameState);\n            this.previousExtent_ = frameState.extent.slice();\n        }\n        this.helper.useProgram(this.program_);\n        this.helper.prepareDraw(frameState);\n        // write new data\n        this.helper.bindBuffer(this.verticesBuffer_);\n        this.helper.bindBuffer(this.indicesBuffer_);\n        this.helper.enableAttributes(this.attributes);\n        return true;\n    };\n    /**\n     * Rebuild internal webgl buffers based on current view extent; costly, should not be called too much\n     * @param {import(\"../../PluggableMap\").FrameState} frameState Frame state.\n     * @private\n     */\n    WebGLPointsLayerRenderer.prototype.rebuildBuffers_ = function (frameState) {\n        // saves the projection transform for the current frame state\n        var projectionTransform = createTransform();\n        this.helper.makeProjectionTransform(frameState, projectionTransform);\n        // here we anticipate the amount of render instructions that we well generate\n        // this can be done since we know that for normal render we only have x, y as base instructions,\n        // and x, y, r, g, b, a and featureUid for hit render instructions\n        // and we also know the amount of custom attributes to append to these\n        var totalInstructionsCount = (2 + this.customAttributes.length) * this.featureCount_;\n        if (!this.renderInstructions_ ||\n            this.renderInstructions_.length !== totalInstructionsCount) {\n            this.renderInstructions_ = new Float32Array(totalInstructionsCount);\n        }\n        if (this.hitDetectionEnabled_) {\n            var totalHitInstructionsCount = (7 + this.customAttributes.length) * this.featureCount_;\n            if (!this.hitRenderInstructions_ ||\n                this.hitRenderInstructions_.length !== totalHitInstructionsCount) {\n                this.hitRenderInstructions_ = new Float32Array(totalHitInstructionsCount);\n            }\n        }\n        // loop on features to fill the buffer\n        var featureCache, geometry;\n        var tmpCoords = [];\n        var tmpColor = [];\n        var renderIndex = 0;\n        var hitIndex = 0;\n        var hitColor;\n        for (var featureUid in this.featureCache_) {\n            featureCache = this.featureCache_[featureUid];\n            geometry = /** @type {import(\"../../geom\").Point} */ (featureCache.geometry);\n            if (!geometry || geometry.getType() !== 'Point') {\n                continue;\n            }\n            tmpCoords[0] = geometry.getFlatCoordinates()[0];\n            tmpCoords[1] = geometry.getFlatCoordinates()[1];\n            applyTransform(projectionTransform, tmpCoords);\n            hitColor = colorEncodeId(hitIndex + 6, tmpColor);\n            this.renderInstructions_[renderIndex++] = tmpCoords[0];\n            this.renderInstructions_[renderIndex++] = tmpCoords[1];\n            // for hit detection, the feature uid is saved in the opacity value\n            // and the index of the opacity value is encoded in the color values\n            if (this.hitDetectionEnabled_) {\n                this.hitRenderInstructions_[hitIndex++] = tmpCoords[0];\n                this.hitRenderInstructions_[hitIndex++] = tmpCoords[1];\n                this.hitRenderInstructions_[hitIndex++] = hitColor[0];\n                this.hitRenderInstructions_[hitIndex++] = hitColor[1];\n                this.hitRenderInstructions_[hitIndex++] = hitColor[2];\n                this.hitRenderInstructions_[hitIndex++] = hitColor[3];\n                this.hitRenderInstructions_[hitIndex++] = Number(featureUid);\n            }\n            // pushing custom attributes\n            var value = void 0;\n            for (var j = 0; j < this.customAttributes.length; j++) {\n                value = this.customAttributes[j].callback(featureCache.feature, featureCache.properties);\n                this.renderInstructions_[renderIndex++] = value;\n                if (this.hitDetectionEnabled_) {\n                    this.hitRenderInstructions_[hitIndex++] = value;\n                }\n            }\n        }\n        /** @type {import('./Layer').WebGLWorkerGenerateBuffersMessage} */\n        var message = {\n            type: WebGLWorkerMessageType.GENERATE_BUFFERS,\n            renderInstructions: this.renderInstructions_.buffer,\n            customAttributesCount: this.customAttributes.length,\n        };\n        // additional properties will be sent back as-is by the worker\n        message['projectionTransform'] = projectionTransform;\n        message['generateBuffersRun'] = ++this.generateBuffersRun_;\n        this.ready = false;\n        this.worker_.postMessage(message, [this.renderInstructions_.buffer]);\n        this.renderInstructions_ = null;\n        /** @type {import('./Layer').WebGLWorkerGenerateBuffersMessage} */\n        if (this.hitDetectionEnabled_) {\n            var hitMessage = {\n                type: WebGLWorkerMessageType.GENERATE_BUFFERS,\n                renderInstructions: this.hitRenderInstructions_.buffer,\n                customAttributesCount: 5 + this.customAttributes.length,\n            };\n            hitMessage['projectionTransform'] = projectionTransform;\n            hitMessage['hitDetection'] = true;\n            this.worker_.postMessage(hitMessage, [\n                this.hitRenderInstructions_.buffer,\n            ]);\n            this.hitRenderInstructions_ = null;\n        }\n    };\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n     * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n     * @return {T|undefined} Callback result.\n     * @template T\n     */\n    WebGLPointsLayerRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, matches) {\n        assert(this.hitDetectionEnabled_, 66);\n        if (!this.hitRenderInstructions_) {\n            return undefined;\n        }\n        var pixel = applyTransform(frameState.coordinateToPixelTransform, coordinate.slice());\n        var data = this.hitRenderTarget_.readPixel(pixel[0] / 2, pixel[1] / 2);\n        var color = [data[0] / 255, data[1] / 255, data[2] / 255, data[3] / 255];\n        var index = colorDecodeId(color);\n        var opacity = this.hitRenderInstructions_[index];\n        var uid = Math.floor(opacity).toString();\n        var source = this.getLayer().getSource();\n        var feature = source.getFeatureByUid(uid);\n        if (feature) {\n            return callback(feature, this.getLayer(), null);\n        }\n        return undefined;\n    };\n    /**\n     * Render the hit detection data to the corresponding render target\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState current frame state\n     * @param {number} startWorld the world to render in the first iteration\n     * @param {number} endWorld the last world to render\n     * @param {number} worldWidth the width of the worlds being rendered\n     */\n    WebGLPointsLayerRenderer.prototype.renderHitDetection = function (frameState, startWorld, endWorld, worldWidth) {\n        // skip render entirely if vertex buffers not ready/generated yet\n        if (!this.hitVerticesBuffer_.getSize()) {\n            return;\n        }\n        var world = startWorld;\n        this.hitRenderTarget_.setSize([\n            Math.floor(frameState.size[0] / 2),\n            Math.floor(frameState.size[1] / 2),\n        ]);\n        this.helper.useProgram(this.hitProgram_);\n        this.helper.prepareDrawToRenderTarget(frameState, this.hitRenderTarget_, true);\n        this.helper.bindBuffer(this.hitVerticesBuffer_);\n        this.helper.bindBuffer(this.indicesBuffer_);\n        this.helper.enableAttributes(this.hitDetectionAttributes);\n        do {\n            this.helper.makeProjectionTransform(frameState, this.currentTransform_);\n            translateTransform(this.currentTransform_, world * worldWidth, 0);\n            multiplyTransform(this.currentTransform_, this.invertRenderTransform_);\n            this.helper.applyUniforms(frameState);\n            var renderCount = this.indicesBuffer_.getSize();\n            this.helper.drawElements(0, renderCount);\n        } while (++world < endWorld);\n    };\n    /**\n     * Clean up.\n     */\n    WebGLPointsLayerRenderer.prototype.disposeInternal = function () {\n        this.worker_.terminate();\n        this.layer_ = null;\n        this.sourceListenKeys_.forEach(function (key) {\n            unlistenByKey(key);\n        });\n        this.sourceListenKeys_ = null;\n        _super.prototype.disposeInternal.call(this);\n    };\n    return WebGLPointsLayerRenderer;\n}(WebGLLayerRenderer));\nexport default WebGLPointsLayerRenderer;\n//# sourceMappingURL=PointsLayer.js.map"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","this","constructor","create","CanvasImageLayerRenderer","_super","imageLayer","_this","image_","getImage","prepareFrame","frameState","layerState","layerStatesArray","layerIndex","pixelRatio","viewState","viewResolution","resolution","imageSource","getLayer","getSource","hints","viewHints","renderedExtent","extent","undefined","projection","sourceProjection","getProjection","image","loadImage","getState","getData","pixel","layer","coordinate","pixelToCoordinateTransform","slice","layerExtent","getExtent","imageExtent","img","imageMapWidth","col","Math","floor","width","imageMapHeight","row","height","getImageData","renderFrame","target","imageResolution","getResolution","imagePixelRatio","getPixelRatio","viewCenter","center","scale","rotation","round","pixelTransform","size","inversePixelTransform","canvasTransform","useContainer","getBackground","context","canvas","containerReused","clearRect","clipped","render","clipUnrotated","transform","tempTransform","renderedResolution","dw","dh","getInterpolate","preRender","dx","dy","opacity","previousAlpha","globalAlpha","drawImage","postRender","restore","style","container","canvasPool","pixelContext","createPixelContext","document","createElement","getContext","CanvasLayerRenderer","pixelContext_","data","err","background","opt_backgroundColor","layerClassName","getClassName","className","backgroundColor","firstElementChild","HTMLCanvasElement","position","appendChild","left","transformOrigin","topLeft","topRight","bottomRight","bottomLeft","coordinateToPixelTransform","inverted","save","beginPath","moveTo","lineTo","clip","dispatchRenderEvent_","type","hasListener","event_1","dispatchEvent","getRenderTransform","offsetX","dx1","dy1","sx","sy","dx2","dy2","getDataAtPixel","hitTolerance","renderPixel","renderCoordinate","x","y","pixelCanvas","name","Uint8Array","disposeInternal","CanvasTileLayerRenderer","tileLayer","extentChanged","renderedExtent_","renderedPixelRatio","renderedProjection","renderedRevision","renderedTiles","newTiles_","tmpExtent","tmpTileRange_","isDrawableTile","tile","tileState","useInterimTilesOnError","getUseInterimTilesOnError","getTile","z","tileSource","getPreload","setState","getInterimTile","source","getRenderSource","tileGrid","getTileGridForProjection","tilePixelRatio","getTilePixelRatio","getZForResolution","getMinZoom","tileCoord","getTileCoordForCoordAndZ","tileOrigin","getOrigin","tileSize","getTileSize","tileResolution","gutter","getGutterForProjection","loadedTileCallback","tiles","zoom","sourceRevision","getRevision","zDirection","canvasExtent","tileRange","getTileRangeForExtentAndZ","tilesToDrawByZ","findLoadedTiles","createLoadedTileFinder","tmpTileRange","viewport","minX","maxX","minY","maxY","tileCoordIntersectsViewport","uid","toString","inTransition","endTransition","indexOf","getAlpha","time","childTileRange","getTileCoordChildTileRange","covered","forEachTileCoordParentTileRange","canvasScale","length","clips","clipZs","currentClip","zs","keys","map","Number","sort","getOpaque","reverse","i","currentZ","currentTilePixelSize","getTilePixelSize","currentResolution","currentScale","dx_1","dy_1","originTileCoord","originTileExtent","getTileCoordExtent","origin_1","tileGutter","tilesToDraw","tileCoordKey","xIndex","nextX","yIndex","nextY","w","h","transition","contextSaved","i_1","ii","push","drawTileImage","unshift","updateUsedTiles","usedTiles","manageTilePyramid","scheduleExpireCache","getTileImage","alpha","alphaChanged","animate","canExpireCache","postRenderFunction","tileSourceKey","expireCache","bind","postRenderFunctions","getKey","preload","opt_tileCallback","wantedTiles","tileQueue","minZoom","tileCount","isKeyQueued","enqueue","getTileCoordCenter","useTile","updateCacheSize","CanvasVectorLayerRenderer","vectorLayer","boundHandleStyleImageChange_","handleStyleImageChange_","animatingOrInteracting_","hitDetectionImageData_","renderedFeatures_","renderedRevision_","renderedResolution_","NaN","wrappedRenderedExtent_","renderedRotation_","renderedCenter_","renderedProjection_","renderedRenderOrder_","replayGroup_","replayGroupChanged","declutterExecutorGroup","clipping","compositionContext_","opacity_","renderWorlds","executorGroup","opt_declutterTree","projectionExtent","vectorSource","snapToPixel","multiWorld","getWrapX","canWrapX","worldWidth","endWorld","ceil","world","execute","setupCompositionContext_","compositionContext","releaseCompositionContext_","renderDeclutter","declutterTree","replayGroup","isEmpty","getFeatures","Promise","resolve","transforms","startX","getStyleFunction","forEachFeatureAtCoordinate","callback","matches","result","features","featureCallback","feature","geometry","distanceSq","key","match","splice","lastIndexOf","executorGroups","some","all","item","value","handleFontsChanged","getVisible","changed","event","renderIfReadyAndVisible","animating","interacting","updateWhileAnimating","getUpdateWhileAnimating","updateWhileInteracting","getUpdateWhileInteracting","ready","frameStateExtent","vectorLayerRevision","vectorLayerRenderBuffer","getRenderBuffer","vectorLayerRenderOrder","getRenderOrder","loadExtents","max","loadExtent","declutterBuilderGroup","getDeclutter","userTransform","userProjection","extent_1","userExtent_1","loadFeatures","squaredTolerance","styles","styleFunction","dirty","renderFeature","userExtent","getFeaturesInExtent","replayGroupInstructions","finish","getOverlaps","builderGroup","opt_transform","opt_declutterBuilderGroup","loading","isArray","IMAGE_REPLAYS","VECTOR_REPLAYS","CanvasVectorTileLayerRenderer","renderedLayerRevision_","renderedPixelToCoordinateTransform_","tmpTransform_","prepareTile","state","updateExecutorGroup_","tileImageNeedsRender_","hifi","wantedResolution","Date","now","getRenderMode","renderTileImage_","hasContext","layerRevision","revision","renderOrder","builderState","getReplayState","renderedRenderOrder","declutter","sourceTileGrid","getTileGrid","tileExtent","wrappedTileCoord","sourceTiles","getSourceTiles","layerUid","hitDetectionImageData","declutterExecutorGroups","_loop_1","t","tt","sourceTile","sourceTileCoord","sourceTileExtent","sharedExtent","builderExtent","this_1","bufferedExtent","getGeometry","executorGroupInstructions","replayExtent","renderingReplayGroup","hitExtent","found","getId","_loop_2","declutteredFeatures","reject","getTileCoordForCoordAndResolution","loadingSourceTiles","corner","tilePixel","reduce","accumulator","concat","getOpacity","j","getTileRenderTransform","worldOffset","renderMode","replayTypes","filter","group","hasExecutors","getClipCoords","jj","replayState","renderedTileResolution","renderedTileRevision","renderPixelRatio","renderScale","setTransform","apply","pixelScale","IMAGE_SMOOTHING_DISABLED","imageSmoothingEnabled","msImageSmoothingEnabled","IMAGE_SMOOTHING_ENABLED","SIMPLIFY_TOLERANCE","GEOMETRY_RENDERERS","renderPointGeometry","renderLineStringGeometry","renderPolygonGeometry","renderMultiPointGeometry","renderMultiLineStringGeometry","renderMultiPolygonGeometry","renderGeometryCollectionGeometry","renderCircleGeometry","defaultOrder","feature1","feature2","parseInt","getSquaredTolerance","tolerance","getTolerance","fillStyle","getFill","strokeStyle","getStroke","circleReplay","getBuilder","getZIndex","setFillStrokeStyle","drawCircle","textStyle","getText","textReplay","setTextStyle","drawText","listener","imageStyle","imageState","getImageState","unlistenImageChange","load","listenImageChange","renderFeatureInternal","getGeometryFunction","simplifiedGeometry","simplifyTransformed","renderer","getRenderer","renderGeometry","geometryRenderer","getType","replay","drawCustom","getHitDetectionRenderer","geometries","getGeometries","getGeometriesArray","lineStringReplay","drawLineString","drawMultiLineString","polygonReplay","drawMultiPolygon","declutterImageWithText","imageBuilderGroup","declutterMode","getDeclutterMode","imageReplay_1","setImageStyle","drawPoint","imageReplay","textBuilderGroup","imageReplay_2","drawMultiPoint","drawPolygon","WebGLWorkerMessageType","GENERATE_BUFFERS","WebGLLayerRenderer","opt_options","options","inversePixelTransform_","postProcesses_","postProcesses","uniforms_","uniforms","helper","addChangeListener","removeHelper","dispatchPreComposeEvent","dispatchPostComposeEvent","event_2","reset","setUniforms","dispose","incrementGroup","groupNumber","canvasCacheKey","mapId","canvasCacheKeyMatches","getCanvas","afterHelperCreated","prepareFrameInternal","event_3","gl","getGL","attributes","getContextAttributes","preserveDrawingBuffer","colorEncodeId","id","opt_array","array","radix","divide","colorDecodeId","color","mult","WebGLPointsLayerRenderer","projectionMatrixTransform","sourceRevision_","verticesBuffer_","hitVerticesBuffer_","indicesBuffer_","vertexShader_","vertexShader","fragmentShader_","fragmentShader","program_","hitDetectionEnabled_","hitFragmentShader","hitVertexShader","hitVertexShader_","hitFragmentShader_","hitProgram_","customAttributes","attribute","hitDetectionAttributes","previousExtent_","currentTransform_","renderTransform_","invertRenderTransform_","renderInstructions_","Float32Array","hitRenderInstructions_","hitRenderTarget_","generateBuffersRun_","worker_","addEventListener","received","projectionTransform","hitDetection","fromArrayBuffer","vertexBuffer","flushBufferData","indexBuffer","renderInstructions","generateBuffersRun","featureCache_","featureCount_","sourceListenKeys_","handleSourceFeatureAdded_","handleSourceFeatureChanged_","handleSourceFeatureDelete_","handleSourceFeatureClear_","forEachFeature","properties","getProperties","getProgram","startWorld","renderCount","getSize","makeProjectionTransform","applyUniforms","drawElements","finalizeDraw","renderHitDetection","clearCachedData","viewNotMoving","sourceChanged","renderBuffer","rebuildBuffers_","useProgram","prepareDraw","bindBuffer","enableAttributes","featureCache","totalInstructionsCount","totalHitInstructionsCount","hitColor","tmpCoords","tmpColor","renderIndex","hitIndex","featureUid","getFlatCoordinates","message","buffer","customAttributesCount","postMessage","hitMessage","readPixel","index","getFeatureByUid","setSize","prepareDrawToRenderTarget","terminate","layer_","forEach"],"sourceRoot":""}